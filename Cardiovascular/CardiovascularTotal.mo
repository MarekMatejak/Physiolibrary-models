package ModelicaServices
  "(version = 3.2.1, target = \"Dymola\") Models and functions used in the Modelica Standard Library requiring a tool specific implementation"

package ExternalReferences

  function loadResource
  "Return the absolute path name of a URI or local file name (in this default implementation URIs are not supported, but only local file names)"
    input String uri;
    output String fileReference;
  external "builtin" fileReference =
                                   Dymola_ResolveURI(uri);
  annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
fileReference = <b>loadResource</b>(uri);
</pre></blockquote>
<h4>Description</h4>
<p>
The function call \"<b>loadResource</b>(uri)</code>\" returns the
<b>absolute path name</b> of the file that is either defined by an URI or by a local
(e.g. relative) path name. With the returned file name it is possible to
access the file with function calls of the C standard library.
If the data or file is stored in a data-base,
this might require copying the resource to a temporary folder and referencing that.
</p>

<p>
The implementation of this function is tool specific, and this implementation is for Dymola.
However, at least Modelica URIs
(see \"chapter 13.2.3 External Resources\" of the Modelica Specification),
as well as absolute and relative local file path names are supported.
</p>

<h4>Example</h4>
<blockquote><pre>
  file1 = loadResource(\"modelica://Modelica/Resources/Data/Utilities/Examples_readRealParameters.txt\")
          // file1 is the absolute path name of the file
  file2 = loadResource(\"C:\\data\\readParameters.txt\")
          file2 = \"C:/data/readParameters.txt\"
</pre></blockquote>
</html>"));
  end loadResource;
end ExternalReferences;

package Machine

  final constant Real eps=1.e-15 "Biggest number such that 1.0 + eps = 1.0";

  final constant Real small=1.e-60
  "Smallest number such that small and -small are representable on the machine";

  final constant Real inf=1.e+60
  "Biggest Real number such that inf and -inf are representable on the machine";
  annotation (Documentation(info="<html>
<p>
Package in which processor specific constants are defined that are needed
by numerical algorithms. Typically these constants are not directly used,
but indirectly via the alias definition in
<a href=\"modelica://Modelica.Constants\">Modelica.Constants</a>.
</p>
</html>"));
end Machine;
annotation (
  Protection(access=Access.hide),
  preferredView="info",
  version="3.2.1",
  versionDate="2013-01-17",
  versionBuild=1,
  uses(Modelica(version="3.2.1")),
  conversion(
    noneFromVersion="1.0",
    noneFromVersion="1.1",
    noneFromVersion="1.2"),
  Documentation(info="<html>
<p>
This package contains a set of functions and models to be used in the
Modelica Standard Library that requires a tool specific implementation.
These are:
</p>

<ul>
<li> <a href=\"modelica://ModelicaServices.Animation.Shape\">Shape</a>
     provides a 3-dim. visualization of elementary
     mechanical objects. It is used in
<a href=\"modelica://Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape\">Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape</a>
     via inheritance.</li>

<li> <a href=\"modelica://ModelicaServices.Animation.Surface\">Surface</a>
     provides a 3-dim. visualization of
     moveable parameterized surface. It is used in
<a href=\"modelica://Modelica.Mechanics.MultiBody.Visualizers.Advanced.Surface\">Modelica.Mechanics.MultiBody.Visualizers.Advanced.Surface</a>
     via inheritance.</li>

<li> <a href=\"modelica://ModelicaServices.ExternalReferences.loadResource\">loadResource</a>
     provides a function to return the absolute path name of an URI or a local file name. It is used in
<a href=\"modelica://Modelica.Utilities.Files.loadResource\">Modelica.Utilities.Files.loadResource</a>
     via inheritance.</li>

<li> <a href=\"modelica://ModelicaServices.Machine\">ModelicaServices.Machine</a>
     provides a package of machine constants. It is used in
<a href=\"modelica://Modelica.Constants\">Modelica.Constants</a>.</li>

<li> <a href=\"modelica://ModelicaServices.Types.SolverMethod\">Types.SolverMethod</a>
     provides a string defining the integration method to solve differential equations in
     a clocked discretized continuous-time partition (see Modelica 3.3 language specification).
     It is not yet used in the Modelica Standard Library, but in the Modelica_Synchronous library
     that provides convenience blocks for the clock operators of Modelica version &ge; 3.3.</li>
</ul>

<p>
This implementation is targeted for Dymola.
</p>

<p>
<b>Licensed by DLR and Dassault Syst&egrave;mes AB under the Modelica License 2</b><br>
Copyright &copy; 2009-2013, DLR and Dassault Syst&egrave;mes AB.
</p>

<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"> http://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>

</html>"));
end ModelicaServices;

package Physiolibrary "Modelica library for Physiology (version 2.3.1)"
 extends Modelica.Icons.Package;

  package UsersGuide "User's Guide"
    extends Modelica.Icons.Information;

  class Overview "Overview of Physiolibrary"
    extends Modelica.Icons.Information;

   annotation (Documentation(info="<html>
<p>ThePhysiolibrary consists of the following main sub-libraries: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td><p align=\"center\"><h4>Library Components</h4></p></td>
<td><p align=\"center\"><h4>Description</h4></p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Chemical.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Chemical\">Chemical</a></p><p>In physiology books, chapters about chemical substances are organized by their types. The main reason for this is that each substance in the human body is regulated in a different way. For example the regulation of sodium is different from the regulation of potassium, and from the regulation of glucose, and so on. This view leads to the idea of having separate models of each substance. The origin of different flows and regulations is the (cellular) membrane. Water and solutions can cross it in different directions at the same time. Crossings occur for different reasons: water is driven mostly by osmotic gradients, electrolytes are driven by charge to reach Donnan&apos;s equilibrium, and some solutes can even be actively transported against their concentration or electrical gradients. And all this is specifically driven from the higher levels by neural and hormonal responses.&nbsp; </p><p>In Physiolibrary flows and fluxes of solutes are supported mostly by the Chemical package. All parts inside this Chemical package use the connector ChemicalPort, which defines the molar concentration and molar flow/flux rate of one solute. This is the supporting infrastructure for modeling membrane diffusion, accumulations of substances, reversal chemical reactions, Henry&apos;s law of gas solubility, dilution with additional solvent flow, membrane reabsorption, chemical degradation and physiological clearance. </p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Hydraulic.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Hydraulic\">Hydraulic</a></p><p>The main usage of the hydraulic domain in human physiology is modeling of the cardio-vascular system. And because there are no extreme thermodynamic conditions, the system can be really simple &mdash;it is only necessary to model conditions for incompressible water, at normal liquid-water temperatures and with relative pressure 5-20kPa. This boring thermodynamic state leads to the very simple blocks of hydraulic resistance, hydrostatic pressure, volumetric flow, inertia and finally the block of blood accumulation in elastic vessels.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Thermal.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Thermal\">Thermal</a></p><p>For the human body to function optimally, it is critical to hold the core temperature at 35&ndash;39&deg;C. A fever of 41&deg;C for more than a short period of time causes brain damage. If the core temperature falls below 10&deg;C, the heart stops. As in the hydraulic domain, the thermal domain is simplified to these conditions. </p><p>In the Thermal package extends the package Modelica.Thermal.HeatTransfer from Modelica Standard Library 3.2 (MSL), where the connector is composed of temperature and heat flow. The main blocks in Thermal are: Conductor, IdealRadiator and HeatAccumulation. The heat conductor conducts the heat from the source, such us muscles or metabolically active tissue, to its surrounding. IdealRadiator delivers heat to tissues by blood circulation. HeatAccumulation plays a role in accumulating thermal energy in each tissue mass driven by its heat capacity. We recommend to use this block instead of Modelica.Thermal.HeatTransfer.HeatCapacitor to have possibility of variable mass amount or to have a support for calculation of steady state. </p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Osmotic.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Osmotic\">Osmotic</a></p><p>One of the basic phenomenon of biological systems is the osmotically-driven flow of water. This is always connected with semipermeable membranes. The different concentrations of impermeable solutes on both sides of the membrane causes the hydrostatic pressure at the concentrated side to rise. This pressure difference is called osmotic pressure. Osmotic pressure is linearly proportional to the concentration gradient of impermeable solutes. The osmolarity (osmotic concentration) is also one of the main indexes of human body balance, called homeostasis. Its value should not significantly deviate for a long period of time from a value of 285-295 mosm/l. </p><p>In Physiolibrary the osmotic connector OsmoticPort is composed of the osmotic concentration and the volumetric flux of permeable liquid. The two main blocks are called Membrane and OsmoticCell. Here, inside the membrane blocks, it is of course possible to also define hydraulic pressure and temperatures effects on both sides of membrane. </p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Population.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Population\">Population</a></p><p>Population models are based on increasing and decreasing of average number of population members. The number of population member is a nonflow variable in connectors and flow variable is the change of population members. The growth or differentiation of cells can be modeled as stream from one population component to another, where each population component could be defined by selected age, type, function or wathever..</p><p>Even the domain is integer, all is modeled by real numbers. </p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/SteadyState.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.SteadyStates\">SteadyStates</a></p><p>One of the main question in clinical medicine is how to stabilize the patient. In the fact of the oscillating heart, breathing, circadian rhythm or menstruation cycle the model could be designed as non-oscillating with variables such as period times, amplitudes, frequencies, mean values and other phase space variables. This type of model has better numerical stability for longer simulation time and even more it can be &QUOT;stabilized&QUOT;. This stabilization we called steady state. </p><p>To be mathematically exact, we define an <i><b>steady state system</b></i> (SSS) as a non-differential system derived from a original differential system (DS) by using zero derivations and by adding <b>additional steady state equations</b> (ASSE). The number of the ASSE must be the same as the number of algebraically dependent equations in the non-differential system derived from DS by setting zero derivations. The ASSE describes the system from the top view mostly such as the equations of mass conservation laws or the boundary equation of environment sources. To define a model as an SSS the user must switch each Simulation parameter in each block to value Types.SimulationType.SteadyState and must have correctly defined all necessary ASSE. This setting caused to ignoring any start values for any state and add zero derivation equations instead. Today does not exist Modelica environment, which could automatically find and remove generated dependent equations by this way. So the correct number of states must be marked as dependent (parameter isDependent) and the same number of ASSE must be inserted. Despite the fact, that model in this steady-state setting will be not locally balanced it should be globally balanced and without any dependent equation.</p><p>Adding of one ASSE is possible by inserting and connecting of the energy or mass conservation law block from package SteadyState.Components. Other possibilities is in blocks of environment&nbsp; sources, where the setting of parameter isIsolatedInSteadyState&nbsp; add the equation of the zero mass/volume/energy flow from or to environment. </p><p>The model in steady state often changes to one big nonlinear strong component, but without solver stiff or convergence problems. Especially in quick chemical reaction kinetics is not necessary to have very rapid molar fluxes, when it always reach equilibrium. This design also approve to create steady stated parts in dynamical model without huge rebuilding. It also&nbsp; brings other benefits. To see these possibilities, one have to realize that conservation laws could be invariances in a dynamical simulation. This is really useful for debugging. </p><p>It is always a big challenge to nicely solve initial values of differential system. However, it should be possible to solve the SSS in initial phase. And this is the idea behind the Types.SimulationTypes.InitSteadyState option for models already extended with ASSE to support SSS. </p></td>
</tr>
</table>
</html>"));
  end Overview;

  class Connectors "Connectors"
    extends Modelica.Icons.Information;

   annotation (Documentation(info="<html>
<p>The Physiolibrary defines the most important <b>elementary connectors</b> in various domains. If any possible, a user should utilize these connectors in order that components from the Physiolibrary and from other libraries can be combined without problems. The following elementary connectors are defined (the meaning of potential, flow, and stream variables is explained in section &QUOT;Connector Equations&QUOT; below): </p>
<table cellspacing=\"0\" cellpadding=\"1\" border=\"1\"><tr>
<td valign=\"top\"><h4>domain</h4></td>
<td valign=\"top\"><h4>potential</h4><p>variables</p></td>
<td valign=\"top\"><h4>flow</h4><p>variables</p></td>
<td valign=\"top\"><h4>stream</h4><p>variables</p></td>
<td valign=\"top\"><h4>connector definition</h4></td>
<td valign=\"top\"><h4>icons</h4></td>
</tr>
<tr>
<td valign=\"top\"><h4>chemical</h4></td>
<td valign=\"top\"><p>molar concentration</p></td>
<td valign=\"top\"><p>molar flow</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><a href=\"Chemical.Interfaces\">Chemical.Interfaces</a> </p><p>ChemicalPort, ChemicalPort_a, ChemicalPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ChemicalPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><h4>hydraulic</h4></td>
<td valign=\"top\"><p>pressure</p></td>
<td valign=\"top\"><p>volumetric flow</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><a href=\"Hydraulic.Interfaces\">Hydraulic.Interfaces</a> </p><p>HydraulicPort, HydraulicPort_a, HydraulicPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><h4>osmotic</h4></td>
<td valign=\"top\"><p>osmolarity</p></td>
<td valign=\"top\"><p>permeable liquid volumetric flow </p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><a href=\"Osmotic.Interfaces\">Osmotic.Interfaces</a> </p><p>OsmoticPort, OsmoticPort_a, OsmoticPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/OsmoticPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><h4>thermal</h4></td>
<td valign=\"top\"><p>temperature</p></td>
<td valign=\"top\"><p>heat flow rate</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><a href=\"modelica://Modelica.Thermal.HeatTransfer.Interfaces\">Modelica.Thermal.HeatTransfer.Interfaces</a> </p><p>HeatPort, HeatPort_a, HeatPort_b</p><p><a href=\"Thermal.Interfaces\">Thermal.Interfaces</a> </p><p>HeatPort, HeatPort_a, HeatPort_b</p></td>
<td valign=\"top\"><p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ThermalPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><h4>population</h4></td>
<td valign=\"top\"><p>the number</p><p>of population members</p></td>
<td valign=\"top\"><p>change </p><p>of the number of population members</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><a href=\"Population.Interfaces\">Population.Interfaces</a> </p><p>PopulationPort, PopulationPort_a, PopulationPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/PopulationPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><h4>block</h4><p>diagram</p></td>
<td valign=\"top\"><p>Real unit-typed variables</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><br><br><br><a href=\"Types.RealIO\">Types.RealIO</a> </p><p>EnergyInput, EnergyOutput, TimeInput, TimeOutput, MassInput, MassOutput, MassFlowRateInput, MassFlowRateOutput, HeightInput, HeightOutput, AccelerationInput, AccelerationOutput, PressureInput, PressureOutput, VolumeInput, VolumeOutput, VolumeFlowRateInput, VolumeFlowRateOutput, ConcentrationInput, ConcentrationOutput, OsmolarityInput, OsmolarityOutput, AmountOfSubstanceInput, AmountOfSubstanceOutput, MolarFlowRateInput, MolarFlowRateOutput, DiffusionPermeabilityInput, DiffusionPermeabilityOutput, HeatInput, HeatOutput, TemperatureInput, TemperatureOutput, HeatFlowRateInput, HeatFlowRateOutput, ThermalConductanceInput, ThermalConductanceOutput, ElectricCurrentInput, ElectricCurrentOutput, ElectricChargeInput, ElectricChargeOutput, ElectricPotentialInput, ElectricPotentialOutput, FractionInput, FractionOutput, FrequencyInput, FrequencyOutput, OsmoticPermeabilityInput, OsmoticPermeabilityOutput, HydraulicConductanceInput, HydraulicConductanceOutput, HydraulicComplianceInput, HydraulicComplianceOutput, HydraulicInertanceInput, HydraulicInertanceOutput, GasSolubilityInput, GasSolubilityOutput, DensityInput, SpecificEnergyInput, SpecificEnergyOutput, SpecificHeatCapacityInput, SpecificHeatCapacityOutput</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Signals.png\"/></p></td>
</tr>
</table>
<p><br><br><br><br><br>In all domains, usually 2 connectors are defined. The variable declarations are <b>identical</b>, only the icons are different in order that it is easy to distinguish connectors of the same domain that are attached at the same component. </p>
</html>"));
  end Connectors;

  package ReleaseNotes "Release notes"
    extends Modelica.Icons.ReleaseNotes;

  class Version_2_3_1 "Version 2.3.1 (Sep. 15, 2015)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<ul>
<li>Change of license to <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD</a>: </li>
<li><ul>
<li><font style=\"color: #333333; \">no additional restricions</font></li>
<li><font style=\"color: #333333; \">supported decentralized development</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">External pressure of elastic vessel compartment.</font></li>
</ul></li>
<li>New example of pulsative blood circulation by Willem van Meurs 2011</li>
<li>Support of [Physiomodel 1.0.0] (https://github.com/physiology/Physiomodel/releases/tag/v1.0.0)</li>
</ul>
</html>"));
  end Version_2_3_1;

  class Version_2_3_0 "Version 2.3.0 (Feb. 16, 2015)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">Population domain for population models of organisms, cells,..</font></li>
<li><font style=\"color: #333333; \">cardiovascular models as example of Hydraulic domain</font></li>
<li><font style=\"color: #333333; \">components: osmotic reabsorption, ideal osmotic flow filtration</font></li>
<li><font style=\"color: #333333; \">display units: umol/min,nmol/min,pmol/min,l/day</font></li>
<li><font style=\"color: #333333; \">icons: heart ventricle icon, microcirculation, population</font></li>
<li><font style=\"color: #333333; \">blocks: 1(one) as constant, energy per mass, DegradationGain, FractionGain</font></li>
<li><font style=\"color: #333333; \">installation to System Modeler script (Resources/Install)</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">OsmoticCell with more possible membrane type interfaces</font></li>
<li><font style=\"color: #333333; \">factors: dissabling option and with decadic logarith</font></li>
<li><font style=\"color: #333333; \">redefinition of unmeasurables physical quantities</font></li>
<li><font style=\"color: #333333; \">manipulation with initial input and final output values of variables</font></li>
<li><font style=\"color: #333333; \">units of heart starling slopes in CardiovascularSystem_GCG</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">units Torr with capital 'T' (from name - Evangelista Torricelli)</font></li>
<li><font style=\"color: #333333; \">Blocks.Math.Exponentiation to Blocks.Math.Power</font></li>
</ul></li>
</ul>
</html>"));
  end Version_2_3_0;

  class Version_2_2_0 "Version 2.2.0 (Sep. 06, 2014)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">read/write of values in non-SI units</font></li>
<li><font style=\"color: #333333; \">outflow/inflow sources</font></li>
<li><font style=\"color: #333333; \">chemical internal heats</font></li>
<li><font style=\"color: #333333; \">passive fluxes through membranes</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">collapsing ElasticVessel at negative sucking pressures</font></li>
<li><font style=\"color: #333333; \">concentrations are always per volume of whole solution</font></li>
<li><font style=\"color: #333333; \">determining of Dymola installation folder</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">actualFlow, actualConc, .. in sensors</font></li>
<li><font style=\"color: #333333; \">FlowConcentrationMeasure to IncrementalFlowConcentrationMeasure</font></li>
<li><font style=\"color: #333333; \">thermal OutStream to MassOutflow</font></li>
</ul></li>
</ul>
</html>"));
  end Version_2_2_0;

  class Version_2_1_1 "Version 2.1.1 (May. 02, 2014)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">compoment HydraulicComponents.IdealValve for modeling aortic, pulmonary, triscupid and mitral valve</font></li>
<li><font style=\"color: #333333; \">types pH, VolumeDensityOfCharge</font></li>
<li><font style=\"color: #333333; \">examples: Osmotic.Examples.CelebrospinalFluid, Hydraulic.Examples.Windkessel and Hydraulic.Example.MinimalCirculation</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li>role of hydraulic pressure in Osmotic.Components.Membrane</li>
</ul></li>
</ul>
</html>"));
  end Version_2_1_1;

  class Version_2_1 "Version 2.1 (Feb. 28, 2014)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<ul>
<li><font style=\"color: #333333; \">Upgrade to MSL 3.2.1 (still compatible with MSL 3.2)</font></li>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">constants HydraulicResistanceConst, HydraulicElastanceConst and HydraulicElastanceToComplianceConst and type HydraulicElastance</font></li>
<li><font style=\"color: #333333; \">display units for hydraulic resistance/conductance/compliance/elastance, for gas solubility</font></li>
<li><font style=\"color: #333333; \">steady state component ElectricChargeConservationLaw</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">HydraulicResistanceConst to HydraulicResistanceToConductanceConst</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">gas solution in liquid with corrected GasSolubility type</font></li>
<li><font style=\"color: #333333; \">bidirectional stream flows</font></li>
<li><font style=\"color: #333333; \">steady state example of dissolved oxygen</font></li>
<li><font style=\"color: #333333; \">installation batch file for Dymola in Windows</font></li>
<li><font style=\"color: #333333; \">references in overview (user&apos;s guide)</font></li>
</ul></li>
</ul>
</html>"));
  end Version_2_1;

  class Version_2_0 "Version 2.0 (Jan. 26, 2014)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<p><ul>
<li><font style=\"color: #333333; \">Renamed classes</font></li>
<li>Conditional inputs to blocks</li>
<li>Removed Mixed package</li>
<li>Rebuilt steady states</li>
<li><font style=\"color: #333333; \">New icons and examples</font></li>
</ul></p>
</html>"));
  end Version_2_0;

  class Version_1_2 "Version 1.2 (Jan 15, 2014)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<p><ul>
<li><font style=\"color: #333333; \">Package structure Physiolibrary.{domain}.[Examples|Components|Sources|Interfaces].{component}</font></li>
<li><font style=\"color: #333333; \">New icons</font></li>
<li><font style=\"color: #333333; \">Thermal: Relative heat energy to normal body temperature (37degC)</font></li>
<li><font style=\"color: #333333; \">New examples: Guyton-Coleman-Granger cardiovascular model, Coleman thermal energy transfers</font></li>
</ul></p>
</html>"));
  end Version_1_2;

  class Version_1_1 "Version 1.1 (Dec. 30, 2013)"
    extends Modelica.Icons.ReleaseNotes;

     annotation (Documentation(info="<html>
<p><ul>
<li><font style=\"color: #333333; \">Heat connector compatibility between Thermal package and Modelica.Thermal.HeatTransfer package (MSL 3.2)</font></li>
<li><font style=\"color: #333333; \">Some English language corrections</font></li>
<li><font style=\"color: #333333; \">Hydrostatic pressure patch</font></li>
<li><font style=\"color: #333333; \">New examples</font></li>
</ul></p>
</html>"));
  end Version_1_1;

  class Version_1_0 "Version 1.0.0 (Dec. 09, 2013)"
    extends Modelica.Icons.ReleaseNotes;

  annotation (Documentation(info="<html>
<p><ul>
<li>migration to GITHub https://github.com/MarekMatejak/Physiolibrary from http://patf-biokyb.lf1.cuni.cz/repos/Modelica/Physiolibrary svn repository, commit 4947 </li>
<li><font style=\"color: #333333; \">The library uses the Modelica Standard Library (MSL) version 3.2.</font></li>
<li><font style=\"color: #333333; \">Contains nice physiological icons.</font></li>
<li><font style=\"color: #333333; \">Support for physiological units: min,kcal,mmHg,ml,mEq,..</font></li>
<li><font style=\"color: #333333; \">Base blocks for chemical, hydraulical, osmotic, thermal or mixed domains</font></li>
<li><font style=\"color: #333333; \">Support of equilibrated systems</font></li>
<li><font style=\"color: #333333; \">Support for expandable inputs/outputs/tests lists</font></li>
</ul></p>
</html>"));
  end Version_1_0;
   annotation (Documentation(info="<html>
<p>This section summarizes the changes that have been performed on the Physiolibrary. </p>
</html>"));
  end ReleaseNotes;

  class Contact "Contact"
    extends Modelica.Icons.Contact;

   annotation (Documentation(info="<html>
<p>Marek Matejak</p>
<p>email: marek@matfy.cz</p>
<p>skype: marek.matejak</p>
<p>tel: +420 776 301 395</p>
<p><br>Graphics of icons:</p>
<p>Martin Broz,</p>
<p>Veronika Sykorova</p>
<p>email: elvenfall@gmail.com</p>
</html>"));

  end Contact;

    class License "BSD 3-Clause License"
       extends Modelica.Icons.Information;
      annotation (Documentation(info="<html>
<p>All files in this directory (Physiolibrary) and in all subdirectories, especially all files that build package &QUOT;Physiolibrary&QUOT; are licensed by <u><b>Marek Matejak</b></u> under the <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD 3-Clause License</a> (with exception of files &QUOT;Resources/*&QUOT;). </p>
<h4>Licensor:</h4>
<p>Marek Matej&aacute;k,</p>
<p>Hviezdoslavova 632/41,</p>
<p>916 01 Star&aacute; Tur&aacute;, </p>
<p>Slovak Republic,</p>
<p>email: marek@matfyz.cz</p>
<h4><span style=\"color:#008000\">Organization: </span></h4>
<p>Institute of Pathological Physiology, First Faculty of Medicine, Charles University in Prague,</p>
<p>U Nemocnice 5, 128 53 Prague 2, Czech Republic</p>
<p><br><h4>Copyright notices of the files:</h4></p>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague</p>
<p><br>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<p>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </p>
<p>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </p>
<p>3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>"));
    end License;

  class NewRealease "Publishing new release"
    extends Modelica.Icons.Information;

   annotation (Documentation(info="<html>
<p><br>New release must be numbered by Semantic Versioning 2.0, see <a href=\"http://semver.org/\">semver.org</a>. </p>
<p><br>If minor version, then the conversion script must be written and connected with package Physiolibrary using &QUOT;annotation(conversion(from(version=..)))&QUOT;! </p>
<p><br>To clean the code from dummy annotations try to use script <a href=\"https://github.com/dietmarw/trimtrailingwhitespaces\">ttws</a>. </p>
<p><br>Update version number to &QUOT;X.Y.Z&QUOT;: </p>
<ul>
<li>At package Physiolibrary annotation: (version=&QUOT;X.Y.Z&QUOT;) together with &QUOT;versionBuild&QUOT;, &QUOT;versionDate&QUOT; and &QUOT;dateModified&QUOT; attribute </li>
<li>At head of package Physiolibrary &QUOT;Physiological domains library (version X.Y.Z)&QUOT; </li>
<li>At file &QUOT;./Physiolibrary/libraryinfo.mos&QUOT; </li>
</ul>
<p><br>Update release notes: </p>
<ul>
<li>At UsersGuide.ReleaseNotes</li>
<li>At file &QUOT;./README.md&QUOT;, together with update of &QUOT;Current release&QUOT; section.</li>
</ul>
<p><br>Publish release in GitHub: </p>
<ul>
<li>Prepare release in &QUOT;master&QUOT; branch</li>
<li>Install, Check, Test, Test, Test (stop-time of examples).. </li>
<li>Draft a new <a href=\"
https://github.com/xogeny/impact/blob/master/resources/docs/modelica2015/paper/impact.md#impact-on-library-developers\">release from &QUOT;master&QUOT;</a> branch with number &QUOT;vX.Y.Z&QUOT; and with release notes. </li>
</ul>
</html>"));
  end NewRealease;

  annotation (DocumentationClass=true, Documentation(info="<html>
<p>Package <b>Physiolibrary</b> is a modelica package for <b>Human Physiology</b> that is developed from <b>HumMod</b> modelica implementation, see <a href=\"http://patf-biokyb.lf1.cuni.cz/wiki/hummod/hummod\">http://hummod.org</a>. It provides constants, types, connectors, partial models and model components fitted for physiological models of human body. </p>
<p>This is a short <b>User&apos;s Guide</b> for the overall library. Some of the main sublibraries have their own User&apos;s Guides that can be accessed by the following links: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Chemical\">Chemical</a></p></td>
<td valign=\"top\"><p>Library of chemical domain.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Hydraulic\">Hydraulic</a></p></td>
<td valign=\"top\"><p>Library of hydraulic domain. For modeling of cardiovascular system.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Thermal\">Thermal</a></p></td>
<td valign=\"top\"><p>Library of termoregulation support. As extension of Modelica.Thermal.HeatTransfer.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Osmotic\">Osmotic</a></p></td>
<td valign=\"top\"><p>Library to model water fluxes through semipermeable membrane caused by osmotic pressure.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Population\">Population</a></p></td>
<td valign=\"top\"><p>Library for population models such as predator-prey or cells population.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Icons\">Icons</a></p></td>
<td valign=\"top\"><p>Icons</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Types\">Types</a></p></td>
<td valign=\"top\"><p>Physiological types. Physiological unit vs. SI units, nominals, inputs/outputs, typed constants.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Blocks\">Blocks</a></p></td>
<td valign=\"top\"><p>Useful blocks, that are missing in package Modelica.Blocks (MSL 3.2), cubic interpolation curves, multiplication factors.</p></td>
</tr>
</table>
</html>"));
  end UsersGuide;

  package Hydraulic "Domain with Pressure and Volumetric Flow"
   extends Modelica.Icons.Package;
    package Examples
      "Examples that demonstrate usage of the Pressure flow components"
    extends Modelica.Icons.ExamplesPackage;

      model MinimalCirculation
        "Minimal circulation models driven by cardiac output"
         extends Modelica.Icons.Example;
        Components.Pump heart(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-6,-50},{14,-30}})));
        Components.ElasticVessel
                       arteries(
          volume_start(displayUnit="l") = 0.001,
          ZeroPressureVolume(displayUnit="l") = 0.00085,
          Compliance(displayUnit="ml/mmHg") = 1.1625954425608e-08)
          annotation (Placement(transformation(extent={{36,-84},{56,-64}})));
        Components.Conductor resistance(Conductance(displayUnit="l/(mmHg.min)") = 6.2755151845753e-09)
          annotation (Placement(transformation(extent={{-4,-84},{16,-64}})));
        Components.ElasticVessel
                       veins(
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-07,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          volume_start(displayUnit="l") = 0.0032)
          annotation (Placement(transformation(extent={{-42,-84},{-22,-64}})));
        Modelica.Blocks.Sources.Pulse pulse(
          width=25,
          amplitude=3.3e-4,
          period=60/75)
          annotation (Placement(transformation(extent={{-94,74},{-74,94}})));
      equation
        connect(heart.q_out, arteries.q_in) annotation (Line(
            points={{14,-40},{46,-40},{46,-74}},
            thickness=1));
        connect(arteries.q_in, resistance.q_out) annotation (Line(
            points={{46,-74},{16,-74}},
            thickness=1));
        connect(resistance.q_in, veins.q_in) annotation (Line(
            points={{-4,-74},{-32,-74}},
            thickness=1));
        connect(veins.q_in, heart.q_in) annotation (Line(
            points={{-32,-74},{-32,-40},{-6,-40}},
            thickness=1));
        connect(pulse.y, heart.solutionFlow) annotation (Line(
            points={{-73,84},{-62,84},{-62,-26},{4,-26},{4,-33}},
            color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={                          Text(
                extent={{-40,-12},{80,-22}},
                lineColor={175,175,175},
                textString="Minimal circulation driven by cardiac output")}),
            Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=5));
      end MinimalCirculation;

      model Windkessel_2element "Two-element Windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput=
              true)
          annotation (Placement(transformation(extent={{-50,38},{-30,58}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel arteries(
          ZeroPressureVolume(displayUnit="l") = 0.00085,
          Compliance(displayUnit="ml/mmHg") = 1.0500862061839e-08,
          volume_start(displayUnit="l") = 0.00097)
          annotation (Placement(transformation(extent={{-14,38},{6,58}})));
        Physiolibrary.Hydraulic.Components.Conductor resistance(
            useConductanceInput=false, Conductance(displayUnit="ml/(mmHg.s)")=
            8.1006650191331e-09) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={18,34})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={-40,20})));
        Utilities.Pulses pulses(QP(displayUnit="m3/s")=
               0.000424, HR=1.2)
          annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
      equation
        connect(heart.q_out, arteries.q_in) annotation (Line(
            points={{-30,48},{-4,48}},
            thickness=1));
        connect(resistance.q_out, veins.y) annotation (Line(
            points={{18,24},{18,20},{-30,20}},
            thickness=1));
        connect(pulses.volumeflowrate, heart.solutionFlow) annotation (Line(
            points={{-45,68},{-40,68},{-40,55}},
            color={0,0,127}));
        connect(resistance.q_in, arteries.q_in) annotation (Line(
            points={{18,44},{18,48},{-4,48}},
            thickness=1));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                    extent={{-74,90},{46,80}},
                    lineColor={175,175,175},
                    textString="2-element Windkessel model")}),
          Documentation(revisions="<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",   info="<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),experiment(StopTime=5));
      end Windkessel_2element;

      model Windkessel_3element "Three-element windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput=
              true)
          annotation (Placement(transformation(extent={{-50,38},{-30,58}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel arteries(
          ZeroPressureVolume(displayUnit="l") = 0.00085,
          Compliance(displayUnit="ml/mmHg") = 1.0500862061839e-08,
          volume_start(displayUnit="l") = 0.00097)
          annotation (Placement(transformation(extent={{16,38},{36,58}})));
        Physiolibrary.Hydraulic.Components.Conductor resistance(
            useConductanceInput=false, Conductance(displayUnit="ml/(mmHg.s)") = 8.1006650191331e-09)
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={50,34})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={-40,20})));
        Utilities.Pulses pulses(
          QP(displayUnit="m3/s") = 0.000424,
          TD1(displayUnit="s"),
          HR(displayUnit="1/min") = 1.2)
          annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
        Physiolibrary.Hydraulic.Components.Conductor impedance(
            useConductanceInput=false, Conductance(displayUnit="ml/(mmHg.s)")=
            1.5001231516913e-06) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={-6,50})));
      equation
        connect(resistance.q_out, veins.y) annotation (Line(
            points={{50,24},{50,20},{-30,20}},
            thickness=1));
        connect(pulses.volumeflowrate, heart.solutionFlow) annotation (Line(
            points={{-45,68},{-40,68},{-40,55}},
            color={0,0,127}));
        connect(heart.q_out, impedance.q_in) annotation (Line(
            points={{-30,48},{-24,48},{-24,50},{-16,50}},
            thickness=1));
        connect(impedance.q_out, arteries.q_in) annotation (Line(
            points={{4,50},{16,50},{16,48},{26,48}},
            thickness=1));
        connect(resistance.q_in, arteries.q_in) annotation (Line(
            points={{50,44},{50,48},{26,48}},
            thickness=1));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                    extent={{-74,90},{46,80}},
                    lineColor={175,175,175},
                    textString="3-element Windkessel model")}),
          Documentation(revisions="<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
<p> </p>
</html>",   info="<html>
<p>Three-element windkessel model, updated two-element windkessel model with an impedance element. Impedance can be approximated by resistance.</p>
<ul>
<li>Westerhof N, Elzinga G (1991) Normalized input impedance and arterial decay time over heart period are independent of animal size. Am J Physiol 261:R126&ndash;R133</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
</ul>
</html>"),experiment(StopTime=5));
      end Windkessel_3element;

      model Windkessel_4element "Four-element windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput=
              true)
          annotation (Placement(transformation(extent={{-50,38},{-30,58}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel arteries(
          ZeroPressureVolume(displayUnit="l") = 0.00085,
          Compliance(displayUnit="ml/mmHg") = 1.0500862061839e-08,
          volume_start(displayUnit="l") = 0.00097)
          annotation (Placement(transformation(extent={{16,38},{36,58}})));
        Physiolibrary.Hydraulic.Components.Conductor resistance(
            useConductanceInput=false, Conductance(displayUnit="ml/(mmHg.s)") = 8.1006650191331e-09)
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={48,34})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={-40,20})));
        Utilities.Pulses pulses(QP(displayUnit="m3/s")=
               0.000424, HR=1.2)
          annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
        Physiolibrary.Hydraulic.Components.Conductor impedance(
            useConductanceInput=false, Conductance(displayUnit="ml/(mmHg.s)")=
            1.5001231516913e-06) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={-6,48})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit=
                "mmHg.s2/ml") = 666611.937075, volumeFlow_start(displayUnit=
                "l/min") = 8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-16,56},{4,76}})));
      equation
        connect(resistance.q_out, veins.y) annotation (Line(
            points={{48,24},{48,20},{-30,20}},
            thickness=1));
        connect(pulses.volumeflowrate, heart.solutionFlow) annotation (Line(
            points={{-45,68},{-40,68},{-40,55}},
            color={0,0,127}));
        connect(heart.q_out, impedance.q_in) annotation (Line(
            points={{-30,48},{-16,48}},
            thickness=1));
        connect(impedance.q_out, arteries.q_in) annotation (Line(
            points={{4,48},{26,48}},
            thickness=1));
        connect(heart.q_out, inertia.q_in) annotation (Line(
            points={{-30,48},{-26,48},{-26,66},{-16,66}},
            thickness=1));
        connect(inertia.q_out, arteries.q_in) annotation (Line(
            points={{4,66},{12,66},{12,48},{26,48}},
            thickness=1));
        connect(resistance.q_in, arteries.q_in) annotation (Line(
            points={{48,44},{48,48},{26,48}},
            thickness=1));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                    extent={{-74,90},{46,80}},
                    lineColor={175,175,175},
                    textString="4-element Windkessel model")}),
          Documentation(revisions="<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>",   info="<html>
<p>Four-element windkessel model, updated three-element windkessel model with an inertia element. </p>
<ul>
<li>Stergiopulos N, Westerhof BE, Westerhof N (1999) Total arterial inertance as the fourth element of the windkessel model. Am J Physiol 276:H81&ndash;H88</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
</ul>
</html>"),experiment(StopTime=5));
      end Windkessel_4element;

      model CardiovascularSystem_GCG
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
         extends Modelica.Icons.Example;
         import Physiolibrary.Hydraulic;
        Components.ElasticVessel pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          ZeroPressureVolume(displayUnit="l") = 0.0004,
          Compliance(displayUnit="l/mmHg") = 7.5006157584566e-08)
          annotation (Placement(transformation(extent={{4,74},{24,94}})));
        Components.ElasticVessel
                       pulmonaryArteries(
          ZeroPressureVolume(displayUnit="l") = 0.00030625,
          Compliance(displayUnit="l/mmHg") = 3.6002955640592e-08,
          volume_start(displayUnit="l") = 0.00038)
          annotation (Placement(transformation(extent={{-62,74},{-42,94}})));
        Hydraulic.Components.Conductor
                 pulmonary(Conductance(displayUnit="l/(mmHg.min)") = 4.1665920538226e-08)
          annotation (Placement(transformation(extent={{-30,74},{-10,94}})));
        Components.ElasticVessel
                       arteries(
          volume_start(displayUnit="l") = 0.00085,
          ZeroPressureVolume(displayUnit="l") = 0.000495,
          Compliance(displayUnit="l/mmHg") = 2.6627185942521e-08)
          annotation (Placement(transformation(extent={{14,-46},{34,-26}})));
        Components.ElasticVessel
                       veins(
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-07,
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295)
          annotation (Placement(transformation(extent={{-64,-46},{-44,-26}})));
        Hydraulic.Components.Conductor
                 nonMuscle(Conductance(displayUnit="l/(mmHg.min)") = 3.5627924852669e-09)
          annotation (Placement(transformation(extent={{-24,-46},{-4,-26}})));
        Sensors.PressureMeasure
                        pressureMeasure
          annotation (Placement(transformation(extent={{-78,26},{-58,46}})));
        Components.Pump
             rightHeart(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-56,8},{-36,28}})));
        Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min") = 8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-60,40},{-52,48}})));
        Sensors.PressureMeasure
                        pressureMeasure1
          annotation (Placement(transformation(extent={{-8,26},{12,46}})));
        Components.Pump
             leftHeart(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{16,6},{36,26}})));
        Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min") = 8.3333333333333e-05)
          annotation (Placement(transformation(extent={{12,42},{20,50}})));
        Hydraulic.Components.Conductor
                 kidney(Conductance(displayUnit="l/(mmHg.min)") = 1.4126159678427e-09)
          annotation (Placement(transformation(extent={{-24,-64},{-4,-44}})));
        Hydraulic.Components.Conductor
                 muscle(Conductance(displayUnit="l/(mmHg.min)") = 1.3001067314658e-09)
          annotation (Placement(transformation(extent={{-24,-28},{-4,-8}})));
        Hydraulic.Components.Conductor
                 largeVeins(Conductance(displayUnit="l/(mmHg.min)") = 1.6888886482791e-07)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-84,-8})));
        Components.ElasticVessel
                       rightAtrium(
          volume_start(displayUnit="l") = 0.0001,
          ZeroPressureVolume(displayUnit="l") = 0.0001,
          Compliance(displayUnit="l/mmHg") = 3.7503078792283e-08)
          annotation (Placement(transformation(extent={{-82,8},{-62,28}})));
        Blocks.Factors.Spline       rightStarling(data={{-6,0,0},{-3,0.15,0.104},{-1,0.52,
              0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
          "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
          annotation (Placement(transformation(extent={{-56,22},{-36,42}})));
        Blocks.Factors.Spline       leftStarling(data={{-4,0,0},{-1,
              0.72,0.29},{0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=
              101325/760)
          "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
          annotation (Placement(transformation(extent={{16,22},{36,42}})));
      equation
        connect(pulmonaryArteries.q_in,pulmonary. q_in) annotation (Line(
            points={{-52,84},{-30,84}},
            thickness=1));
        connect(pulmonary.q_out, pulmonaryVeinsAndLeftAtrium.q_in) annotation (
            Line(
            points={{-10,84},{14,84}},
            thickness=1));
        connect(veins.q_in, nonMuscle.q_in)  annotation (Line(
            points={{-54,-36},{-24,-36}},
            thickness=1));
        connect(nonMuscle.q_out, arteries.q_in)  annotation (Line(
            points={{-4,-36},{24,-36}},
            thickness=1));
        connect(rightHeart.q_out,pulmonaryArteries. q_in) annotation (Line(
            points={{-36,18},{-28,18},{-28,60},{-70,60},{-70,84},{-52,84}},
            thickness=1));
        connect(leftHeart.q_in, pulmonaryVeinsAndLeftAtrium.q_in) annotation (
            Line(
            points={{16,16},{-4,16},{-4,60},{32,60},{32,84},{14,84}},
            thickness=1));
        connect(leftHeart.q_out,arteries. q_in) annotation (Line(
            points={{36,16},{44,16},{44,-36},{24,-36}},
            thickness=1));
        connect(pressureMeasure.q_in,rightHeart. q_in) annotation (Line(
            points={{-72,30},{-72,18},{-56,18}},
            thickness=1));
        connect(pressureMeasure1.q_in, pulmonaryVeinsAndLeftAtrium.q_in)
          annotation (Line(
            points={{-2,30},{-4,30},{-4,60},{32,60},{32,84},{14,84}},
            thickness=1));
        connect(muscle.q_out, arteries.q_in) annotation (Line(
            points={{-4,-18},{10,-18},{10,-36},{24,-36}},
            thickness=1));
        connect(kidney.q_out, arteries.q_in) annotation (Line(
            points={{-4,-54},{10,-54},{10,-36},{24,-36}},
            thickness=1));
        connect(kidney.q_in, nonMuscle.q_in) annotation (Line(
            points={{-24,-54},{-34,-54},{-34,-36},{-24,-36}},
            thickness=1));
        connect(muscle.q_in, nonMuscle.q_in) annotation (Line(
            points={{-24,-18},{-34,-18},{-34,-36},{-24,-36}},
            thickness=1));
        connect(veins.q_in, largeVeins.q_out) annotation (Line(
            points={{-54,-36},{-84,-36},{-84,-18}},
            thickness=1));
        connect(largeVeins.q_in, rightAtrium.q_in) annotation (Line(
            points={{-84,2},{-84,18},{-72,18}},
            thickness=1));
        connect(rightAtrium.q_in, rightHeart.q_in) annotation (Line(
            points={{-72,18},{-56,18}},
            thickness=1));
        connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
            points={{-51,44},{-46,44},{-46,34}},
            color={0,0,127}));
        connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
            points={{21,46},{26,46},{26,34}},
            color={0,0,127}));
        connect(pressureMeasure.q_in, rightAtrium.q_in) annotation (Line(
            points={{-72,30},{-72,18}},
            thickness=1));
        connect(rightHeart.solutionFlow, rightStarling.y) annotation (Line(
            points={{-46,25},{-46,28},{-46,28}},
            color={0,0,127}));
        connect(leftStarling.y, leftHeart.solutionFlow) annotation (Line(
            points={{26,28},{26,23}},
            color={0,0,127}));
        connect(pressureMeasure.pressure, rightStarling.u) annotation (Line(
            points={{-62,32},{-54,32}},
            color={0,0,127}));
        connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{8,32},{18,32}},
            color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={Text(
                extent={{-82,-80},{80,-100}},
                lineColor={175,175,175},
                textString=
                    "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                                Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &QUOT;Circulation: overall regulation.&QUOT; Annual review of physiology 34(1): 13-44.</p>
</html>",   revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=300));
      end CardiovascularSystem_GCG;

      package Utilities "Utility components used by package Examples"
      extends Modelica.Icons.UtilitiesPackage;

        model Pulses "example pulse flow generator"
          import Physiolibrary.Types.*;
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeflowrate
            annotation (Placement(transformation(extent={{80,-10},{100,10}}),
                iconTransformation(extent={{80,-10},{100,10}})));
          discrete Time T0 "beginning of cardiac cycle";
          Boolean b(start=false);
          discrete Time HP "duration of cardiac cycle";
          parameter Frequency HR=1.2;
          Time tc "relative time in carciac cycle";
          parameter Time TD1=0.07 "relative time of start of systole";
          discrete Time TD2 "relative time of end of systole";
          parameter VolumeFlowRate QP=0.000424 "peak volume flowrate";
        equation
          b = time - pre(T0) >= pre(HP) "true if new cardiac cycle begins";
          when {initial(),b} then
            T0 = time "set beginning of cardiac cycle";
            HP = 1/HR "update length of carciac cycle";
            TD2 = TD1 + (2/5)*HP "compute end time of systole";
          end when;
          tc = time - T0 "relative time in carciac cycle";
          volumeflowrate = if tc < TD1 then 0 else if tc < TD2 then sin((tc - TD1)/
            (TD2 - TD1)*Modelica.Constants.pi)*QP else 0
            "zero before and after systole, otherwise sin up to peak flow";
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics={Rectangle(
                      extent={{-80,80},{80,-80}},
                      lineColor={0,0,255},
                      fillColor={255,255,170},
                      fillPattern=FillPattern.Solid),Line(
                      points={{-70,0},{-50,0},{-48,2},{-42,52},{-36,60},{-28,52},{-24,
                    2},{-20,0},{14,0},{18,2},{24,48},{24,54},{32,58},{40,50},{44,2},
                    {50,0},{74,0}},
                      color={0,0,255},
                      smooth=Smooth.Bezier),
                Text(
                  extent={{-80,108},{80,88}},
                  lineColor={0,0,255},
                  textString="%name"),
                Text(
                  extent={{-80,-92},{78,-112}},
                  lineColor={0,0,255},
                  textString="rate=%HR")}));
        end Pulses;
      end Utilities;

      package Kofranek2014
        "models of cardiovascular system used in www.physiome.cz/atlas"
        extends Modelica.Icons.ExamplesPackage;
        model NonPulsatileCirculation
          extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(
            useV0Input=true,
            useComplianceInput=true,
            volume_start=0.000373)
            annotation (Placement(transformation(extent={{-40,28},{-20,48}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CAP(k=
                2.2576853432954e-08)
            annotation (Placement(transformation(extent={{-50,56},{-36,70}})));
          Physiolibrary.Types.Constants.VolumeConst V0AP(k=0.000327)
            annotation (Placement(transformation(extent={{-66,44},{-52,58}})));
          Physiolibrary.Hydraulic.Components.Conductor TotalPulmonaryResistance(
              useConductanceInput=true)
            annotation (Placement(transformation(extent={{-2,28},{18,48}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RP(k(
                displayUnit="(Pa.s)/m3") = 9332567.11905)
            annotation (Placement(transformation(extent={{-6,60},{6,70}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(
            useV0Input=true,
            useComplianceInput=true,
            volume_start=0.000704)
            annotation (Placement(transformation(extent={{42,28},{62,48}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CVP(k=
                2.250184727537e-07)
            annotation (Placement(transformation(extent={{36,60},{50,74}})));
          Physiolibrary.Types.Constants.VolumeConst V0VP(k=0.000435)
            annotation (Placement(transformation(extent={{20,48},{34,62}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel SystemicVeins(
            useV0Input=true,
            useComplianceInput=true,
            volume_start=0.003922)
            annotation (Placement(transformation(extent={{-46,-70},{-26,-50}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CVS(k=
                1.5001231516913e-06)
            annotation (Placement(transformation(extent={{-52,-42},{-38,-28}})));
          Physiolibrary.Types.Constants.VolumeConst V0VS(k=0.002845)
            annotation (Placement(transformation(extent={{-74,-54},{-60,-40}})));
          Physiolibrary.Hydraulic.Components.Conductor TotalSystemicResistance(
              useConductanceInput=true)
            annotation (Placement(transformation(extent={{16,-70},{-4,-50}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RT(k(
                displayUnit="(Pa.s)/m3") = 133322387.415)
            annotation (Placement(transformation(extent={{-14,-50},{-4,-40}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel SystemicArteries(
            useV0Input=true,
            useComplianceInput=true,
            volume_start=0.000672)
            annotation (Placement(transformation(extent={{36,-70},{56,-50}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CAS(k=
                1.1250923637685e-08)
            annotation (Placement(transformation(extent={{30,-38},{44,-24}})));
          Physiolibrary.Types.Constants.VolumeConst V0AS(k=0.000529)
            annotation (Placement(transformation(extent={{14,-50},{28,-36}})));
          replaceable Parts.HeartPump rightHeart(StarlingSlope(displayUnit=
                  "ml/(mmHg.s)") = 1.2503526469347e-07)
            annotation (Placement(transformation(extent={{-72,-10},{-48,16}})));
          replaceable Parts.HeartPump leftHeart(StarlingSlope(displayUnit=
                  "m3/(Pa.s)") = 7.5006157584566e-08)
            annotation (Placement(transformation(extent={{74,-10},{52,10}})));
        equation
          connect(CAP.y, PulmonaryArteries.compliance) annotation (Line(
              points={{-34.25,63},{-30,63},{-30,46}},
              color={0,0,127}));
          connect(V0AP.y, PulmonaryArteries.zeroPressureVolume) annotation (Line(
              points={{-50.25,51},{-50.25,50.5},{-38,50.5},{-38,46}},
              color={0,0,127}));
          connect(RP.y, TotalPulmonaryResistance.cond) annotation (Line(
              points={{7.5,65},{8,65},{8,44}},
              color={0,0,127}));
          connect(CVP.y, PulmonaryVeins.compliance) annotation (Line(
              points={{51.75,67},{52,67},{52,46}},
              color={0,0,127}));
          connect(CVS.y, SystemicVeins.compliance) annotation (Line(
              points={{-36.25,-35},{-36,-35},{-36,-52}},
              color={0,0,127}));
          connect(RT.y, TotalSystemicResistance.cond) annotation (Line(
              points={{-2.75,-45},{6,-45},{6,-54}},
              color={0,0,127}));
          connect(CAS.y, SystemicArteries.compliance) annotation (Line(
              points={{45.75,-31},{46,-31},{46,-52}},
              color={0,0,127}));
          connect(PulmonaryArteries.q_in, TotalPulmonaryResistance.q_in)
            annotation (Line(
              points={{-30,38},{-2,38}},
              thickness=1));
          connect(TotalPulmonaryResistance.q_out, PulmonaryVeins.q_in)
            annotation (Line(
              points={{18,38},{52,38}},
              thickness=1));
          connect(PulmonaryVeins.q_in, leftHeart.inflow) annotation (Line(
              points={{52,38},{74,38},{74,4.44089e-16}},
              thickness=1));
          connect(leftHeart.outflow, SystemicArteries.q_in) annotation (Line(
              points={{52,0},{52,-60},{46,-60}},
              thickness=1));
          connect(SystemicArteries.q_in, TotalSystemicResistance.q_in)
            annotation (Line(
              points={{46,-60},{16,-60}},
              thickness=1));
          connect(TotalSystemicResistance.q_out, SystemicVeins.q_in) annotation (
              Line(
              points={{-4,-60},{-36,-60}},
              thickness=1));
          connect(SystemicVeins.q_in, rightHeart.inflow) annotation (Line(
              points={{-36,-60},{-78,-60},{-78,3},{-72,3}},
              thickness=1));
          connect(PulmonaryVeins.zeroPressureVolume, V0VP.y) annotation (Line(
              points={{44,46},{40,46},{40,55},{35.75,55}},
              color={0,0,127}));
          connect(SystemicVeins.zeroPressureVolume, V0VS.y) annotation (Line(
              points={{-44,-52},{-52,-52},{-52,-47},{-58.25,-47}},
              color={0,0,127}));
          connect(V0AS.y, SystemicArteries.zeroPressureVolume) annotation (Line(
              points={{29.75,-43},{38,-43},{38,-52}},
              color={0,0,127}));
          connect(rightHeart.outflow, PulmonaryArteries.q_in) annotation (Line(
              points={{-48,3},{-48,38},{-30,38}},
              thickness=1));
          annotation ( Documentation(info="<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it. </p>
<ul>
<li>J. Kofranek, S. Matousek, J. Rusz, P. Stodulka, P. Privitzer,M. Matejak, M. Tribula, The Atlas of Physiology and Pathophysiology: Web-based multimedia enabled interactive simulations., Comput. Methods Programs Biomed. 104 (2) (2011) 143&ndash;53. doi:10.1016/j.cmpb.2010.12.007.</li>
<li>Kofr&aacute;nek J, Matej&aacute;k M, Je~ek F, Privitzer P, &Scaron;ilar J. V&yacute;ukov&yacute; webov&yacute; simulator krevn&iacute;ho obhu. In: Sborn&iacute;k PY&iacute;spvko MEDSOFT 2011: 106-121. </li>
<li>Tribula M, Je~ek F, Privitzer P, Kofr&aacute;nek J, Kolman J. Webov&yacute; v&yacute;ukov&yacute; simul&aacute;tor krevn&iacute;ho obhu. In: Sborn&iacute;k PY&iacute;spvko MEDSOFT 2013: 197-204.</li>
<li><a href=\"http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html\">http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html</a></li>
</ul>
</html>"),  experiment(StopTime=5));
        end NonPulsatileCirculation;

        model PulsatileCirculation
            extends NonPulsatileCirculation(
            redeclare Parts.PulsatileHeartPump rightHeart(pulses(
                  QP=0.000338)),
            redeclare Parts.PulsatileHeartPump leftHeart(pulses(QP=
                   0.000338)),
            CAS(k=7.2755972857029e-09),
            SystemicArteries(volume_start=0.000603),
            SystemicVeins(volume_start=0.003991));

          annotation ( Documentation(info="<html>
<p>Extension of the model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes. MEFANET Journal 2014. Available at WWW:<a href=\"
 http://mj.mefanet.cz/mj-04140914\"> http://mj.mefanet.cz/mj-04140914</a>.</li>
</ul>
</html>"),  experiment(StopTime=5));
        end PulsatileCirculation;

        package Parts "Utility components used by package KofranekModels2013"
        extends Modelica.Icons.UtilitiesPackage;
          model HeartPump "Heart as pump, which flowrate is determined
  by the StarlingSlope and filling pressure."

            Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation (
               Placement(transformation(extent={{-110,-10},{-90,10}}),
                  iconTransformation(extent={{-110,-10},{-90,10}})));
            Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow
              annotation (Placement(transformation(extent={{90,-10},{110,10}}),
                  iconTransformation(extent={{90,-10},{110,10}})));
            parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
          equation
            inflow.q + outflow.q = 0;
            inflow.q = StarlingSlope*inflow.pressure;
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                      {-100,-100},{100,100}}), graphics={Polygon(
                            points={{32,-34},{24,-24},{18,-10},{18,-8},{22,22},{
                      24,24},{34,40},{30,70},{26,82},{-22,100},{-26,42},{-26,40},
                      {-30,-6},{-30,-10},{-6,-40},{52,-74},{32,-34}},
                            lineColor={0,0,127},
                            smooth=Smooth.Bezier,
                            fillColor={255,170,170},
                            fillPattern=FillPattern.Solid),Text(
                            extent={{-100,-60},{102,-98}},
                            lineColor={0,0,127},
                            fillColor={255,170,170},
                            fillPattern=FillPattern.Solid,
                            textString="%name")}));
          end HeartPump;

          model PulsatileHeartPump "Heart as pump, which flowrate is determined
  by the StarlingSlope and filling pressure."

            Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation (
               Placement(transformation(extent={{-64,0},{-44,20}}),
                  iconTransformation(extent={{-110,-10},{-90,10}})));
            Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow
              annotation (Placement(transformation(extent={{42,2},{62,22}}),
                  iconTransformation(extent={{42,2},{62,22}})));
            Utilities.Pulses pulses
              annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
            Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput=
                  true)
              annotation (Placement(transformation(extent={{-14,2},{6,22}})));
            parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
          equation
            connect(pump.q_out, outflow) annotation (Line(
                points={{6,12},{52,12}},
                thickness=1));
            connect(pump.solutionFlow, pulses.volumeflowrate) annotation (Line(
                points={{-4,19},{-4,40},{-21,40}},
                color={0,0,127}));
            connect(inflow, pump.q_in) annotation (Line(
                points={{-54,10},{-34,10},{-34,12},{-14,12}},
                thickness=1));
            connect(inflow, inflow) annotation (Line(
                points={{-54,10},{-54,10}},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                      {-100,-100},{100,100}}), graphics={Polygon(
                            points={{32,-34},{24,-24},{18,-10},{18,-8},{22,22},{
                      24,24},{34,40},{30,70},{26,82},{-22,100},{-26,42},{-26,40},
                      {-30,-6},{-30,-10},{-6,-40},{52,-74},{32,-34}},
                            lineColor={0,0,127},
                            smooth=Smooth.Bezier,
                            fillColor={255,170,170},
                            fillPattern=FillPattern.Solid),Text(
                            extent={{-100,-60},{102,-98}},
                            lineColor={0,0,127},
                            fillColor={255,170,170},
                            fillPattern=FillPattern.Solid,
                            textString="%name")}));
          end PulsatileHeartPump;

        end Parts;

        annotation (Documentation(info="<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
</html>"));
      end Kofranek2014;

      package Fernandez2013
        "Model of CVS introduced by Fernandez de Canete et al. 2013"
          extends Modelica.Icons.ExamplesPackage;

        model PulsatileCirculation
          "Model of cardiovascular system with pulsatile dynamic"
                                  extends Physiolibrary.Icons.CardioVascular;

          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
              volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                  "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
              volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
                displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            useComplianceInput=false,
            volume_start(displayUnit="ml") = 0.0006597,
            ZeroPressureVolume=0.0001,
            Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                      useLimitationInputs=false, _Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0002097,
            ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                                annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
                 1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel aorta(
            volume_start=4.6e-05,
            ZeroPressureVolume=3e-05,
            Compliance(displayUnit="ml/mmHg") = 1.6501354668604e-09)
                                                                 annotation(Placement(transformation(origin={-111,-3},   extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor Raorta(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 1.1108411938274e-07)
                                                              annotation(Placement(transformation(origin={-79,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia aorticInertia(
              volumeFlow_start(displayUnit="m3/s") = 1.0385e-05, I(displayUnit=
                  "Pa.s2/m3") = 109990.96961737)                   annotation(Placement(transformation(origin={-37,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel arteries(
            volume_start=0.000805,
            ZeroPressureVolume=0.0007,
            Compliance(displayUnit="ml/mmHg") = 1.0950899007347e-08)
                                                                    annotation(Placement(transformation(origin={-1,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 7.5006157584566e-09)
                                                                 annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
              volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                  "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
              useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                       annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.00018,
            ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                                 annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                       annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
            volume_start=2.1e-05,
            ZeroPressureVolume=2e-05,
            Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
            volume_start=0.000637,
            ZeroPressureVolume=0.0006,
            Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(
            volume_start(displayUnit="ml") = 0.002443,
            ZeroPressureVolume=0.00237,
            Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07)
            annotation (Placement(transformation(
                origin={105,-3},
                extent={{-15,-15},{15,15}})));
          Parts.TimeVaryingElastance timeVaryingElastanceLeft(
            Ed(displayUnit="mmHg/ml") = 13332238.7415,
            Es(displayUnit="mmHg/ml") = 183318282.69563,
            Pi0(displayUnit="mmHg") = 6666.11937075)
            annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
          Parts.TimeVaryingElastance timeVaryingElastanceRight(
            Ed(displayUnit="mmHg/ml") = 3999671.62245,
            Es(displayUnit="mmHg/ml") = 43729743.0721,
            Pi0(displayUnit="mmHg") = 3199.73729796)
            annotation (Placement(transformation(extent={{164,18},{184,38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                  "Hz") = 1.2)
            annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
        equation
          connect(aorta.q_in, Raorta.q_in) annotation (Line(
              points={{-111,-3},{-94,-3}},
              thickness=1));
          connect(Raorta.q_out, aorticInertia.q_in) annotation (Line(
              points={{-64,-3},{-52,-3}},
              thickness=1));
          connect(systemicInertia.q_out, veins.q_in) annotation (Line(
              points={{90,-3},{105,-3}},
              thickness=1));
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
            annotation (Line(
              points={{-212,17},{-209,17},{-209,9}},
              color={0,0,127}));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
            annotation (Line(
              points={{174,19},{174,9},{171,9}},
              color={0,0,127}));
          connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
              points={{105,-3},{122,-3}},
              thickness=1));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
              color={0,0,127}));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{181,19},{181,9},{183,9}},
              color={0,0,127}));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
              points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
              color={0,0,127}));
          connect(aorticInertia.q_out, arteries.q_in) annotation (Line(
              points={{-22,-3},{-1,-3}},
              thickness=1));
          connect(arteries.q_in, RSystemic.q_in) annotation (Line(
              points={{-1,-3},{16,-3}},
              thickness=1));
          connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
              points={{46,-3},{60,-3}},
              thickness=1));
          connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
              points={{171,-3},{152,-3}},
              thickness=1));
          connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
              points={{192,-3},{171,-3}},
              thickness=1));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
              points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
              color={0,0,127}));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{222,-3},{230,-3}},
              thickness=1));
          connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
              points={{260,-3},{266,-3},{266,57},{243,57}},
              thickness=1));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{243,57},{243,58},{217.5,58}},
              thickness=1));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{182.5,58},{173,58}},
              thickness=1));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{143,58},{124,58}},
              thickness=1));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{124,58},{-42,58},{-42,60},{-205,60}},
              thickness=1));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
              Line(
              points={{-235,60},{-263,60}},
              thickness=1));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
              thickness=1));
          connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
              points={{-279,-3},{-258,-3}},
              thickness=1));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{-228,-3},{-209,-3}},
              thickness=1));
          connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
              points={{-209,-3},{-196,-3}},
              thickness=1));
          connect(aorticValve.q_out, aorta.q_in) annotation (Line(
              points={{-128,-3},{-111,-3}},
              thickness=1));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
              points={{-166,-3},{-158,-3}},
              thickness=1));
          annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2}),
                graphics),                                                                                                    Icon(coordinateSystem(extent={{-350,
                    -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),  experiment(StopTime=5));
        end PulsatileCirculation;

        package Parts "Utility components used by package KofranekModels2013"
          extends Modelica.Icons.UtilitiesPackage;
          model TimeVaryingElastance
            parameter Physiolibrary.Types.HydraulicElastance Ed
              "elastance of diastole";
            parameter Physiolibrary.Types.HydraulicElastance Es
              "elastance of systole";
            parameter Physiolibrary.Types.Pressure Pi0
              "peak isovolumic pressure";
            Physiolibrary.Types.Time tm
              "relative time from the beginning of cardiac cycle";
            discrete Physiolibrary.Types.Time HP "heart period";
            discrete Physiolibrary.Types.Time t0
              "time of beginning of the cardiac cycle";
            discrete Physiolibrary.Types.Time ts "duration of systole";
            Real a;
            Physiolibrary.Types.RealIO.HydraulicComplianceOutput C
              annotation (Placement(transformation(extent={{-4,-102},{16,-82}}),
                  iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={0,-90})));
                  Physiolibrary.Types.HydraulicElastance E;
            Physiolibrary.Types.RealIO.PressureOutput Pi annotation (Placement(
                  transformation(extent={{-72,-100},{-52,-80}}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={70,-90})));
            Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation (Placement(
                  transformation(extent={{-106,56},{-66,96}}), iconTransformation(extent={
                      {-106,56},{-66,96}})));
          equation
            tm = time - pre(t0);
            if (tm<pre(ts)) then
              a= (1-cos(2*Modelica.Constants.pi*tm/pre(ts)))/2;
            else
              a=0;
            end if;
            E=Ed+Es*a;
            C=1/E;
            Pi = Pi0*a;
            when {initial(), tm >= pre(HP)} then
              HP = 1/HR;
              t0= time;
              ts = 0.16+0.3*HP;
            end when;
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}),
                                   graphics={
                  Rectangle(
                    extent={{-80,80},{80,-80}},
                    lineColor={0,0,255},
                    fillColor={170,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-78,0},{-68,18},{-54,52},{-44,64},{-30,60},{-26,46}},
                    color={0,0,255}),
                  Line(
                    points={{-26,46},{-26,32},{-20,10},{-8,2},{36,2},{80,2}},
                    color={0,0,255}),
                  Text(
                    extent={{-70,98},{-22,80}},
                    lineColor={0,0,255},
                    textString="HR"),
                  Text(
                    extent={{-74,-40},{40,-80}},
                    lineColor={0,0,255},
                    textString="Et"),
                  Text(
                    extent={{42,-40},{100,-80}},
                    lineColor={0,0,255},
                    textString="Pi"),
                  Text(
                    extent={{-272,16},{276,-40}},
                    lineColor={0,0,255},
                    textString="%name")}));
          end TimeVaryingElastance;
        end Parts;
      end Fernandez2013;

      package MeursModel2011
        "models of cardiovascular system used in www.physiome.cz/atlas"
        extends Modelica.Icons.ExamplesPackage;
        package Parts "Utility components used by package KofranekModels2013"
          extends Modelica.Icons.UtilitiesPackage;
          model AtrialElastance
            extends HeartIntervals;
            Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
              "compliance"                                                       annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
            Physiolibrary.Types.HydraulicElastance Et "elasticity";
            parameter Physiolibrary.Types.HydraulicElastance EMIN
              "Diastolic elastance";
          parameter Boolean useEs_extInput = false
              "=true, if external elastance/compliance value is used"
              annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
            parameter Physiolibrary.Types.HydraulicElastance EMAX
              "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
             annotation (
                Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-80,80})));
          protected
             Physiolibrary.Types.HydraulicElastance es_int;
          equation
            if not useEs_extInput then
              es_int=EMAX;
            end if;
            if time - T0 < Tas then
              Et = EMIN + (es_int - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas);
            else
              Et = EMIN;
            end if;
            Ct = 1 / Et "reciprocal value of elastance";
            annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                      -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-100, 82}, {100, -100}}, pattern=  LinePattern.None,
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent={{
                        -98,82},{98,24}},                                                                                                    lineColor=  {0, 0, 255},
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Atrial elastance"), Line(points=  {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{72, 4}, {102, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
          end AtrialElastance;

          model VentricularElastance
            extends HeartIntervals;
            Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
              "ventricular elasticity"                                                       annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
            Modelica.Blocks.Interfaces.RealOutput Et0
              "normalized ventricular elasticity (0..1)"                                         annotation(Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
            Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation(Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
            Physiolibrary.Types.HydraulicElastance Et;
            parameter Physiolibrary.Types.HydraulicElastance EMIN
              "Diastolic elastance ";
            constant Real Kn = 0.57923032735652;
            //Kn is always = 0.5792303273565197
            //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
            //Equation to calculate normalized elastance ET0 was:
            //Et0=EMIN+(EMAX-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
          parameter Boolean useEs_extInput = false
              "=true, if external elastance/compliance value is used"
              annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
            parameter Physiolibrary.Types.HydraulicElastance EMAX
              "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/EMAX)=1/es_int if useEs_extInput
             annotation (
                Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=0,
                  origin={-80,80})));
          protected
             Physiolibrary.Types.HydraulicElastance es_int;
          equation
            if not useEs_extInput then
              es_int=EMAX;
            end if;
            HeartInterval = time - T0;
            Et = EMIN + (es_int - EMIN) * Et0;
            if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
              Et0 = (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn;
            else
              Et0 = 0;
            end if;
            Ct = 1 / Et "reciprocal value of elastance";
            annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 82}, {100, -100}}, pattern=  LinePattern.None,
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-82, 82}, {80, 24}}, lineColor=  {0, 0, 255},
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ventricular elastance"), Line(points=  {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{96, -32}, {68, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Et0"), Text(extent=  {{42, -72}, {88, -84}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Heart interval"), Text(extent=  {{62, 30}, {96, 8}}, lineColor=  {0, 0, 255},
                      lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                      fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
          end VentricularElastance;

          model HeartIntervals
            discrete Physiolibrary.Types.Time Tas, T0, Tvs;
            parameter Physiolibrary.Types.Time Tav(displayUnit = "s") = 0.01
              "atrioventricular delay";
            discrete Modelica.SIunits.Time HP(start = 0) "heart period";
            Boolean b(start = false);
            Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-12, 68}, {28, 108}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80})));
          equation
            b = time - pre(T0) >= pre(HP) "true if new pulse occurs";
            when {initial(), b} then
              T0 = time "start time of cardiac cycle";
              HP = 1 / HR "update heart period per heart rate";
              Tas = 0.03 + 0.09 * HP "duration of atrial systole";
              Tvs = 0.16 + 0.2 * HP "duration of ventricular systole";
            end when;
            annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent={{
                        -64,102},{-6,78}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR")}));
          end HeartIntervals;
        end Parts;

        model HemodynamicsMeurs_flatNorm
        extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Epa(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000106,
            ZeroPressureVolume=5e-05,
            ExternalPressure=-533.28954966,
            Elastance=31064116.267695)
            annotation (Placement(transformation(extent={{-94,84},{-66,112}})));
          Physiolibrary.Hydraulic.Components.Resistor Rpp(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 14665462.61565)
            annotation (Placement(transformation(extent={{-56,85},{-22,111}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Epv(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000518,
            ZeroPressureVolume=0.00035,
            ExternalPressure=-533.28954966,
            Elastance=6066168.6273825)
            annotation (Placement(transformation(extent={{-10,84},{24,112}})));
          Physiolibrary.Hydraulic.Components.Resistor Rlain(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{26,86},{56,110}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance LeftAtrium(
            useComplianceInput=true,
            useV0Input=false,
            useExternalPressureInput=false,
            volume_start=9.31e-05,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{74,50},{102,78}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance LeftVentricle(
            useComplianceInput=true,
            useV0Input=false,
            useExternalPressureInput=false,
            volume_start=0.000144,
            ZeroPressureVolume=6e-05,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{150,50},{178,78}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance AorticValve(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 1066579.09932)
            annotation (Placement(transformation(extent={{184,76},{208,52}})));
          Parts.AtrialElastance LAtrialElastance(
            Tav(displayUnit="s"),
            EMIN=15998686.4898,
            EMAX=37330268.4762)
            annotation (Placement(transformation(extent={{80,92},{118,124}})));
          Parts.VentricularElastance LVentricularElastance(EMIN=11999014.86735,
              EMAX=533289549.66)
            annotation (Placement(transformation(extent={{164,88},{200,120}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance MitralValve(
            useLimitationInputs=false,
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245)
                                annotation (Placement(visible=true,
                transformation(
                origin={127,64},
                extent={{-13,12},{13,-12}},
                rotation=0)));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Eitha(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000204,
            ZeroPressureVolume=0.00014,
            ExternalPressure=-533.28954966,
            Elastance=190651014.00345)
            annotation (Placement(transformation(extent={{168,6},{190,28}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Eetha(
            volume_start(displayUnit="ml") = 0.000526,
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            ZeroPressureVolume=0.00037,
            Elastance=74127247.40274)
            annotation (Placement(transformation(extent={{56,4},{82,30}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
              volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent={{-11,-11},
                    {11,11}},                                                                                                    rotation = 180, origin={141,17})));
          Physiolibrary.Hydraulic.Components.Resistor Retha(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 7999343.2449)
            annotation (Placement(transformation(extent={{90,6},{112,28}})));
          Physiolibrary.Hydraulic.Components.Resistor Rsart(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 106657909.932) annotation (
              Placement(transformation(
                extent={{14,-13},{-14,13}},
                rotation=0,
                origin={24,17})));
          Physiolibrary.Hydraulic.Components.Resistor Rsven(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 26664477.483) annotation (
              Placement(transformation(
                extent={{14,-13},{-14,13}},
                rotation=0,
                origin={-60,17})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Est(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000283,
            ZeroPressureVolume=0.000185,
            Elastance=34930465.50273)
            annotation (Placement(transformation(extent={{-28,6},{-4,28}})));
          Physiolibrary.Hydraulic.Components.Resistor Rethv(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 11999014.86735)
            annotation (Placement(transformation(extent={{-120,4},{-146,30}})));
          Physiolibrary.Hydraulic.Components.Resistor Rrain(useConductanceInput=false,
              Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{-208,4},{-236,30}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Eithv(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00148,
            ZeroPressureVolume=0.00119,
            ExternalPressure=-533.28954966,
            Elastance=2426467.450953)
            annotation (Placement(transformation(extent={{-194,4},{-166,30}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance Eethv(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00153,
            ZeroPressureVolume=0.001,
            Elastance=2253148.3473135)
            annotation (Placement(transformation(extent={{-108,4},{-82,30}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance RightAtrium(
            useComplianceInput=true,
            useV0Input=false,
            useExternalPressureInput=false,
            volume_start=0.000135,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{-242,44},{-214,72}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance RightVentricle(
            useComplianceInput=true,
            useV0Input=false,
            useExternalPressureInput=false,
            volume_start=0.000131,
            ZeroPressureVolume=4e-05,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{-170,42},{-140,72}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance PulmonaryValve(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{-132,70},{-106,44}})));
          Parts.AtrialElastance RAtrialElastance(EMIN=6666119.37075, EMAX=
                19998358.11225)
            annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
          Parts.VentricularElastance RVentricularElastance(EMIN=7599376.082655,
              EMAX=65327969.83335)
            annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance TricuspidValve(
            _Goff=0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245)
                                annotation (Placement(visible=true,
                transformation(
                origin={-189,58},
                extent={{-13,12},{13,-12}},
                rotation=0)));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
        equation
          connect(Epa.q_in, Rpp.q_in) annotation (Line(
              points={{-80,98},{-56,98}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpp.q_out, Epv.q_in) annotation (Line(
              points={{-22,98},{7,98}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Epv.q_in, Rlain.q_in) annotation (Line(
              points={{7,98},{26,98}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LeftAtrium.q_in, MitralValve.q_in) annotation (Line(
              points={{88,64},{114,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LeftVentricle.q_in, MitralValve.q_out) annotation (Line(
              points={{164,64},{140,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LeftVentricle.q_in, AorticValve.q_in) annotation (Line(
              points={{164,64},{184,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LeftVentricle.compliance, LVentricularElastance.Ct) annotation (
             Line(
              points={{164,75.2},{164,74},{212,74},{212,107.68},{203.42,107.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Rlain.q_out, LeftAtrium.q_in) annotation (Line(
              points={{56,98},{74,98},{74,64},{88,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Retha.q_in, Eetha.q_in) annotation (Line(
              points={{90,17},{69,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Retha.q_out, inertia.q_out) annotation (Line(
              points={{112,17},{130,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, Eitha.q_in) annotation (Line(
              points={{152,17},{179,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Eitha.q_in, AorticValve.q_out) annotation (Line(
              points={{179,17},{216,17},{216,64},{208,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rrain.q_in, Eithv.q_in) annotation (Line(
              points={{-208,17},{-180,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Eithv.q_in, Rethv.q_out) annotation (Line(
              points={{-180,17},{-146,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rethv.q_in, Eethv.q_in) annotation (Line(
              points={{-120,17},{-95,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RightAtrium.q_in, TricuspidValve.q_in) annotation (Line(
              points={{-228,58},{-202,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RightVentricle.q_in, TricuspidValve.q_out) annotation (Line(
              points={{-155,57},{-164.5,57},{-164.5,58},{-176,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RightVentricle.q_in, PulmonaryValve.q_in) annotation (Line(
              points={{-155,57},{-132,57}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rrain.q_out, RightAtrium.q_in) annotation (Line(
              points={{-236,17},{-250,17},{-250,58},{-228,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RightAtrium.compliance,RAtrialElastance. Ct) annotation(Line(points = {{-228, 69.2}, {-228, 92}, {-202.39, 92}, {-202.39, 101.84}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PulmonaryValve.q_out, Epa.q_in) annotation (Line(
              points={{-106,57},{-92,57},{-92,98},{-80,98}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RightVentricle.compliance,RVentricularElastance. Ct) annotation(Line(points={{-155,69},
                  {-155,80},{-126,80},{-126,108.91},{-147.15,108.91}},                                                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(LeftAtrium.compliance, LAtrialElastance.Ct) annotation (Line(
              points={{88,75.2},{88,74},{121.61,74},{121.61,107.84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HeartRate.y,RAtrialElastance. HR) annotation(Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RVentricularElastance.HR, HeartRate.y) annotation(Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(LAtrialElastance.HR, HeartRate.y) annotation (Line(
              points={{99,120.8},{99,128.5},{-229.25,128.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LVentricularElastance.HR, HeartRate.y) annotation (Line(
              points={{182,116.8},{182,128.5},{-229.25,128.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Est.q_in, Rsart.q_out) annotation (Line(
              points={{-16,17},{10,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsart.q_in, Eetha.q_in) annotation (Line(
              points={{38,17},{69,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Eethv.q_in, Rsven.q_out) annotation (Line(
              points={{-95,17},{-74,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsven.q_in, Est.q_in) annotation (Line(
              points={{-46,17},{-16,17}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(extent={{-280,-140},{280,180}},      preserveAspectRatio=false),   graphics), Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics),
            Documentation(info="<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
<ul>
<li>J. A. Goodwin, W. L. van Meurs, C. D. Sa Couto, J. E. W.Beneken, S. A. Graves, A model for educational simulation of infant cardiovascular physiology., Anesthesia and analgesia 99 (6)(2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</li>
<li>C. D. Sa Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen,A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</li>
<li>W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Jul 2015 </i>by Tomas Kulhanek: Created. </li>
</ul>
</html>"),  experiment(StopTime=5));
        end HemodynamicsMeurs_flatNorm;
        annotation(Documentation(info="<html>
</html>"));
      end MeursModel2011;
    end Examples;

    package Components
      extends Modelica.Icons.Package;
      model Conductor "Hydraulic resistor, where conductance=1/resistance"
       extends Hydraulic.Interfaces.OnePort;
       extends Icons.HydraulicResistor;

        parameter Boolean useConductanceInput = false
          "=true, if external conductance value is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.HydraulicConductance Conductance=0
          "Hydraulic conductance if useConductanceInput=false"
          annotation (Dialog(enable=not useConductanceInput));

        Types.RealIO.HydraulicConductanceInput cond(start=Conductance)=c if useConductanceInput
                                                         annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,60})));
      protected
         Types.HydraulicConductance c;
      equation
        if not useConductanceInput then
          c=Conductance;
        end if;
        q_in.q = c * (q_in.pressure - q_out.pressure);
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}}),
                         graphics={Text(
                extent={{-220,-40},{200,-80}},
                lineColor={0,0,255},
                fillColor={58,117,175},
                fillPattern=FillPattern.Solid,
                textString="%name")}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
      end Conductor;

      model Resistor
        extends Physiolibrary.Hydraulic.Components.Conductor(final Conductance = 1/Resistance);
        parameter Physiolibrary.Types.HydraulicResistance Resistance
          "Hydraulic conductance if useConductanceInput=false";
      end Resistor;

      model ElasticVessel
        "Elastic container for blood vessels, bladder, lumens"
       extends Icons.ElasticBalloon;
       extends SteadyStates.Interfaces.SteadyState(
                                          state_start=volume_start, storeUnit=
            "ml");
        Interfaces.HydraulicPort_a
                             q_in
                              annotation (Placement(
              transformation(extent={{-14,-14},{14,14}})));
        parameter Types.Volume volume_start = 1e-11 "Volume start value"
           annotation (Dialog(group="Initialization"));                                //default = 1e-5 ml
        Types.Volume excessVolume "Additional volume, that generate pressure";

         parameter Boolean useV0Input = false
          "=true, if zero-pressure-volume input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Types.Volume ZeroPressureVolume = 1e-11
          "Maximal volume, that does not generate pressure if useV0Input=false"
          annotation (Dialog(enable=not useV0Input)); //default = 1e-5 ml

          parameter Types.Volume CollapsingPressureVolume = 1e-12
          "Maximal volume, which generate negative collapsing pressure"; //default = 1e-6 ml

         Types.RealIO.VolumeInput zeroPressureVolume(start=ZeroPressureVolume)= zpv if useV0Input
                                                          annotation (Placement(transformation(
                extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,80})));
        parameter Boolean useComplianceInput = false
          "=true, if compliance input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Types.HydraulicCompliance Compliance = 1
          "Compliance if useComplianceInput=false"
          annotation (Dialog(enable=not useComplianceInput));

        Types.RealIO.HydraulicComplianceInput compliance(start=Compliance) = c if useComplianceInput
                                                              annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));
        parameter Boolean useExternalPressureInput = false
          "=true, if external pressure input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Types.Pressure ExternalPressure=0
          "External pressure. Set zero if internal pressure is relative to external. Valid only if useExternalPressureInput=false."
          annotation (Dialog(enable=not useExternalPressureInput));
        parameter Types.Pressure MinimalCollapsingPressure = -101325;
        Types.RealIO.PressureInput externalPressure(start=ExternalPressure) = ep if useExternalPressureInput
                                                         annotation (Placement(transformation(
                extent={{-20,-20},{20,20}},
              rotation=270,
              origin={80,80})));

        Types.RealIO.VolumeOutput volume      annotation (Placement(transformation(
                extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));

      protected
        Types.Volume zpv;
        Types.HydraulicCompliance c;
        Types.Pressure ep;
        parameter Types.Pressure a=MinimalCollapsingPressure/log(Modelica.Constants.eps);

      equation
        if not useV0Input then
          zpv=ZeroPressureVolume;
        end if;
        if not useComplianceInput then
          c=Compliance;
        end if;
        if not useExternalPressureInput then
          ep=ExternalPressure;
        end if;
        excessVolume = max( 0, volume - zpv);
        q_in.pressure =
        smooth(0,
          if noEvent(volume>CollapsingPressureVolume) then
            (excessVolume/c + ep)
          else
            (a*log(max(Modelica.Constants.eps,volume/CollapsingPressureVolume)) + ep));
        //then: normal physiological state
        //else: abnormal collapsing state

        //Collapsing state: the max function prevents the zero or negative input to logarithm, the logarithm brings more negative pressure for smaller volume
        //However this collapsing is limited with numerical precission, which is reached relatively soon.

        state = volume; // der(volume) =  q_in.q;
        change = q_in.q;
       // assert(volume>=-Modelica.Constants.eps,"Collapsing of vessels are not supported!");
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-318,-140},{160,-100}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2014 - </i>Marek Matejak, Charles University, Prague, Czech Republic</p>
<ul>
<li>initial implementation </li>
</ul>
<p>4.5.2015 - Tom&aacute;&scaron; Kulh&aacute;nek, Charles University, Prague, Czech Republic</p>
<ul>
<li>fix of external pressure</li>
</ul>
</html>",   info="<html>
<p>Pressure can be generated by an elastic tissue surrounding some accumulated volume. Typically there is a threshold volume, below which the relative pressure is equal to external pressure and the wall of the blood vessels is not stressed. But if the volume rises above this value, the pressure increases proportionally. The slope in this pressure-volume characteristic is called &ldquo;Compliance&rdquo;.</p>
<ul>
<li>Increassing volume above ZeroPressureVolume (V0) generate positive pressure (greater than external pressure) lineary dependent on excess volume.</li>
<li>Decreasing volume below CollapsingPressureVolume (V00) generate negative pressure (lower than external pressure) logarithmicaly dependent on volume.</li>
<li>Otherwise external pressure is presented as pressure inside ElasticVessel.</li>
</ul>
<p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ElasticVessel_PV.png\"/></p>
</html>"));
      end ElasticVessel;

      model ElasticVesselElastance
        extends Physiolibrary.Hydraulic.Components.ElasticVessel(final Compliance = 1/Elastance);
        parameter Physiolibrary.Types.HydraulicElastance Elastance = 1
          "Elastance if useComplianceInput=false" annotation (Dialog(enable=not useComplianceInput));
      end ElasticVesselElastance;

      model HydrostaticColumn
        "Hydrostatic column pressure between two connectors (with specific muscle pump effect)"
        extends Icons.HydrostaticGradient;
        Hydraulic.Interfaces.HydraulicPort_a
                             q_up "Top site"
                               annotation (Placement(
              transformation(extent={{66,26},{94,54}})));
        Interfaces.HydraulicPort_a
                             q_down "Bottom site"
                               annotation (Placement(
              transformation(extent={{66,-74},{94,-46}})));
        parameter Boolean useHeightInput = false
          "=true, if height input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Types.Height H=0
          "Height of hydrostatic column if useHeightInput=false"
          annotation (Dialog(enable=not useFlowInput));

        Types.RealIO.HeightInput height(start=H)=h if useHeightInput
          "Vertical distance between top and bottom connector"
                                                     annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              origin={-60,0})));
        parameter Modelica.SIunits.Density ro=1060; //liquid density
        parameter Boolean useExternalG = false
          "=true, if external gravity acceleration is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Types.Acceleration GravityAcceleration = 9.81
          "Gravity acceleration if useExternalG=false"
          annotation (Dialog(enable=not useExternalG));
         //Blood density = 1060 kg/m3: Cutnell, John & Johnson, Kenneth. Physics, Fourth Edition. Wiley, 1998: 308.
        Types.RealIO.AccelerationInput G(start=GravityAcceleration)=g if useExternalG
          "Gravity acceleration"                                                                           annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=90,
              origin={0,-100})));
        parameter Boolean usePumpEffect = false
          "=true, if musce pump effect is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        Types.RealIO.FractionInput
                              pumpEffect(start=PumpEffect)=pe if       usePumpEffect      annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={0,100})));
      protected
        parameter Types.Fraction PumpEffect = 1
          "Pump effect if usePumpEffect=false"
          annotation (Dialog(enable=not usePumpEffect));
      protected
        Types.Acceleration g;
        Types.Fraction pe;
        Types.Height h;
      equation
        if not useHeightInput then
          h=H;
        end if;
        if not useExternalG then
          g=GravityAcceleration;
        end if;
        if not usePumpEffect then
          pe = PumpEffect;
       end if;
        q_down.pressure = q_up.pressure + g*ro*h*pe;
        q_up.q + q_down.q = 0;
       annotation (
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>The hydrostatic pressure is proportional to height of the column.&nbsp;</p>
</html>"));
      end HydrostaticColumn;

      model Inertia "Inertia of the volumetric flow"
        extends SteadyStates.Interfaces.SteadyState(
                                           state_start=volumeFlow_start,
          storeUnit="ml/min");
        extends Interfaces.OnePort;
        extends Icons.Inertance;
        parameter Types.VolumeFlowRate volumeFlow_start=0.3
          "Volumetric flow start value"
           annotation (Dialog(group="Initialization"));                                                          //5 l/min is normal volumetric flow in aorta

        parameter Types.HydraulicInertance I "Inertance";

      equation
        state = q_in.q;      // I*der(q_in.q) = (q_in.pressure - q_out.pressure);
        change = (q_in.pressure - q_out.pressure)/I;
        annotation (                Documentation(info="<html>
<p>Inertance I of the simple tube could be calculated as I=ro*l/A, where ro is fuid density, l is tube length and A is tube cross-section area.</p>
</html>",   revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Inertia;

      model IdealValve
        extends Interfaces.OnePort;
         Boolean open(start=true) "Switching state";
         Real passableVariable(start=0, final unit="1")
          "Auxiliary variable for actual position on the ideal diode characteristic";
        /*  = 0: knee point
      < 0: below knee point, diode locking
      > 0: above knee point, diode conducting */
        parameter Types.HydraulicConductance _Gon(final min=0, displayUnit="l/(mmHg.min)") = 1.2501026264094e-02
          "Forward state-on conductance (open valve conductance)"
          annotation (Dialog(enable=not useLimitationInputs)); //= the same as resistance 1e-5 mmHg/(l/min)
        parameter Types.HydraulicConductance _Goff(final min=0, displayUnit="l/(mmHg.min)") = 1.2501026264094e-12
          "Backward state-off conductance (closed valve conductance)"
          annotation (Dialog(enable=not useLimitationInputs)); //= 1e-5 (l/min)/mmHg
        parameter Types.Pressure Pknee(final min=0) = 0
          "Forward threshold pressure";
        parameter Boolean useLimitationInputs = false
          "=true, if Gon and Goff are from inputs"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        Types.RealIO.HydraulicConductanceInput Gon(start=_Gon)=gon if useLimitationInputs
          "open valve conductance = infinity for ideal case" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-60,100})));
        Types.RealIO.HydraulicConductanceInput Goff(start=_Goff)=goff if useLimitationInputs
          "closed valve conductance = zero for ideal case" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,100})));
      protected
        Types.HydraulicConductance gon,goff;
        constant Types.Pressure unitPressure=1;
        constant Types.VolumeFlowRate unitFlow=1;
      equation
        if not useLimitationInputs then
          gon = _Gon;
          goff = _Goff;
        end if;
        open = passableVariable > Modelica.Constants.eps;
        dp = (passableVariable*unitFlow)*(if open then 1/gon else 1) + Pknee;
        volumeFlowRate = (passableVariable*unitPressure)*(if open then 1 else goff) + goff*Pknee;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                               graphics={Polygon(
                points={{-76,66},{-76,-82},{34,-10},{34,12},{-66,68},{-76,74},{
                    -76,66}},
                lineColor={0,0,127},
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid), Rectangle(
                extent={{40,96},{68,-94}},
                lineColor={0,0,127},
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-188,-96},{192,-118}},
                lineColor={255,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,85,85},
                textString="%name")}),
          Documentation(info="<html>
<p>Ideal Valve allows a volumetric flow in one direction in case of pressure gradient is greater. </p>
</html>",   revisions="<html>
<p><i>2014</i></p>
<p>Tomas Kulhanek, Charles University, Prague, Czech Republic </p>
</html>"));
      end IdealValve;

      model IdealValveResistance
        extends Physiolibrary.Hydraulic.Components.IdealValve(final _Gon=1/_Ron);
        parameter Physiolibrary.Types.HydraulicResistance _Ron = 79.993432449
          "forward state resistance";
      end IdealValveResistance;

      model Pump "Prescribed volumetric flow"
        extends Hydraulic.Interfaces.OnePort;
        extends Interfaces.ConditionalSolutionFlow;
      equation
        volumeFlowRate = q;
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,60}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,0,127},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-90},{150,-50}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague, Czech Republic</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
</table>
</html>",       info="<html>
<p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
</html>"));
      end Pump;

      model Reabsorption "Divide inflow to outflow and reabsorption"
        import Physiolibrary;
        extends Icons.Reabsorption;

        Hydraulic.Interfaces.HydraulicPort_a
                             Inflow                    annotation (Placement(
              transformation(extent={{-114,26},{-86,54}})));
        Hydraulic.Interfaces.HydraulicPort_b
                             Outflow
          annotation (Placement(transformation(extent={{86,26},{114,54}})));
        Hydraulic.Interfaces.HydraulicPort_b
                             Reabsorption                annotation (Placement(
              transformation(extent={{-14,-114},{14,-86}})));
        Types.RealIO.FractionInput FractReab
                                     annotation (Placement(transformation(extent={{-100,
                  -60},{-60,-20}})));
        parameter Boolean useExternalOutflowMin = false
          "=true, if minimal outflow is garanted"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Types.VolumeFlowRate OutflowMin = 0
          "Minimal outflow if useExternalOutflowMin=false"
          annotation (Dialog(enable=not useExternalOutflowMin));

        Types.RealIO.VolumeFlowRateInput outflowMin(start=OutflowMin) = om if useExternalOutflowMin
                                                             annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={40,80})));
      protected
         Types.VolumeFlowRate om;
      equation
        if not useExternalOutflowMin then
          om = OutflowMin;
        end if;
        Inflow.pressure = Outflow.pressure;
        0 = Inflow.q + Outflow.q + Reabsorption.q;
       // assert(Inflow.q>=-Modelica.Constants.eps,"Only one directional flow is supported!");
        Reabsorption.q = -max(0,FractReab*(Inflow.q-om));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                  {100,100}}),       graphics={Text(
                extent={{-100,130},{100,108}},
                lineColor={0,0,255},
                textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p><h4><font color=\"#008000\">Hydraulic Reabsorption</font></h4></p>
<p>If useOutflowMin=false then the next schema is used.</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorption.png\"/></li>
</ul></p>
<p><br/>If  useOutflowMin=true then the extended schema is used:</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorptionWithOutflowMin.png\"/></li>
</ul></p>
</html>"));
      end Reabsorption;

      model ElasticMembrane
        "Interaction between internal and external cavities"
       extends SteadyStates.Interfaces.SteadyState(
                                          state_start=volume_start, storeUnit=
            "ml");
       extends Icons.InternalElasticBalloon;
        Interfaces.HydraulicPort_a
                             q_int "Internal space"
          annotation (Placement(transformation(extent={{-94,-14},{-66,14}})));
        Interfaces.HydraulicPort_b
                             q_ext "External space" annotation (Placement(transformation(extent={{26,-14},
                  {54,14}})));
       parameter Types.HydraulicCompliance Compliance "Compliance";
       parameter Types.Volume zeroPressureVolume=0
          "Maximal volume, that does not generate pressure";
       parameter Types.Volume volume_start=0 "Volume start value"
           annotation (Dialog(group="Initialization"));
       Types.Volume volume;
       Types.Volume stressedVolume;

       parameter Types.Volume NominalVolume=1e-6
          "Scale numerical calculation from quadratic meter to miniliters.";
      equation
        q_int.q + q_ext.q = 0;
        q_int.pressure = (stressedVolume/Compliance) + q_ext.pressure;
        stressedVolume = max(volume-zeroPressureVolume,0);
        state = volume; // der(volume) =  q_int.q;
        change = q_int.q;
        // assert(volume>=-Modelica.Constants.eps,"Totally collapsed compartments are not supported!");
        annotation (        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end ElasticMembrane;

    end Components;

    package Sensors
      extends Modelica.Icons.SensorsPackage;
      model FlowMeasure "Volumetric flow between ports"
        extends Interfaces.OnePort;
        //extends Icons.FlowMeasure;
        extends Modelica.Icons.RotationalSensor;

        Types.RealIO.VolumeFlowRateOutput volumeFlow "Actual volume flow rate"
                               annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={0,-60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,120})));
      equation
        q_out.pressure = q_in.pressure;
        volumeFlow = q_in.q;
        annotation (
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),       Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                               graphics={
              Line(
                points={{-60,80},{80,80},{62,60}},
                color={0,0,255}),
              Line(
                points={{62,100},{80,80}},
                color={0,0,255}),
              Text(
                extent={{-25,-11},{34,-70}},
                lineColor={0,0,0},
                textString="V'")}));
      end FlowMeasure;

      model PressureMeasure "Hydraulic pressure at port"
        extends Icons.PressureMeasure;
        Interfaces.HydraulicPort_a
                             q_in annotation (Placement(
              transformation(extent={{-60,-80},{-20,-40}})));
        Types.RealIO.PressureOutput pressure "Pressure"
                               annotation (Placement(transformation(extent={{40,-60},
                  {80,-20}})));
      equation
        pressure = q_in.pressure;
        q_in.q = 0;
       annotation (
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end PressureMeasure;
    end Sensors;

    package Sources
      extends Modelica.Icons.SourcesPackage;
      model UnlimitedPump "Prescribed flow at port"
        extends Interfaces.ConditionalSolutionFlow;
        Interfaces.HydraulicPort_b
                             q_out
                               annotation (Placement(
              transformation(extent={{86,-14},{114,14}})));
      equation
        q_out.q = - q;
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-94},{150,-54}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague, Czech Republic</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
</table>
</html>",       info="<html>
<p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
</html>"));
      end UnlimitedPump;

        model UnlimitedVolume "Prescribed pressure at port"
          parameter Boolean usePressureInput = false
          "=true, if pressure input is used"
            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

          parameter Types.Pressure P=0
          "Hydraulic pressure if usePressureInput=false"
            annotation (Dialog(enable=not usePressureInput));

          Types.RealIO.PressureInput pressure(start=P)=p if usePressureInput
          "Pressure"
            annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
          Interfaces.HydraulicPort_a
                               y "PressureFlow output connectors"
            annotation (Placement(transformation(extent={{84,-16},{116,16}})));
         parameter Boolean isIsolatedInSteadyState = true
          "=true, if there is no flow at port in steady state"
            annotation (Dialog(group="Simulation",tab="Equilibrium"));
         parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "If in equilibrium, then zero-flow equation is added."
            annotation (Dialog(group="Simulation",tab="Equilibrium"));
      protected
          Types.Pressure p;
        initial equation
          if isIsolatedInSteadyState and (Simulation==Types.SimulationType.InitSteadyState) then
            y.q = 0;
          end if;
        equation
          if not usePressureInput then
            p=P;
          end if;
          y.pressure = p;
          if isIsolatedInSteadyState and (Simulation==Types.SimulationType.SteadyState) then
             y.q = 0;
          end if;
          annotation (Documentation(info="<html>
<p>Model has a vector of continuous Real input signals as pressures for vector of pressure-flow connectors. </p>
<p>Usage in tests: Set defaul volume&GT;0 and try to set STEADY in instances to &QUOT;false&QUOT;!</p>
</html>",  revisions=
             "<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),  Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}),
                            graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillColor={170,255,255},
                fillPattern=FillPattern.Backward),
                Text(
                  extent={{0,0},{-100,-100}},
                  lineColor={0,0,0},
                textString="P"),
                Line(
                  points={{-100,0},{56,0}},
                  color={191,0,0},
                  thickness=0.5),
                Polygon(
                  points={{38,-20},{38,20},{78,0},{38,-20}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-150,150},{150,110}},
                  textString="%name",
                  lineColor={0,0,255})}));
        end UnlimitedVolume;

      model UnlimitedOutflowPump "Prescribed flow at port"
        extends Interfaces.ConditionalSolutionFlow;
        Interfaces.HydraulicPort_a q_in annotation (Placement(transformation(extent={{
                  -114,-14},{-86,14}}), iconTransformation(extent={{-114,-14},{-86,14}})));
      equation
        q_in.q = q;
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-94},{150,-54}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague, Czech Republic</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
</table>
</html>",       info="<html>
<p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
</html>"));
      end UnlimitedOutflowPump;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;
      connector HydraulicPort
        "Hydraulical connector with pressure and volumetric flow"
        Types.Pressure pressure "Pressure";
        flow Types.VolumeFlowRate q "Volume flow";
        annotation (Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague, Czech Republic</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009-2013</td>
</tr>
</table>
</html>", info="<html>
<p><font style=\"font-size: 9pt; \">This connector connects hydraulic domains elements. The elements contains one equation for each his pressure-flow connector. The equation defines relation between variables in the connector. Variables are hydraulic pressure and volume flow of hydraulic medium. The pressure is the same in each connector that are connected together. The sum of flow in connectors connected together is zero (</font><b><font style=\"font-size: 9pt; \">Kirchhoff&apos;s circuit laws</font></b><font style=\"font-size: 9pt; \">).</font> </p>
</html>"));
      end HydraulicPort;

      connector HydraulicPort_a "Hydraulical inflow connector"
        extends HydraulicPort;
      annotation (
          defaultComponentName="port_a",
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={0,0,0},
                lineThickness=1), Polygon(
                points={{-1.22465e-014,100},{100,1.22465e-014},{1.22465e-014,-100},
                    {-100,-1.22465e-014},{-1.22465e-014,100}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,0},
                rotation=180)}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Polygon(
                points={{0,50},{50,0},{0,-50},{-50,0},{0,50}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,0}),Text(extent={{-112,118},{88,58}},   lineColor = {0,0,0}, textString = "%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end HydraulicPort_a;

      connector HydraulicPort_b "Hydraulical outflow connector"
        extends HydraulicPort;
      annotation (
          defaultComponentName="port_b",
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={0,0,0},
                lineThickness=1), Polygon(
                points={{0,100},{100,0},{0,-100},{-100,0},{0,100}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Solid,
                fillColor={200,200,200})}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Polygon(
                points={{0,50},{50,0},{0,-50},{-50,0},{0,50}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Solid,
                fillColor={200,200,200}),Text(extent = {{-160,110},{40,50}}, lineColor = {0,0,0}, textString = "%name")}));
      end HydraulicPort_b;

      partial model OnePort "Hydraulical OnePort"
        HydraulicPort_a      q_in "Volume inflow" annotation (Placement(
              transformation(extent={{-114,-14},{-86,14}})));
        HydraulicPort_b      q_out "Volume outflow"
                               annotation (Placement(
              transformation(extent={{86,-14},{114,14}})));
         Types.VolumeFlowRate volumeFlowRate "Volumetric flow";
         Types.Pressure dp "Pressure gradient";
      equation
        q_in.q + q_out.q = 0;
        volumeFlowRate = q_in.q;
        dp = q_in.pressure - q_out.pressure;
      end OnePort;

      partial model ConditionalSolutionFlow
        "Input of solution volumetric flow vs. parametric solution volumetric flow"

        parameter Boolean useSolutionFlowInput = false
          "=true, if solution flow input is used instead of parameter SolutionFlow"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.VolumeFlowRate SolutionFlow=0
          "Volumetric flow of solution if useSolutionFlowInput=false"
          annotation ( HideResult=not useSolutionFlowInput, Dialog(enable=not useSolutionFlowInput));

        Types.RealIO.VolumeFlowRateInput solutionFlow(start=SolutionFlow)=q if useSolutionFlowInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,70})));

        Types.VolumeFlowRate q "Current solution flow";
      equation
        if not useSolutionFlowInput then
          q = SolutionFlow;
        end if;

      end ConditionalSolutionFlow;
    end Interfaces;
    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>The main usage of the hydraulic domain in human physiology is modeling of the cardio-vascular system. And because there are no extreme thermodynamic conditions, the system can be really simple &mdash;it is only necessary to model conditions for incompressible water, at normal liquid-water temperatures and with relative pressure 5-20kPa. This boring thermodynamic state leads to the very simple blocks of hydraulic resistance, hydrostatic pressure, volumetric flow, inertia and finally the block of blood accumulation in elastic vessels.</p>
</html>"));
  end Hydraulic;

  package Thermal
    "Domain with Temperature and Heat Flow - extension of Modelica.Thermal.HeatTransfer"
   extends Modelica.Icons.Package;
    package Examples
      "Examples that demonstrate usage of the Pressure flow components"
    extends Modelica.Icons.ExamplesPackage;

      model SkinHeatFlow
      extends Modelica.Icons.Example;

        Components.IdealRadiator skinCirculation(MassFlow(displayUnit="g/min")=
            0.0028333333333333) "Blood flow through skin"
          annotation (Placement(transformation(extent={{16,-32},{36,-12}})));
        Sources.UnlimitedHeat bodyCore(T(displayUnit="degC") = 310.15)
          annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
        Sources.UnlimitedHeat skin(T(displayUnit="degC") = 301.15)
          annotation (Placement(transformation(extent={{-8,4},{12,24}})));
      equation
        connect(skinCirculation.q_in, bodyCore.port) annotation (Line(
            points={{16,-20},{0,-20}},
            color={191,0,0},
            thickness=1));
        connect(skin.port, skinCirculation.q_out) annotation (Line(
            points={{12,14},{26,14},{26,-12}},
            color={191,0,0},
            thickness=1));
        annotation (        experiment(StopTime=10000, Tolerance=1e-006),
            Documentation(revisions=
                          "<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SkinHeatFlow;

      model MuscleHeat
      extends Modelica.Icons.Example;

        Components.HeatAccumulation
                         muscle(
          relativeHeat_start=52125.66,
          SpecificHeat=3475.044,
          Weight(displayUnit="kg") = 15)
          annotation (Placement(transformation(extent={{16,22},{36,42}})));
        Components.IdealRadiator
                      muscleCirculation(MassFlow(displayUnit="g/min") = 0.0114)
          "Blood circulation in skeletal muscle"
          annotation (Placement(transformation(extent={{16,-32},{36,-12}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow generatedHeat(Q_flow=13.956)
          "Heat energy created by muscle"
          annotation (Placement(transformation(extent={{-32,20},{-12,40}})));
        Sources.UnlimitedHeat                                  body(T(displayUnit="degC")=
               310.15)
          annotation (Placement(transformation(extent={{-32,-30},{-12,-10}})));
      equation
        connect(muscle.q_in, generatedHeat.port)
                                              annotation (Line(
            points={{26,32},{8,32},{8,30},{-12,30}},
            color={191,0,0},
            thickness=1));
        connect(muscleCirculation.q_in, body.port) annotation (Line(
            points={{16,-20},{-12,-20}},
            color={191,0,0},
            thickness=1));
        connect(muscle.q_in, muscleCirculation.q_out) annotation (Line(
            points={{26,32},{26,-12}},
            color={191,0,0},
            thickness=1));
        annotation (        experiment(StopTime=10000, Tolerance=1e-006),
            Documentation(revisions=
                          "<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end MuscleHeat;

      model ThermalBody_QHP
        import Physiolibrary;
        extends Modelica.Icons.Example;
        Thermal.Components.HeatAccumulation
                          core(SpecificHeat=3475.044, Weight=10.75)
          annotation (Placement(transformation(extent={{-12,-4},{8,16}})));
        Thermal.Components.HeatAccumulation
                          GILumen(Weight=1)
          annotation (Placement(transformation(extent={{40,-52},{60,-32}})));
        Thermal.Components.HeatAccumulation
                          skeletalMuscle(SpecificHeat=3475.044, Weight=7.05)
          annotation (Placement(transformation(extent={{36,42},{56,62}})));
        Thermal.Components.IdealRadiator
                      muscleBloodFlow(
          MassFlow(displayUnit="g/min") = 0.0114,
          useMassFlowInput=false,
          SpecificHeat=3851.856)      annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              origin={32,30})));
        Thermal.Sources.MassOutflow urination
          annotation (Placement(transformation(extent={{-28,-60},{-48,-40}})));
        Thermal.Sources.MassOutflow lungsVapor(
          VaporizationHeat(displayUnit="kcal/g") = 2428344,
          SpecificHeat(displayUnit="kcal/(kg.K)"),
          MassFlow(displayUnit="g/min") = 4.6666666666667e-06)
          annotation (Placement(transformation(extent={{12,66},{32,86}})));
        Thermal.Components.HeatAccumulation
                          skin(
          relativeHeat_start=-8373.6,
          SpecificHeat=3475.044,
          Weight=0.56)
          annotation (Placement(transformation(extent={{-68,4},{-48,24}})));
        Thermal.Components.IdealRadiator
                      skinBloodFlow(
          MassFlow(displayUnit="g/min") = 0.0028333333333333,
          useMassFlowInput=false,
          SpecificHeat=3851.856)    annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              origin={-28,2})));
        Thermal.Sources.MassOutflow insensibleVapor(
          VaporizationHeat(displayUnit="kcal/g") = 2428344,
          SpecificHeat(displayUnit="kcal/(kg.K)"),
          MassFlow(displayUnit="g/min") = 6.5e-06)
          annotation (Placement(transformation(extent={{-48,32},{-28,52}})));
        Thermal.Sources.MassOutflow sweating(VaporizationHeat(
              displayUnit="kcal/g") = 2428344, SpecificHeat(displayUnit=
                "kcal/(kg.K)"))
          annotation (Placement(transformation(extent={{-44,58},{-24,78}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalConductor lumenVolume(G(
              displayUnit="kcal/(min.K)") = 1)
          annotation (Placement(transformation(extent={{32,-60},{12,-40}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalConductor air(G(
              displayUnit="kcal/(min.K)") = 2.4423)                   annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-76,50})));
        Thermal.Sources.UnlimitedHeat            ambient(T=295.15)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-76,84})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow skinMetabolicHeat(Q_flow=
              1.95384)
          annotation (Placement(transformation(extent={{-92,2},{-72,22}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow coreMetabolicHeat(Q_flow=
              55.824)
          annotation (Placement(transformation(extent={{86,-6},{66,14}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow muscleMetabolicHeat(Q_flow(
              displayUnit="kcal/min") = 9.7692)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,60})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow foodHeatIntake(Q_flow=0)
                                                                       annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,-38})));
        Thermal.Components.Stream
                   foodAbsorption(SpecificHeat=4186.8)
          annotation (Placement(transformation(extent={{44,-32},{24,-12}})));
      equation

        connect(core.q_in, muscleBloodFlow.q_in) annotation (Line(
            points={{-2,6},{-2,32},{22,32}},
            color={191,0,0},
            thickness=1));
        connect(skeletalMuscle.q_in, muscleBloodFlow.q_out) annotation (Line(
            points={{46,52},{32,52},{32,40}},
            color={191,0,0},
            thickness=1));
        connect(core.q_in, urination.q_in) annotation (Line(
            points={{-2,6},{-6,6},{-6,-50},{-28,-50}},
            color={191,0,0},
            thickness=1));
        connect(core.q_in, lungsVapor.q_in) annotation (Line(
            points={{-2,6},{-2,76},{12,76}},
            color={191,0,0},
            thickness=1));
        connect(skinBloodFlow.q_in, lungsVapor.q_in) annotation (Line(
            points={{-18,4},{-2,4},{-2,76},{12,76}},
            color={191,0,0},
            thickness=1));
        connect(skin.q_in, skinBloodFlow.q_out) annotation (Line(
            points={{-58,14},{-28,14},{-28,12}},
            color={191,0,0},
            thickness=1));
        connect(skin.q_in, insensibleVapor.q_in) annotation (Line(
            points={{-58,14},{-58,42},{-48,42}},
            color={191,0,0},
            thickness=1));
        connect(sweating.q_in, insensibleVapor.q_in) annotation (Line(
            points={{-44,68},{-58,68},{-58,42},{-48,42}},
            color={191,0,0},
            thickness=1));
        connect(GILumen.q_in, lumenVolume.port_a) annotation (Line(
            points={{50,-42},{40,-42},{40,-50},{32,-50}},
            color={191,0,0},
            thickness=1));
        connect(core.q_in, lumenVolume.port_b) annotation (Line(
            points={{-2,6},{2,6},{2,-50},{12,-50}},
            color={191,0,0},
            thickness=1));
        connect(skin.q_in, air.port_b) annotation (Line(
            points={{-58,14},{-58,30},{-76,30},{-76,40}},
            color={191,0,0},
            thickness=1));
        connect(skin.q_in, skinMetabolicHeat.port)
                                                annotation (Line(
            points={{-58,14},{-66,14},{-66,12},{-72,12}},
            color={191,0,0},
            thickness=1));
        connect(GILumen.q_in, foodHeatIntake.port)
                                               annotation (Line(
            points={{50,-42},{60,-42},{60,-38},{68,-38}},
            color={191,0,0},
            thickness=1));
        connect(skeletalMuscle.q_in, muscleMetabolicHeat.port)
                                                            annotation (Line(
            points={{46,52},{58,52},{58,60},{68,60}},
            color={191,0,0},
            thickness=1));
        connect(core.q_in, coreMetabolicHeat.port)
                                                annotation (Line(
            points={{-2,6},{32,6},{32,4},{66,4}},
            color={191,0,0},
            thickness=1));
        connect(skinBloodFlow.q_in, core.q_in) annotation (Line(
            points={{-18,4},{-12,4},{-12,6},{-2,6}},
            color={191,0,0},
            thickness=1));
        connect(GILumen.q_in,foodAbsorption. q_in)
                                               annotation (Line(
            points={{50,-42},{50,-22},{44,-22}},
            color={191,0,0},
            thickness=1));
        connect(foodAbsorption.q_out, core.q_in)
                                             annotation (Line(
            points={{24,-22},{2,-22},{2,6},{-2,6}},
            color={191,0,0},
            thickness=1));
        connect(ambient.port, air.port_a) annotation (Line(
            points={{-76,74},{-76,60}},
            color={191,0,0},
            thickness=1));
        annotation ( Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=3600));
      end ThermalBody_QHP;

      model SkinHeatTransferOnBloodFlow
      extends Modelica.Icons.Example;

        Components.IdealRadiator skinCirculation(MassFlow(displayUnit="g/min")=
            0.0028333333333333) "Blood circulation through skin"
          annotation (Placement(transformation(extent={{16,-32},{36,-12}})));
        Sources.UnlimitedHeat                                  core(T(displayUnit="degC")=
               310.15)
          annotation (Placement(transformation(extent={{-32,-30},{-12,-10}})));
        Sources.UnlimitedHeat skin(T(displayUnit="degC") = 301.15)
          annotation (Placement(transformation(extent={{-12,2},{8,22}})));
      equation
        connect(skinCirculation.q_in, core.port) annotation (Line(
            points={{16,-20},{-12,-20}},
            color={191,0,0},
            thickness=1));
        connect(skin.port, skinCirculation.q_out) annotation (Line(
            points={{8,12},{26,12},{26,-12}},
            color={191,0,0},
            thickness=1));
        annotation (        experiment(StopTime=10000, Tolerance=1e-006),
            Documentation(revisions=
                          "<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>This flow rate can affect how much heat leaves the body, especially in cold conditions. This is shown in this model, where modeling constant temperatures of the body core (37&deg;C) and skin (28&deg;C), with a skin blood flow of 170 g/min and blood specific heat of 0.92 kcal/(kg.K), gives heat losses of about 1.4 kcal/min.</p>
</html>"));
      end SkinHeatTransferOnBloodFlow;
    end Examples;

    package Components
      extends Modelica.Icons.Package;

      model HeatAccumulation "Accumulating of heat to substance"
        extends Icons.HeatAccumulation;
        extends SteadyStates.Interfaces.SteadyState(
                                           state_start=relativeHeat_start, storeUnit=
            "kcal");
        Interfaces.HeatPort_b
                         q_in "Heat inflow/outflow connector"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

        parameter Types.Heat relativeHeat_start = 0
          "Heat start value = weight*(initialTemperature - 37degC)*specificHeat"
           annotation (Dialog(group="Initialization"));

        parameter Types.SpecificHeatCapacity SpecificHeat= 4186.8
          "Mass specific heat";
        Types.Temperature T "Current temperature";

        Types.RealIO.HeatOutput relativeHeat
          "Current accumulated heat = weight*(T - 37degC)*specificHeat"
                                                                    annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));                                           //nominal=1
       //absoluteHeat =  weight*310.15*specificHeat + relativeHeat

        constant Types.Temperature NormalBodyTemperature = 310.15
          "Shift of absolute zero temperature to normal body values";

        parameter Boolean useMassInput = false "=true, if mass input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Mass Weight=1 "Total mass weight if useMassInput=false"
          annotation (Dialog(enable=not useMassInput));
        Types.RealIO.MassInput weight(start=Weight)=m if useMassInput
          "Weight of mass, where the heat are accumulated"                            annotation (Placement(transformation(extent={{-120,60},
                  {-80,100}})));
      protected
        Types.Mass m;

      equation
        if not useMassInput then
          m=Weight;
        end if;

        q_in.T=NormalBodyTemperature + relativeHeat/(m*SpecificHeat);
        T = q_in.T;

        state = relativeHeat;  // der(relativeHeat)=q_in.q
        change = q_in.Q_flow;
        annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>The &QUOT;HeatAccumulation&QUOT; library class models heat accumulation in Physiolibrary. This class has one thermal connector with temperature and heat flow. Heat energy is accumulated inside the class, stored in the variable &QUOT;relativeHeat&QUOT;. This value is relative to normal body temperature of 37 &deg;C; a positive value therefore indicates an internal temperature above 37 &deg;C, while a negative value indicates temperature below 37 &deg;C. Of course the particular value of temperature depends on the mass and specific heat of the instance.</p>
</html>"),Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}),
               graphics={
              Text(
                extent={{-80,100},{220,140}},
                textString="%name",
                lineColor={0,0,255})}));
      end HeatAccumulation;

      model IdealRadiator
        "Closed circiut radiator, where outflowed = ambient temperature"
        extends Interfaces.ConditionalMassFlow;
        extends Icons.Radiator;

        parameter Types.SpecificHeatCapacity SpecificHeat=3851.856
          "Specific heat of flow circuit medium";  //default heat capacity of blood is used as 0.92 kcal/(degC.kg)

        Thermal.Interfaces.HeatPort_a
                         q_in annotation (Placement(
              transformation(extent={{-110,10},{-90,30}})));
        Thermal.Interfaces.HeatPort_b
                         q_out annotation (Placement(
              transformation(extent={{-10,90},{10,110}})));
      equation
        q_in.Q_flow + q_out.Q_flow = 0;
      //  assert(substanceFlow>=-Modelica.Constants.eps,"In IdealRadiator must be always the forward flow direction! Not 'substanceFlow<0'!");
        q_in.Q_flow = q*(q_in.T-q_out.T)*SpecificHeat;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={
              Text(
                extent={{-144,-142},{156,-102}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p>This class has two thermal connectors &ndash; one for liquid inside the radiator and another for the material around the radiator. Note that there is no liquid flow inside these connectors. The liquid flow can be described by a parameter or input to the instance. Together with the liquid specific heat, this flow determines the amount of heat flux from the liquid to a surrounding environment of different temperature. The calculation fulfills the ideal condition of microcirculation, where the outflowing blood has the same temperature as a tissue. This is really useful for modeling body thermal transfers, because the transfer of heat with blood flow is more significant than the typical rate of conduction through solid mass.&nbsp;</p>
<p><br>The real inflow to radiator can be described by substanceFlow and temperature q_in.T.</p>
<p><b>q_in.q=q_out.q is not the heat inflow to Radiator input</b>, but the heat convected from radiator to environment!</p>
<p>The environment temperature is the same as radiator output temperature q_out.T. </p>
<p>And the flow of heat from radiator to environment is driven by Fick principle.</p>
</html>"));
      end IdealRadiator;

      model Conductor "Heat resistor"
       extends Interfaces.OnePort;
       extends Icons.Resistor;

        parameter Boolean useConductanceInput = false
          "=true, if external conductance value is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.ThermalConductance Conductance=0
          "Thermal conductance if useConductanceInput=false"
          annotation (Dialog(enable=not useConductanceInput));

        Types.RealIO.ThermalConductanceInput conductance(start=Conductance)=c if useConductanceInput
                                                         annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40})));

      protected
         Types.ThermalConductance c;
      equation
        if not useConductanceInput then
          c=Conductance;
        end if;

        q_in.Q_flow = c * (q_in.T - q_out.T);
        annotation (Icon(graphics={Text(
                extent={{-70,-30},{70,30}},
                textString="%name",
                lineColor={0,0,255})}), Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Conductor;

      model Stream "Flow of whole heated mass"
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalMassFlow;

        parameter Types.SpecificHeatCapacity SpecificHeat
          "Of flow circuit medium";

      equation
        q_in.Q_flow = if (q>0) then q*q_in.T*SpecificHeat else q*q_out.T*SpecificHeat;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={191,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{20,-84},{320,-44}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p><h4><font color=\"#008000\">Bidirectional heated mass flow by temperature</font></h4></p>
<p>Possible field values: </p>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0.1\"><tr>
<td></td>
<td><p align=\"center\"><h4>forward flow</h4></p></td>
<td><p align=\"center\"><h4>backward flow</h4></p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>massFlow</h4></p></td>
<td><p align=\"center\">&GT;=0</p></td>
<td><p align=\"center\">&LT;=0</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_in.q</h4></p></td>
<td><p align=\"center\">=massFlow*q_in.T*SpecificHeat</p></td>
<td><p align=\"center\">=-q_out.q</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_out.q</h4></p></td>
<td><p align=\"center\">=-q_in.q</p></td>
<td><p align=\"center\">=massFlow*q_out.T*SpecificHeat</p></td>
</tr>
</table>
<br/>
</html>"));
      end Stream;

    end Components;

    package Sources
      extends Modelica.Icons.SourcesPackage;
      model UnlimitedHeat "Prescribed temperature"
        //extends Modelica.Thermal.HeatTransfer.Sources.FixedTemperature;

        parameter Boolean useTemperatureInput = false
          "=true, if fixed temperature is from input instead of parameter"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Types.Temperature T = 0
          "Fixed temperature at port if useTemperatureInput=false"
          annotation (Dialog(enable=not useTemperatureInput));

        parameter Boolean isIsolatedInSteadyState = false
          "=true, if there is no flow at port in steady state"
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "If in equilibrium, then zero-flow equation is added."
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

        Interfaces.HeatPort_b       port annotation (Placement(transformation(extent={{90,-10},
                  {110,10}})));

      protected
        Types.Temperature t "Current temperature";
      public
        Types.RealIO.TemperatureInput temperature(start=T)= t if useTemperatureInput
          annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

      initial equation
        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.InitSteadyState) then
          port.Q_flow = 0;
        end if;

      equation
        if not useTemperatureInput then
          t=T;
        end if;

        port.T = t;

        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.SteadyState) then
            port.Q_flow = 0;
        end if;

         annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={
              Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{-150,-110},{150,-140}},
                lineColor={0,0,0},
                textString="T=%T"),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillColor={159,159,223},
                fillPattern=FillPattern.Backward),
              Text(
                extent={{0,0},{-100,-100}},
                lineColor={0,0,0},
                textString="K"),
              Line(
                points={{-52,0},{56,0}},
                color={191,0,0},
                thickness=0.5),
              Polygon(
                points={{50,-20},{50,20},{90,0},{50,-20}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<HTML>
<p>
This model defines a fixed temperature T at its port in Kelvin,
i.e., it defines a fixed temperature as a boundary condition.
</p>
</HTML>
",       revisions=
               "<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end UnlimitedHeat;

      model MassOutflow
        "One-directional outflow of heated mass with enthalpy (vaporization heat)"
        extends Interfaces.ConditionalMassFlow;

        Interfaces.HeatPort_a
                         q_in "flow circuit"     annotation (Placement(
              transformation(extent={{-110,-10},{-90,10}})));
        parameter Types.SpecificEnergy VaporizationHeat=0
          "Used for whole outflow stream";                                            // or 2428344 for water vaporization
        parameter Types.SpecificHeatCapacity SpecificHeat=4186.8
          "Of outflowing medium";  //default heat capacity of water is 1 kcal/(degC.kg)

      equation
      //  assert(liquidOutflow_>=-Modelica.Constants.eps,"HeatOutstream must have always one forward flow direction! Not 'liquidOutflow_<0'!");
        q_in.Q_flow = q*(q_in.T*SpecificHeat + VaporizationHeat);

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                              graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={191,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{20,-84},{320,-44}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end MassOutflow;

      model MassInflow
        "One-directional inflow of heated mass with enthalpy (heat of solvation)"
        extends Interfaces.ConditionalMassFlow;
        extends Interfaces.ConditionalTemperature;

        Interfaces.HeatPort_b
                         q_out "flow circuit"     annotation (Placement(
              transformation(extent={{90,-10},{110,10}}), iconTransformation(
                extent={{90,-10},{110,10}})));
        parameter Types.SpecificEnergy dH=0
          "Enthalpy of incoming substance (i.e. enthalpy of solvation)";                                            // or 2428344 for water vaporization
        parameter Types.SpecificHeatCapacity SpecificHeat=4186.8
          "Of inflowing medium";  //default heat capacity of water is 1 kcal/(degC.kg)

      equation
      //  assert(liquidOutflow_>=-Modelica.Constants.eps,"HeatOutstream must have always one forward flow direction! Not 'liquidOutflow_<0'!");
        q_out.Q_flow = - q*(temperature*SpecificHeat + dH);

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={191,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{20,-84},{320,-44}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end MassInflow;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;

      connector HeatPort = Modelica.Thermal.HeatTransfer.Interfaces.HeatPort(T(displayUnit="degC"),Q_flow(displayUnit="kcal/min", nominal=4186.8/60));
      connector HeatPort_a "Heat inflow"
        extends HeatPort;

        annotation (
          defaultComponentName="port_a",
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={191,0,0},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid)}),
          Diagram(graphics={
                        Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
         Text(extent={{-160,110},{40,50}},   lineColor=  {191,0,0}, textString=  "%name")}));
      end HeatPort_a;

      connector HeatPort_b "Heat outflow"
        extends HeatPort;

      annotation (
          defaultComponentName="port_b",
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={191,0,0},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={191,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(graphics={
                        Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={191,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
         Text(extent={{-160,110},{40,50}},   lineColor=  {191,0,0}, textString=  "%name")}));

      end HeatPort_b;

      partial model OnePort "Heat OnePort"

        HeatPort_a       q_in annotation (Placement(
              transformation(extent={{-110,-10},{-90,10}})));
        HeatPort_b       q_out annotation (Placement(
              transformation(extent={{90,-10},{110,10}})));
      equation
        q_in.Q_flow + q_out.Q_flow = 0;
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end OnePort;

      partial model ConditionalMassFlow
        "Input of mass flow vs. parametric mass flow"

        parameter Boolean useMassFlowInput = false
          "=true, if mass flow input is used instead of parameter MassFlow"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.MassFlowRate MassFlow=0
          "Mass flow if useMassFlowInput=false"
          annotation (Dialog(enable=not useMassFlowInput));

        Types.RealIO.MassFlowRateInput massFlow(start=MassFlow)=q if useMassFlowInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,70})));

        Types.MassFlowRate q "Current mass flow";
      equation
        if not useMassFlowInput then
          q = MassFlow;
        end if;

      end ConditionalMassFlow;

      partial model ConditionalTemperature
        "Input of temperature vs. parametric temperature"

        parameter Boolean useTemperatureInput = false
          "=true, if temperature input is used instead of parameter T"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Temperature T=0
          "Temperature if useTemperatureInput=false"
          annotation (Dialog(enable=not useTemperatureInput));

        Types.RealIO.TemperatureInput t(start=T)=temperature if useTemperatureInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,70}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,70})));

        Types.Temperature temperature "Current temperature";
      equation
        if not useTemperatureInput then
          temperature = T;
        end if;

      end ConditionalTemperature;
    end Interfaces;
    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>For the human body to function optimally, it is critical to hold the core temperature at 35&ndash;39&deg;C. A fever of 41&deg;C for more than a short period of time causes brain damage. If the core temperature falls below 10&deg;C, the heart stops. As in the hydraulic domain, the thermal domain is simplified to these conditions. </p>
<p>In the Thermal package extends the package Modelica.Thermal.HeatTransfer from Modelica Standard Library 3.2 (MSL), where the connector is composed of temperature and heat flow. The main blocks in Thermal are: Conductor, IdealRadiator and HeatAccumulation. The heat conductor conducts the heat from the source, such us muscles or metabolically active tissue, to its surrounding. IdealRadiator delivers heat to tissues by blood circulation. HeatAccumulation plays a role in accumulating thermal energy in each tissue mass driven by its heat capacity. We recommend to use this block instead of Modelica.Thermal.HeatTransfer.HeatCapacitor to have possibility of variable mass amount or to have a support for calculation of steady state. </p>
</html>"));
  end Thermal;

  package Population
    "Domain for populatiom models for cells, viruses, bacterias, tissues, organism etc."
    extends Modelica.Icons.Package;
    package Examples "Examples that demonstrate usage of the Population models"
       extends Modelica.Icons.ExamplesPackage;

      model PredatorPrey "Lotka–Volterra equations"
        extends Modelica.Icons.Example;

        Components.Population predator(population_start=2)
          annotation (Placement(transformation(extent={{-8,42},{12,62}})));
        Components.Reproduction reproduction2(useChangePerMemberInput=true)
          annotation (Placement(transformation(extent={{-52,42},{-32,62}})));
        Components.Mortality mortality2(LifeTime(displayUnit="s") = 1)
          annotation (Placement(transformation(extent={{34,42},{54,62}})));
        Components.Reproduction reproduction1(LifeTime(displayUnit="s") = 1)
          annotation (Placement(transformation(extent={{-56,-40},{-36,-20}})));
        Components.Mortality mortality1(useChangePerMemberInput=true)
          annotation (Placement(transformation(extent={{32,-40},{52,-20}})));
        Components.Population prey(population_start=1)
          annotation (Placement(transformation(extent={{-12,-40},{8,-20}})));
        Types.Constants.PopulationChangePerMemberConst
                                              preyMortality(LifeTime(displayUnit=
                "s") = 1)
          annotation (Placement(transformation(extent={{28,-4},{36,4}})));
        Blocks.Factors.Normalization predatorEffect
          annotation (Placement(transformation(extent={{52,-24},{32,-4}})));
        Types.Constants.PopulationChangePerMemberConst
                                              predatorReproduction(LifeTime(
              displayUnit="s") = 1)
          annotation (Placement(transformation(extent={{-56,80},{-48,88}})));
        Blocks.Factors.Normalization preyEffekt
          annotation (Placement(transformation(extent={{-52,60},{-32,80}})));
      equation
        connect(preyMortality.y, predatorEffect.yBase) annotation (Line(
            points={{37,0},{42,0},{42,-12}},
            color={0,0,127}));
        connect(predator.population, predatorEffect.u) annotation (Line(
            points={{8,42},{8,20},{56,20},{56,-14},{50,-14}},
            color={0,0,127}));
        connect(predatorReproduction.y, preyEffekt.yBase) annotation (Line(
            points={{-47,84},{-42,84},{-42,72}},
            color={0,0,127}));
        connect(prey.population, preyEffekt.u) annotation (Line(
            points={{4,-40},{4,-48},{-66,-48},{-66,70},{-50,70}},
            color={0,0,127}));
        connect(reproduction2.port_b, predator.port) annotation (Line(
            points={{-32,52},{2,52}},
            color={0,127,127},
            thickness=1));
        connect(predator.port, mortality2.port_a) annotation (Line(
            points={{2,52},{34.2,52}},
            color={0,127,127},
            thickness=1));
        connect(reproduction1.port_b, prey.port) annotation (Line(
            points={{-36,-30},{-2,-30}},
            color={0,127,127},
            thickness=1));
        connect(prey.port, mortality1.port_a) annotation (Line(
            points={{-2,-30},{32.2,-30}},
            color={0,127,127},
            thickness=1));
        connect(preyEffekt.y, reproduction2.changePerMember) annotation (Line(
            points={{-42,66},{-42,56}},
            color={0,0,127}));
        connect(predatorEffect.y, mortality1.changePerMember) annotation (Line(
            points={{42,-18},{42,-26}},
            color={0,0,127}));
        annotation (
          experiment(StopTime=20),
          __Dymola_experimentSetupOutput(equdistant=false));
      end PredatorPrey;
    end Examples;

    package Components
      extends Modelica.Icons.Package;
      model Population
        extends Icons.Population;
        extends SteadyStates.Interfaces.SteadyState(
        state(nominal=NominalPopulation),
        change(nominal=NominalPopulationChange),
        state_start=population_start,
        storeUnit="1");

        parameter Types.Population population_start(nominal=NominalPopulation) = 1e-8
          "Initial population size in compartment"
           annotation ( HideResult=true, Dialog(group="Initialization"));

        parameter Types.Population NominalPopulation = 1
          "Numerical scale. Default is 1, but for huge amount of cells it should be any number in the appropriate numerical order of typical amount."
            annotation ( HideResult=true, Dialog(tab="Solver",group="Numerical support of very huge populations"));
        parameter Types.PopulationChange NominalPopulationChange = 1/(60*60*24)
          "Numerical scale. Default change is 1 individual per day, but for much faster or much slower chnages should be different."
            annotation ( HideResult=true, Dialog(tab="Solver",group="Numerical support of very fast or very slow changes"));

        Interfaces.PopulationPort_b port(population(nominal=NominalPopulation),change(nominal=NominalPopulationChange)) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}}), iconTransformation(extent={{-10,-10},{10,
                  10}})));

        Types.RealIO.PopulationOutput population(nominal=NominalPopulation) annotation (Placement(transformation(
                extent={{46,-102},{66,-82}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));
      equation
        port.population = population;

        state = population; //der(population) = port.change;
        change = port.change;
        annotation (Icon(graphics={
                        Text(
                extent={{-112,100},{248,140}},
                lineColor={0,0,255},
                textString="%name")}), Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Population;

      model Reproduction "As population change per one individual"
         extends Interfaces.ConditionalLifeTime;
        Interfaces.PopulationPort_b port_b annotation (Placement(transformation(
                extent={{90,-10},{110,10}}), iconTransformation(extent={{90,-10},{110,
                  10}})));
      equation
        port_b.change = - changePerPopulationMember * port_b.population;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,-52},{100,48}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,23},{80,-2},{-80,-27},{-80,23}},
                lineColor={0,127,127},
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-78},
                rotation=360,
                textString="%name")}));
      end Reproduction;

      model Mortality "As population change per one individual"
         extends Interfaces.ConditionalLifeTime;
        Interfaces.PopulationPort_a port_a annotation (Placement(transformation(
                extent={{-108,-10},{-88,10}}), iconTransformation(extent={{-108,-10},{
                  -88,10}})));
      equation
        port_a.change = changePerPopulationMember*port_a.population;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,127,127},
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-76},
                rotation=360,
                textString="%name")}));
      end Mortality;

      model Stream "As population change per one individual"
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalLifeTime;

      equation
        port_a.change = if (changePerPopulationMember>0) then changePerPopulationMember*port_a.population else changePerPopulationMember*port_b.population;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,127,127},
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-76},
                rotation=360,
                textString="%name")}));
      end Stream;

      model Change
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalChange;

      equation
        port_a.change = change;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,127,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,127,127},
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-76},
                rotation=360,
                textString="%name")}));
      end Change;
    end Components;

    package Sources
      extends Modelica.Icons.SourcesPackage;
      model Growth
       extends Interfaces.ConditionalChange;
        Interfaces.PopulationPort_b port_b annotation (Placement(transformation(
                extent={{90,-10},{110,10}}), iconTransformation(extent={{90,-10},{110,
                  10}})));
      equation
        port_b.change = - change;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,-52},{100,48}},
                lineColor={0,127,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,23},{80,-2},{-80,-27},{-80,23}},
                rotation=360,
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,127,127}),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-78},
                rotation=360,
                textString="%name")}));
      end Growth;

      model Loss
       extends Interfaces.ConditionalChange;
        Interfaces.PopulationPort_a port_a annotation (Placement(transformation(
                extent={{-110,-10},{-90,10}}),
                                             iconTransformation(extent={{-110,-10},{
                  -90,10}})));
      equation
        port_a.change = change;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}),
                         graphics={
              Rectangle(
                extent={{-100,-52},{100,48}},
                lineColor={0,127,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,23},{80,-2},{-80,-27},{-80,23}},
                lineColor={0,127,127},
                rotation=360,
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-8,-78},
                rotation=360,
                textString="%name")}));
      end Loss;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;
      connector PopulationPort
        "Average number of population members and their change"
        Types.Population population "Average number of population individuals";
        flow Types.PopulationChange change
          "Average population change = change of population individuals";
        annotation (Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end PopulationPort;

      connector PopulationPort_a "Increase (or decrease) of population"
        extends PopulationPort;

      annotation (
          defaultComponentName="port_a",
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={0,127,127},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,127},
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={0,127,127},
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid),
          Text(extent=  {{-160,110},{40,50}}, lineColor={0,127,127},
                textString="%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end PopulationPort_a;

      connector PopulationPort_b "Decrease (or increase) of population"
        extends PopulationPort;

      annotation (
          defaultComponentName="port_b",
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={0,127,127},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={0,127,127},
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid),
          Text(extent={{-160,112},{40,52}},   lineColor={0,127,127},
                fillColor={0,127,127},
                fillPattern=FillPattern.Solid,
                textString="%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end PopulationPort_b;

      partial model OnePort
        "Partial change of population between two ports without its accumulation"

        PopulationPort_b port_b
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        PopulationPort_a port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      equation
        port_a.change + port_b.change = 0;
      end OnePort;

      partial model ConditionalChange
        "Input of population change vs. parametric constant change"

        parameter Boolean useChangeInput = false
          "=true, if real input connector is used instead of parameter PopulationChange"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.PopulationChange PopulationChange=0
          "Population change if useChangeInput=false"
          annotation (HideResult=not useChangeInput, Dialog(enable=not useChangeInput));

        Types.RealIO.PopulationChangeInput populationChange(start=PopulationChange)=change if   useChangeInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40})));

        Types.PopulationChange change "Current population change";
      equation
        if not useChangeInput then
          change = PopulationChange;
        end if;

      end ConditionalChange;

      partial model ConditionalLifeTime
        "Input of population change per one population member vs. parametric lifetime"

        parameter Boolean useChangePerMemberInput = false
          "=true, if real input connector is used instead of parameter LifeTime"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Time LifeTime=1e-8
          "Mean life time for population (=1.44*halftime) if useChangePerMember=false"
          annotation (HideResult=not useChangePerMemberInput, Dialog(enable=not useChangePerMemberInput));

        Types.RealIO.PopulationChangePerMemberInput changePerMember(start=1/LifeTime)=changePerPopulationMember if useChangePerMemberInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40})));

        Types.PopulationChangePerMember changePerPopulationMember
          "Current population change per individual";
      equation
        if not useChangePerMemberInput then
          changePerPopulationMember = 1/LifeTime;
        end if;

      end ConditionalLifeTime;
    end Interfaces;
    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>"));
  end Population;

  package SteadyStates "Dynamic Simulation / Steady State"
    extends Modelica.Icons.Package;
    package Examples
      "Examples that demonstrate usage of the Pressure flow components"
    extends Modelica.Icons.ExamplesPackage;
      model SimpleReaction_in_Equilibrium
        extends Modelica.Icons.Example;

        SteadyStates.Components.MolarConservationLaw
          amountOfSubstanceConservationLaw(
          n=2,
          Total(displayUnit="mol") = 1,
          Simulation=Types.SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{68,-44},{88,-24}})));
        Chemical.Components.Substance A(Simulation=Types.SimulationType.SteadyState,
            solute_start=0.9)
          annotation (Placement(transformation(extent={{-58,-10},{-38,10}})));
        Chemical.Components.ChemicalReaction reaction(K=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Chemical.Components.Substance B(
          Simulation=Types.SimulationType.SteadyState,
          isDependent=true,
          solute_start=0.1)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));

      equation
        connect(A.solute, amountOfSubstanceConservationLaw.fragment[1]) annotation (
            Line(
            points={{-48,-10},{-48,-39},{68,-39}},
            color={0,0,127}));
        connect(B.solute, amountOfSubstanceConservationLaw.fragment[2]) annotation (
            Line(
            points={{52,-10},{52,-37},{68,-37}},
            color={0,0,127}));
        connect(B.q_out,reaction. products[1]) annotation (Line(
            points={{52,0},{10,0}},
            color={107,45,134},
            thickness=1));
        connect(A.q_out,reaction. substrates[1]) annotation (Line(
            points={{-48,0},{-10,0}},
            color={107,45,134},
            thickness=1));
        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
       experiment(StopTime=1));
      end SimpleReaction_in_Equilibrium;

      model SimpleReaction_NormalInit
        extends Modelica.Icons.Example;

        import Physiolibrary.Types.*;

        SteadyStates.Components.MolarConservationLaw
          amountOfSubstanceConservationLaw(
          n=2,
          Total(displayUnit="mol") = 1,
          Simulation=Types.SimulationType.NormalInit)
          annotation (Placement(transformation(extent={{68,-44},{88,-24}})));
        Chemical.Components.Substance A(Simulation=Types.SimulationType.NormalInit,
            solute_start=0.9)
          annotation (Placement(transformation(extent={{-58,-10},{-38,10}})));
        Chemical.Components.ChemicalReaction reaction(K=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Chemical.Components.Substance B(
          isDependent=true,
          Simulation=Types.SimulationType.NormalInit,
          solute_start=0.1)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));

      equation
        connect(A.solute, amountOfSubstanceConservationLaw.fragment[1]) annotation (
            Line(
            points={{-48,-10},{-48,-39},{68,-39}},
            color={0,0,127}));
        connect(B.solute, amountOfSubstanceConservationLaw.fragment[2]) annotation (
            Line(
            points={{52,-10},{52,-37},{68,-37}},
            color={0,0,127}));
        connect(B.q_out,reaction. products[1]) annotation (Line(
            points={{52,0},{10,0}},
            color={107,45,134},
            thickness=1));
        connect(A.q_out,reaction. substrates[1]) annotation (Line(
            points={{-48,0},{-10,0}},
            color={107,45,134},
            thickness=1));
        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
       experiment(StopTime=1e-008));
      end SimpleReaction_NormalInit;

      model SimpleReaction_InitSteadyState
        extends Modelica.Icons.Example;

        import Physiolibrary.Types.*;

        SteadyStates.Components.MolarConservationLaw
          amountOfSubstanceConservationLaw(
          n=2,
          Total(displayUnit="mol") = 1,
          Simulation=Types.SimulationType.InitSteadyState)
          annotation (Placement(transformation(extent={{68,-44},{88,-24}})));
        Chemical.Components.Substance A(Simulation=Types.SimulationType.InitSteadyState,
            solute_start=0.9)
          annotation (Placement(transformation(extent={{-58,-10},{-38,10}})));
        Chemical.Components.ChemicalReaction reaction(K=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Chemical.Components.Substance B(
          isDependent=true,
          Simulation=Types.SimulationType.InitSteadyState,
          solute_start=0.1)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));

      equation
        connect(A.solute, amountOfSubstanceConservationLaw.fragment[1]) annotation (
            Line(
            points={{-48,-10},{-48,-39},{68,-39}},
            color={0,0,127}));
        connect(B.solute, amountOfSubstanceConservationLaw.fragment[2]) annotation (
            Line(
            points={{52,-10},{52,-37},{68,-37}},
            color={0,0,127}));
        connect(B.q_out,reaction. products[1]) annotation (Line(
            points={{52,0},{10,0}},
            color={107,45,134},
            thickness=1));
        connect(A.q_out,reaction. substrates[1]) annotation (Line(
            points={{-48,0},{-10,0}},
            color={107,45,134},
            thickness=1));
        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
       experiment(StopTime=1e-008));
      end SimpleReaction_InitSteadyState;

      model SimpleReaction2_in_Equilibrium
      extends Modelica.Icons.Example;

        import Physiolibrary.Types.*;

        Chemical.Components.Substance A(Simulation=SimulationType.SteadyState,
            solute_start=0.9)
          annotation (Placement(transformation(extent={{-68,-8},{-48,12}})));
        Chemical.Components.ChemicalReaction reaction(K=1, nP=2)
          annotation (Placement(transformation(extent={{-34,-8},{-14,12}})));
        Chemical.Components.Substance B(
          Simulation=SimulationType.SteadyState,
          isDependent=true,
          solute_start=0.1)
          annotation (Placement(transformation(extent={{2,-10},{22,10}})));

        Chemical.Components.Substance C(
          Simulation=SimulationType.SteadyState,
          isDependent=true,
          solute_start=0.1)
          annotation (Placement(transformation(extent={{2,18},{22,38}})));

        Components.MolarConservationLaw totalB_ConservationLaw(
          n=2,
          Total(displayUnit="mol") = 1,
          Simulation=SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{34,-10},{54,10}})));
        Components.MolarConservationLaw totalC_ConservationLaw(
          n=2,
          Total(displayUnit="mol") = 1,
          Simulation=SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{34,18},{54,38}})));
      equation
        connect(A.q_out,reaction. substrates[1]) annotation (Line(
            points={{-58,2},{-34,2}},
            color={107,45,134},
            thickness=1));
        connect(reaction.products[1],B. q_out) annotation (Line(
            points={{-14,1.5},{-4,1.5},{-4,0},{12,0}},
            color={107,45,134},
            thickness=1));
        connect(reaction.products[2],C. q_out) annotation (Line(
            points={{-14,2.5},{-4,2.5},{-4,28},{12,28}},
            color={107,45,134},
            thickness=1));
        connect(A.solute, totalB_ConservationLaw.fragment[1])           annotation (
            Line(
            points={{-58,-8},{-58,-16},{26,-16},{26,-5},{34,-5}},
            color={0,0,127}));
        connect(B.solute, totalB_ConservationLaw.fragment[2])           annotation (
            Line(
            points={{12,-10},{12,-14},{24,-14},{24,-3},{34,-3}},
            color={0,0,127}));
        connect(C.solute, totalC_ConservationLaw.fragment[1]) annotation (Line(
            points={{12,18},{12,14},{26,14},{26,23},{34,23}},
            color={0,0,127}));
        connect(A.solute, totalC_ConservationLaw.fragment[2]) annotation (Line(
            points={{-58,-8},{-58,-16},{-70,-16},{-70,40},{26,40},{26,25},{34,25}},
            color={0,0,127}));

        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),   experiment(StopTime=1));
      end SimpleReaction2_in_Equilibrium;

      model O2_in_water
      extends Modelica.Icons.Example;

        import Physiolibrary.Types.*;

      public
        Chemical.Components.Substance oxygen_dissolved(
          Simulation=SimulationType.SteadyState,
          solute_start=0.000001*7.875647668393782383419689119171e-5,
          isDependent=true)
          annotation (Placement(transformation(extent={{-12,-56},{8,-36}})));
        Modelica.Blocks.Sources.Clock oxygenPartialPressure(offset=1e-06)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Modelica.Blocks.Sources.Sine temperature(
          amplitude=10,
          freqHz=1/60,
          offset=310.15)
          annotation (Placement(transformation(extent={{-94,-28},{-74,-8}})));
        Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature
          prescribedTemperature
          annotation (Placement(transformation(extent={{-56,-28},{-36,-8}})));
        Chemical.Components.GasSolubility gasSolubility(
          useHeatPort=true,
          kH_T0(displayUnit="(mmol/l)/kPa at 25degC") = 0.026029047188736,
          C=1700)
          annotation (Placement(transformation(extent={{-12,-28},{8,-8}})));
        Chemical.Sources.UnlimitedGasStorage unlimitedGasStorage(
          Simulation=Types.SimulationType.SteadyState,
          usePartialPressureInput=true,
          useHeatPort=true,
          T=295.15)
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
      equation

        connect(temperature.y, prescribedTemperature.T) annotation (Line(
            points={{-73,-18},{-58,-18}},
            color={0,0,127}));
        connect(oxygen_dissolved.q_out, gasSolubility.q_in) annotation (Line(
            points={{-2,-46},{-2,-26}},
            color={107,45,134},
            thickness=1));
        connect(prescribedTemperature.port, gasSolubility.heatPort) annotation (
            Line(
            points={{-36,-18},{-2,-18}},
            color={191,0,0}));
        connect(oxygenPartialPressure.y, unlimitedGasStorage.partialPressure)
          annotation (Line(
            points={{-59,70},{-40,70}},
            color={0,0,127}));
        connect(unlimitedGasStorage.q_out, gasSolubility.q_out) annotation (Line(
            points={{-20,70},{-2,70},{-2,-8}},
            color={107,45,134},
            thickness=1));
        connect(prescribedTemperature.port, unlimitedGasStorage.heatPort)
          annotation (Line(
            points={{-36,-18},{-30,-18},{-30,70}},
            color={191,0,0}));
        annotation (        experiment(StopTime=100), Documentation(info=
                     "<html>
<p>Partial pressure of oxygen in air is the air pressure multiplied by the fraction of the oxygen in air. Oxygen solubility</p>
</html>",   revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end O2_in_water;

      model Allosteric_Hemoglobin_MWC
      extends Modelica.Icons.Example;

        import Physiolibrary.Types.*;

      //extends SteadyStates.Interfaces.SteadyStateSystem(
      //                                         Simulation=SteadyStates.SimulationType.SteadyState);
      //=States.SimulationType.NoInit); for dynamic simulation
      protected
        parameter Types.GasSolubility alpha =  0.0105 * 1e-3
          "oxygen solubility in plasma"; // by Siggaard Andersen: 0.0105 (mmol/l)/kPa
        parameter Types.Fraction L = 7.0529*10^6
          "=[T0]/[R0] .. dissociation constant of relaxed <-> tensed change of deoxyhemoglobin tetramer";
        parameter Types.Fraction c = 0.00431555
          "=KR/KT .. ration between oxygen affinities of relaxed vs. tensed subunit";
        parameter Types.Concentration KR = 0.000671946
          "oxygen dissociation on relaxed(R) hemoglobin subunit";   //*7.875647668393782383419689119171e-5
                                                                  //10.500001495896 7.8756465463794e-05

        parameter Types.Concentration KT=KR/c
          "oxygen dissociation on tensed(T) hemoglobin subunit";
      //  Types.Fraction sO2 "hemoglobin oxygen saturation";

      //  parameter Types.AmountOfSubstance totalAmountOfHemoglobin=1;
      //  Types.AmountOfSubstance totalAmountOfRforms;
      //  Types.AmountOfSubstance totalAmountOfTforms;

      public
        Chemical.Components.Substance T0(
          stateName="T0",
          Simulation=SimulationType.SteadyState,
          solute_start=1)
          annotation (Placement(transformation(extent={{32,78},{52,98}})));

        Chemical.Components.Substance T1(
          stateName="T1",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{34,36},{54,56}})));

        Chemical.Components.Substance R1(
          stateName="R1",
          Simulation=SimulationType.SteadyState,
          solute_start=0,
          isDependent=true)
          annotation (Placement(transformation(extent={{-20,36},{0,56}})));

        Chemical.Components.Substance T2(
          stateName="T2",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{34,-10},{54,10}})));

        Chemical.Components.Substance R2(
          stateName="R2",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));

        Chemical.Components.Substance T3(
          stateName="T3",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{34,-54},{54,-34}})));

        Chemical.Components.Substance R3(
          stateName="R3",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{-20,-54},{0,-34}})));

        Chemical.Components.Substance T4(
          stateName="T4",
          Simulation=SimulationType.SteadyState,
          solute_start=0,
          isDependent=true)
          annotation (Placement(transformation(extent={{34,-92},{54,-72}})));

        Chemical.Components.Substance R4(
          stateName="R4",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{-20,-92},{0,-72}})));

        Chemical.Components.Substance R0(
          stateName="R0",
          Simulation=SimulationType.SteadyState,
          solute_start=0)
          annotation (Placement(transformation(extent={{-20,78},{0,98}})));

        Chemical.Components.ChemicalReaction quaternaryForm(K=L)
          annotation (Placement(transformation(extent={{4,78},{24,98}})));
        Chemical.Components.ChemicalReaction oxyR1(nP=2, K=KR/4) annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-10,64})));
        Chemical.Components.ChemicalReaction oxyT1(nP=2, K=KT/4) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={44,64})));
        Chemical.Components.ChemicalReaction oxyR2(nP=2, K=KR/(3/2)) annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-10,22})));
        Chemical.Components.ChemicalReaction oxyR3(nP=2, K=KR/(2/3)) annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-10,-24})));
        Chemical.Components.ChemicalReaction oxyR4(nP=2, K=KR*4) annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={-10,-66})));
        Chemical.Components.ChemicalReaction oxyT2(nP=2, K=KT/(3/2)) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={44,22})));
        Chemical.Components.ChemicalReaction oxyT3(nP=2, K=KT/(2/3)) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={44,-24})));
        Chemical.Components.ChemicalReaction oxyT4(nP=2, K=KT*4) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={44,-66})));
        Chemical.Components.ChemicalReaction quaternaryForm1(K=c*L)
          annotation (Placement(transformation(extent={{8,36},{28,56}})));
        Chemical.Components.ChemicalReaction quaternaryForm2(K=(c^2)*L)
          annotation (Placement(transformation(extent={{8,-10},{28,10}})));
        Chemical.Components.ChemicalReaction quaternaryForm3(K=(c^3)*L)
          annotation (Placement(transformation(extent={{8,-54},{28,-34}})));
        Chemical.Components.ChemicalReaction quaternaryForm4(K=(c^4)*L)
          annotation (Placement(transformation(extent={{10,-92},{30,-72}})));

        Chemical.Components.Substance oxygen_unbound(solute_start=0.000001*
              7.875647668393782383419689119171e-5, Simulation=SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{-56,-36},{-36,-16}})));
        Modelica.Blocks.Sources.Clock clock(offset=60)
          annotation (Placement(transformation(extent={{-94,52},{-74,72}})));
        SteadyStates.Components.MolarConservationLaw hemoglobinConservationLaw(
          n=10, Total(displayUnit="mol") = 1,
          Simulation=Types.SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{72,-2},{92,18}})));

        Chemical.Sources.UnlimitedGasStorage O2_in_air(
          Simulation=Types.SimulationType.SteadyState,
          T=295.15,
          usePartialPressureInput=true) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-66,32})));
        Chemical.Components.GasSolubility gasSolubility(
          useHeatPort=false,
          kH_T0=0.026029047188736,
          C=1700)
          annotation (Placement(transformation(extent={{-76,-6},{-56,14}})));
        Modelica.Blocks.Math.Sum oxygen_bound(k={1,1,2,2,3,3,4,4}, nin=8)
          annotation (Placement(transformation(extent={{72,-56},{82,-46}})));
        Modelica.Blocks.Math.Division sO2_ "hemoglobin oxygen saturation"
          annotation (Placement(transformation(extent={{86,-60},{96,-50}})));
        Modelica.Blocks.Math.Sum tHb(nin=10, k=4*ones(10))
          annotation (Placement(transformation(extent={{72,-70},{82,-60}})));
      equation
       // sO2 = (R1.solute + 2*R2.solute + 3*R3.solute + 4*R4.solute + T1.solute + 2*T2.solute + 3*T3.solute + 4*T4.solute)/(4*hemoglobinConservationLaw.Total);
       // totalAmountOfRforms = R0.solute + R1.solute + R2.solute + R3.solute + R4.solute;
       //  totalAmountOfTforms = T0.solute + T1.solute + T2.solute + T3.solute + T4.solute;

       //  totalAmountOfHemoglobin*normalizedState[1] = totalAmountOfRforms + totalAmountOfTforms;

        connect(quaternaryForm.products[1],T0. q_out) annotation (Line(
            points={{24,88},{42,88}},
            color={107,45,134},
            thickness=1));
        connect(oxyR1.products[2], oxygen_unbound.q_out)
                                            annotation (Line(
            points={{-9.5,74},{-46,74},{-46,-26}},
            color={107,45,134},
            thickness=1));
        connect(oxyR2.products[2], oxygen_unbound.q_out)
                                            annotation (Line(
            points={{-9.5,32},{-46,32},{-46,-26}},
            color={107,45,134},
            thickness=1));
        connect(oxyR3.products[2], oxygen_unbound.q_out)
                                            annotation (Line(
            points={{-9.5,-14},{-46,-14},{-46,-26}},
            color={107,45,134},
            thickness=1));
        connect(oxyR4.products[2], oxygen_unbound.q_out)
                                            annotation (Line(
            points={{-9.5,-56},{-46,-56},{-46,-26}},
            color={107,45,134},
            thickness=1));
        connect(oxyR1.substrates[1],R1. q_out) annotation (Line(
            points={{-10,54},{-10,46}},
            color={107,45,134},
            thickness=1));
        connect(R1.q_out,oxyR2. products[1]) annotation (Line(
            points={{-10,46},{-10,32},{-10.5,32}},
            color={107,45,134},
            thickness=1));
        connect(oxyR2.substrates[1],R2. q_out) annotation (Line(
            points={{-10,12},{-10,0}},
            color={107,45,134},
            thickness=1));
        connect(oxyR3.substrates[1],R3. q_out) annotation (Line(
            points={{-10,-34},{-10,-44}},
            color={107,45,134},
            thickness=1));
        connect(oxyR3.products[1],R2. q_out) annotation (Line(
            points={{-10.5,-14},{-10.5,-7},{-10,-7},{-10,0}},
            color={107,45,134},
            thickness=1));
        connect(R3.q_out,oxyR4. products[1]) annotation (Line(
            points={{-10,-44},{-10,-56},{-10.5,-56}},
            color={107,45,134},
            thickness=1));
        connect(oxyR4.substrates[1],R4. q_out) annotation (Line(
            points={{-10,-76},{-10,-82}},
            color={107,45,134},
            thickness=1));
        connect(oxyT1.products[1],T0. q_out) annotation (Line(
            points={{44.5,74},{44.5,88},{42,88}},
            color={107,45,134},
            thickness=1));
        connect(oxyT1.substrates[1],T1. q_out) annotation (Line(
            points={{44,54},{44,46}},
            color={107,45,134},
            thickness=1));
        connect(oxygen_unbound.q_out, oxyT1.products[2])
                                            annotation (Line(
            points={{-46,-26},{-46,74},{43.5,74}},
            color={107,45,134},
            thickness=1));
        connect(oxygen_unbound.q_out, oxyT2.products[2])
                                            annotation (Line(
            points={{-46,-26},{-46,32},{43.5,32}},
            color={107,45,134},
            thickness=1));
        connect(oxygen_unbound.q_out, oxyT3.products[2])
                                            annotation (Line(
            points={{-46,-26},{-46,-14},{43.5,-14}},
            color={107,45,134},
            thickness=1));
        connect(oxygen_unbound.q_out, oxyT4.products[2])
                                            annotation (Line(
            points={{-46,-26},{-46,-56},{43.5,-56}},
            color={107,45,134},
            thickness=1));
        connect(T1.q_out,oxyT2. products[1]) annotation (Line(
            points={{44,46},{44,32},{44.5,32}},
            color={107,45,134},
            thickness=1));
        connect(oxyT2.substrates[1],T2. q_out) annotation (Line(
            points={{44,12},{44,0}},
            color={107,45,134},
            thickness=1));
        connect(T2.q_out,oxyT3. products[1]) annotation (Line(
            points={{44,0},{44,-14},{44.5,-14}},
            color={107,45,134},
            thickness=1));
        connect(oxyT3.substrates[1],T3. q_out) annotation (Line(
            points={{44,-34},{44,-44}},
            color={107,45,134},
            thickness=1));
        connect(T3.q_out,oxyT4. products[1]) annotation (Line(
            points={{44,-44},{44,-56},{44.5,-56}},
            color={107,45,134},
            thickness=1));
        connect(oxyT4.substrates[1],T4. q_out) annotation (Line(
            points={{44,-76},{44,-82}},
            color={107,45,134},
            thickness=1));
        connect(R0.q_out,quaternaryForm. substrates[1]) annotation (Line(
            points={{-10,88},{4,88}},
            color={107,45,134},
            thickness=1));
        connect(R0.q_out,oxyR1. products[1]) annotation (Line(
            points={{-10,88},{-10,74},{-10.5,74}},
            color={107,45,134},
            thickness=1));
        connect(R1.q_out,quaternaryForm1. substrates[1]) annotation (Line(
            points={{-10,46},{8,46}},
            color={107,45,134},
            thickness=1));
        connect(quaternaryForm1.products[1],T1. q_out) annotation (Line(
            points={{28,46},{44,46}},
            color={107,45,134},
            thickness=1));
        connect(R2.q_out,quaternaryForm2. substrates[1]) annotation (Line(
            points={{-10,0},{8,0}},
            color={107,45,134},
            thickness=1));
        connect(quaternaryForm2.products[1],T2. q_out) annotation (Line(
            points={{28,0},{44,0}},
            color={107,45,134},
            thickness=1));
        connect(R3.q_out,quaternaryForm3. substrates[1]) annotation (Line(
            points={{-10,-44},{8,-44}},
            color={107,45,134},
            thickness=1));
        connect(quaternaryForm3.products[1],T3. q_out) annotation (Line(
            points={{28,-44},{44,-44}},
            color={107,45,134},
            thickness=1));
        connect(R4.q_out,quaternaryForm4. substrates[1]) annotation (Line(
            points={{-10,-82},{10,-82}},
            color={107,45,134},
            thickness=1));
        connect(quaternaryForm4.products[1],T4. q_out) annotation (Line(
            points={{30,-82},{44,-82}},
            color={107,45,134},
            thickness=1));
        connect(R4.solute, hemoglobinConservationLaw.fragment[1])        annotation (
            Line(
            points={{-10,-92},{-10,-98},{64,-98},{64,2.2},{72,2.2}},
            color={0,0,127}));
        connect(T4.solute, hemoglobinConservationLaw.fragment[2])        annotation (
            Line(
            points={{44,-92},{44,-98},{64,-98},{64,2.6},{72,2.6}},
            color={0,0,127}));
        connect(R3.solute, hemoglobinConservationLaw.fragment[3])        annotation (
            Line(
            points={{-10,-54},{64,-54},{64,3},{72,3}},
            color={0,0,127}));
        connect(T3.solute, hemoglobinConservationLaw.fragment[4])        annotation (
            Line(
            points={{44,-54},{64,-54},{64,3.4},{72,3.4}},
            color={0,0,127}));
        connect(R2.solute, hemoglobinConservationLaw.fragment[5])        annotation (
            Line(
            points={{-10,-10},{64,-10},{64,3.8},{72,3.8}},
            color={0,0,127}));
        connect(T2.solute, hemoglobinConservationLaw.fragment[6])        annotation (
            Line(
            points={{44,-10},{64,-10},{64,4.2},{72,4.2}},
            color={0,0,127}));
        connect(R1.solute, hemoglobinConservationLaw.fragment[7])        annotation (
            Line(
            points={{-10,36},{64,36},{64,4.6},{72,4.6}},
            color={0,0,127}));
        connect(T1.solute, hemoglobinConservationLaw.fragment[8])        annotation (
            Line(
            points={{44,36},{64,36},{64,5},{72,5}},
            color={0,0,127}));
        connect(R0.solute, hemoglobinConservationLaw.fragment[9])        annotation (
            Line(
            points={{-10,78},{64,78},{64,5.4},{72,5.4}},
            color={0,0,127}));
        connect(T0.solute, hemoglobinConservationLaw.fragment[10])        annotation (
           Line(
            points={{42,78},{64,78},{64,5.8},{72,5.8}},
            color={0,0,127}));
        connect(oxygen_unbound.q_out, gasSolubility.q_in) annotation (Line(
            points={{-46,-26},{-66,-26},{-66,-4}},
            color={107,45,134},
            thickness=1));
        connect(O2_in_air.q_out, gasSolubility.q_out) annotation (Line(
            points={{-66,22},{-66,14}},
            color={107,45,134},
            thickness=1));
        connect(clock.y, O2_in_air.partialPressure) annotation (Line(
            points={{-73,62},{-66,62},{-66,42}},
            color={0,0,127}));
        connect(R1.solute, oxygen_bound.u[1]) annotation (Line(
            points={{-10,36},{64,36},{64,-51.875},{71,-51.875}},
            color={0,0,127}));
        connect(T1.solute, oxygen_bound.u[2]) annotation (Line(
            points={{44,36},{64,36},{64,-51.625},{71,-51.625}},
            color={0,0,127}));
        connect(R2.solute, oxygen_bound.u[3]) annotation (Line(
            points={{-10,-10},{64,-10},{64,-51.375},{71,-51.375}},
            color={0,0,127}));
        connect(T2.solute, oxygen_bound.u[4]) annotation (Line(
            points={{44,-10},{64,-10},{64,-51.125},{71,-51.125}},
            color={0,0,127}));
        connect(R3.solute, oxygen_bound.u[5]) annotation (Line(
            points={{-10,-54},{64,-54},{64,-50.875},{71,-50.875}},
            color={0,0,127}));
        connect(T3.solute, oxygen_bound.u[6]) annotation (Line(
            points={{44,-54},{64,-54},{64,-50.625},{71,-50.625}},
            color={0,0,127}));
        connect(R4.solute, oxygen_bound.u[7]) annotation (Line(
            points={{-10,-92},{-10,-98},{64,-98},{64,-50.375},{71,-50.375}},
            color={0,0,127}));
        connect(T4.solute, oxygen_bound.u[8]) annotation (Line(
            points={{44,-92},{44,-98},{64,-98},{64,-50.125},{71,-50.125}},
            color={0,0,127}));
        connect(oxygen_bound.y, sO2_.u1) annotation (Line(
            points={{82.5,-51},{84,-51},{84,-52},{85,-52}},
            color={0,0,127}));
        connect(sO2_.u2, tHb.y) annotation (Line(
            points={{85,-58},{84,-58},{84,-65},{82.5,-65}},
            color={0,0,127}));
        connect(R0.solute, tHb.u[1]) annotation (Line(
            points={{-10,78},{64,78},{64,-65.9},{71,-65.9}},
            color={0,0,127}));
        connect(T0.solute, tHb.u[2]) annotation (Line(
            points={{42,78},{64,78},{64,-65.7},{71,-65.7}},
            color={0,0,127}));
        connect(R1.solute, tHb.u[3]) annotation (Line(
            points={{-10,36},{64,36},{64,-65.5},{71,-65.5}},
            color={0,0,127}));
        connect(T1.solute, tHb.u[4]) annotation (Line(
            points={{44,36},{64,36},{64,-65.3},{71,-65.3}},
            color={0,0,127}));
        connect(R2.solute, tHb.u[5]) annotation (Line(
            points={{-10,-10},{64,-10},{64,-65.1},{71,-65.1}},
            color={0,0,127}));
        connect(T2.solute, tHb.u[6]) annotation (Line(
            points={{44,-10},{64,-10},{64,-64.9},{71,-64.9}},
            color={0,0,127}));
        connect(R3.solute, tHb.u[7]) annotation (Line(
            points={{-10,-54},{64,-54},{64,-64.7},{71,-64.7}},
            color={0,0,127}));
        connect(T3.solute, tHb.u[8]) annotation (Line(
            points={{44,-54},{64,-54},{64,-64.5},{71,-64.5}},
            color={0,0,127}));
        connect(R4.solute, tHb.u[9]) annotation (Line(
            points={{-10,-92},{-10,-98},{64,-98},{64,-64.3},{71,-64.3}},
            color={0,0,127}));
        connect(T4.solute, tHb.u[10]) annotation (Line(
            points={{44,-92},{44,-98},{64,-98},{64,-64.1},{71,-64.1}},
            color={0,0,127}));
        annotation (        experiment(StopTime=10000), Documentation(info=
                     "<html>
<p>To understand the model is necessary to study the principles of MWC allosteric transitions first published by </p>
<p>Monod,Wyman,Changeux (1965). &QUOT;On the nature of allosteric transitions: a plausible model.&QUOT; Journal of molecular biology 12(1): 88-118.</p>
<p><br/>In short it is about binding oxygen to hemoglobin.</p>
<p>Oxgen are driven by its partial pressure using clock source - from very little pressure to pressure of 10kPa.</p>
<p>(Partial pressure of oxygen in air is the air pressure multiplied by the fraction of the oxygen in air.)</p>
<p>Hemoglobin was observed (by Perutz) in two structuraly different forms R and T.</p>
<p>These forms are represented by blocks T0..T4 and R0..R4, where the suffexed index means the number of oxygen bounded to the form.</p>
<p><br/>In equilibrated model can be four chemical reactions removed and the results will be the same, but dynamics will change a lot. ;)</p>
<p>If you remove the quaternaryForm1,quaternaryForm2,quaternaryForm3,quaternaryForm4 then the model in equilibrium will be exactly the same as in MWC article.</p>
<p><br/>Parameters was fitted to data of Severinghaus article from 1979. (For example at pO2=26mmHg is oxygen saturation sO2 = 48.27 &percnt;).</p>
</html>",   revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Allosteric_Hemoglobin_MWC;

      model Allosteric_Hemoglobin2_MWC
        "Allosteric hemoglobin model implemented by Speciation blocks"

       extends Chemical.Examples.Hemoglobin.Allosteric_Hemoglobin2_MWC;

      end Allosteric_Hemoglobin2_MWC;

      model CardiovascularSystem_GCG_SteadyState
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
         //extends Modelica.Icons.Example;
         extends Hydraulic.Examples.CardiovascularSystem_GCG(
          pulmonaryArteries(Simulation=Types.SimulationType.SteadyState),
          pulmonaryVeinsAndLeftAtrium(Simulation=Types.SimulationType.SteadyState),
          rightAtrium(Simulation=Types.SimulationType.SteadyState),
          arteries(Simulation=Types.SimulationType.SteadyState),
          veins(Simulation=Types.SimulationType.SteadyState,
              isDependent=true));

        import Physiolibrary.Types.*;

         Components.MassConservationLaw bloodVolume(
          n=5,
          Simulation=Types.SimulationType.SteadyState,
          Total=0.005)
          annotation (Placement(transformation(extent={{68,-14},{88,6}})));
      equation
         connect(pulmonaryArteries.volume, bloodVolume.fragment[4]) annotation (
            Line(
            points={{-52,74},{-52,68},{54,68},{54,-7.2},{68,-7.2}},
            color={0,0,127}));
        connect(pulmonaryVeinsAndLeftAtrium.volume, bloodVolume.fragment[5]) annotation (Line(
            points={{14,74},{14,70},{56,70},{56,-6.4},{68,-6.4}},
            color={0,0,127}));
         connect(rightAtrium.volume, bloodVolume.fragment[1]) annotation (Line(
            points={{-72,8},{-72,-72},{56,-72},{56,-9.6},{68,-9.6}},
            color={0,0,127}));
        connect(veins.volume, bloodVolume.fragment[2]) annotation (Line(
            points={{-54,-46},{-54,-70},{54,-70},{54,-8.8},{68,-8.8}},
            color={0,0,127}));
        connect(arteries.volume, bloodVolume.fragment[3]) annotation (Line(
            points={{24,-46},{24,-68},{52,-68},{52,-8},{68,-8}},
            color={0,0,127}));
         annotation (     experiment(StopTime=1),
       Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &QUOT;Circulation: overall regulation.&QUOT; Annual review of physiology 34(1): 13-44.</p>
</html>",   revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end CardiovascularSystem_GCG_SteadyState;

      model ThermalBody_QHP_STeadyState
        extends Thermal.Examples.ThermalBody_QHP(
          skin(Simulation=Types.SimulationType.SteadyState),
          skeletalMuscle(Simulation=Types.SimulationType.SteadyState,
              isDependent=true),
          core(Simulation=Types.SimulationType.SteadyState),
          GILumen(Simulation=Types.SimulationType.SteadyState));

        Components.EnergyConservationLaw energyConservationLaw(
          n=4,
          Simulation=Types.SimulationType.SteadyState,
          useTotalInput=false,
          Total=-8373.6)
          annotation (Placement(transformation(extent={{70,-90},{90,-70}})));
      equation
        connect(core.relativeHeat, energyConservationLaw.fragment[1])
                                                                annotation (Line(
            points={{-2,-4},{-2,-85.5},{70,-85.5}},
            color={0,0,127}));
        connect(skin.relativeHeat, energyConservationLaw.fragment[2])
                                                                annotation (Line(
            points={{-58,4},{-58,-84.5},{70,-84.5}},
            color={0,0,127}));
        connect(skeletalMuscle.relativeHeat, energyConservationLaw.fragment[3])
                                                                          annotation (
           Line(
            points={{46,42},{46,-12},{94,-12},{94,-64},{58,-64},{58,-83.5},{70,-83.5}},
            color={0,0,127}));

        connect(GILumen.relativeHeat, energyConservationLaw.fragment[4])
                                                                   annotation (Line(
            points={{50,-52},{52,-52},{52,-82.5},{70,-82.5}},
            color={0,0,127}));
        annotation (experiment(StopTime=1));
      end ThermalBody_QHP_STeadyState;

      model Cells_SteadyState
       extends Osmotic.Examples.Cell(
          cells(Simulation=Types.SimulationType.SteadyState,
              isDependent=true),
          interstitium(Simulation=Types.SimulationType.SteadyState),
          interstitium1(Simulation=Types.SimulationType.SteadyState),
          cells1(Simulation=Types.SimulationType.SteadyState,
              isDependent=true));
        Components.MassConservationLaw waterConservationLaw(
          n=2,
          Simulation=Types.SimulationType.SteadyState,
          Total(displayUnit="l") = 0.002)
          annotation (Placement(transformation(extent={{72,14},{92,34}})));
        Components.MassConservationLaw waterConservationLaw1(
          n=2,
          Simulation=Types.SimulationType.SteadyState,
          Total(displayUnit="l") = 0.002)
          annotation (Placement(transformation(extent={{70,-92},{90,-72}})));
      equation

        connect(cells.volume, waterConservationLaw.fragment[1])
                                                           annotation (Line(
            points={{-34,36},{-34,19},{72,19}},
            color={0,0,127}));
        connect(interstitium.volume, waterConservationLaw.fragment[2])
                                                                  annotation (Line(
            points={{44,36},{44,21},{72,21}},
            color={0,0,127}));
        connect(cells1.volume, waterConservationLaw1.fragment[1])
                                                             annotation (Line(
            points={{-34,-64},{-34,-87},{70,-87}},
            color={0,0,127}));
        connect(interstitium1.volume, waterConservationLaw1.fragment[2])
                                                                    annotation (Line(
            points={{44,-64},{44,-85},{70,-85}},
            color={0,0,127}));
        annotation (experiment(StopTime=1));
      end Cells_SteadyState;
    end Examples;

    package Components
      extends Modelica.Icons.Package;

      model EnergyConservationLaw "System Energy conservation law"
        extends Interfaces.SteadyStateSystem; //(Simulation=Types.SimulationType.SteadyState);
        extends Icons.ConservationLaw;

        parameter Integer n "Number of mass/energy fragments";

        Types.RealIO.EnergyInput fragment[n] "Mass/Energy fragment"
          annotation (Placement(transformation(extent={{-120,-60},{-80,-20}}),
              iconTransformation(extent={{-120,-60},{-80,-20}})));

        parameter Boolean useTotalInput = false
          "=true, if total mass/energy is used as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Energy Total = 1
          "Total mass/energy if useTotalAsInput=false"
          annotation (Dialog(enable=not useTotalInput));

        Types.RealIO.EnergyInput total(start=Total) = t if useTotalInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));

        Types.Energy t "Current Mass/Energy";

      equation
        if not useTotalInput then
          t=Total;
        end if;

        t*normalizedState[1] = sum(fragment);

        //fragment[1] = homotopy( actual=Total*normalizedState[1] - sum(fragment[i] for i in 2:n), simplified=Total*normalizedState[1]*firstFragmentFraction);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-160,-110},{160,-140}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,50},{100,24}},
                lineColor={0,0,0},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                textString="Total(%Total)")}),
          Documentation(info="<html>
</html>"));
      end EnergyConservationLaw;

      model MassConservationLaw
        "System Mass (incompresible volume) conservation law"
        extends Interfaces.SteadyStateSystem; //(Simulation=Types.SimulationType.SteadyState);
        extends Icons.ConservationLaw;

        parameter Integer n "Number of mass/energy fragments";

        Types.RealIO.VolumeInput fragment[n] "Mass/Energy fragment"
          annotation (Placement(transformation(extent={{-120,-60},{-80,-20}}),
              iconTransformation(extent={{-120,-60},{-80,-20}})));

        parameter Boolean useTotalInput = false
          "=true, if total mass/energy is used as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Volume Total = 1
          "Total mass/energy if useTotalAsInput=false"
          annotation (Dialog(enable=not useTotalInput));

        Types.RealIO.VolumeInput total(start=Total) = t if useTotalInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));

        Types.Volume t "Current Mass/Energy";
      equation
        if not useTotalInput then
          t=Total;
        end if;

        t*normalizedState[1] = sum(abs(fragment));

        //fragment[1] = homotopy( actual=Total*normalizedState[1] - sum(fragment[i] for i in 2:n), simplified=Total*normalizedState[1]*firstFragmentFraction);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-160,-110},{160,-140}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,50},{100,24}},
                lineColor={0,0,0},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                textString="Total(%Total)")}),
          Documentation(info="<html>
</html>"));
      end MassConservationLaw;

      model MolarConservationLaw
        "System Amount of substance (=number of molecules) conservation law"
        extends Interfaces.SteadyStateSystem; //(Simulation=Types.SimulationType.SteadyState);
        extends Icons.ConservationLaw;

        parameter Integer n "Number of mass/energy fragments";

        Types.RealIO.AmountOfSubstanceInput fragment[n] "Mass/Energy fragment"
          annotation (Placement(transformation(extent={{-120,-60},{-80,-20}}),
              iconTransformation(extent={{-120,-60},{-80,-20}})));

        parameter Boolean useTotalInput = false
          "=true, if total mass/energy is used as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.AmountOfSubstance Total = 1
          "Total mass/energy if useTotalAsInput=false"
          annotation (Dialog(enable=not useTotalInput));

        Types.RealIO.AmountOfSubstanceInput total(start=Total) = t if useTotalInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));

        Types.AmountOfSubstance t "Current Mass/Energy";
        Types.RealIO.AmountOfSubstanceOutput totalAmountOfSubstance
          annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
      equation
        if not useTotalInput then
          t=Total;
        end if;

        t*normalizedState[1] = sum(abs(fragment));

        //fragment[1] = homotopy( actual=Total*normalizedState[1] - sum(fragment[i] for i in 2:n), simplified=Total*normalizedState[1]*firstFragmentFraction);
        totalAmountOfSubstance = t;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-160,-110},{160,-140}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,50},{100,24}},
                lineColor={0,0,0},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                textString="Total(%Total)")}),
          Documentation(info="<html>
</html>"));
      end MolarConservationLaw;

      model ElectricChargeConservationLaw
        "System amount of electric charge (=number of elementary charges) conservation law"
        extends Interfaces.SteadyStateSystem; //(Simulation=Types.SimulationType.SteadyState);
        extends Icons.ConservationLaw;

        parameter Integer n "Number of mass/energy fragments";

        Types.RealIO.ElectricChargeInput fragment[n] "Mass/Energy fragment"
          annotation (Placement(transformation(extent={{-120,-60},{-80,-20}}),
              iconTransformation(extent={{-120,-60},{-80,-20}})));

        parameter Boolean useTotalInput = false
          "=true, if total mass/energy is used as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.ElectricCharge Total = 1
          "Total mass/energy if useTotalAsInput=false"
          annotation (Dialog(enable=not useTotalInput));

        Types.RealIO.ElectricChargeInput total(start=Total) = t if useTotalInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));

        Types.ElectricCharge t "Current Mass/Energy";
      equation
        if not useTotalInput then
          t=Total;
        end if;

        t*normalizedState[1] = sum(fragment);

        //fragment[1] = homotopy( actual=Total*normalizedState[1] - sum(fragment[i] for i in 2:n), simplified=Total*normalizedState[1]*firstFragmentFraction);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-160,-110},{160,-140}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,50},{100,24}},
                lineColor={0,0,0},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                textString="Total(%Total)")}),
          Documentation(info="<html>
</html>"));
      end ElectricChargeConservationLaw;

      model ElementaryChargeConservationLaw
        "System amount of electric charge (=number of elementary charges) conservation law"
        extends SteadyStates.Interfaces.SteadyStateSystem;
                                              //(Simulation=Types.SimulationType.SteadyState);
        extends Icons.ConservationLaw;

        parameter Integer NumberOfParticles=1 "Number of mass/energy fragments";
        parameter Integer Charges[NumberOfParticles] = {1}
          "Elementary charges of particles";

        Types.RealIO.AmountOfSubstanceInput fragment[NumberOfParticles]
          "Mass/Energy fragment" annotation (Placement(transformation(extent={{-120,-60},
                  {-80,-20}}), iconTransformation(extent={{-120,-60},{-80,-20}})));

        parameter Boolean useTotalInput = false
          "=true, if total mass/energy is used as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.ElectricCharge Total = 1
          "Total mass/energy if useTotalAsInput=false"
          annotation (Dialog(enable=not useTotalInput));

        Types.RealIO.ElectricChargeInput total(start=Total)=t if
          useTotalInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));

        Types.ElectricCharge t "Current Mass/Energy";
      equation
        if not useTotalInput then
          t=Total;
        end if;

        //original meaning:
        t*normalizedState[1] = Modelica.Constants.F*Charges*abs(fragment); //elementary charge from Eq to C

        //hacked, but still the same:  (because Dymola find steady state solution for specific problems in negative concentrations, when abs() not used)
        //t*normalizedState[1] = Modelica.Constants.F*(Charges[1]*(if noEvent(fragment[1]>=0) then fragment[1] else -fragment[1]) + sum(Charges[i]*fragment[i] for i in 2:NumberOfParticles));

         annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-160,-110},{160,-140}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,50},{100,24}},
                lineColor={0,0,0},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                textString="Total(%Total)")}),
          Documentation(info="<html>
</html>"));
      end ElementaryChargeConservationLaw;
    end Components;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;

      partial model SteadyState
        "Abstract class for any dynamic state calculation (for any derivation), which is driven by SimulationType option."
        //allow to switch between dynamic mode 'der(y)=x' and steady-state mode 'der(y)=0'

        replaceable package Utilities = Types.FilesUtilities(directoryName=dirName)
                                                                        constrainedby
          Types.Utilities "How to store or load the values"
                       annotation (Dialog(group="Functions to read or store",tab="IO"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "Dynamic with Initialization or Steady State"
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

        parameter Boolean isDependent = false
          "=true, If zero flow is propagated in eqiulibrium through resistors, impedances, reactions, etc."
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

        parameter Real state_start "State start or init value"
         annotation (HideResult=true,Dialog(enable=false,group="Initialization", tab="IO"));

        Real state(start=if LOAD_STARTS then Utilities.readReal(stateName, storeUnit) else
       state_start, stateSelect=StateSelect.prefer)
          "This state must be connected in inherited class definition"
          annotation (HideResult=true);
        Real change "Dynamic change of state value per minute" annotation (HideResult=true);

        constant String dirName = "io" "Directory name to save and load values"
          annotation (HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter String storeUnit="" "Unit in Utilities input/output function"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter String stateName=getInstanceName()
          "Name in Utilities input/output function"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter Boolean LOAD_STARTS = false "Load start value of state"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter Boolean SAVE_RESULTS = false "Save final state values"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter Boolean SAVE_COMPARISON = false
          "Compare final state values with original values"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

      protected
        parameter Real defaultValue(fixed=false) "Default value of state.";
        parameter Real initialValue(fixed=false) "Initial value of state.";

      initial equation

        if Simulation == Types.SimulationType.NormalInit then
          state = state_start;
        elseif Simulation == Types.SimulationType.ReadInit then
          state = Utilities.readReal(stateName, storeUnit);
        elseif Simulation == Types.SimulationType.InitSteadyState and not isDependent then
          der(state)=0;  //here it have the same meaning as "change = 0", because of equation "der(state) = change"
        end if;

        initialValue = state; //in causality such as initialValue:=state
        if SAVE_COMPARISON then
          defaultValue = Utilities.readReal(stateName, storeUnit);
        else
          defaultValue = Modelica.Constants.N_A;
        end if;
      equation

        when terminal() then
          if SAVE_RESULTS then
            Utilities.writeReal(
              stateName,
              state,
              storeUnit);
          end if;
          if SAVE_COMPARISON then
            Utilities.writeComparison(
              stateName,
              defaultValue,
              initialValue,
              state,
              storeUnit);
          end if;
        end when;

        if Simulation <> Types.SimulationType.SteadyState then
          der(state) = change;
        elseif not isDependent then   /*** this test and equation exclusion could be done automatically, if the solver will be so smart that it removes all this dependent equations from the total equilibrated system. The most probable form of this dependent equation in equilibrium setting is (0 = 0). ***/
           change = 0;
        end if;

        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SteadyState;

      partial model SteadyStates
        "Abstract class for any dynamic states calculation (for any derivations), which is driven by SimulationType option."
        //allow to switch between dynamic mode 'der(y)=x' and steady-state mode 'der(y)=0'

        replaceable package Utilities = Types.FilesUtilities            constrainedby
          Types.Utilities "How to store or load the values"
                       annotation (Dialog(group="Functions to read or store",tab="IO"));

        parameter Integer n "Number of states"
          annotation (Dialog(group="Simulation"));

        Real state[n](start=state_start, stateSelect=StateSelect.prefer)
          "This state must be connected in inherited class definition";

        Real change[n] "Dynamic change of state value per minute";

        parameter Real state_start[n] "State start or init value"
         annotation (Dialog(enable=false,group="Initialization", tab="IO"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "Dynamic with Initialization or Steady State"
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

        constant String dirName = "io" "Directory name to save and load values"
          annotation (HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter Boolean SAVE_RESULTS = false
          "save and test final state values with original values"
           annotation (Dialog(group="Value I/O",tab="IO"));
        parameter Boolean SAVE_COMPARISON = false
          "Compare final state values with original values"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

        parameter String storeUnit[n]=fill("",n)
          "Unit in Utilities input/output function"
           annotation (Dialog(group="Value I/O",tab="IO"));

        parameter String stateName[n]=fill(getInstanceName(),n)
          "Name in Utilities input/output function"
           annotation (Dialog(group="Value I/O",tab="IO"));

        parameter Boolean isDependent[n]= fill(false,n)
          "=true, If zero flow is propagated in eqiulibrium through resistors, impedances, reactions, etc."
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

      protected
        parameter Real defaultValue[n](fixed=false) "Default value of state.";
        parameter Real initialValue[n](fixed=false) "Initial value of state.";

      initial equation
        for i in 1:n loop
        if Simulation == Types.SimulationType.NormalInit then
          state[i] = state_start[i];
        elseif Simulation == Types.SimulationType.ReadInit then
            state[i] = Utilities.readReal(stateName[i] + "[" +String(i)+"]", storeUnit[i]);
        elseif Simulation == Types.SimulationType.InitSteadyState and not isDependent[i] then
          der(state[i])=0;  //here it have the same meaning as "change = 0", because of equation "der(state) = change"
        end if;

        initialValue = state; //in causality such as initialValue:=state
        if SAVE_COMPARISON then
          defaultValue[i] = Utilities.readReal(stateName[i]+ "[" +String(i)+"]", storeUnit[i]);
        else
          defaultValue[i] = Modelica.Constants.N_A;
        end if;
        end for;
      equation

        when terminal() then
          if SAVE_RESULTS then
            for i in 1:n loop
              Utilities.writeReal(
                stateName[i]+ "[" +String(i)+"]",
                state[i],
                storeUnit[i]);
            end for;
          end if;
          if SAVE_COMPARISON then
            for i in 1:n loop
              Utilities.writeComparison(
                stateName[i]+ "[" +String(i)+"]",
                defaultValue[i],
                initialValue[i],
                state[i],
                storeUnit[i]);
            end for;
          end if;
        end when;

        if Simulation <> Types.SimulationType.SteadyState then
          der(state) = change;
        else
          for i in 1:n loop
            if not isDependent[n] then   /*** this test and equation exclusion could be done automatically, if the solver will be so smart that it removes all this dependent equations from the total equilibrated system. The most probable form of this dependent equation in equilibrium setting is (0 = 0). ***/
              change[i] = 0;
            end if;
          end for;
        end if;

        annotation (Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SteadyStates;

      partial class SteadyStateSystem
        "Global abstract class, for additional global state equations"

        parameter Types.SimulationType  Simulation(start=Types.SimulationType.NormalInit)
          "Dynamic with Initialization or Steady State"
          annotation (Dialog(group="Simulation type", tab="Simulation"));

        parameter Integer NumberOfDependentStates=1
          "Number of additional steady state equation of the system"
        annotation (Dialog(enable=false,group="Equilibrium", tab="Simulation"));

        Real normalizedState[NumberOfDependentStates]
          "Normalized independent masses of the system/Normalized independent energies of the system/... This variables must always equals to ones.";

      protected
        Real state[NumberOfDependentStates](each start=1)
          "In differential systems has the same meaning as the normalizedState. In steady state has no meaning.";

      initial equation
        if (Simulation == Types.SimulationType.SteadyState) or
                                                       (Simulation == Types.SimulationType.InitSteadyState) then
          state=ones(NumberOfDependentStates);
        end if;
      equation

        if Simulation == Types.SimulationType.SteadyState then
          normalizedState = ones(NumberOfDependentStates); //add additional global steady-state equations
          der(state)=zeros(NumberOfDependentStates);       //remove 'state' from system calculations
        else
          normalizedState = state; //nothing special, just definition of 'state' variable

          //Correct definition of normalizedState should fulfill the equation 'normalizedState=ones(NumberOfDependentStates)' during simulation.
          //The difference from vector 'ones(NumberOfDependentStates)' could be used as the solver calculation error vector.
        end if;

        annotation ( Documentation(revisions="<html>
<p><i>2013-2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SteadyStateSystem;
    end Interfaces;
    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>One of the main question in clinical medicine is how to stabilize the patient. In the fact of the oscillating heart, breathing, circadian rhythm or menstruation cycle the model could be designed as non-oscillating with variables such as period times, amplitudes, frequencies, mean values and other phase space variables. This type of model has better numerical stability for longer simulation time and even more it can be &QUOT;stabilized&QUOT;. This stabilization we called steady state. </p>
<p>To be mathematically exact, we define an <i><b>steady state system</b></i> (SSS) as a non-differential system derived from a original differential system (DS) by using zero derivations and by adding <b>additional steady state equations</b> (ASSE). The number of the ASSE must be the same as the number of algebraically dependent equations in the non-differential system derived from DS by setting zero derivations. The ASSE describes the system from the top view mostly such as the equations of mass conservation laws or the boundary equation of environment sources. To define a model as an SSS the user must switch each Simulation parameter in each block to value Types.SimulationType.SteadyState and must have correctly defined all necessary ASSE. This setting caused to ignoring any start values for any state and add zero derivation equations instead. Today does not exist Modelica environment, which could automatically find and remove generated dependent equations by this way. So the correct number of states must be marked as dependent (parameter isDependent) and the same number of ASSE must be inserted. Despite the fact, that model in this steady-state setting will be not locally balanced it should be globally balanced and without any dependent equation.</p>
<p>Adding of one ASSE is possible by inserting and connecting of the energy or mass conservation law block from package SteadyState.Components. Other possibilities is in blocks of environment&nbsp; sources, where the setting of parameter isIsolatedInSteadyState&nbsp; add the equation of the zero mass/volume/energy flow from or to environment. </p>
<p>The model in steady state often changes to one big nonlinear strong component, but without solver stiff or convergence problems. Especially in quick chemical reaction kinetics is not necessary to have very rapid molar fluxes, when it always reach equilibrium. This design also approve to create steady stated parts in dynamical model without huge rebuilding. It also&nbsp; brings other benefits. To see these possibilities, one have to realize that conservation laws could be invariances in a dynamical simulation. This is really useful for debugging. </p>
<p>It is always a big challenge to nicely solve initial values of differential system. However, it should be possible to solve the SSS in initial phase. And this is the idea behind the Types.SimulationTypes.InitSteadyState option for models already extended with ASSE to support SSS. </p>
</html>"));
  end SteadyStates;

  package Icons "Icons for physiological models"
    //extends Modelica.Icons.IconsPackage;
    extends Modelica.Icons.Package;
    package Library
        extends Modelica.Icons.Package;
    end Library;

    class Golem

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,98},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/golem.png")}));
    end Golem;

    class CardioVascular

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/csv.png")}));
    end CardioVascular;

    class Water

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/indexVoda.png")}));
    end Water;

    class Electrolytes

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/electrolytes.png")}));
    end Electrolytes;

    class Proteins

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-98,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/protein.png")}));
    end Proteins;

    class Gases

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/gases.png")}));
    end Gases;

    class NutrientsMetabolism

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/vyziva.png")}));
    end NutrientsMetabolism;

    class Heat

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/ohen.png")}));
    end Heat;

    class Hormones

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/hormony.png")}));
    end Hormones;

    class Nerves

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/nervyNeuron.png")}));
    end Nerves;

    class Setup

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/setup.png")}));
    end Setup;

    class Status

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-98,-100},{100,
                  100}}, fileName="modelica://Physiolibrary/Resources/Icons/tissueFitness.png")}));
    end Status;

    class SkeletalMuscle

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-70,92},{40,-80}},
                fileName="modelica://Physiolibrary/Resources/Icons/sval.png")}));
    end SkeletalMuscle;

    class Bone

      annotation (Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None), Bitmap(extent={{-88,96},{52,-84}},
                fileName="modelica://Physiolibrary/Resources/Icons/bone.png")}));
    end Bone;

    class OtherTissue

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-74,60},{48,-94}},
                fileName="modelica://Physiolibrary/Resources/Icons/pojivovaTkan.png")}));
    end OtherTissue;

    class RespiratoryMuscle

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-66,86},{44,-86}},
                fileName="modelica://Physiolibrary/Resources/Icons/respiracniSvaly.png")}));
    end RespiratoryMuscle;

    class Fat

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-84,86},{38,-68}},
                fileName="modelica://Physiolibrary/Resources/Icons/tukovaBunka.png")}));
    end Fat;

    class Skin

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-74,56},{48,-84}},
                fileName="modelica://Physiolibrary/Resources/Icons/skin.png")}));
    end Skin;

    class Brain

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-78,62},{44,-92}},
                fileName="modelica://Physiolibrary/Resources/Icons/brain.png")}));
    end Brain;

    class GITract

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-80,74},{42,-80}},
                fileName="modelica://Physiolibrary/Resources/Icons/traviciTrakt.png")}));
    end GITract;

    class LeftHeart

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),        graphics={Bitmap(extent={{-96,100},{24,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/srdceLeva.png")}));
    end LeftHeart;

    class RightHeart

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),       graphics={Bitmap(extent={{-26,66},{92,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/srdceprava.png")}));
    end RightHeart;

    class Liver

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-84,34},{86,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/jatra.png")}));
    end Liver;

    class Kidney

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-92,86},{40,-88}},
                fileName="modelica://Physiolibrary/Resources/Icons/kidney.png")}));
    end Kidney;

    class Bladder

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None), Bitmap(extent={{-92,86},{40,-88}},
                fileName="modelica://Physiolibrary/Resources/Icons/mocovyMechyr.png")}));
    end Bladder;

    class GILumen

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/traviciTrakt2.png")}));
    end GILumen;

    class ThyroidGland

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-92,86},{40,-88}},
                fileName="modelica://Physiolibrary/Resources/Icons/stitnaZlaza.png")}));
    end ThyroidGland;

    class Pancreas

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/pankreas.png")}));
    end Pancreas;

    class AdrenalGland

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/nadledviny.png")}));
    end AdrenalGland;

    class Lungs

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-70,92},{40,-80}},
                fileName="modelica://Physiolibrary/Resources/Icons/plice.png")}));
    end Lungs;

    class Tissues

      annotation (Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                -100},{100,100}}), graphics={
            Bitmap(extent={{-46,98},{32,26}}, fileName="modelica://Physiolibrary/Resources/Icons/bone.png"),
            Bitmap(extent={{-62,-10},{50,-92}}, fileName="modelica://Physiolibrary/Resources/Icons/skin.png"),
            Bitmap(extent={{-38,90},{64,-20}}, fileName="modelica://Physiolibrary/Resources/Icons/sval.png"),
            Bitmap(extent={{-10,36},{102,-56}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/traviciTrakt.png"),
            Text(
              extent={{64,-66},{94,-96}},
              lineColor={0,0,0},
              textString="..."),
            Bitmap(extent={{-98,36},{-24,-30}}, fileName="modelica://Physiolibrary/Resources/Icons/brain.png")}));

    end Tissues;

    class Peritoneum

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-70,92},{40,-80}},
                fileName="modelica://Physiolibrary/Resources/Icons/peritoneum.png")}));
    end Peritoneum;

    class Plasma

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-70,92},{40,-80}},
                fileName="modelica://Physiolibrary/Resources/Icons/plazma.png")}));
    end Plasma;

    class Hypophysis

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/hypofyza.png")}));
    end Hypophysis;

    class Heart

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/heart.png")}));
    end Heart;

    class SweatGland

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/potniZlaza.png")}));
    end SweatGland;

    class Cell

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/OsmothicCell.png")}));
    end Cell;

    class HeatLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,44},{76,-82}},
                fileName="modelica://Physiolibrary/Resources/Icons/ohen.png")}));

    end HeatLib;

    class StatusLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,-96},{72,40}},
                fileName="modelica://Physiolibrary/Resources/Icons/tissueFitness.png")}));

    end StatusLib;

     class NervesLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{72,-96}},
                fileName="modelica://Physiolibrary/Resources/Icons/nervyNeuron.png")}));

     end NervesLib;

    class NutrientsMetabolismLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-98,40},{80,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/vyziva.png")}));

    end NutrientsMetabolismLib;

    class OxygenLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{78,-98}},
                fileName="modelica://Physiolibrary/Resources/Icons/O2.png")}));
    end OxygenLib;

    class ProteinsLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-98,42},{76,-98}},
                fileName="modelica://Physiolibrary/Resources/Icons/protein.png")}));

    end ProteinsLib;

    class SetupLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-94,44},{72,-98}},
                fileName="modelica://Physiolibrary/Resources/Icons/setup.png")}));

    end SetupLib;

    class CardioVascularLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{76,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/csv.png")}));

    end CardioVascularLib;

    class WaterLib
     extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-90,42},{72,-84}},
                fileName="modelica://Physiolibrary/Resources/Icons/indexVoda.png")}));

    end WaterLib;

     class KidneyLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{72,-96}},
                fileName="modelica://Physiolibrary/Resources/Icons/Kidney.png")}));

     end KidneyLib;

    class ElectrolytesLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-78,38},{64,-94}},
                fileName="modelica://Physiolibrary/Resources/Icons/electrolytes.png")}));

    end ElectrolytesLib;

    class GasesLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-88,34},{66,-82}},
                fileName="modelica://Physiolibrary/Resources/Icons/gases.png")}));

    end GasesLib;

    class GolemLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{78,-98}},
                fileName="modelica://Physiolibrary/Resources/Icons/golem.png")}));
    end GolemLib;

    package BaseLib
      extends Modelica.Icons.Package;
    end BaseLib;

    class HormonesLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-88,30},{74,-88}},
                fileName="modelica://Physiolibrary/Resources/Icons/hormony.png")}));

    end HormonesLib;

     class AutonomicControlLib
      extends BaseLib;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-96,42},{72,-96}},
                fileName="modelica://Physiolibrary/Resources/Icons/sympatetickeNervy.png")}));

     end AutonomicControlLib;

    partial class Resistor

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Rectangle(
              extent={{-70,30},{70,-30}},
              lineColor={0,0,0},
              fillColor={241,241,241},
              fillPattern=FillPattern.Solid),
            Line(points={{-90,0},{-70,0}}),
            Line(points={{70,0},{90,0}})}));
    end Resistor;

    class Lymph

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/Lymph.png")}));
    end Lymph;

    class RespiratoryCenter

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/respiracniCentrum.png")}));
    end RespiratoryCenter;

    class Oxygen

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/O2.png")}));
    end Oxygen;

    class CarbonDioxide

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/prvkyCO2.png")}));
    end CarbonDioxide;

    class AcidBase

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/acidobaze.png")}));
    end AcidBase;

    class Ventilation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/dychani.png")}));
    end Ventilation;

    class PeripheralChemoreceptors

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/baroreflex.png")}));
    end PeripheralChemoreceptors;

    class HeatCore

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={Bitmap(extent={{-100,100},{
                  100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/torzo2.png")}));
    end HeatCore;

    class Glycogen

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                                 Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),     Bitmap(extent={{-100,100},{100,-100}},
                          fileName=
                  "modelica://Physiolibrary/Resources/Icons/glykogen.png")}));
    end Glycogen;

    class Lipids

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/FattyAcid.png")}));
    end Lipids;

    class KetoAcids

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/KetoAcid.png")}));
    end KetoAcids;

    class Glucose

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/glucose.png")}));
    end Glucose;

    class Lactate

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/Lactate.png")}));
    end Lactate;

    class AminoAcids

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/AminoAcid.png")}));
    end AminoAcids;

    class Urea

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/Urea.png")}));
    end Urea;

    class MetabolismPart

      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=true, extent={{-100,-100},{100,120}}),
            graphics={             Bitmap(extent={{28,120},{98,44}}, fileName=
                 "modelica://Physiolibrary/Resources/Icons/ohen.png")}));
    end MetabolismPart;

    class CellularMetabolism

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/cellularMetabolism.png")}));
    end CellularMetabolism;

    class FemaleSex

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/hormonesFemaleSex.png")}));
    end FemaleSex;

    class Barroreceptor

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/baroreflex.png")}));
    end Barroreceptor;

    class NervusVagus

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/vagus.png")}));
    end NervusVagus;

    class SympatheticNerves

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/sympatetickeNervy.png")}));
    end SympatheticNerves;

    class PhysicalExercise

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/cviceni.png")}));
    end PhysicalExercise;

    class SinoatrialNode

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/SANode.png")}));
    end SinoatrialNode;

    block StatusNormal

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaNormal.png")}));
    end StatusNormal;

    block StatusConfused

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaZmateni.png")}));
    end StatusConfused;

    block StatusImpaired

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaVaznejsiStav.png")}));
    end StatusImpaired;

    block StatusNotBreathing

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaNedychaSam.png")}));
    end StatusNotBreathing;

    block StatusComatose

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaKoma.png")}));
    end StatusComatose;

    block StatusMayBeDead

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaSkoroMrtvy.png")}));
    end StatusMayBeDead;

    block StatusIsReallyDead

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaMrtvy.png")}));
    end StatusIsReallyDead;

    class SkeletalMuscleAcidity

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/kyselostVeSvalech.png")}));
    end SkeletalMuscleAcidity;

    class Sodium

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/Na.png")}));
    end Sodium;

    class Potassium

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/K.png")}));
    end Potassium;

    class Phosphate

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/fosfat.png")}));
    end Phosphate;

    class Sulphate

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/sulfat02.png")}));
    end Sulphate;

    class Amonium

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/NH4.png")}));
    end Amonium;

    class Chloride

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/Cl.png")}));
    end Chloride;

    class LungShunt

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/lungBloodFlow.png")}));
    end LungShunt;

    class Hydrostatics

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/pressureMeassure.png")}));
    end Hydrostatics;

    class UpperTorso

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/torzo1.png")}));
    end UpperTorso;

    class MiddleTorso

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/torzo2.png")}));
    end MiddleTorso;

    class LowerTorso

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName="modelica://Physiolibrary/Resources/Icons/torzo3.png")}));
    end LowerTorso;

    class RedCells

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/cervenaKrvinka.png")}));
    end RedCells;

    class SystemicCirculation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/krevniRecisteSiluetacloveka.png")}));
    end SystemicCirculation;

    class PulmonaryCirculation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/krevniRecistePlice.png")}));
    end PulmonaryCirculation;

    class Blood

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/bloodProperties.png")}));
    end Blood;

    class BaseFactorIcon0

      annotation (Icon(graphics={  Rectangle(
              extent={{-100,60},{100,-40}},
              lineColor={0,127,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-76,44},{64,-22}},
              lineColor={0,0,0},
              textString="%name")}));
    end BaseFactorIcon0;

    partial class BaseFactorIcon

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,20})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-40})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
              extent={{-100,20},{100,-20}},
              lineColor={95,95,95},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-90,-10},{92,10}},
              textString="%name",
              lineColor={0,0,0})}));
    end BaseFactorIcon;

    partial class BaseFactorIcon2

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,60})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-60})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
              extent={{-100,50},{100,-50}},
              lineColor={0,127,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-86,-36},{100,40}},
              textString="%name",
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere)}));
    end BaseFactorIcon2;

    partial class BaseFactorIcon3

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,20})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-40})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
              extent={{-100,20},{100,-20}},
              lineColor={0,127,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-90,-10},{92,10}},
              textString="%name",
              lineColor={0,0,0})}));
    end BaseFactorIcon3;

    partial class BaseFactorIcon4

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,20})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-40})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
              extent={{-100,20},{100,-20}},
              lineColor={127,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-90,-10},{92,10}},
              textString="%name",
              lineColor={0,0,0})}));
    end BaseFactorIcon4;

    partial class BaseFactorIcon5

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,20})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-40})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
              extent={{-100,20},{100,-20}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Sphere), Text(
              extent={{-90,-10},{92,10}},
              textString="%name",
              lineColor={0,0,0})}));
    end BaseFactorIcon5;

    partial class BaseFactorIcon6

      Modelica.Blocks.Interfaces.RealInput yBase
                       annotation (Placement(transformation(extent={{-20,-20},{
                20,20}},
            rotation=270,
            origin={0,20})));
      Modelica.Blocks.Interfaces.RealOutput y
                    annotation (Placement(transformation(extent={{-20,-20},{20,
                20}},
            rotation=270,
            origin={0,-40})));

     annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={Rectangle(
            extent={{-100,20},{100,-20}},
            lineColor={0,87,87},
            fillColor={255,255,255},
            fillPattern=FillPattern.Sphere)}));
    end BaseFactorIcon6;

    partial class ConversionIcon "Base icon for conversion functions"

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={191,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-74,0},{30,0}}, color={191,0,0}),
            Polygon(
              points={{80,0},{20,20},{20,-20},{80,0}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid)}));

    end ConversionIcon;

    partial class Diffusion

      annotation (Icon(graphics={Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/diffusion.png")}));

    end Diffusion;

    class Substance

        annotation ( Icon(coordinateSystem(
              preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
            graphics={Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/Concentration.png")}));
    end Substance;

    class Speciation

      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
            graphics={Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/Speciation.png"), Text(
              extent={{-182,-84},{60,-118}},
              lineColor={0,0,255},
              textString="%name")}));
    end Speciation;

    class MolarFlowMeasure

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/molarFlowMeassure.png")}));
    end MolarFlowMeasure;

    class GasSolubility

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/GasSolubility.png")}));
    end GasSolubility;

    class Reabsorption

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/reabsorption.png")}));
    end Reabsorption;

    class Reabsorption2

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/reabsorption.png")}));
    end Reabsorption2;

    class Dilution

      annotation (Icon(graphics={     Bitmap(extent={{-100,101},{100,-101}},
                fileName="modelica://Physiolibrary/Resources/Icons/dilution.png",
              origin={0,33},
              rotation=270)}));
    end Dilution;

    class ElasticBalloon

    annotation (Icon(graphics={     Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/elastickyKompartment - Kopie.png")}));
    end ElasticBalloon;

    class BloodElasticCompartment

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/elastickyKompartment.png")}));
    end BloodElasticCompartment;

    class BloodSequesteredCompartment

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,
                  -100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/sequerestedVolume.png")}));
    end BloodSequesteredCompartment;

    partial class HydraulicResistor

    annotation (Icon(graphics={    Bitmap(extent={{-120,44},{120,-42}},
                fileName="modelica://Physiolibrary/Resources/Icons/resistance.png")}));
    end HydraulicResistor;

    class FlowMeasure

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                                      Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/flowMeassure.png")}));
    end FlowMeasure;

    class Membrane

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/membrane.png")}));
    end Membrane;

    class PressureMeasure

      annotation ( Icon(graphics={Bitmap(extent={
                  {-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/pressureMeassure.png")}));
    end PressureMeasure;

    class InternalElasticBalloon

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/ventilatorCapacitance.png")}));
    end InternalElasticBalloon;

    class Inertance

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/ventilatorInertance.png")}));
    end Inertance;

    class HydrostaticGradient

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Bitmap(extent={{-100,100},{102,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/hydrostaticGradient.png")}));

    end HydrostaticGradient;

    class Radiator

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/Radiator.png")}));
    end Radiator;

    class MichaelisMenten

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-80,84},{86,-26}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/MichaelisMenten.png")}));
    end MichaelisMenten;

    class HeatAccumulation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/HeatAccumulation.png")}));
    end HeatAccumulation;

    class OsmoticCell

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/OsmothicCell.png")}));
    end OsmoticCell;

    class IdealGas

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/IdealGas.png")}));
    end IdealGas;

    class PartialPressure

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/PartialPressure.png")}));
    end PartialPressure;

    class ConservationLaw

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={170,255,213},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Polygon(
              points={{-40,-60},{-40,-20},{-80,-40},{-40,-60}},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              lineColor={0,0,0}),
            Line(
              points={{-80,10},{-80,-80},{-80,-80}})}));
    end ConservationLaw;

    class Nephron

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/Nefron.png")}));
    end Nephron;

    class Torso

      annotation (Icon(graphics={            Bitmap(extent={{-28,98},{28,58}},
                          fileName="modelica://Physiolibrary/Resources/Icons/torzo1.png"),
                                             Bitmap(extent={{-40,56},{40,-24}},
                          fileName="modelica://Physiolibrary/Resources/Icons/torzo2.png"),
                                             Bitmap(extent={{-40,-18},{40,-98}},
                          fileName="modelica://Physiolibrary/Resources/Icons/torzo3.png")}));
    end Torso;

    class PerfusionOD

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-160,100},{152,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/perfusion.png")}));
    end PerfusionOD;

    class PerfusionDO

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-160,100},{160,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/perfusion2.png")}));
    end PerfusionDO;

    class CollapsingVessel

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/kolaps.png")}));
    end CollapsingVessel;

    class PeripheralCirculation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/krevniReciste.png")}));
    end PeripheralCirculation;

    class HeartVentricle

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
                      Bitmap(extent={{-100,100},{100,-100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/komoraSrdce.png")}));
    end HeartVentricle;

    class Population

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,100},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/Populace.png")}));
    end Population;

    class FlowFiltration

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,74},{100,-100}},
                fileName=
                  "modelica://Physiolibrary/Resources/Icons/flowFiltration.png")}));
    end FlowFiltration;

    class Microcirculation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-100,98},{100,-100}},
                fileName="modelica://Physiolibrary/Resources/Icons/microcirculation.png")}));
    end Microcirculation;
    annotation (Documentation(revisions=""));
  end Icons;

  package Types "Physiological units with nominals"
    //extends Modelica.Icons.TypesPackage;
    extends Modelica.Icons.Package;
  //If you have an idea to add the next physiological type to the next version, please write me at marek@matfyz.cz. Thank you

    package UsersGuide "User's Guide"
      extends Modelica.Icons.Information;

    class NewType "Adding new type"
      extends Modelica.Icons.Information;

     annotation (Documentation(info="<html>
<p>Definition of new type (&QUOT;QuantityX&QUOT;) in Physiolibrary:</p>
<ul>
<li>Define base type Types.QuantityX with SI units in &QUOT;final unit&QUOT;, default display units and nominal (e.g. value of one display unit at SI units). </li>
</ul>
<p>Optional: </p>
<ul>
<li>Define typed input and output connectors for QuantityX: Types.RealIO.QuantityXInput and Types.RealIO.QuantityXOutput. </li>
<li>Define typed constant for QuantityX: Types.Constants.QuantityXConst </li>
<li>Define typed RealInputParameter for QuantityX: Types.RealInputParameters.QuantityX </li>
<li>Define typed replaceable variable RealTypes for QuantityX: Types.RealTypes.QuantityX </li>
</ul>
</html>"));
    end NewType;

    annotation (DocumentationClass=true, Documentation(info="<html>
<p>Package <b>Physiolibrary</b> is a modelica package for <b>Human Physiology</b> that is developed from <b>HumMod</b> modelica implementation, see <a href=\"http://patf-biokyb.lf1.cuni.cz/wiki/hummod/hummod\">http://hummod.org</a>. It provides constants, types, connectors, partial models and model components fitted for physiological models of human body. </p>
<p>This is a short <b>User&apos;s Guide</b> for the overall library. Some of the main sublibraries have their own User&apos;s Guides that can be accessed by the following links: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td valign=\"top\"><p>Types </p></td>
<td valign=\"top\"><p>Physiological types. Physiological unit vs. SI units, nominals, inputs/outputs, typed constants.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Blocks</p></td>
<td valign=\"top\"><p>Useful blocks, that are missing in package Modelica.Blocks (MSL 3.2), cubic interpolation curves, multiplication factors.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Chemical</p></td>
<td valign=\"top\"><p>Library to chemical subsystems such as intravascular, interstitial or intracellular chemical substances in fluxes and interactions.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Hydraulic</p></td>
<td valign=\"top\"><p>Library to hydraulic subsystems such as in cardiovascular system.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Thermal</p></td>
<td valign=\"top\"><p>Library of termoregulation support.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Osmotic</p></td>
<td valign=\"top\"><p>Library to model water fluxes through semipermeable membrane caused by osmotic pressure.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Mixed</p></td>
<td valign=\"top\"><p>Library to join domains above together.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Icons</p></td>
<td valign=\"top\"><p>Icons</p></td>
</tr>
<tr>
<td valign=\"top\"><p>FileUtilities</p></td>
<td valign=\"top\"><p>Read/write values from/to file. </p></td>
</tr>
</table>
</html>"));
    end UsersGuide;

    package Examples
      "Examples that demonstrate usage of the Pressure flow components"
    extends Modelica.Icons.ExamplesPackage;
      model Units
      extends Modelica.Icons.Example;
       model ParametricClass

        parameter Temperature temperature;
        parameter Heat heat;
        parameter Pressure pressure;
        parameter Volume volume;
        parameter AmountOfSubstance amountOfSubstance;
        parameter ElectricCharge electricCharge;
        parameter ElectricCurrent electricCurrent;

        parameter Time time_;
        parameter Energy energy;
        parameter Mass mass;
        parameter ElectricPotential electricalPotential;
        parameter MassFlowRate massFlowRate;
        parameter Density density;
        parameter Height height;
        parameter Acceleration acceleration;

        parameter VolumeFlowRate volumeFlowRate;
        parameter Concentration concentration;
        parameter Osmolarity osmolarity;

        parameter MolarFlowRate molarFlowRate;
         parameter HeatFlowRate heatFlowRate;
        parameter ThermalConductance thermalConductance;
        parameter SpecificHeatCapacity specificHeatCapacity;
        parameter SpecificEnergy specificEnergy(displayUnit="cal/g");

        parameter Fraction fraction;
        parameter OsmoticPermeability osmoticPermeability;
        parameter DiffusionPermeability diffusionPermeability;
        parameter HydraulicConductance hydraulicConductance;
        parameter HydraulicInertance hydraulicInertance;
        parameter GasSolubility gasSolubility;

        parameter AmountOfSubstance gasSTP(displayUnit="litre_STP");
        parameter AmountOfSubstance gasSATP(displayUnit="litre_SATP");
        parameter AmountOfSubstance gasNIST(displayUnit="litre_NIST");

       end ParametricClass;

        ParametricClass parametricClass(
          acceleration=1,
          concentration=1,
          osmolarity=1,
          gasSTP(displayUnit="litre_STP") = 0.0440316172572,
          mass(displayUnit="ug") = 1e-09,
          temperature=274.15,
          heat=4186.8,
          pressure=133.322387415,
          volume=1e-06,
          amountOfSubstance=0.001,
          electricCharge=96.4853399,
          electricCurrent=1.6080889983333,
          time_=60,
          energy=4186.8,
          electricalPotential=0.001,
          massFlowRate=1.6666666666667e-08,
          density=1000,
          height=0.01,
          volumeFlowRate=1.6666666666667e-08,
          molarFlowRate=1.6666666666667e-05,
          heatFlowRate=69.78,
          thermalConductance=69.78,
          specificHeatCapacity=4186.8,
          specificEnergy=4186.8,
          fraction=0.01,
          osmoticPermeability=1.2501026264094e-10,
          diffusionPermeability=1.6666666666667e-08,
          hydraulicConductance=1.2501026264094e-10,
          hydraulicInertance=479960594694,
          gasSolubility=2.4789568751177,
          gasSATP=0.040339548059044,
          gasNIST=0.041571199502531)
          annotation (Placement(transformation(extent={{-14,8},{6,28}})));
        annotation (experiment(StopTime=1),
       Documentation(info="<html>
<p>If your environment fully support the physiological units, then the user dialog of setting parameters should display only values &QUOT;1&QUOT; of physiological unit.</p>
</html>"));
      end Units;

      package IO_Bus
        import Physiolibrary;
        extends Physiolibrary.Types.IO_Bus;

        redeclare model extends Variables "Example of subsystem outputs"

          T.Pressure Bone_PO2(varName="Bone-Flow.PO2")
            "Partial oxygen pressure in bone blood venules."
          annotation (Placement(transformation(extent={{-80,24},{2,106}})));
          T.VolumeFlowRate BoneBloodFlow(varName="Bone-Flow.BloodFlow")
            "Blood flow through bones"
          annotation (Placement(transformation(extent={{-80,-10},{2,72}})));
          T.MolarFlowRate BoneO2Need(varName="Bone-Metabolism.O2-Need")
            "Current desired delivery flow of oxygen to bone metabolism"
          annotation (Placement(transformation(extent={{-80,-50},{2,32}})));
          T.Volume BoneLiquidVol(varName="Bone-Tissue.LiquidVol")
            "The extravascular water in bones. "
          annotation (Placement(transformation(extent={{-80,-92},{2,-10}})));

        equation
          connect(Bone_PO2.y, busConnector.Bone_PO2) annotation (Line(
              points={{6.1,65},{70.05,65},{70.05,-2},{90,-2}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneBloodFlow.y, busConnector.Bone_BloodFlow)
                                                           annotation (Line(
              points={{6.1,31},{71.05,31},{71.05,-2},{90,-2}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneO2Need.y, busConnector.Bone_O2Need)
                                                        annotation (Line(
              points={{6.1,-9},{71.05,-9},{71.05,-2},{90,-2}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneLiquidVol.y, busConnector.Bone_LiquidVol)
                                                           annotation (Line(
              points={{6.1,-51},{71.05,-51},{71.05,-2},{90,-2}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (experiment(StopTime=1));
        end Variables;

        model Test
          import Physiolibrary;
          extends Modelica.Icons.Example;

          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-4,-2},{36,38}})));
          Physiolibrary.Types.Examples.IO_Bus.OutputToFile outputToFile
            annotation (Placement(transformation(extent={{70,48},{90,68}})));
          Physiolibrary.Types.Constants.PressureConst
                     Bone_PO2(k=5599.54027143)
            "Partial oxygen pressure in bone blood venules."
          annotation (Placement(transformation(extent={{-90,70},{-70,90}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst
                           BoneBloodFlow(k=5.3333333333333e-06)
            "Blood flow through bones"
          annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
          Physiolibrary.Types.Constants.MolarFlowRateConst
                          BoneO2Need(k(displayUnit="ml_STP/min") = 1.027404402668e-05)
            "Current desired delivery flow of oxygen to bone metabolism"
          annotation (Placement(transformation(extent={{-90,-34},{-70,-14}})));
          Physiolibrary.Types.Constants.VolumeConst
                   BoneLiquidVol(k=0.0027) "The extravascular water in bones. "
          annotation (Placement(transformation(extent={{-90,-70},{-70,-50}})));
          Physiolibrary.Types.Examples.IO_Bus.OutputToFile_SI outputToFile_SI
            annotation (Placement(transformation(extent={{72,-26},{92,-6}})));
        equation
          connect(busConnector, outputToFile.busConnector) annotation (Line(
              points={{16,18},{48,18},{48,58},{80,58}},
              color={255,204,51},
              thickness=0.5));
          connect(Bone_PO2.y, busConnector.Bone_PO2) annotation (Line(
              points={{-67.5,80},{-11.95,80},{-11.95,18},{16,18}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneBloodFlow.y, busConnector.Bone_BloodFlow)
                                                           annotation (Line(
              points={{-67.5,40},{-10.95,40},{-10.95,18},{16,18}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneO2Need.y, busConnector.Bone_O2Need)
                                                        annotation (Line(
              points={{-67.5,-24},{-10.95,-24},{-10.95,18},{16,18}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BoneLiquidVol.y, busConnector.Bone_LiquidVol)
                                                           annotation (Line(
              points={{-67.5,-60},{-10.95,-60},{-10.95,18},{16,18}},
              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(busConnector, outputToFile_SI.busConnector) annotation (Line(
              points={{16,18},{48,18},{48,-16},{82,-16}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
        end Test;
        annotation (Documentation(info="<html>
<p>Subsystem initial and terminal data manipulations using busConnector (Physiomodel expandable connector).</p>
<h4>Be surre, that the directory &QUOT;io&QUOT; is in working directory (File-&GT;Change Directory...)!</h4>
<p>Implementation:</p>
<p>Model should be divided into subsystems, which has <b>output</b> variables grouped to busConnector (variables, which are inputs to other subsystems). For each subsystem S: <b>all</b> these variables should be defined in <b>extended redeclared</b> class S.IO_Bus.Variables, where package S.IO_Bus is <b>extended</b> from Physiolibrary.Types.IO_Bus. </p>
<p>Usage:</p>
<p>For loading values in SI units of these variables from file &QUOT;io/input_SI.txt&QUOT; use block S.IO_Bus.InputFromFile_SI.</p>
<p>For loading values in non-SI units of these variables from file &QUOT;io/input.txt&QUOT; use block S.IO_Bus.InputFromFile.</p>
<p>For storing values in SI units of these variables from file &QUOT;io/output_SI.txt&QUOT; use block S.IO_Bus.OutputToFile_SI.</p>
<p>For storing values in non-SI units of these variables from file &QUOT;io/output.txt&QUOT; use block S.IO_Bus.OutputToFile.</p>
<p>For comparison values in SI units of these variables with file &QUOT;io/input_SI.txt&QUOT; use block S.IO_Bus.OutputComparison_SI and result will be stored as &QUOT;io/comparison_SI.txt&QUOT;.</p>
<p>For comparison values in non-SI units of these variables with file &QUOT;io/input.txt&QUOT; use block S.IO_Bus.OutputComparison and result will be stored as &QUOT;io/comparison.txt&QUOT;.</p>
</html>"));
      end IO_Bus;
    end Examples;

    package Constants
      extends Modelica.Icons.SourcesPackage;

    block AccelerationConst "Constant signal of type Acceleration"
     parameter Types.Acceleration k "Constant Acceleration output value";
          RealIO.AccelerationOutput y "Acceleration constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="acceleration",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end AccelerationConst;

    block AmountOfSubstanceConst "Constant signal of type AmountOfSubstance"
     parameter Types.AmountOfSubstance k
          "Constant AmountOfSubstance output value";
          RealIO.AmountOfSubstanceOutput y "AmountOfSubstance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="amountOfSubstance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end AmountOfSubstanceConst;

    block ConcentrationConst "Constant signal of type Concentration"
     parameter Types.Concentration k "Constant Concentration output value";
          RealIO.ConcentrationOutput y "Concentration constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="concentration",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end ConcentrationConst;

    block DensityConst "Constant signal of type Density"
     parameter Types.Density k "Constant Density output value";
          RealIO.DensityOutput y "Density constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="density",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end DensityConst;

    block DiffusionPermeabilityConst
        "Constant signal of type DiffusionPermeability"
     parameter Types.DiffusionPermeability k
          "Constant DiffusionPermeability output value";
          RealIO.DiffusionPermeabilityOutput y "DiffusionPermeability constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="diffusionPermeability",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end DiffusionPermeabilityConst;

    block ElectricChargeConst "Constant signal of type ElectricCharge"
     parameter Types.ElectricCharge k "Constant ElectricCharge output value";
          RealIO.ElectricChargeOutput y "ElectricCharge constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricCharge",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end ElectricChargeConst;

    block ElectricCurrentConst "Constant signal of type ElectricCurrent"
     parameter Types.ElectricCurrent k "Constant ElectricCurrent output value";
          RealIO.ElectricCurrentOutput y "ElectricCurrent constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricCurrent",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end ElectricCurrentConst;

    block ElectricPotentialConst "Constant signal of type ElectricPotential"
     parameter Types.ElectricPotential k
          "Constant ElectricPotential output value";
          RealIO.ElectricPotentialOutput y "ElectricPotential constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricPotential",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end ElectricPotentialConst;

      block EnergyConst "Constant signal of type Energy"
        parameter Types.Energy k "Constant Energy output value";
          RealIO.EnergyOutput y "Energy constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="energy",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
      end EnergyConst;

    block FractionConst "Constant signal of type Fraction"
     parameter Types.Fraction k "Constant Fraction output value";
          RealIO.FractionOutput y "Fraction constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="fraction",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end FractionConst;

    block FrequencyConst "Constant signal of type Frequency"
     parameter Types.Frequency k "Constant Frequency output value";
          RealIO.FrequencyOutput y "Frequency constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="frequency",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end FrequencyConst;

    block GasSolubilityConst "Constant signal of type GasSolubility"
     parameter Types.GasSolubility k "Constant GasSolubility output value";
          RealIO.GasSolubilityOutput y "GasSolubility constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="gasSolubility",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end GasSolubilityConst;

    block HeatConst "Constant signal of type Heat"
     parameter Types.Heat k "Constant Heat output value";
          RealIO.HeatOutput y "Heat constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="heat",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HeatConst;

    block HeightConst "Constant signal of type Height"
     parameter Types.Height k "Constant Height output value";
          RealIO.HeightOutput y "Height constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="height",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HeightConst;

    block HeatFlowRateConst "Constant signal of type HeatFlowRate"
     parameter Types.HeatFlowRate k "Constant HeatFlowRate output value";
          RealIO.HeatFlowRateOutput y "HeatFlowRate constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="heatFlowRate",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HeatFlowRateConst;

    block HydraulicComplianceConst
        "Constant signal of type HydraulicCompliance"
     parameter Types.HydraulicCompliance k
          "Constant HydraulicCompliance output value";
          RealIO.HydraulicComplianceOutput y "HydraulicCompliance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicCompliance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HydraulicComplianceConst;

    block HydraulicElastanceConst
        "Obsolete, please use HydraulicCompliance instead!"
      extends Modelica.Icons.ObsoleteModel;
     parameter Types.HydraulicElastance k "Hydraulic elastance";
          Modelica.Blocks.Interfaces.RealOutput
                                           y(final quantity="HydraulicCompliance",final unit="Pa/m3", displayUnit="mmHg/ml", nominal=(133.322387415)/(1e-6))
          "HydraulicElastance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicElastance",
                      Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}),
          Documentation(info="<html>
<p>Please use the reciprocal value of hydraulic elastance, wich is called hydraulic compliance for the compatibility with other blocks and models!</p>
<p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Blocks.Math.Reciprocal) before connecting to library components!</p>
</html>"));
    end HydraulicElastanceConst;

    block HydraulicElastanceToComplianceConst
        "Constant signal of type HydraulicCompliance from HydraulicElastance constant"
     parameter Types.HydraulicElastance k
          "Reciprocal constant value of hydraulic compliance";
          RealIO.HydraulicComplianceOutput y "HydraulicCompliance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=1/k;
      annotation (defaultComponentName="hydraulicElastance2Compliance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HydraulicElastanceToComplianceConst;

    block HydraulicConductanceConst
        "Constant signal of type HydraulicConductance"
     parameter Types.HydraulicConductance k
          "Constant HydraulicConductance output value";
          RealIO.HydraulicConductanceOutput y "HydraulicConductance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicConductance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HydraulicConductanceConst;

    block HydraulicResistanceConst
        "Obsolete, please use HydraulicConductance instead!"

     parameter Types.HydraulicResistance k "Hydraulic resistance";
          Modelica.Blocks.Interfaces.RealOutput
                                            y(final quantity="HydraulicConductance",final unit="(Pa.s)/m3", displayUnit="(mmHg.min)/ml", nominal=(1e+6)*(133.322387415)*60)
          "HydraulicResistance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicResistance",
                      Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}),
          Documentation(info="<html>
<p>Please use the reciprocal value of hydraulic resistance, wich is called hydraulic conductance for the compatibility with other blocks and models!</p>
<p>Because zero hydraulic conductance means zero volumetric flow, it is much better to use this reciprocal value of hydraulic resistance.</p>
<p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Blocks.Math.Reciprocal) before connecting to library components!</p>
</html>"));
    end HydraulicResistanceConst;

    block HydraulicResistanceToConductanceConst
        "Constant signal of type HydraulicConductance from HydraulicResistance parameter"
     parameter Types.HydraulicResistance k
          "Reciprocal constant value of hydraulic conductance";
          RealIO.HydraulicConductanceOutput y "HydraulicConductance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=1/k;
      annotation (defaultComponentName="hydraulicResistance2conductance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HydraulicResistanceToConductanceConst;

    block HydraulicInertanceConst "Constant signal of type HydraulicInertance"
     parameter Types.HydraulicInertance k
          "Constant HydraulicInertance output value";
          RealIO.HydraulicInertanceOutput y "HydraulicInertance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicInertance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end HydraulicInertanceConst;

    block MassConst "Constant signal of type Mass"
     parameter Types.Mass k "Constant Mass output value";
          RealIO.MassOutput y "Mass constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="mass",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end MassConst;

    block MassConcentrationConst "Constant signal of type MassConcentration"
     parameter Types.MassConcentration k
          "Constant MassConcentration output value";
          RealIO.MassConcentrationOutput y "MassConcentration constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="massConcentration",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end MassConcentrationConst;

    block MassFlowRateConst "Constant signal of type MassFlowRate"
     parameter Types.MassFlowRate k "Constant MassFlowRate output value";
          RealIO.MassFlowRateOutput y "MassFlowRate constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="massFlowRate",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end MassFlowRateConst;

    block MolarFlowRateConst "Constant signal of type MolarFlowRate"
     parameter Types.MolarFlowRate k "Constant MolarFlowRate output value";
          RealIO.MolarFlowRateOutput y "MolarFlowRate constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="molarFlowRate",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end MolarFlowRateConst;

    block OsmolarityConst "Constant signal of type Osmolarity"
     parameter Types.Osmolarity k "Constant Osmolarity output value";
          RealIO.OsmolarityOutput y "Osmolarity constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="osmolarity",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end OsmolarityConst;

    block OsmoticPermeabilityConst
        "Constant signal of type OsmoticPermeability"
     parameter Types.OsmoticPermeability k
          "Constant OsmoticPermeability output value";
          RealIO.OsmoticPermeabilityOutput y "OsmoticPermeability constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="osmoticPermeability",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end OsmoticPermeabilityConst;

    block PressureConst "Constant signal of type Pressure"
     parameter Types.Pressure k "Constant Pressure output value";
          RealIO.PressureOutput y "Pressure constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="pressure",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end PressureConst;

    block SpecificEnergyConst "Constant signal of type SpecificEnergy"
     parameter Types.SpecificEnergy k "Constant SpecificEnergy output value";
          RealIO.SpecificEnergyOutput y "SpecificEnergy constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="specificEnergy",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end SpecificEnergyConst;

    block SpecificHeatCapacityConst
        "Constant signal of type SpecificHeatCapacity"
     parameter Types.SpecificHeatCapacity k
          "Constant SpecificHeatCapacity output value";
          RealIO.SpecificHeatCapacityOutput y "SpecificHeatCapacity constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="specificHeatCapacity",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end SpecificHeatCapacityConst;

    block TemperatureConst "Constant signal of type Temperature"
     parameter Types.Temperature k "Constant Temperature output value";
          RealIO.TemperatureOutput y "Temperature constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="temperature",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end TemperatureConst;

    block ThermalConductanceConst "Constant signal of type ThermalConductance"
     parameter Types.ThermalConductance k
          "Constant ThermalConductance output value";
          RealIO.ThermalConductanceOutput y "ThermalConductance constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="thermalConductance",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end ThermalConductanceConst;

    block TimeConst "Constant signal of type Time"
     parameter Types.Time k "Constant Time output value";
          RealIO.TimeOutput y "Time constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="time",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end TimeConst;

    block VolumeFlowRateConst "Constant signal of type VolumeFlowRate"
     parameter Types.VolumeFlowRate k "Constant VolumeFlowRate output value";
          RealIO.VolumeFlowRateOutput y "VolumeFlowRate constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volumeFlowRate",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end VolumeFlowRateConst;

    block VolumeConst "Constant signal of type Volume"
     parameter Types.Volume k "Constant Volume output value";
          RealIO.VolumeOutput y "Volume constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volume",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end VolumeConst;

    block DeprecatedUntypedConstant
        "Deprecated Untyped Constant for automatic conversion from initial versions of Physiolibrary"
      extends Modelica.Icons.ObsoleteModel;
     parameter Real k "Untyped constant output value";
     parameter String varName="";
     parameter String units="1";

          Modelica.Blocks.Interfaces.RealOutput
                                    y "Untyped constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="acceleration",
                      Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end DeprecatedUntypedConstant;

    block pHConst "Constant signal of type pH"
     parameter Types.pH k "Constant pH output value";
          Types.RealIO.pHOutput y "pH constant" annotation (Placement(
            transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={{40,
                -10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="pH",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end pHConst;

    block VolumeDensityOfChargeConst
        "Constant signal of type VolumeDensityOfCharge"
     parameter Types.VolumeDensityOfCharge k
          "Constant VolumeDensityOfCharge output value";
          Types.RealIO.VolumeDensityOfChargeOutput y
          "VolumeDensityOfCharge constant"
                                         annotation (Placement(transformation(
              extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volumeDensityOfCharge",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end VolumeDensityOfChargeConst;

    block VelocityConst "Constant signal of type Velocity"
     parameter Types.Velocity k "Constant Velocity output value";
          Types.RealIO.VelocityOutput y "Velocity constant"
                                         annotation (Placement(transformation(
              extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="velocity",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end VelocityConst;

    block PowerConst "Constant signal of type Power"
     parameter Types.Power k "Constant Power output value";
          RealIO.PowerOutput y "Power constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="power",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end PowerConst;

    block PositionConst "Constant signal of type Position"
     parameter Types.Position k "Constant Position output value";
          RealIO.PositionOutput y "Position constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="height",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end PositionConst;

      block MolarEnergyConst "Constant signal of type MolarEnergy"
        parameter Types.MolarEnergy k "Constant MolarEnergy output value";
          RealIO.MolarEnergyOutput y "MolarEnergy constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="molarEnergy",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
      end MolarEnergyConst;

    block OneConst "1"

          RealIO.FractionOutput     y "=1"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=1;
      annotation (defaultComponentName="one",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
              textString="1")}));
    end OneConst;

      block PopulationConst "Constant signal of type Population"
        parameter Types.Population k "Constant Population output value";
          RealIO.PopulationOutput y "Population constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="population",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
      end PopulationConst;

      block PopulationChangeConst "Constant signal of type PopulationChange"
        parameter Types.PopulationChange k
          "Constant PopulationChange output value";
          RealIO.PopulationChangeOutput y "PopulationChange constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="populationChange",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
      end PopulationChangeConst;

      block PopulationChangePerMemberConst
        "Constant signal of type PopulationChangePerMember"
        parameter Types.Time LifeTime
          "Mean lifetime as 1/PopulationChangePerMember output value";
          RealIO.PopulationChangePerMemberOutput y
          "PopulationChangePerMember constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      equation
          y=1/LifeTime;
      annotation (defaultComponentName="populationChangePerMember",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
      end PopulationChangePerMemberConst;
    end Constants;

    package ScaleConstants
        extends Modelica.Icons.SourcesPackage;

    block Power "Constant signal of type Power per Mass"
     parameter Types.PowerPerMass k "Constant Power output value";
          RealIO.PowerOutput y "Power constant"
        annotation (Placement(transformation(extent={{40,-10},{60,10}}),
                    iconTransformation(extent={{40,-10},{60,10}})));
      RealIO.MassInput mass annotation (Placement(transformation(extent={{-20,20},{20,
                60}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,40})));
    equation
          y=k*mass;
      annotation (defaultComponentName="power",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name"),
            Text(         extent={{-40,10},{40,-10}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString="Const")}));
    end Power;
    end ScaleConstants;

    package RealIO
      extends Modelica.Icons.Package;

      connector AccelerationInput = input Acceleration
        "input Acceleration as connector"
        annotation (defaultComponentName="acceleration",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Acceleration.
    </p>
    </html>"));
      connector AccelerationOutput = output Acceleration
        "output Acceleration as connector"
        annotation (defaultComponentName="acceleration",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector AmountOfSubstanceInput = input AmountOfSubstance
        "input AmountOfSubstance as connector"
        annotation (defaultComponentName="amountofsubstance",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type AmountOfSubstance.
    </p>
    </html>"));
      connector AmountOfSubstanceOutput = output AmountOfSubstance
        "output AmountOfSubstance as connector"
        annotation (defaultComponentName="amountofsubstance",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector ConcentrationInput = input Concentration
        "input Concentration as connector"
        annotation (defaultComponentName="concentration",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Concentration.
    </p>
    </html>"));
      connector ConcentrationOutput = output Concentration
        "output Concentration as connector"
        annotation (defaultComponentName="concentration",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector DiffusionPermeabilityInput = input DiffusionPermeability
        "input DiffusionPermeability as connector"
        annotation (defaultComponentName="diffusionmembranepermeability",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type DiffusionMembranePermeability.
    </p>
    </html>"));
      connector DiffusionPermeabilityOutput = output DiffusionPermeability
        "output DiffusionPermeability as connector"
        annotation (defaultComponentName="diffusionmembranepermeability",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector ElectricCurrentInput = input ElectricCurrent
        "input ElectricCurrent as connector"
        annotation (defaultComponentName="electriccurrent",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type ElectricCurrent.
    </p>
    </html>"));
      connector ElectricCurrentOutput = output ElectricCurrent
        "output ElectricCurrent as connector"
        annotation (defaultComponentName="electriccurrent",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector ElectricChargeInput = input ElectricCharge
        "input ElectricCharge as connector"
        annotation (defaultComponentName="electriccharge",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type ElectricCharge.
    </p>
    </html>"));
      connector ElectricChargeOutput = output ElectricCharge
        "output ElectricCharge as connector"
        annotation (defaultComponentName="electriccharge",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector EnergyInput = input Energy "input Energy as connector"
        annotation (defaultComponentName="energy",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Energy.
    </p>
    </html>"));

      connector EnergyOutput = output Energy "output Energy as connector"
        annotation (defaultComponentName="energy",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector HeatInput = input Heat "input Heat as connector"
        annotation (defaultComponentName="heat",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Heat.
    </p>
    </html>"));
      connector HeatOutput = output Heat "output Heat as connector"
        annotation (defaultComponentName="heat",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector HeatFlowRateInput = input HeatFlowRate
        "input HeatFlowRate as connector"
        annotation (defaultComponentName="heatflowrate",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type HeatFlowRate.
    </p>
    </html>"));
      connector HeatFlowRateOutput = output HeatFlowRate
        "output HeatFlowRate as connector"
        annotation (defaultComponentName="heatflowrate",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector HeightInput = input Height "input Height as connector"
        annotation (defaultComponentName="height",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Height.
    </p>
    </html>"));
      connector HeightOutput = output Height "output Height as connector"
        annotation (defaultComponentName="height",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector MassInput = input Mass "input Mass as connector"
        annotation (defaultComponentName="mass",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Mass.
    </p>
    </html>"));

      connector MassOutput = output Mass "output Mass as connector"
        annotation (defaultComponentName="mass",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector MassFlowRateInput = input MassFlowRate
        "input MassFlowRate as connector"
        annotation (defaultComponentName="massflowrate",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type MassFlowRate.
    </p>
    </html>"));

      connector MassFlowRateOutput = output MassFlowRate
        "output MassFlowRate as connector"
        annotation (defaultComponentName="massflowrate",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector MolarFlowRateInput = input MolarFlowRate
        "input MolarFlowRate as connector"
        annotation (defaultComponentName="molarflowrate",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type MolarFlowRate.
    </p>
    </html>"));
      connector MolarFlowRateOutput = output MolarFlowRate
        "output MolarFlowRate as connector"
        annotation (defaultComponentName="molarflowrate",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector OsmolarityInput = input Osmolarity
        "input Concentration as connector"
        annotation (defaultComponentName="osmolarity",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Concentration.
    </p>
    </html>"));
      connector OsmolarityOutput = output Osmolarity
        "output Concentration as connector"
        annotation (defaultComponentName="osmolarity",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector PressureInput = input Pressure "input Pressure as connector"
        annotation (defaultComponentName="pressure",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Pressure.
    </p>
    </html>"));

      connector PressureOutput = output Pressure "output Pressure as connector"
        annotation (defaultComponentName="pressure",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector VolumeInput = input Volume "input Volume as connector"
        annotation (defaultComponentName="volume",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Volume.
    </p>
    </html>"));

      connector VolumeOutput = output Volume "output Volume as connector"
        annotation (defaultComponentName="volume",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector VolumeFlowRateInput = input VolumeFlowRate
        "input VolumeFlowRate as connector"
        annotation (defaultComponentName="volumeflowrate",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type VolumeFlowRate.
    </p>
    </html>"));

      connector VolumeFlowRateOutput = output VolumeFlowRate
        "output VolumeFlowRate as connector"
        annotation (defaultComponentName="volumeflowrate",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector TemperatureInput = input Temperature
        "input Temperature as connector"
        annotation (defaultComponentName="temperature",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Temperature.
    </p>
    </html>"));

      connector TemperatureOutput = output Temperature
        "output Temperature as connector"
        annotation (defaultComponentName="temperature",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector TimeInput = input Time "input Time as connector"
        annotation (defaultComponentName="time",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Time.
    </p>
    </html>"));
      connector TimeOutput = output Time "output Time as connector"
        annotation (defaultComponentName="time",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector ThermalConductanceInput = input ThermalConductance
        "input ThermalConductance as connector"
        annotation (defaultComponentName="thermalconductance",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type ThermalConductance.
    </p>
    </html>"));

      connector ThermalConductanceOutput = output ThermalConductance
        "output ThermalConductance as connector"
        annotation (defaultComponentName="thermalconductance",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector ElectricPotentialInput = input ElectricPotential
        "input ElectricPotential as connector"
        annotation (defaultComponentName="electricpotential",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type ElectricPotential.
    </p>
    </html>"));

      connector ElectricPotentialOutput = output ElectricPotential
        "output ElectricPotential as connector"
        annotation (defaultComponentName="electricpotential",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector FractionInput = input Fraction "input Fraction as connector"
        annotation (defaultComponentName="fraction",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Fraction.
    </p>
    </html>"));

      connector FractionOutput = output Fraction "output Fraction as connector"
        annotation (defaultComponentName="fraction",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector FrequencyInput = input Frequency "input Frequency as connector"
        annotation (defaultComponentName="frequency",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Frequency.
    </p>
    </html>"));

      connector FrequencyOutput = output Frequency
        "output Frequency as connector"
        annotation (defaultComponentName="frequency",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Frequency.
  </p>
  </html>"));

      connector OsmoticPermeabilityInput = input OsmoticPermeability
        "input OsmoticPermeability as connector"
        annotation (defaultComponentName="osmoticmembranepermeability",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type OsmoticMembranePermeability.
    </p>
    </html>"));

      connector OsmoticPermeabilityOutput = output OsmoticPermeability
        "output OsmoticPermeability as connector"
        annotation (defaultComponentName="osmoticmembranepermeability",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector HydraulicConductanceInput = input HydraulicConductance
        "input HydraulicConductance as connector"
        annotation (defaultComponentName="hydraulicconductance",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type HydraulicConductance.
    </p>
    </html>"));

      connector HydraulicConductanceOutput = output HydraulicConductance
        "output HydraulicConductance as connector"
        annotation (defaultComponentName="hydraulicconductance",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector HydraulicComplianceInput = input HydraulicCompliance
        "input HydraulicCompliance as connector"
        annotation (defaultComponentName="hydrauliccompliance",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type HydraulicCompliance.
    </p>
    </html>"));

      connector HydraulicComplianceOutput = output HydraulicCompliance
        "output HydraulicCompliance as connector"
        annotation (defaultComponentName="hydrauliccompliance",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector DensityInput =input Density "input Density as connector"
        annotation (defaultComponentName="density",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Volume.
    </p>
    </html>"));
      connector DensityOutput =output Density "output Density as connector"
        annotation (defaultComponentName="density",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector HydraulicInertanceInput = input HydraulicInertance
        "input HydraulicInertance as connector"
        annotation (defaultComponentName="hydraulicinertance",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type HydraulicInertance.
    </p>
    </html>"));

      connector HydraulicInertanceOutput = output HydraulicInertance
        "output HydraulicInertance as connector"
        annotation (defaultComponentName="hydraulicinertance",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector GasSolubilityInput = input GasSolubility
        "input GasSolubility as connector"
        annotation (defaultComponentName="gassolubility",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type GasSolubility.
    </p>
    </html>"));

      connector GasSolubilityOutput = output GasSolubility
        "output GasSolubility as connector"
        annotation (defaultComponentName="gassolubility",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector SpecificEnergyInput =
                              input SpecificEnergy
        "input SpecificEnergy as connector"
        annotation (defaultComponentName="specificEnergy",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Volume.
    </p>
    </html>"));
      connector SpecificEnergyOutput =
                               output SpecificEnergy
        "output SpecificEnergy as connector"
        annotation (defaultComponentName="specificEnergy",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      connector SpecificHeatCapacityInput =
                              input SpecificHeatCapacity
        "input SpecificHeatCapacity as connector"
        annotation (defaultComponentName="specificHeatCapacity",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Volume.
    </p>
    </html>"));
      connector SpecificHeatCapacityOutput =
                               output SpecificHeatCapacity
        "output SpecificHeatCapacity as connector"
        annotation (defaultComponentName="specificHeatCapacity",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));

      connector pHInput =           input pH "input pH as connector"
        annotation (defaultComponentName="pH",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type pH.
    </p>
    </html>"));
      connector pHOutput =           output pH "output pH as connector"
        annotation (defaultComponentName="pH",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type pH.
  </p>
  </html>"));
      connector VolumeDensityOfChargeInput =           input
          VolumeDensityOfCharge "input VolumeDensityOfCharge as connector"
        annotation (defaultComponentName="volumeDensityOfCharge",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type VolumeDensityOfCharge.
    </p>
    </html>"));
      connector VolumeDensityOfChargeOutput =           output
          VolumeDensityOfCharge "output VolumeDensityOfCharge as connector"
        annotation (defaultComponentName="volumeDensityOfCharge",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type VolumeDensityOfCharge.
  </p>
  </html>"));
      connector MassConcentrationInput =
                                     input MassConcentration
        "input MassConcentration as connector"
        annotation (defaultComponentName="massConcentration",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type MassConcentration.
    </p>
    </html>"));
      connector MassConcentrationOutput =
                                      output MassConcentration
        "output MassConcentration as connector"
        annotation (defaultComponentName="massConcentration",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type MassConcentration.
  </p>
  </html>"));

      connector VelocityInput =      input Velocity
        "input Velocity as connector"
        annotation (defaultComponentName="velocity",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Velocity.
    </p>
    </html>"));
      connector VelocityOutput =      output Velocity
        "output Velocity as connector"
        annotation (defaultComponentName="velocity",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Velocity.
  </p>
  </html>"));

      connector PowerInput = input Power "input Power as connector"
        annotation (defaultComponentName="power",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Power.
    </p>
    </html>"));
      connector PowerOutput = output Power "output Power as connector"
        annotation (defaultComponentName="power",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Power.
  </p>
  </html>"));

      connector PositionInput = input Position "input Position as connector"
        annotation (defaultComponentName="position",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Position.
    </p>
    </html>"));
      connector PositionOutput = output Position "output Position as connector"
        annotation (defaultComponentName="position",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Position.
  </p>
  </html>"));
       connector MolarEnergyInput = input MolarEnergy
        "input MolarEnergy as connector"
        annotation (defaultComponentName="molarEnergy",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type MolarEnergy.
    </p>
    </html>"));

      connector MolarEnergyOutput = output MolarEnergy
        "output MolarEnergy as connector"
        annotation (defaultComponentName="molarEnergy",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type MolarEnergy.
  </p>
  </html>"));
       connector PopulationInput =  input Population
        "input Population as connector"
        annotation (defaultComponentName="population",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Population.
    </p>
    </html>"));
      connector PopulationOutput =  output Population
        "output Population as connector"
        annotation (defaultComponentName="population",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Population.
  </p>
  </html>"));

       connector PopulationChangeInput =
                                    input PopulationChange
        "input PopulationChange as connector"
        annotation (defaultComponentName="populationChange",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type PopulationChange.
    </p>
    </html>"));
      connector PopulationChangeOutput =
                                    output PopulationChange
        "output PopulationChange as connector"
        annotation (defaultComponentName="populationChange",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type PopulationChange.
  </p>
  </html>"));

      connector PopulationChangePerMemberInput =
                                    input PopulationChangePerMember
        "input PopulationChangePerMember as connector"
        annotation (defaultComponentName="populationChangePerMember",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type PopulationChangePerMember.
    </p>
    </html>"));
      connector PopulationChangePerMemberOutput =
                                    output PopulationChangePerMember
        "output PopulationChangePerMember as connector"
        annotation (defaultComponentName="populationChangePerMember",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type PopulationChangePerMember.
  </p>
  </html>"));
    end RealIO;

      expandable connector BusConnector
      "Empty control bus that is adapted to the signals connected to it"

      annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.2), graphics={
              Rectangle(
                extent={{-20,2},{20,-2}},
                lineColor={0,0,255},
                lineThickness=0.5),
              Polygon(
                points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},{-60,-50},{
                  -80,-40},{-100,30},{-80,50}},
                lineColor={0,0,0},
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-65,25},{-55,15}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-5,25},{5,15}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{55,25},{65,15}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-35,-15},{-25,-25}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{25,-15},{35,-25}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.2), graphics={
              Polygon(
                points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,
                    -20},{-50,15},{-40,25}},
                lineColor={0,0,0},
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32.5,7.5},{-27.5,12.5}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-2.5,12.5},{2.5,7.5}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{27.5,12.5},{32.5,7.5}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-17.5,-7.5},{-12.5,-12.5}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12.5,-7.5},{17.5,-12.5}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,70},{150,40}},
                lineColor={0,0,0},
                textString="%name")}),
          Documentation(info="<html>
<p>
This connector defines the \"expandable connector\" that
is used as bus in the Physiomodel (www.physiomodel.org).
Note, this connector is \"empty\". When using it, the actual content is
constructed by the signals connected to this bus.
</p>
</html>"));

      end BusConnector;

    partial package IO_Bus "Subsystem outputs manipulation"
      extends Modelica.Icons.VariantsPackage;

      replaceable package PhysiolibTypesRealTypes =
          Physiolibrary.Types.RealTypes
        "Redefine this package only if there are not possible to use Physiolibrary types for variables!";

      replaceable partial model Variables
        "Subsystem output busConnector variables"
        package T = PhysiolibTypesRealTypes;

        replaceable block BooleanVariable =
          Physiolibrary.Types.BooleanExtension.Parameter constrainedby
          Physiolibrary.Types.AbstractBoolean;

        BusConnector busConnector annotation (Placement(transformation(extent={{
                  80,-12},{100,8}}), iconTransformation(extent={{-10,-10},{10,10}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}}), graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid), Text(
                extent={{-200,-100},{200,-140}},
                lineColor={0,0,255},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid,
                textString="%name")}),        Documentation(revisions="<html>
</html>"));
      end Variables;

      model InputFromFile = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.InputParameter),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.InputParameter)
        "Load values in non-SI units from file io/input.txt"                                                            annotation (
          Documentation(revisions="<html>
</html>"));

      model OutputToFile = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.OutputFinal),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.OutputFinal)
        "Store values in non-SI units to file io/output.txt"                                                         annotation (
          Documentation(revisions="<html>
</html>"));

      model OutputComparison = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.OutputComparison),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.OutputComparison)
        "Compare values in non-SI units with file io/input.txt and store results to io/comparison.txt"
                                                                                                            annotation (
          Documentation(revisions="<html>
</html>"));

      model InputFromFile_SI = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.InputParameter_SI),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.InputParameter)
        "Load values in SI units from file io/input_SI.txt"                                                            annotation (
          Documentation(revisions="<html>
</html>"));

      model OutputToFile_SI = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.OutputFinal_SI),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.OutputFinal)
        "Store values in SI units to file io/output_SI.txt"                                                         annotation (
          Documentation(revisions="<html>
</html>"));

      model OutputComparison_SI = Variables(T(
        redeclare block Variable =
              Physiolibrary.Types.RealExtension.OutputComparison_SI),
        redeclare block BooleanVariable =
              Physiolibrary.Types.BooleanExtension.OutputComparison)
        "Compare values in SI units with file io/input_SI.txt and store results to io/comparison_SI.txt"
                                                                                                            annotation (
          Documentation(revisions="<html>
</html>"));

      annotation (Documentation(revisions="<html>
</html>",     info="<html>
<p>Subsystem initial and terminal data manipulations using busConnector (Physiomodel expandable connector).</p>
<h4>Be surre, that the directory &QUOT;io&QUOT; is in working directory (File-&GT;Change Directory...)!</h4>
<p>Implementation:</p>
<p>Model should be divided into subsystems, which has <b>output</b> variables grouped to busConnector (variables, which are inputs to other subsystems). For each subsystem S: <b>all</b> these variables should be defined in <b>extended redeclared</b> class S.IO_Bus.Variables, where package S.IO_Bus is <b>extended</b> from Physiolibrary.Types.IO_Bus. </p>
<p>Usage:</p>
<p>For loading values in SI units of these variables from file &QUOT;io/input_SI.txt&QUOT; use block S.IO_Bus.InputFromFile_SI.</p>
<p>For loading values in non-SI units of these variables from file &QUOT;io/input.txt&QUOT; use block S.IO_Bus.InputFromFile.</p>
<p>For storing values in SI units of these variables from file &QUOT;io/output_SI.txt&QUOT; use block S.IO_Bus.OutputToFile_SI.</p>
<p>For storing values in non-SI units of these variables from file &QUOT;io/output.txt&QUOT; use block S.IO_Bus.OutputToFile.</p>
<p>For comparison values in SI units of these variables with file &QUOT;io/input_SI.txt&QUOT; use block S.IO_Bus.OutputComparison_SI and result will be stored as &QUOT;io/comparison_SI.txt&QUOT;.</p>
<p>For comparison values in non-SI units of these variables with file &QUOT;io/input.txt&QUOT; use block S.IO_Bus.OutputComparison and result will be stored as &QUOT;io/comparison.txt&QUOT;.</p>
</html>"));
    end IO_Bus;

    expandable connector TorsoBusConnector
      "Upper, Middle or Lower Torso properties"

      annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2},
            initialScale=0.2), graphics={
            Rectangle(
              extent={{-20,2},{20,-2}},
              lineColor={129,194,194},
              lineThickness=1),
            Polygon(
              points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},{-60,-50},{-80,
                  -40},{-100,30},{-80,50}},
              lineColor={0,0,0},
              fillColor={115,172,172},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-65,25},{-55,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-5,25},{5,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{55,25},{65,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-35,-15},{-25,-25}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{25,-15},{35,-25}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2},
            initialScale=0.2), graphics={
            Polygon(
              points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,
                  -20},{-50,15},{-40,25}},
              lineColor={0,0,0},
              fillColor={170,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-32.5,7.5},{-27.5,12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-2.5,12.5},{2.5,7.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{27.5,12.5},{32.5,7.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-17.5,-7.5},{-12.5,-12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{12.5,-7.5},{17.5,-12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-150,70},{150,40}},
              lineColor={0,0,0},
              textString="%name")}),
        Documentation(info="<html>
<p>
This icon is designed for a <b>signal bus</b> connector.
</p>
</html>"));

    end TorsoBusConnector;

    expandable connector TissueBusConnector "Tissue properties"

      annotation (
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2},
            initialScale=0.2), graphics={
            Rectangle(
              extent={{-20,2},{20,-2}},
              lineColor={127,0,0},
              lineThickness=0.5),
            Polygon(
              points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},{-60,-50},{-80,
                  -40},{-100,30},{-80,50}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-65,25},{-55,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-5,25},{5,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{55,25},{65,15}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-35,-15},{-25,-25}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{25,-15},{35,-25}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={2,2},
            initialScale=0.2), graphics={
            Polygon(
              points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,
                  -20},{-50,15},{-40,25}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-32.5,7.5},{-27.5,12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-2.5,12.5},{2.5,7.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{27.5,12.5},{32.5,7.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-17.5,-7.5},{-12.5,-12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{12.5,-7.5},{17.5,-12.5}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-150,70},{150,40}},
              lineColor={0,0,0},
              textString="%name")}),
        Documentation(info="<html>
<p>
This icon is designed for a <b>signal bus</b> connector.
</p>
</html>"));

    end TissueBusConnector;

    type Energy = Modelica.SIunits.Energy(displayUnit="kcal", nominal=4186.8);
    type Time = Modelica.SIunits.Time(displayUnit="min", nominal=60);
    type Frequency = Modelica.SIunits.Frequency(displayUnit="1/min");

    type Mass = Modelica.SIunits.Mass(displayUnit="g", nominal=1e-3, min=0);
    type MassFlowRate = Modelica.SIunits.MassFlowRate(displayUnit="mg/min", nominal=(1e-6)/60);
    type Density = Modelica.SIunits.Density(displayUnit="kg/l", nominal=1e3);
    type MolarMass = Modelica.SIunits.MolarMass(displayUnit="kDa", nominal=1);

    type Height = Modelica.SIunits.Height(displayUnit="cm", nominal=1e-2);
    type Position = Modelica.SIunits.Position(displayUnit="cm", nominal=1e-2);
    type Velocity = Modelica.SIunits.Velocity(displayUnit="km/h", nominal=1);
    type Acceleration = Modelica.SIunits.Acceleration(displayUnit="m/s2", nominal=1);

    type Pressure =  Modelica.SIunits.Pressure(displayUnit="mmHg", nominal=133.322387415);
    type Volume =  Modelica.SIunits.Volume(displayUnit="ml", nominal=1e-6, min=0);
    type VolumeFlowRate = Modelica.SIunits.VolumeFlowRate(displayUnit="ml/min", nominal=(1e-6)/60);

    replaceable type Concentration = Modelica.SIunits.Concentration (displayUnit="mmol/l", min=0) constrainedby Real;
    replaceable type AmountOfSubstance = Modelica.SIunits.AmountOfSubstance (displayUnit="mmol", min=0) constrainedby Real;
    replaceable type MolarFlowRate = Modelica.SIunits.MolarFlowRate(displayUnit="mmol/min") constrainedby Real;
    replaceable type MolarEnergy = Modelica.SIunits.MolarEnergy(displayUnit="kcal/mol", nominal=4186.8) constrainedby Real
      "chemical internal energy, chemical enthalpy, Gibb's energy ..";
    type MassConcentration =
                   Modelica.SIunits.MassConcentration(displayUnit="mg/l", nominal=1e-3, min=0);

    type Osmolarity = Modelica.SIunits.Concentration (displayUnit="mosm/l", nominal=1);

    type Heat = Modelica.SIunits.Heat(displayUnit="kcal", nominal=4186800); //needed to heat 1 liter of water by 1 degC
    type Temperature = Modelica.SIunits.Temperature(displayUnit="degC", nominal=1, min=0);
    type HeatFlowRate = Modelica.SIunits.HeatFlowRate(displayUnit="kcal/min", nominal=4186.8/60);
    type Power = Modelica.SIunits.Power(displayUnit="kcal/min", nominal=4186.8/60);
    type PowerPerMass = Real(final quantity="Power per Mass",final unit="W/kg",displayUnit="cal/(g.min)", nominal=4.1868/(0.001*60));
    type ThermalConductance = Modelica.SIunits.ThermalConductance(displayUnit="kcal/(min.K)", nominal=4186.8/60);
    type SpecificHeatCapacity = Modelica.SIunits.SpecificHeatCapacity(displayUnit="kcal/(kg.K)", nominal=4186.8);
    type SpecificEnergy = Modelica.SIunits.SpecificEnergy(displayUnit="kcal/kg", nominal=4186.8)
      "vaporization, ..";

    type ElectricPotential = Modelica.SIunits.ElectricPotential(displayUnit="mV", nominal=1e-3);
    type ElectricCharge = Modelica.SIunits.ElectricCharge(displayUnit="meq", nominal=(9.64853399*10^4)/1000);
    type VolumeDensityOfCharge =
                          Modelica.SIunits.VolumeDensityOfCharge(displayUnit="meq/l", nominal=(9.64853399*10^4));
    type ElectricCurrent = Modelica.SIunits.ElectricCurrent(displayUnit="meq/min", nominal=(9.64853399*10^4/1000)/60);

  //unknown units in Standard Modelica Library 3.2
    type Fraction = Real(final quantity="Fraction",final unit="1", displayUnit="%", nominal=1e-2);

    type pH =       Real(final quantity="pH",final unit="1",final displayUnit="1", nominal=7, min=0, max=14);
    type OsmoticPermeability = Real(final quantity="OsmoticPermeability",final unit="m3/(Pa.s)", displayUnit="ml/(mmHg.min)", nominal=(1e-6)/((133.322387415)*60), min=0);
    type DiffusionPermeability = Real(final quantity="DiffusionPermeability", final unit="m3/s", displayUnit="ml/min", nominal=(1e-6)/60, min=0);

    type HydraulicConductance = Real(final quantity="HydraulicConductance",final unit="m3/(Pa.s)", displayUnit="ml/(mmHg.min)", nominal=(1e-6)/((133.322387415)*60), min=0);
    type HydraulicResistance = Real(final quantity="HydraulicConductance",final unit="(Pa.s)/m3", displayUnit="(mmHg.min)/ml", nominal=(1e+6)*(133.322387415)*60, min=0);

    type HydraulicCompliance =  Real(final quantity="HydraulicCompliance",final unit="m3/Pa", displayUnit="ml/mmHg", nominal=(1e-6)/(133.322387415));
    type HydraulicElastance = Real(final quantity="HydraulicElastance",final unit="Pa/m3", displayUnit="mmHg/ml", nominal=(133.322387415)/(1e-6));

    type HydraulicInertance =  Real(final quantity="HydraulicInertance",final unit="Pa.s2/m3", displayUnit="mmHg.min2/ml", nominal=((133.322387415)*(60^2)/(1e-6)));

    type GasSolubility = Real(final quantity="GasSolubility", final unit="(mol/m3)/(mol/m3)", displayUnit="(mmol/l)/kPa at 25degC", nominal=1e-2, min=0)
      "Gas solubility in liquid";

    type StoichiometricNumber = Modelica.SIunits.StoichiometricNumber; // Integer(final quantity="StoichiometricNumber", min=1);

    type Population = Real (final quantity="Population", final unit="1", displayUnit="1", min=0)
      "Average number of population individuals";
    type PopulationChange = Real (final quantity="PopulationChange", final unit="1/s", displayUnit="1/d")
      "Average change of population individuals";
    type PopulationChangePerMember = Real (final quantity="PopulationChangePerMember", final unit="1/s", displayUnit="1/d")
      "Average change per population individual";

    partial block AbstractReal
      "Abstract parameter or the value at defined time (final) of the model - can be input or output parameter"

      replaceable type T=Real
       constrainedby Real "Real type with units"
       annotation (Dialog(group="Simple type",tab="Types"));

      parameter String varName=
      "Stored name"
      annotation (Dialog(group="Value I/O",tab="IO"));
                               //getInstanceName()
      parameter String storeUnit="" "Stored units"
      annotation (Dialog(group="Value I/O",tab="IO"));

      parameter T k(fixed=true) = 0 "Value"
        annotation (Evaluate=true, HideResult=true, Dialog(group="Parameters"));

      parameter Utilities.UnitConversions.RealTypeRecord[:] unitConversions = Utilities.UnitConversions.RealTypeDef
        "Unit conversions"  annotation(Evaluate=true, HideResult=true);
    end AbstractReal;

    package RealTypeInputParameters
      extends Modelica.Icons.SourcesPackage;

      replaceable package Utilities = Types.FilesUtilities constrainedby
        Types.Utilities
                     annotation (Dialog(group="Functions to read or store",tab="Types"));
       block Base
         parameter String varName=
         "Stored name"
         annotation (Dialog(group="Value I/O",tab="IO"));
                                  //getInstanceName()
         parameter String storeUnit="" "Stored units"
         annotation (Dialog(group="Value I/O",tab="IO"));
         annotation (Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Text(         extent={{-44,6},{36,-14}},
              lineColor={0,0,0},
                  fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                      textString=""),   Rectangle(
             extent={{-40,12},{40,-14}},
             lineColor={0,0,255},
             fillPattern=FillPattern.Solid,
             fillColor={170,255,170}), Text(
             extent={{-40,-8},{40,6}},
             lineColor={0,0,0},
             fillColor={255,255,255},
             fillPattern=FillPattern.Solid,
                textString="%varName")}));
       end Base;

    block Velocity "Constant signal of type Velocity"

      extends Base(storeUnit="m/s");
     parameter Types.Velocity k=Utilities.readReal(varName, storeUnit)
          "Constant Velocity output value";
          RealIO.VelocityOutput y "Velocity input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="velocity");
    end Velocity;

    block Acceleration "Constant signal of type Acceleration"

      extends Base(storeUnit="m/s2");
     parameter Types.Acceleration k=Utilities.readReal(varName, storeUnit)
          "Constant Acceleration output value";
          RealIO.AccelerationOutput y "Acceleration input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="acceleration");
    end Acceleration;

    block AmountOfSubstance "Constant signal of type AmountOfSubstance"

      extends Base(storeUnit="mmol");
     parameter Types.AmountOfSubstance k=Utilities.readReal(varName, storeUnit)
          "Constant AmountOfSubstance output value";
          RealIO.AmountOfSubstanceOutput y "AmountOfSubstance input parameter"
                                              annotation (Placement(transformation(
                extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,
                  10}})));
    equation
          y=k;
      annotation (defaultComponentName="amountOfSubstance");
    end AmountOfSubstance;

    block Concentration "Constant signal of type Concentration"

      extends Base(storeUnit="mmol/l");
     parameter Types.Concentration k=Utilities.readReal(varName, storeUnit, unitConversions)
          "Constant Concentration output value";
          RealIO.ConcentrationOutput y "Concentration input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
      parameter Utilities.UnitConversions.RealTypeRecord[:] unitConversions = Utilities.UnitConversions.RealTypeDef
          "Unit conversions"
                            annotation(Evaluate=true, HideResult=true);
    equation
          y=k;
      annotation (defaultComponentName="concentration");
    end Concentration;

    block MassConcentration "Constant signal of type MassConcentration"

      extends Base(storeUnit="mmol/l");
     parameter Types.MassConcentration k=Utilities.readReal(varName, storeUnit)
          "Constant Concentration output value";
          RealIO.MassConcentrationOutput y "Concentration input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="concentration");
    end MassConcentration;

    block Density "Constant signal of type Density"

      extends Base(storeUnit="kg/l");
     parameter Types.Density k=Utilities.readReal(varName, storeUnit)
          "Constant Density output value";
          RealIO.DensityOutput y "Density input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="density");
    end Density;

    block DiffusionPermeability "Constant signal of type DiffusionPermeability"

      extends Base(storeUnit="ml/min");
     parameter Types.DiffusionPermeability k=Utilities.readReal(varName,
            storeUnit) "Constant DiffusionPermeability output value";
          RealIO.DiffusionPermeabilityOutput y
          "DiffusionPermeability input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="diffusionPermeability");
    end DiffusionPermeability;

    block ElectricCharge "Constant signal of type ElectricCharge"

      extends Base(storeUnit="meq");
     parameter Types.ElectricCharge k=Utilities.readReal(varName, storeUnit)
          "Constant ElectricCharge output value";
          RealIO.ElectricChargeOutput y "ElectricCharge input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricCharge");
    end ElectricCharge;

    block ElectricCurrent "Constant signal of type ElectricCurrent"

      extends Base(storeUnit="meq/min");
     parameter Types.ElectricCurrent k=Utilities.readReal(varName, storeUnit)
          "Constant ElectricCurrent output value";
          RealIO.ElectricCurrentOutput y "ElectricCurrent input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricCurrent");
    end ElectricCurrent;

    block ElectricPotential "Constant signal of type ElectricPotential"

      extends Base(storeUnit="mV");
     parameter Types.ElectricPotential k=Utilities.readReal(varName, storeUnit)
          "Constant ElectricPotential output value";
          RealIO.ElectricPotentialOutput y "ElectricPotential input parameter"
                                              annotation (Placement(transformation(
                extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,
                  10}})));
    equation
          y=k;
      annotation (defaultComponentName="electricPotential");
    end ElectricPotential;

      block Energy "Constant signal of type Energy"

        extends Base(storeUnit="kcal");
        parameter Types.Energy k=Utilities.readReal(varName, storeUnit)
          "Constant Energy output value";
          RealIO.EnergyOutput y "Energy input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="energy");
      end Energy;

    block Fraction "Constant signal of type Fraction"

      extends Base(storeUnit="");
     parameter Types.Fraction k=Utilities.readReal(varName, storeUnit)
          "Constant Fraction output value";
          RealIO.FractionOutput y "Fraction input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="fraction");
    end Fraction;

    block Frequency "Constant signal of type Frequency"

      extends Base(storeUnit="1/min");
     parameter Types.Frequency k=Utilities.readReal(varName, storeUnit)
          "Constant Frequency output value";
          RealIO.FrequencyOutput y "Frequency input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="frequency");
    end Frequency;

    block GasSolubility "Constant signal of type GasSolubility"

      extends Base(storeUnit="(mmol/l)/kPa at 25degC");
     parameter Types.GasSolubility k=Utilities.readReal(varName, storeUnit)
          "Constant GasSolubility output value";
          RealIO.GasSolubilityOutput y "GasSolubility input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="gasSolubility");
    end GasSolubility;

    block Heat "Constant signal of type Heat"

       extends Base(storeUnit="kcal");
     parameter Types.Heat k=Utilities.readReal(varName, storeUnit)
          "Constant Heat output value";
          RealIO.HeatOutput y "Heat input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="heat");
    end Heat;

    block Height "Constant signal of type Height"

      extends Base(storeUnit="cm");
     parameter Types.Height k=Utilities.readReal(varName, storeUnit)
          "Constant Height output value";
          RealIO.HeightOutput y "Height input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="height");
    end Height;

    block HeatFlowRate "Constant signal of type HeatFlowRate"

      extends Base(storeUnit="kcal/min");
     parameter Types.HeatFlowRate k=Utilities.readReal(varName, storeUnit)
          "Constant HeatFlowRate output value";
          RealIO.HeatFlowRateOutput y "HeatFlowRate input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="heatFlowRate");
    end HeatFlowRate;

    block HydraulicCompliance "Constant signal of type HydraulicCompliance"

      extends Base(storeUnit="ml/mmHg");
     parameter Types.HydraulicCompliance k=Utilities.readReal(varName, storeUnit)
          "Constant HydraulicCompliance output value";
          RealIO.HydraulicComplianceOutput y
          "HydraulicCompliance input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicCompliance");
    end HydraulicCompliance;

    block HydraulicConductance "Constant signal of type HydraulicConductance"

      extends Base(storeUnit="ml/(mmHg.min)");
     parameter Types.HydraulicConductance k=Utilities.readReal(varName,
            storeUnit) "Constant HydraulicConductance output value";
          RealIO.HydraulicConductanceOutput y
          "HydraulicConductance input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicConductance");
    end HydraulicConductance;

    block HydraulicInertance "Constant signal of type HydraulicInertance"

      extends Base(storeUnit="mmHg.min2/ml");
     parameter Types.HydraulicInertance k=Utilities.readReal(varName, storeUnit)
          "Constant HydraulicInertance output value";
          RealIO.HydraulicInertanceOutput y
          "HydraulicInertance input parameter" annotation (Placement(transformation(
                extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,
                  10}})));
    equation
          y=k;
      annotation (defaultComponentName="hydraulicInertance");
    end HydraulicInertance;

    block Mass "Constant signal of type Mass"

      extends Base(storeUnit="g");
     parameter Types.Mass k=Utilities.readReal(varName, storeUnit)
          "Constant Mass output value";
          RealIO.MassOutput y "Mass input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="mass");
    end Mass;

    block MassFlowRate "Constant signal of type MassFlowRate"

      extends Base(storeUnit="g/min");
     parameter Types.MassFlowRate k=Utilities.readReal(varName, storeUnit)
          "Constant MassFlowRate output value";
          RealIO.MassFlowRateOutput y "MassFlowRate input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="massFlowRate");
    end MassFlowRate;

    block MolarFlowRate "Constant signal of type MolarFlowRate"

      extends Base(storeUnit="mmol/min");
     parameter Types.MolarFlowRate k=Utilities.readReal(varName, storeUnit)
          "Constant MolarFlowRate output value";
          RealIO.MolarFlowRateOutput y "MolarFlowRate input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
      parameter Utilities.UnitConversions.RealTypeRecord[:] unitConversions = Utilities.UnitConversions.RealTypeDef
          "Unit conversions"
                            annotation(Evaluate=true, HideResult=true);
    equation
          y=k;
      annotation (defaultComponentName="molarFlowRate");
    end MolarFlowRate;

    block Osmolarity "Constant signal of type Osmolarity"

      extends Base(storeUnit="mosm/l");
     parameter Types.Osmolarity k=Utilities.readReal(varName, storeUnit)
          "Constant Osmolarity output value";
          RealIO.OsmolarityOutput y "Osmolarity input parameter" annotation (
           Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="osmolarity");
    end Osmolarity;

    block OsmoticPermeability "Constant signal of type OsmoticPermeability"

      extends Base(storeUnit="ml/(mmHg.min)");
     parameter Types.OsmoticPermeability k=Utilities.readReal(varName, storeUnit)
          "Constant OsmoticPermeability output value";
          RealIO.OsmoticPermeabilityOutput y
          "OsmoticPermeability input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="osmoticPermeability");
    end OsmoticPermeability;

    block Pressure "Constant signal of type Pressure"

      extends Base(storeUnit="mmHg");
     parameter Types.Pressure k=Utilities.readReal(varName, storeUnit)
          "Constant Pressure output value";
          RealIO.PressureOutput y "Pressure input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="pressure");
    end Pressure;

    block SpecificEnergy "Constant signal of type SpecificEnergy"

      extends Base(storeUnit="kcal/kg");
     parameter Types.SpecificEnergy k=Utilities.readReal(varName, storeUnit)
          "Constant SpecificEnergy output value";
          RealIO.SpecificEnergyOutput y "SpecificEnergy input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="specificEnergy");
    end SpecificEnergy;

    block SpecificHeatCapacity "Constant signal of type SpecificHeatCapacity"

      extends Base(storeUnit="kcal/(kg.K)");
     parameter Types.SpecificHeatCapacity k=Utilities.readReal(varName,
            storeUnit) "Constant SpecificHeatCapacity output value";
          RealIO.SpecificHeatCapacityOutput y
          "SpecificHeatCapacity input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="specificHeatCapacity");
    end SpecificHeatCapacity;

    block Temperature "Constant signal of type Temperature"

      extends Base(storeUnit="degC");
     parameter Types.Temperature k=Utilities.readReal(varName, storeUnit)
          "Constant Temperature output value";
          RealIO.TemperatureOutput y "Temperature input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="temperature");
    end Temperature;

    block ThermalConductance "Constant signal of type ThermalConductance"

      extends Base(storeUnit="kcal/(min.K)");
     parameter Types.ThermalConductance k=Utilities.readReal(varName, storeUnit)
          "Constant ThermalConductance output value";
          RealIO.ThermalConductanceOutput y
          "ThermalConductance input parameter" annotation (Placement(transformation(
                extent={{40,-10},{60,10}}), iconTransformation(extent={{40,-10},{60,
                  10}})));
    equation
          y=k;
      annotation (defaultComponentName="thermalConductance");
    end ThermalConductance;

    block Time "Constant signal of type Time"

      extends Base(storeUnit="min");
     parameter Types.Time k=Utilities.readReal(varName, storeUnit)
          "Constant Time output value";
          RealIO.TimeOutput y "Time input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="time");
    end Time;

    block VolumeFlowRate "Constant signal of type VolumeFlowRate"

      extends Base(storeUnit="ml/min");
     parameter Types.VolumeFlowRate k=Utilities.readReal(varName, storeUnit)
          "Constant VolumeFlowRate output value";
          RealIO.VolumeFlowRateOutput y "VolumeFlowRate input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volumeFlowRate");
    end VolumeFlowRate;

    block Volume "Constant signal of type Volume"

      extends Base(storeUnit="ml");
     parameter Types.Volume k=Utilities.readReal(varName, storeUnit)
          "Constant Volume output value";
          RealIO.VolumeOutput y "Volume input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volume");
    end Volume;

    block pH "Constant signal of type pH"

      extends Base(storeUnit="");
     parameter Types.pH k=Utilities.readReal(varName, storeUnit)
          "Constant pH output value";
          RealIO.pHOutput y "pH input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="pH");
    end pH;

    block VolumeDensityOfCharge "Constant signal of type VolumeDensityOfCharge"

      extends Base(storeUnit="meq/l");
     parameter Types.VolumeDensityOfCharge k=Utilities.readReal(varName,
            storeUnit) "Constant VolumeDensityOfCharge output value";
          RealIO.VolumeDensityOfChargeOutput y
          "VolumeDensityOfCharge input parameter" annotation (Placement(
              transformation(extent={{40,-10},{60,10}}), iconTransformation(extent={
                  {40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="volumeDensityOfCharge");
    end VolumeDensityOfCharge;

    block Power "Constant signal of type Power"

      extends Base(storeUnit="kcal/min");
     parameter Types.Power k=Utilities.readReal(varName, storeUnit)
          "Constant Power output value";
          RealIO.PowerOutput y "Power input parameter"
          annotation (Placement(transformation(extent={{40,-10},{60,10}}),
              iconTransformation(extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="heatFlowRate");
    end Power;

    block Position "Constant signal of type Position"

      extends Base(storeUnit="cm");
     parameter Types.Position k=Utilities.readReal(varName, storeUnit)
          "Constant Position output value";
          RealIO.PositionOutput y "Position input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
    equation
          y=k;
      annotation (defaultComponentName="height");
    end Position;

      block MolarEnergy "Constant signal of type MolarEnergy"

        extends Base(storeUnit="kcal/mol");
        parameter Types.MolarEnergy k=Utilities.readReal(varName, storeUnit)
          "Constant MolarEnergy output value";
          RealIO.MolarEnergyOutput y "MolarEnergy input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="molarEnergy");
      end MolarEnergy;

      block Population "Constant signal of type Population"

        extends Base(storeUnit="");
        parameter Types.Population k=Utilities.readReal(varName, storeUnit)
          "Constant Population output value";
          RealIO.PopulationOutput y "Population input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="population");
      end Population;

      block PopulationChange "Constant signal of type PopulationChange"

        extends Base(storeUnit="1/d");
        parameter Types.PopulationChange k=Utilities.readReal(varName, storeUnit)
          "Constant PopulationChange output value";
          RealIO.PopulationChangeOutput y "PopulationChange input parameter" annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="populationChange");
      end PopulationChange;

      block PopulationChangePerMember
        "Constant signal of type PopulationChangePerMember"
        extends Base(storeUnit="1/d");
        parameter Types.PopulationChangePerMember k=Utilities.readReal(varName, storeUnit)
          "Constant PopulationChangePerMember output value";
          RealIO.PopulationChangePerMemberOutput y
          "PopulationChangePerMember input parameter"                                 annotation (
            Placement(transformation(extent={{40,-10},{60,10}}), iconTransformation(
                extent={{40,-10},{60,10}})));
      equation
          y=k;
      annotation (defaultComponentName="populationChangePerMember");
      end PopulationChangePerMember;
    end RealTypeInputParameters;

    package RealExtension
      extends Modelica.Icons.VariantsPackage;
          block Parameter "Generate constant signal in SI units from file"
            extends AbstractReal;

            replaceable package IO = Types.RealExtension.IO (
              redeclare type Type = T) "Real type with units"
               annotation (Dialog(group="Packages",tab="Types"));

            IO.Output y "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = k;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end Parameter;

          block InputParameter "Generate constant signal from file"
            extends AbstractReal(                   k = Utilities.readReal( varName, storeUnit, unitConversions));

            replaceable package IO = Types.RealExtension.IO (
              redeclare type Type = T)
                           annotation (Dialog(group="Real type with units",tab="Types"));
            replaceable package Utilities = Types.FilesUtilities(inputFileName="input.txt")
              constrainedby Types.Utilities
                           annotation (Dialog(group="Functions to read or store",tab="Types"));

            IO.Output y "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
          /*  when initial() then
    Modelica.Utilities.Streams.print(" ii " + varName + " = " + String(y) + " SI , store as " + storeUnit);
  end when;
  when terminal() then
    Modelica.Utilities.Streams.print(" it " + varName + " = " + String(y) + " SI , store as " + storeUnit);
  end when;
*/
            y = k;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end InputParameter;

          block InputParameter_SI
        "Generate constant signal in SI units from file"
            extends AbstractReal(                   k = Utilities.readReal_SI( varName));

            replaceable package IO = Types.RealExtension.IO (
              redeclare type Type = T)
                           annotation (Dialog(group="Real type with units",tab="Types"));
            replaceable package Utilities = Types.FilesUtilities(inputSIFileName="input_SI.txt")
              constrainedby Types.Utilities
                           annotation (Dialog(group="Functions to read or store",tab="Types"));

            IO.Output y "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = k;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end InputParameter_SI;

          block OutputFinal "Save variable to Output"
          //  import Physiolibrary;
            extends Types.AbstractReal;
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(outputFileName="outputFinal.txt")
                                                           constrainedby
          Types.Utilities;
            IO.Input              y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

          equation
            when terminal() then
              //Modelica.Utilities.Streams.print(" < " + varName + " = " + String(y) + " SI , store as " + storeUnit);
              Utilities.writeReal(
                varName,
                y,
                storeUnit,
                unitConversions);
            end when;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputFinal;

          block OutputFinal_SI "Save variable to Output"
          //  import Physiolibrary;
            extends Types.AbstractReal;
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(outputSIFileName="outputFinal_SI.txt")
                                                           constrainedby
          Types.Utilities;
            IO.Input              y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

          equation
            when terminal() then
              Utilities.writeReal_SI(
                varName,
                y);
            end when;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputFinal_SI;

          block OutputInitial "Save variable to Output"
          //  import Physiolibrary;
            extends Types.AbstractReal;
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(outputFileName="outputInitial.txt")
                                                           constrainedby
          Types.Utilities;
            IO.Input              y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

          equation
            when initial() then
              //Modelica.Utilities.Streams.print(" < " + varName + " = " + String(y) + " SI , store as " + storeUnit);
              Utilities.writeReal(
                varName,
                y,
                storeUnit,
                unitConversions);
            end when;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputInitial;

          block OutputInitial_SI "Save variable to Output"
           // import Physiolibrary;
            extends Types.AbstractReal;
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(outputSIFileName="outputInitial_SI.txt")
                                                           constrainedby
          Types.Utilities;
            IO.Input              y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

          equation
            when initial() then
              Utilities.writeReal_SI(
                varName,
                y);
            end when;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputInitial_SI;

          block OutputComparison "Save variable comparison to file"
          //  import Physiolibrary;
            extends Types.AbstractReal(             k=Utilities.readReal(varName,storeUnit,unitConversions));
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(comparisonFileName="comparison.txt")
                                                           constrainedby
          Types.Utilities
             annotation (Dialog(group="Functions to read or store",tab="Types"));

            Modelica.Blocks.Interfaces.RealInput
                                  y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

      protected
            parameter T initialValue(fixed=false);
          initial equation
            initialValue = y;
          equation
            when terminal() then
             Utilities.writeComparison(
              varName,
              k,
              initialValue,
              y,
              storeUnit,
              unitConversions);
            end when;

              annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputComparison;

          block OutputComparison_SI
        "Save variable comparison to file using SI units during input and output"
          //  import Physiolibrary;
            extends Types.AbstractReal(             k=Utilities.readReal_SI(varName));
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(comparisonSIFileName="comparison_SI.txt")
                                                           constrainedby
          Types.Utilities
             annotation (Dialog(group="Functions to read or store",tab="Types"));

            Modelica.Blocks.Interfaces.RealInput
                                  y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

      protected
            parameter T initialValue(fixed=false);
          initial equation
            initialValue = y;
          equation
            when terminal() then
             Utilities.writeComparison_SI(
              varName,
              k,
              initialValue,
              y);
            end when;

              annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputComparison_SI;

          block OutputInitialComparison "Save variable comparison to file"
          //  import Physiolibrary;
            extends Types.AbstractReal(             k=Utilities.readReal(varName,storeUnit,unitConversions));
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(comparisonFileName="comparisonInitial.txt")
                                                           constrainedby
          Types.Utilities
             annotation (Dialog(group="Functions to read or store",tab="Types"));

            Modelica.Blocks.Interfaces.RealInput
                                  y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

      protected
            parameter T initialValue(fixed=false);
          initial equation
            initialValue = y;
          equation
            when initial() then
             Utilities.writeComparison(
              varName,
              k,
              initialValue,
              y,
              storeUnit,
              unitConversions);
            end when;

              annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputInitialComparison;

          block OutputInitialComparison_SI
        "Save variable comparison to file using SI units"
           // import Physiolibrary;
            extends Types.AbstractReal(             k=Utilities.readReal_SI(varName));
            replaceable package IO = Types.RealExtension.IO (
                                              redeclare type Type=T);
            replaceable package Utilities = Types.FilesUtilities(comparisonSIFileName="comparisonInitial_SI.txt")
                                                           constrainedby
          Types.Utilities
             annotation (Dialog(group="Functions to read or store",tab="Types"));

            Modelica.Blocks.Interfaces.RealInput
                                  y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

      protected
            parameter T initialValue(fixed=false);
          initial equation
            initialValue = y;
          equation
            when initial() then
             Utilities.writeComparison_SI(
              varName,
              k,
              initialValue,
              y);
            end when;

              annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputInitialComparison_SI;

      package IO
        extends Modelica.Icons.BasesPackage;

        replaceable type Type=Real;
        connector Input = input Type "input connector"
          annotation (defaultComponentName="i",
          Icon(graphics={Polygon(
                  points={{-100,100},{100,0},{-100,-100},{-100,100}},
                  lineColor={0,0,127},
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid)},
               coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
          Diagram(coordinateSystem(
                preserveAspectRatio=true, initialScale=0.2,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={Polygon(
                  points={{0,50},{100,0},{0,-50},{0,50}},
                  lineColor={0,0,127},
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-10,85},{-10,60}},
                  lineColor={0,0,127},
                  textString="%name")}),
            Documentation(info="<html>
    <p>
    Connector with one input signal of type Energy.
    </p>
    </html>"));

        connector Output = output Type "output connector"
          annotation (defaultComponentName="o",
          Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={Polygon(
                  points={{-100,100},{100,0},{-100,-100},{-100,100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={Polygon(
                  points={{-100,50},{0,0},{-100,-50},{-100,50}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{30,110},{30,60}},
                  lineColor={0,0,127},
                  textString="%name")}),
            Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      end IO;
    end RealExtension;

    package RealTypes
      extends Modelica.Icons.BasesPackage;
      import Physiolibrary;

        replaceable block Variable = RealExtension.Parameter constrainedby
        AbstractReal;

        block Energy = Variable(redeclare type T=Types.Energy, storeUnit="kcal");
        block Time = Variable(redeclare type T=Types.Time, storeUnit="min");
        block Frequency = Variable(redeclare type T=Types.Frequency, storeUnit="1/min");

        block Mass = Variable(redeclare type T=Types.Mass, storeUnit="g");
        block MassFlowRate = Variable(redeclare type T =
              Types.MassFlowRate, storeUnit="g/min");
        block Density = Variable(redeclare type T=Types.Density, storeUnit="kg/l");

        block Height = Variable(redeclare type T=Types.Height, storeUnit="cm");
        block Velocity = Variable(redeclare type T=Types.Velocity, storeUnit="km/h");
        block Acceleration = Variable(redeclare type T =
              Types.Acceleration, storeUnit="m/s");

        block Pressure = Variable(redeclare type T=Types.Pressure,storeUnit="mmHg");
        block Volume = Variable(redeclare type T=Types.Volume,storeUnit="ml");
        block VolumeFlowRate = Variable(redeclare type T =
              Types.VolumeFlowRate,storeUnit="ml/min");

        block Concentration = Variable(redeclare type T =
              Types.Concentration, storeUnit="mmol/l");
        block MassConcentration = Variable (redeclare type T =
              Types.MassConcentration, storeUnit="mg/l");
        block AmountOfSubstance = Variable(redeclare type T =
              Types.AmountOfSubstance,storeUnit="mmol");
        block MolarFlowRate = Variable(redeclare type T =
              Types.MolarFlowRate,storeUnit="mmol/min");

        block Heat = Variable(redeclare type T=Types.Heat,storeUnit="kcal");
        block Temperature = Variable(redeclare type T =
            Types.Temperature,  storeUnit="degC");
        block HeatFlowRate = Variable(redeclare type T =
              Types.HeatFlowRate,storeUnit="kcal/min");
        block Power = Variable(redeclare type T =
              Types.Power,storeUnit="kcal/min");
        block ThermalConductance = Variable(redeclare type T =
              Types.ThermalConductance, storeUnit="kcal/(min.K)");
        block SpecificHeatCapacity = Variable(redeclare type T =
              Types.SpecificHeatCapacity,storeUnit="kcal/(kg.K)");
        block SpecificEnergy = Variable(redeclare type T =
              Types.SpecificEnergy,storeUnit="kcal/kg");

        block ElectricPotential = Variable(redeclare type T =
              Types.ElectricPotential,storeUnit="mV");
        block ElectricCharge = Variable(redeclare type T =
              Types.ElectricCharge,storeUnit="meq");
        block VolumeDensityOfCharge =
                               Variable(redeclare type T =
              Types.VolumeDensityOfCharge,storeUnit="meq/l");
        block ElectricCurrent = Variable(redeclare type T =
              Types.ElectricCurrent,storeUnit="meq/min");

        block Fraction = Variable(redeclare type T=Types.Fraction,storeUnit="");

        block pH =       Variable(redeclare type T=Types.pH,storeUnit="log10(mol/l)");
        block OsmoticPermeability = Variable(redeclare type T =
              Types.OsmoticPermeability,storeUnit="ml/(mmHg.min)");
        block DiffusionPermeability =         Variable(redeclare type T =
              Types.DiffusionPermeability,storeUnit="ml/min");

        block HydraulicConductance = Variable(redeclare type T =
              Types.HydraulicConductance,storeUnit="ml/(mmHg.min)");
        block HydraulicCompliance = Variable(redeclare type T =
              Types.HydraulicCompliance,storeUnit="ml/mmHg");
        block HydraulicInertance = Variable(redeclare type T =
              Types.HydraulicInertance,storeUnit="mmHg.min2/ml");

        block GasSolubility = Variable(redeclare type T =
              Types.GasSolubility,storeUnit="(mmol/l)/kPa at 25degC");

        block Osmolarity =    Variable(redeclare type T =
              Types.Osmolarity,storeUnit="mosm/l");
        block Position=Variable(redeclare type T=Types.Position, storeUnit="cm");
        block MolarEnergy =
                       Variable(redeclare type T=Types.MolarEnergy, storeUnit="kcal/mol");
        block Population =    Variable(redeclare type T =
              Types.Population,storeUnit="1");
        block PopulationChange =
                              Variable(redeclare type T =
              Types.PopulationChange,storeUnit="1/d");
        block PopulationChangePerMember =
                              Variable(redeclare type T =
              Types.PopulationChangePerMember,storeUnit="1/d");
    end RealTypes;

    partial block AbstractBoolean
      "Abstract parameter or the value at defined time of the model - can be input or output parameter"

      parameter String varName="" "Name of stored variable"
      annotation (Dialog(group="Value I/O",tab="IO"));
                                  //getInstanceName()
       parameter Boolean k(fixed=true)=false "Value"
        annotation (Dialog(group="Parameters"));

    end AbstractBoolean;

    package FilesUtilities "File input/output/test"
      import Physiolibrary;
      extends Types.Utilities;
      extends Modelica.Icons.VariantsPackage;

      constant String directoryName="io";

      constant String inputFileName="input.txt"
        "File to load values with (non-)SI units";
      constant String outputFileName="output.txt"
        "File to save values with (non-)SI units";
      constant String comparisonFileName="comparison.txt"
        "File to save comparison from loaded values and simulation results with (non-)SI units";

      constant String inputSIFileName="input_SI.txt"
        "File to load values in SI units";
      constant String outputSIFileName="output_SI.txt"
        "File to save values in SI units";
      constant String comparisonSIFileName="comparison_SI.txt"
        "File to save comparison in SI units from loaded values and simulation results";

      redeclare function extends readReal
        import Modelica.Utilities.*;

      protected
        String fn;
        String line;
        Integer nextIndex;
        Integer lineLen;
        Integer iline=1;
        Boolean found = false;
        Boolean endOfFile=false;
        String str;
        Real inputValue;
        Integer typeDef;
      algorithm
        fn:=directoryName + "/" + inputFileName;

        if not Files.exist(fn) then
           Streams.error("readRealParameter(\""+name+"\", \""+ fn + "\")  Error: the file does not exist.\n");
        else

        typeDef:=UnitConversions.findUnit(storeUnit,unitConversions);

        //Format "<variableName>\n<value> <unit>"
        (line, endOfFile) :=Streams.readLine(fn, iline);
        while not found and not endOfFile loop
             if line == name then
                 // name found, get value of "name = value;"
                 (line, endOfFile) :=Streams.readLine(fn, iline+1);
                 lineLen := Strings.length(line);
                 nextIndex:=1;

      /*
other wariant: //Format "<variableName>=<value><unit>"
  while not found and not endOfFile loop
       iline:=iline+1;
       (line, endOfFile) :=Streams.readLine(fn, iline);
       lineLen := Strings.length(line);

       if lineLen>3 then

         nextIndex:=1; //because Coleman does not use the right identifiers, scanIdentifier can not be used :(
         str:=Strings.substring(line,nextIndex,nextIndex);
         while ((nextIndex+1)<lineLen and (not Strings.isEqual(str," ")) and (not Strings.isEqual(str,"=")) and (not Strings.isEqual(str,"\t"))) loop
            nextIndex:=nextIndex+1;
            str:=Strings.substring(line,nextIndex,nextIndex);
         end while;
         str := Strings.substring(line,1,nextIndex-1);

         if str==name then

           nextIndex:=Strings.Advanced.skipWhiteSpace(line,nextIndex);
           nextIndex:=Strings.Advanced.skipWhiteSpace(line,nextIndex+1); //skip '=' and white-spaces before/after
*/

                 (inputValue,nextIndex) := Strings.scanReal(line, nextIndex);

                 nextIndex:=Strings.Advanced.skipWhiteSpace(line,nextIndex);
                 if nextIndex>lineLen then
                     if Strings.length(unitConversions[typeDef].DisplayUnit) > 0 then
                       Streams.error("No units detected for variable '" + name +
                                      "' in file '" + fn + "'. Expected unis are '" + unitConversions[typeDef].DisplayUnit + "'!\n");
                     end if;
                     //Streams.print(" > " + name + "\t " + String(inputValue) + " (no units)");
                 else
                     str :=Strings.substring(line, Strings.Advanced.skipWhiteSpace(line,nextIndex),  Strings.length(line));
                     if str <> unitConversions[typeDef].DisplayUnit then
                        Streams.error("Units '" + str + "' not expected for variable '"
                         + name + "' in file '" + fn + "'. Expected unis are '" +
                        unitConversions[typeDef].DisplayUnit + "'!\n");
                     end if;
                     //Streams.print(" > " + name + "\t " + String(inputValue) + " " + str);
                 end if;
                 value :=inputValue*unitConversions[typeDef].Scale + unitConversions[typeDef].Offset;
                 //Streams.print("\t\t =" + String(value) + " " + unitConversions[typeDef].Unit);
                 found := true;
                 // end if;  //Format "<variableName>=<value><unit>"

                 //Format "<variableName>\n<value><unit>"
             else
                 // wrong name, skip lines
                 iline := iline + 2;
                 // read next variable name
                 (line, endOfFile) :=Streams.readLine(fn, iline);
             end if;
           end while;

           if not found then
              Streams.error("Parameter \"" + name + "\" not found in file \"" + fn + "\"\n");
           end if;
         end if;

      end readReal;

      redeclare function extends readReal_SI
        import Modelica.Utilities.*;

      protected
        String fn;
        String line;
        Integer nextIndex;
        Integer iline=1;
        Boolean found = false;
        Boolean endOfFile=false;

      algorithm
        fn:=directoryName + "/" +inputSIFileName;

        if not Files.exist(fn) then
           Streams.error("readRealParameter(\""+name+"\", \""+ fn + "\")  Error: the file does not exist.\n");
        else

        //Format "<variableName>\n<value> <unit>"
        (line, endOfFile) :=Streams.readLine(fn, iline);
        while not found and not endOfFile loop
             if line == name then
                 // name found, get value of "name = value;"
                 (line, endOfFile) :=Streams.readLine(fn, iline+1);
                 nextIndex:=1;

                 (value,nextIndex) := Strings.scanReal(line, nextIndex);
                 found := true;

               else
               // wrong name, skip lines
                 iline := iline + 2;
                 // read next variable name
                 (line, endOfFile) :=Streams.readLine(fn, iline);

               end if;
           end while;

           if not found then
              Streams.error("Parameter \"" + name + "\" not found in file \"" + fn + "\"\n");
           end if;
         end if;

      end readReal_SI;

      redeclare function extends readBoolean
        import Modelica.Utilities.*;

      algorithm
        value:=(readReal(name,"")>0.005);
      end readBoolean;

      redeclare function extends writeReal "Write the value to file"
        import Modelica.Utilities.*;

      protected
        String fn;
        Integer typeDef "Variable type";

      algorithm
        fn:=directoryName + "/" +outputFileName;

        if not Files.exist(fn) then
           if not Files.exist(directoryName) then
               Files.createDirectory(directoryName);
           end if;
        end if;

        typeDef:=UnitConversions.findUnit(storeUnit,unitConversions);

        Streams.print(name + "\n" + String(((value - unitConversions[typeDef].Offset)/unitConversions[typeDef].Scale))
        + " " + unitConversions[typeDef].DisplayUnit, fn);

      end writeReal;

      redeclare function extends writeReal_SI
        "Write the value to file using SI unit"
        import Modelica.Utilities.*;

      protected
        String fn;
        Integer typeDef "Variable type";

      algorithm
        fn:=directoryName + "/" +outputSIFileName;

        if not Files.exist(fn) then
           if not Files.exist(directoryName) then
               Files.createDirectory(directoryName);
           end if;
        end if;

         Streams.print(name + "\n" + String(value), fn);

      end writeReal_SI;

      redeclare function extends writeBoolean
        import Modelica.Utilities.*;
      protected
        String fn;

      algorithm
        fn:=directoryName + "/" +outputFileName;

        if not Files.exist(fn) then
           if not Files.exist(directoryName) then
               Files.createDirectory(directoryName);
           end if;
        end if;

        Streams.print( name + "\n" + String(if value then 1 else 0),      fn);

      end writeBoolean;

      redeclare function extends writeComparison
        "Compare and write the result and the value to file"
        import Modelica.Utilities.*;

      protected
        String fn;
        Real outputInitialValue;
        Real outputFinalValue;
        Real outputDefaultValue;
        Integer typeDef "Variable output units";

      algorithm
        fn:=directoryName + "/" +comparisonFileName;

        if not Files.exist(fn) then
           if not Files.exist("output") then
               Files.createDirectory("output");
           end if;
        end if;

        typeDef:=UnitConversions.findUnit(storeUnit,unitConversions);

      outputDefaultValue :=((defaultValue - unitConversions[typeDef].Offset)/unitConversions[typeDef].Scale);
      outputInitialValue :=((initialValue - unitConversions[typeDef].Offset)/unitConversions[typeDef].Scale);
      outputFinalValue :=((finalValue - unitConversions[typeDef].Offset)/unitConversions[typeDef].Scale);

        Streams.print((if (abs(outputDefaultValue) > Modelica.Constants.eps)
           then String(abs((outputFinalValue - outputDefaultValue)/
          outputDefaultValue)) else "Zero vs. " + String(outputFinalValue)) +
          " ; " + name + " : default=" + String(outputDefaultValue) + " " +
          unitConversions[typeDef].DisplayUnit
           + ", initial=" + String(outputInitialValue) + " " + unitConversions[
          typeDef].DisplayUnit + ", final=" + String(outputFinalValue) + " " +
          unitConversions[typeDef].DisplayUnit,
          fn);

      end writeComparison;

      redeclare function extends writeComparison_SI
        "Compare and write the result and the value to file using SI units"
        import Modelica.Utilities.*;

      protected
        String fn;
        Real outputInitialValue;
        Real outputFinalValue;
        Real outputDefaultValue;

      algorithm
        fn:=directoryName + "/" +comparisonSIFileName;

        if not Files.exist(fn) then
           if not Files.exist("output") then
               Files.createDirectory("output");
           end if;
        end if;

      outputDefaultValue := defaultValue;
      outputInitialValue := initialValue;
      outputFinalValue := finalValue;

      Streams.print((if (abs(outputDefaultValue) > Modelica.Constants.eps) then
        String(abs((outputFinalValue - outputDefaultValue)/outputDefaultValue))
         else "Zero vs. " + String(outputFinalValue)) + " ; " + name +
        " : default=" + String(outputDefaultValue) + ", initial=" + String(outputInitialValue)
         + ", final=" + String(outputFinalValue), fn);

      end writeComparison_SI;

      redeclare function extends writeBooleanComparison
        "Compare and write the result and the value to file"
        import Modelica.Utilities.*;

      protected
        String fn;
        Real outputInitialValue;
        Real outputFinalValue;
        Real outputDefaultValue;
      algorithm
        fn:=directoryName + "/" +comparisonFileName;

        if not Files.exist(fn) then
           if not Files.exist("output") then
               Files.createDirectory("output");
           end if;
        end if;
         if (defaultValue==finalValue) then

             Streams.print("0 ; "+ name + " : default=" + String(if defaultValue then 1 else 0) +", initial=" + String(if initialValue then 1 else 0) + ", final=" + String(if finalValue then 1 else 0), "differences.txt");
           else
             Streams.print("! ; " + name + " : default=" + String(if defaultValue then 1 else 0) +", initial=" + String(if initialValue then 1 else 0)+ ", final=" + String(if finalValue then 1 else 0), "differences.txt");
         end if;

      end writeBooleanComparison;

      annotation (Documentation(revisions="<html>
<p>Licensed by Marek Matejak under the Modelica License 2</p>
<p>Copyright &copy; 2008-2013, Marek Matejak, Charles University in Prague.</p>
<p><br/><i>This Modelica package is&nbsp;<u>free</u>&nbsp;software and the use is completely at&nbsp;<u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see&nbsp;<a href=\"modelica://Physiolibrary.UsersGuide.ModelicaLicense2\">UsersGuide.ModelicaLicense2</a>&nbsp;or visit&nbsp;<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i></p>
</html>",     info="<html>
<p>During the creation and debugging of huge integrated models it is necessary to easily define consistent input, output and test sets of all output variables for some subsystems. Let&apos;s imagine that we have a model composed only of subsystems that converge from some constant inputs to constant outputs. It should be possible to substitute each main subsystem for its chosen constant output values as parameters. Comparing the model with these parametric values and the original subsystem can show the wrong part of the simulation. </p>
<p>For example in the huge HumMod model it is necessary to debug smaller parts separately. These tools could be use, because HumMod is the type of constant-converged model. Each subsystem in the first level has the constant input values set for its output variables. Simulating, for example, the cardiovascular subsystem is possible by creating the high-level system with the original cardiovascular subsystem, but with a constant metabolic, constant thermoregulation, constant hormonal, constant water, constant proteins, constant gases, constant electrolytes and constant status subsystem. </p>
<p>Because the number of output variables for each subsytem changes during development, it is a good idea to have only one list for each subsystem. And generating consistent sets to store, restore, compare initial and final values is possible by the same pattern as presented in the package Types.Example. In this package it is also possible to define a customized &nbsp;way to save and load the variables that connect subsystems together. For this purpose, one has to redeclare the package Types.Utilities with simple functions for reading and writing values, such as is done in the default package FileUtilities. </p>
</html>"));
    end FilesUtilities;

    package BooleanExtension
      extends Modelica.Icons.VariantsPackage;
          block Parameter "Read constant boolean signal"
            extends Types.AbstractBoolean;

            Modelica.Blocks.Interfaces.BooleanOutput y
          "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = k;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end Parameter;

          block InputParameter "Read constant boolean signal"
            extends Types.AbstractBoolean(k=
              Utilities.readBoolean(varName));

            Modelica.Blocks.Interfaces.BooleanOutput y
          "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
            replaceable package Utilities = Types.FilesUtilities;

          equation
            y = k;
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end InputParameter;

          block OutputFinal "Save boolean value to file"
           extends Types.AbstractBoolean;

            replaceable package Utilities = Types.FilesUtilities;

            Modelica.Blocks.Interfaces.BooleanInput
                                                  y
          "Connector of Real output signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-100,-10},{-80,10}})));

          equation
            when terminal() then
               Utilities.writeBoolean(varName,y);
            end when;

            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputFinal;

          block OutputComparison "Save variable comparison to file"
            import Physiolibrary;
            extends Types.AbstractBoolean(          k=Utilities.readBoolean(varName));
            replaceable package Utilities = Types.FilesUtilities
             annotation (Dialog(group="Functions to read or store",tab="Types"));

            Modelica.Blocks.Interfaces.BooleanInput
                                  y "Connector of Real input signal"
              annotation (Placement(transformation(extent={{-100,-10},{-80,10}}), iconTransformation(extent={{-120,-10},{-100,10}})));

      protected
            parameter Boolean initialValue(fixed=false);
          initial equation
            initialValue = y;
          equation
            when terminal() then
             Utilities.writeBooleanComparison(
              varName,
              k,
              initialValue,
              y);
            end when;

              annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
              initialScale=0.04), graphics={Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,255}), Text(
                extent={{-100,-10},{100,10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="%varName")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
          end OutputComparison;
    end BooleanExtension;

    package Utilities "Value input/output/test support"
      extends Modelica.Icons.BasesPackage;
      replaceable function readReal "Read the real value of parameter from file with lines in format:
  <parameterName>
  <value> <unit>"
        extends Modelica.Icons.Function;

        input String name "Name of parameter";
        input String storeUnit "Preferred units to store variable value";
        input UnitConversions.RealTypeRecord[:] unitConversions = UnitConversions.RealTypeDef
          "Unit conversions";

        output Real value=0 "Actual value of parameter in SI units";
      //algorithm
      end readReal;

      replaceable function readReal_SI "Read the real value in SI units of parameter from file with lines in format:
  <parameterName>\\n<value>"
        extends Modelica.Icons.Function;

        input String name "Name of parameter";

        output Real value=0 "Actual value of parameter in SI units";
      //algorithm
      end readReal_SI;

      replaceable function readBoolean "Read the boolean value of parameter from file with lines in format:
  <parameterName>
  <value> <unit>"
        extends Modelica.Icons.Function;

        input String name "Variable name";
        output Boolean value "Variable value";
      //algorithm
      end readBoolean;

      replaceable function writeReal "Write the real value to file"
        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Real value "Variable value";
        input String storeUnit "Preferred units to store variable value";
        input UnitConversions.RealTypeRecord[:] unitConversions = UnitConversions.RealTypeDef
          "Unit conversions";
      //algorithm
      end writeReal;

      replaceable function writeReal_SI
        "Write the real value using SI unit to file"
        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Real value "Variable value";
      //algorithm
      end writeReal_SI;

      replaceable function writeBoolean "Write the boolean value to file"
        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Boolean value "Variable value";
      //algorithm
      end writeBoolean;

      replaceable function writeComparison
        "Compare and write the result and the value to file"

        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Real defaultValue
          "Original value[in SIunits] to compare with final value";
        input Real initialValue "Initial variable value[in SI units]";
        input Real finalValue "Final variable value[in SI units]";

        input String storeUnit "Preferred units to store variable value";
        input UnitConversions.RealTypeRecord[:] unitConversions = UnitConversions.RealTypeDef
          "Unit conversions";
      //algorithm
      end writeComparison;

      replaceable function writeComparison_SI
        "Compare and write the result and the value to file using SI units"

        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Real defaultValue
          "Original value[in SIunits] to compare with final value";
        input Real initialValue "Initial variable value[in SI units]";
        input Real finalValue "Final variable value[in SI units]";

      //algorithm
      end writeComparison_SI;

      replaceable function writeBooleanComparison
        "Compare and write the result and the value to file"
        extends Modelica.Icons.Function;

        input String name "Variable name";
        input Boolean defaultValue
          "Original value[in SIunits] to compare with final value";
        input Boolean initialValue "Initial variable value[in SI units]";
        input Boolean finalValue "Final variable value[in SI units]";
      //algorithm
      end writeBooleanComparison;

      package UnitConversions "Conversions non-SI units at input/output"

       function findUnit
         input String unitToFind "display unit to find in unitConversions";
         input UnitConversions.RealTypeRecord[:] unitConversions = UnitConversions.RealTypeDef
            "Unit conversions";
         output Integer typeDef "index in unitConversions";
       algorithm
         typeDef:=0;
         for i in 1:size(unitConversions,1) loop
           if unitConversions[i].DisplayUnit == unitToFind then
             typeDef:=i;
             break;
           end if;
         end for;
         if typeDef==0 then
            Modelica.Utilities.Streams.print("Unit \"" + unitToFind + "\" not defined. Do not hesitate to contact me. marek@matfyz.cz\n");
         end if;
       end findUnit;

       record RealTypeRecord "The Real Type definition"
         parameter String Quantity="" "Quantity";
         parameter String Unit="1" "SI unit";
         parameter String DisplayUnit="" "Display unit";

         parameter Real Scale=1
            "Scale from display unit to SI unit such that x <d> = x*s+o <u>";
         parameter Real Offset=0
            "Offset from display unit to SI unit such that x <d> = x*s+o <u>";

         parameter Real Min=-Modelica.Constants.inf "minimal value";
         parameter Real Max=+Modelica.Constants.inf; // Inf denotes a large value
         parameter Real Start = Offset; // Initial value
         parameter Real Nominal = Scale; // Nominal value
         parameter StateSelect StateSelection = StateSelect.default;
       end RealTypeRecord;

        constant RealTypeRecord RealTypeDef[:]={RealTypeRecord(),
            RealTypeRecord(),RealTypeRecord(
              Quantity="pH",
              Unit="log10(mol/l)",
              DisplayUnit="log10(mol/l)",
              Scale=1),RealTypeRecord(
              Quantity="Energy",
              Unit="J",
              DisplayUnit="kcal",
              Scale=4186.8),RealTypeRecord(
              Quantity="Time",
              Unit="s",
              DisplayUnit="min",
              Scale=60),RealTypeRecord(
              Quantity="Frequency",
              Unit="1/s",
              DisplayUnit="Hz",
              Scale=1),RealTypeRecord(
              Quantity="Frequency",
              Unit="1/s",
              DisplayUnit="1/min",
              Scale=1/60),RealTypeRecord(
              Quantity="Mass",
              Unit="kg",
              Min=0,
              DisplayUnit="g",
              Scale=1e-3),RealTypeRecord(
              Quantity="Mass",
              Unit="kg",
              Min=0,
              DisplayUnit="mg",
              Scale=1e-6),RealTypeRecord(
              Quantity="MassFlowRate",
              Unit="kg/s",
              DisplayUnit="mg/min",
              Scale=(1e-6)/60),RealTypeRecord(
              Quantity="MassFlowRate",
              Unit="kg/s",
              DisplayUnit="g/min",
              Scale=(1e-3)/60),RealTypeRecord(
              Quantity="Density",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="kg/l",
              Scale=1e3),RealTypeRecord(
              Quantity="Density",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="g/l",
              Scale=1),RealTypeRecord(
              Quantity="MassConcentration",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="mg/l",
              Scale=1e-3),RealTypeRecord(
              Quantity="MassConcentration",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="mg/dl",
              Scale=1e-6/1e-4),RealTypeRecord(
              Quantity="MassConcentration",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="ng/l",
              Scale=1e-12/1e-3),RealTypeRecord(
              Quantity="MassConcentration",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="ng/dl",
              Scale=1e-12/1e-4),RealTypeRecord(
              Quantity="MassConcentration",
              Unit="kg/m3",
              Min=0,
              DisplayUnit="ng/ml",
              Scale=1e-12/1e-6),RealTypeRecord(
              Quantity="Length",
              Unit="m",
              DisplayUnit="cm",
              Scale=1e-2),RealTypeRecord(
              Quantity="Velocity",
              Unit="m/s",
              DisplayUnit="MPH",
              Scale=0.44704),RealTypeRecord(
              Quantity="Acceleration",
              Unit="m/s2",
              DisplayUnit="m/s2",
              Scale=1),RealTypeRecord(
              Quantity="Pressure",
              Unit="Pa",
              DisplayUnit="mmHg",
              Scale=101325/760),RealTypeRecord(
              Quantity="Volume",
              Unit="m3",
              DisplayUnit="ml",
              Scale=1e-6),RealTypeRecord(
              Quantity="VolumeFlowRate",
              Unit="m3/s",
              DisplayUnit="ml/min",
              Scale=(1e-6)/60),RealTypeRecord(
              Quantity="Concentration",
              Unit="mol/m3",
              DisplayUnit="mol/l",
              Scale=1e+3),RealTypeRecord(
              Quantity="Concentration",
              Unit="mol/m3",
              DisplayUnit="mmol/l",
              Scale=1),RealTypeRecord(
              Quantity="Concentration",
              Unit="mol/m3",
              DisplayUnit="pmol/l",
              Scale=1e-12/1e-3),RealTypeRecord(
              Quantity="Concentration",
              Unit="mol/m3",
              DisplayUnit="uU_Insulin/ml",
              Scale=6.622e-9),RealTypeRecord(
              Quantity="Concentration",
              Unit="mol/m3",
              DisplayUnit="U_EPO/l",
              Scale=0.45e-9),RealTypeRecord(
              Quantity="AmountOfSubstance",
              Unit="mol",
              DisplayUnit="mmol",
              Scale=1e-3),RealTypeRecord(
              Quantity="AmountOfSubstance",
              Unit="mol",
              DisplayUnit="osm",
              Scale=1),RealTypeRecord(
              Quantity="AmountOfSubstance",
              Unit="mol",
              DisplayUnit="mosm",
              Scale=1e-3),RealTypeRecord(
              Quantity="MolarFlowRate",
              Unit="mol/s",
              DisplayUnit="mmol/min",
              Scale=(1e-3)/60),RealTypeRecord(
              Quantity="MolarFlowRate",
              Unit="mol/s",
              DisplayUnit="ml_STP/min",
              Scale=1/1362657.193569),RealTypeRecord(
              Quantity="Energy",
              Unit="J",
              DisplayUnit="kcal",
              Scale=4186.8),RealTypeRecord(
              Quantity="ThermodynamicTemperature",
              Unit="K",
              DisplayUnit="K",
              Scale=1,
              Start=310.15),RealTypeRecord(
              Quantity="ThermodynamicTemperature",
              Unit="K",
              DisplayUnit="degC",
              Scale=1,
              Offset=273.15,
              Start=310.15),RealTypeRecord(
              Quantity="Power",
              Unit="W",
              DisplayUnit="W",
              Scale=1),RealTypeRecord(
              Quantity="Power",
              Unit="W",
              DisplayUnit="kcal/min",
              Scale=4186.8/60),RealTypeRecord(
              Quantity="Power",
              Unit="W",
              DisplayUnit="cal/min",
              Scale=4.1868/60),RealTypeRecord(
              Quantity="ThermalConductance",
              Unit="W/K",
              DisplayUnit="kcal/(min.degC)",
              Scale=4186.8/60),RealTypeRecord(
              Quantity="SpecificHeatCapacity",
              Unit="J/(kg.K)",
              DisplayUnit="kcal/(degC.kg)",
              Scale=4186.8),RealTypeRecord(
              Quantity="SpecificEnergy",
              Unit="J/kg",
              DisplayUnit="kcal/kg",
              Scale=4186.8),RealTypeRecord(
              Quantity="ElectricPotential",
              Unit="V",
              DisplayUnit="mV",
              Scale=1e-3),RealTypeRecord(
              Quantity="ElectricCharge",
              Unit="C",
              DisplayUnit="meq",
              Scale=(1e-3)*(9.64853399*10^4)),RealTypeRecord(
              Quantity="VolumeDensityOfCharge",
              Unit="C/m3",
              DisplayUnit="meq/l",
              Scale=(1e-3)*(9.64853399*10^4)/1e-3),RealTypeRecord(
              Quantity="VolumeDensityOfCharge",
              Unit="C/m3",
              DisplayUnit="eq/l",
              Scale=(9.64853399*10^4)/1e-3),RealTypeRecord(
              Quantity="ElectricCurrent",
              Unit="A",
              DisplayUnit="meq/min",
              Scale=(1e-3)*(9.64853399*10^4)/60),RealTypeRecord(
              Quantity="Fraction",
              Unit="1",
              DisplayUnit="%",
              Scale=1e-2),RealTypeRecord(
              Quantity="OsmoticMembramePermeability",
              Unit="m6/(mol.s)",
              DisplayUnit="ml/(mOsmol.min)",
              Scale=(1e-6)/((1e-3)*60)),RealTypeRecord(
              Quantity="DiffusionMembranePermeability",
              Unit="m3/s",
              DisplayUnit="ml/min",
              Scale=(1e-3)/60),RealTypeRecord(
              Quantity="HydraulicConductance",
              Unit="m3/(Pa.s)",
              DisplayUnit="ml/(mmHg.min)",
              Scale=(1e-6)/((101325/760)*60)),RealTypeRecord(
              Quantity="HydraulicCompliance",
              Unit="m3/Pa",
              DisplayUnit="ml/mmHg",
              Scale=(1e-6)/(101325/760)),RealTypeRecord(
              Quantity="HydraulicInertance",
              Unit="Pa.s2/m3",
              DisplayUnit="mmHg.min2/ml",
              Scale=((101325/760)*(60^2)/(1e-6))),RealTypeRecord(
              Quantity="GasSolubility",
              Unit="mol/(m3.Pa)",
              DisplayUnit="mmol/(l.mmHg)",
              Scale=(1e-3)/((1e-3)*(101325/760))),RealTypeRecord(
              Quantity="Osmolarity",
              Unit="mol/m3",
              DisplayUnit="mosm/l",
              Scale=1),RealTypeRecord(
              Quantity="Osmolarity",
              Unit="mol/m3",
              DisplayUnit="osm/l",
              Scale=1000),RealTypeRecord(
              Quantity="MolarEnergy",
              Unit="J/mol",
              DisplayUnit="kcal/mol",
              Scale=4186.8),RealTypeRecord(
              Quantity="Pharmacology Concentration",
              Unit="1/m3",
              DisplayUnit="iu/l",
              Scale=1000),RealTypeRecord(
              Quantity="Pharmacology Concentration",
              Unit="1/m3",
              DisplayUnit="uiu/ml",
              Scale=1),RealTypeRecord(
              Quantity="PopulationChange",
              Unit="1/s",
              DisplayUnit="1/min",
              Scale=1/60),RealTypeRecord(
              Quantity="PopulationChange",
              Unit="1/s",
              DisplayUnit="1/d",
              Scale=1/(60*60*24))}
          "All defined Real types - units, displayUnits, conversions, nominals";

         constant String[:] Prefix =    {"","m", "u", "n", "p"};
         constant Real[:]   PrefixScale={1.0, 1e-3,1e-6,1e-9,1e-12};

         constant String[:] SuffixSI= {"","/m3","/m3","/m3","/s"};
         constant String[:] Suffix =  {"","/l", "/dl","/ml","/min"};
         constant Real[:]   SuffixScale={1, 1e+3, 1e+4, 1e+6, 1/60};

        function GenerateSubstanceUnits
           input String nonSIunit "non-SI unit";
           input Real scale "1 mol = 'scale' 'nonSIunit'";
           output RealTypeRecord[size(Prefix,1)*size(Suffix,1)] units
            "generated conversions for mili-, micro-, .. amount/concentration/flow";
        protected
         constant Integer np = size(Prefix,1);
         constant Integer ns = size(Suffix,1);
        algorithm
          units:={
              RealTypeRecord(
                Unit="mol"+SuffixSI[integer(1+mod(i,ns))],
                DisplayUnit=Prefix[integer(1+div(i,ns))] + nonSIunit + Suffix[integer(1+mod(i,ns))],
                Scale=PrefixScale[integer(1+div(i,ns))]*scale*SuffixScale[integer(1+mod(i,ns))])
              for i in 0:(np*ns-1)};
        end GenerateSubstanceUnits;

      end UnitConversions;
    end Utilities;

    package ZeroUtilities "No input/output/test"
      import Physiolibrary;
      extends Types.Utilities;
      extends Modelica.Icons.VariantsPackage;

      redeclare function extends readReal
      algorithm
      end readReal;

      redeclare function extends readReal_SI
      algorithm
      end readReal_SI;

      redeclare function extends readBoolean
      algorithm
      end readBoolean;

      redeclare function extends writeReal
      algorithm
      end writeReal;

      redeclare function extends writeReal_SI
      algorithm
      end writeReal_SI;

      redeclare function extends writeBoolean
      algorithm
      end writeBoolean;

      redeclare function extends writeComparison
      algorithm
      end writeComparison;

      redeclare function extends writeComparison_SI
      algorithm
      end writeComparison_SI;

      redeclare function extends writeBooleanComparison
      algorithm
      end writeBooleanComparison;

    end ZeroUtilities;

    type SimulationType = enumeration(
        NoInit "Use start values only as a guess of state values",
        NormalInit "Initialization by start values",
        ReadInit "Initialization by function Utilities.readReal('state name')",

        InitSteadyState
          "Initialization in Steady State (initial derivations are zeros)",
        SteadyState "Steady State = Derivations are zeros during simulation")
      "Initialization or Steady state options (to determine model type before simulating)"
        annotation (Evaluate=true);

    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>The main problem of medical research, articles, and experiments is using obscure units from medicine, pharmacology, biology and non-physics disciplines. The Physiolibrary fulfills the Modelica ideal of using SI units as the main unit for each variable, and the previously described physiological units are also implemented as the displayUnits for each variable. Using these displayUnits the user sets and sees the &QUOT;physiological&QUOT; values. The implementation can also be joined to any unit-correct Modelica models and physical equations without crashing due to unit incompatibilities. The unit support of Physiolibrary is so strong that you even can chose the right unit-typed &ldquo;input real&rdquo;/&rdquo;output real&rdquo; from the library package Types.RealIO. As can be expected, only the non-specific packages States and Blocks in the Physiolibrary have variables without units.</p>
</html>"));
  end Types;

  package Blocks "Base Signal Blocks Library"
    extends Modelica.Icons.Package;
    package Math "Modelica.Math extension"
      extends Modelica.Icons.Package;
      model Integrator "Integrator with support of steady state calculation."
        extends SteadyStates.Interfaces.SteadyState(
                                           state_start=y_start, state(nominal=NominalValue));

        parameter Real k=1 "Integrator gain";

        parameter Real y_start=0 "Initial or guess value of output (= state)"
          annotation (Dialog(group="Initialization"));
        extends Modelica.Blocks.Interfaces.SISO(u(nominal=NominalValue/k),y(nominal=NominalValue));

        parameter Real NominalValue = 1
          "Numerical scale. For some substances such as hormones, hydronium or hydroxide ions should be set."
            annotation ( HideResult=true, Dialog(tab="Solver",group="Numerical support of very small concentrations"));
      equation
        state = y;  //der(y) = k*u
        change = k*u;

        annotation (defaultComponentName="int",
          Documentation(info="<html>
<p>
This blocks computes output <b>y</b> (element-wise) as
<i>integral</i> of the input <b>u</b> multiplied with
the gain <i>k</i>:
</p>
<pre>
         k
     y = - u
         s
</pre>

<p>
It might be difficult to initialize the integrator in steady state.
This is discussed in the description of package
<a href=\"Modelica://Modelica.Blocks.Continuous#info\">Continuous</a>.
</p>

</html>
"),       Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{0,-10},{60,-70}},
                lineColor={192,192,192},
                textString="I"),
              Text(
                extent={{-150,-150},{150,-110}},
                lineColor={0,0,0},
                textString="k=%k"),
              Line(points={{-80,-80},{80,80}}, color={0,0,127})}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Rectangle(extent={{-60,60},{60,-60}}, lineColor={0,0,255}),
              Line(points={{-100,0},{-60,0}}, color={0,0,255}),
              Line(points={{60,0},{100,0}}, color={0,0,255}),
              Text(
                extent={{-36,60},{32,2}},
                lineColor={0,0,0},
                textString="k"),
              Text(
                extent={{-32,0},{36,-58}},
                lineColor={0,0,0},
                textString="s"),
              Line(points={{-46,0},{46,0}})}));
      end Integrator;

          block Add "u + parameter"

            parameter Real k(start=1) "value added to input signal";
      public
            Modelica.Blocks.Interfaces.RealInput u "Input signal connector"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealOutput y "Output signal connector"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = k+u;
            annotation (defaultComponentName="add",
              Documentation(info="<html>
<p>This block computes output <i>y</i> as <i>sum</i> of offset <i>k</i> with the input <i>u</i>: </p>
<p><code>    y = k + u;</code> </p>
</html>"),    Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Polygon(
                points={{-100,100},{100,40},{100,-40},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-42},{100,40}},
                lineColor={0,0,0},
                textString="u+%k"),
              Text(
                extent={{-150,140},{150,100}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-76,38},{0,-34}},
                lineColor={0,0,255},
                textString="k")}));
          end Add;

          block Reciprocal "1 / u"
            extends Modelica.Blocks.Interfaces.SISO;
          equation
            y = 1/u;
            annotation (defaultComponentName="rec",
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="1/u")}),
              Documentation(info="<html>
<p>This blocks computes the output <b>y</b> as <i>reciprocal value</i> of the input <b>u</b>: </p>
<p><code>    y = 1 / u ;</code> </p>
</html>"));
          end Reciprocal;

          block Power "b ^ u"

            parameter Boolean useBaseInput = false
          "=true, if exponential base input is used instead of parameter Base"
            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

            parameter Real Base=10 "exponential base if useBaseInput=false"
              annotation (Dialog(enable=not useBaseInput));

            Modelica.Blocks.Interfaces.RealOutput y
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
            Modelica.Blocks.Interfaces.RealInput base(start=Base) = b if useBaseInput annotation (Placement(
                  transformation(extent={{-120,40},{-80,80}})));
            Modelica.Blocks.Interfaces.RealInput exponent annotation (Placement(
                  transformation(extent={{-120,-80},{-80,-40}})));

      protected
            Real b "Current exponential base";
          equation
            if not useBaseInput then
              b = Base;
            end if;

            y = b^exponent;
             annotation (defaultComponentName="pow",
              Documentation(info="<html>
<p>y = base^exponent</p>
</html>"),    Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
                  initialScale=0.04), graphics={Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,-40},{100,40}},
                lineColor={0,0,0},
                    textString="b^u")}));
          end Power;

      block Min "Pass through the smallest signal"
        extends Modelica.Blocks.Interfaces.MISO;
      equation
         y = min(u);
        annotation (defaultComponentName="min", Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Text(
                extent={{-90,36},{90,-36}},
                lineColor={160,160,164},
                textString="min()")}),
                                Documentation(info="<html>
<p>
This block computes the output <b>y</b> as <i>minimum</i> of
the Real inputs <b>u[1]</b>,<b>u[2]</b> .. <b>u[nin]</b>:
</p>
<pre>    y = <b>min</b> ( u );
</pre>
</html>
"));
      end Min;

          block Log10AsEffect "min( 0, log10(u) )"

            extends Modelica.Blocks.Interfaces.SISO;
          equation
            y = if u>1 then Modelica.Math.log10(u) else 0;
            annotation (defaultComponentName="logEffect",
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Polygon(
                points={{90,0},{68,8},{68,-8},{90,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,0},{68,0}}, color={192,192,192}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-80},{-80,68}}, color={192,192,192}),
              Text(
                extent={{-44,-56},{94,-80}},
                lineColor={192,192,192},
                textString="max(log10,0)"),
              Line(points={{-100,0},{-80,0},{-78,0},{-74,0},{-76,0},{-74,0},{-72,
                    0},{-69.5,6.08},{-64.7,15.9},{-57.5,26},{-47,36.1},{-31.8,
                    46.1},{-10.1,56},{22.1,66},{68.7,76.1},{80,78}}, color={0,0,
                    0})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={
              Line(points={{-80,80},{-88,80}}, color={192,192,192}),
              Line(points={{-80,-80},{-88,-80}}, color={192,192,192}),
              Line(points={{-80,-90},{-80,84}}, color={192,192,192}),
              Text(
                extent={{-65,96},{-38,78}},
                lineColor={160,160,164},
                textString="y"),
              Polygon(
                points={{-80,100},{-86,84},{-74,84},{-80,100}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,0},{84,0}}, color={192,192,192}),
              Polygon(
                points={{100,0},{84,6},{84,-6},{100,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,0},{-80,0},{-78,0},{-74,0},{-76,0},{-74,0},{-72,
                    0},{-69.5,6.08},{-64.7,15.9},{-57.5,26},{-47,36.1},{-31.8,
                    46.1},{-10.1,56},{22.1,66},{68.7,76.1},{80,78}}, color={0,0,
                    0}),
              Text(
                extent={{70,-3},{90,-23}},
                textString="20",
                lineColor={0,0,255}),
              Text(
                extent={{-78,-1},{-58,-21}},
                textString="1",
                lineColor={0,0,255}),
              Text(
                extent={{-109,72},{-89,88}},
                textString=" 1.3",
                lineColor={0,0,255}),
              Text(
                extent={{-109,-88},{-89,-72}},
                textString="-1.3",
                lineColor={0,0,255}),
              Text(
                extent={{62,30},{90,10}},
                lineColor={160,160,164},
                textString="u")}),
              Documentation(info="<html>
<p>This blocks computes the output <b>y</b> as the <i>base 10 logarithm</i> of the input <b>u </b>if <b>u&GT;1</b> or 0 otherwise </p>
<p><code>    y = if(u&GT;1) <b>log10</b>( u ) else 0;</code></p>
</html>"));
          end Log10AsEffect;

          block Parts "Divide the input value by weights"
            extends Modelica.Blocks.Interfaces.SIMO;
            parameter Real w[nout]=ones(nout) "Optional: weight coefficients";
      protected
           Real coef;
           Real weight[nout];
          equation
            ones(nout)*weight = 1;
            for i in 1:nout loop
                weight[i] = w[i] * coef;
                y[i] = u * weight[i];
            end for;
            annotation (defaultComponentName="parts",
              Documentation(info="<html>
<p>This blocks divide input value u to output array y by weights. The sum of output values is equal to input value <b>u</b>: </p>
<p><code>    u = (w[1]*y[1] + w[2]*y[2] + ... + w[n]*y[n]) / (w[1] + w[2] + ... + w[n]);</code></p>
<p>Example: </p>
<pre>     parameter:   nin = 3;  w=ones(3);

  results in the following equations:

<p><code>     y[1]=u/3,  y[2]=u/3,  y[3]=u/3;</code> </p>
</html>"),    Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Text(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,0},
                textString="Parts")}));
          end Parts;

          block HomotopyStrongComponentBreaker
        "Break the strong component in normalized signal with independent default constant value"
            extends Modelica.Blocks.Interfaces.SISO;
            parameter Real defaultValue=1;
            parameter Real defaultSlope=0;
          equation
            y = homotopy(u,defaultValue + defaultSlope*(u-defaultValue));
            //y = homotopy(u,defaultValue);
             annotation (defaultComponentName="homotopy",
              Documentation(info="<html>
<p>This blocks should solve the initial strong component problem. In the non-linear-strong-component-cycled place, where the default or mean value of variable is known.</p>
<p>For example the regulation loop L driven by loop-dependent effect E with default value 1:</p>
<p> </p>
<p>E=f(L(E)) can be rewritten to E=f(L( H )), where H is output from this block with input E. </p>
</html>"),    Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
                  initialScale=0.04), graphics={Text(
                extent={{-100,-24},{96,20}},
                lineColor={0,0,255},
                    textString="Homotopy")}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2},
                  initialScale=0.04), graphics={Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-98,-18},{98,26}},
                lineColor={0,0,255},
                    textString="Homotopy")}));
          end HomotopyStrongComponentBreaker;

          block DegradationGain
        "Output the degradation flow from HalfTime and the amount as the input signal"

            parameter Types.Time HalfTime
          "Half time to compute degradation from amount or mass";
      public
            Modelica.Blocks.Interfaces.RealInput u "Input signal connector" annotation (
                Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealOutput y "Output signal connector" annotation (
               Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = (Modelica.Math.log(2)/HalfTime)*u;
            annotation (
              Documentation(info="<html>
<p>
This block computes output <i>y</i> as
<i>product</i> of gain <i>k</i> with the
input <i>u</i>:
</p>
<pre>
    y = k * u;
</pre>

</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,140},{150,100}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-76,38},{0,-34}},
                textString="k",
                lineColor={0,0,255})}));
          end DegradationGain;

          block FractionGain "Output the fraction of the input signal"

            parameter Types.Fraction f
          "Half time to compute degradation from amount or mass";
      public
            Modelica.Blocks.Interfaces.RealInput u "Input signal connector" annotation (
                Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealOutput y "Output signal connector" annotation (
               Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            y = f*u;
            annotation (
              Documentation(info="<html>
<p>
This block computes output <i>y</i> as
<i>product</i> of gain <i>k</i> with the
input <i>u</i>:
</p>
<pre>
    y = k * u;
</pre>

</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,140},{150,100}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-76,38},{0,-34}},
                textString="k",
                lineColor={0,0,255})}));
          end FractionGain;
    end Math;

    package Interpolation "Empirical Dependence of Two Variables"
      extends Modelica.Icons.Package;
     function Spline "Cubic spline interpolation function"

          input Real[:] x "x coordinations of interpolating points"; //souradnice x souradnice uzlovych bodu
          input Real[:,4] a
          "cubic polynom coefficients of curve segments between interpolating points";                   //parametry kubiky
          input Real xVal "input value of x to calculate y value"; //vstupni hodnota

          output Real yVal "y value at xVal";
     //     output Real outExtra;
      protected
        Integer index "index of segment";
        Integer n "number of interpolating points";

     algorithm
            // Najdi interval, ve kterem se nachazi xVal

            if (xVal <= x[1]) then //kdyz je hodnota xVal pred prvnim uzlovym bodem

              yVal := xVal * a[1,3] + a[1,4]; //pocitam primku

            else
              n := size(x,1); //pocet uzlovych bodu
              if (xVal>=x[n]) then //kdyz je hodnota xVal za poslednim uzlovym bodem

                 yVal := xVal * a[n+1,3] + a[n+1,4];  //pocitam primku

            else
              index := 2;
              while  xVal > x[index] and index < n loop
                index:=index+1;
              end while;
              yVal := ((a[index,1]*xVal + a[index,2])*xVal + a[index,3])*xVal + a[index,4];

              /*
         x1:=x[index-1];
         x2:=x[index];
         y1:=y[index-1];
         y2:=y[index];
         slope1:=slope[index-1];
         slope2:=slope[index];

         a1:=-(-x2*slope2 - x2*slope1 + slope2*x1 + slope1*x1 + 2*y2 - 2*y1)/(x2 - x1)^3;
         a2:=(-x2^2*slope2-2*x2^2*slope1-3*x2*y1+x2*slope1*x1+3*x2*y2-x2*slope2*x1-3*y1*x1+slope1*x1^2+3*y2*x1+2*slope2*x1^2)/(x2-x1)^3;
         a3:=-(-slope1*x2^3-2*x2^2*slope2*x1-x2^2*slope1*x1+x2*slope2*x1^2+2*x2*slope1*x1^2+6*x2*x1*y2-6*x2*x1*y1+slope2*x1^3)/(x2-x1)^3;
         a4:=(-slope1*x2^3*x1+y1*x2^3-slope2*x1^2*x2^2+slope1*x1^2*x2^2-3*y1*x2^2*x1+3*y2*x1^2*x2+slope2*x1^3*x2-y2*x1^3)/(x2-x1)^3;

         yVal :=a1*(xVal)^3 + a2*(xVal)^2 + a3*(xVal) + a4;
         */
              end if;
           end if;
       //    outExtra := xVal + yVal;
            annotation (Documentation(revisions="<html>
<p>author: Ondrej Vacek</p>
</html>"));
     end Spline;

     function SplineCoefficients "Cubic spline interpolation coefficients"

          input Real[:] x "x coordinations of interpolating points";
          input Real[:] y "y coordinations of interpolating points";
          input Real[:] slope "slopes at interpolating points";

          output Real[size(x,1)+1,4] a
          "cubic polynom coefficients of curve segments between interpolating points";                               //pocet hodnot ctyrech parametru kubiky je o jeden vic nez pocet bodu

      protected
        Integer n "number of interpolating points";
        Integer i "index of segment";

        Real x1 "previos point";
        Real x2 "current point";

        Real y1 "previous point";
        Real y2 "current point";
        Real slope1 "previous point";
        Real slope2 "current point";

     algorithm
        n := size(x,1);//pocet uzlovych bodu
        for i in 2:n loop //cyklus od 2 do n
              x1:=x[i-1]; //predchozi bod
              x2:=x[i];  //soucasny bod
              y1:=y[i-1]; //predchozi bod
              y2:=y[i]; //soucasny bod
              slope1:=slope[i-1]; //predchozi bod
              slope2:=slope[i]; //soucasny bod
              //vypocty parametru kubiky (od 2 do n) podle souradnic a smernic dvou bodu : y=a[i,4]+a[i,3]*x+a[i,2]*x^2+a[i,1]*x^3
              a[i,1]:=-(-x2*slope2 - x2*slope1 + x1*slope2 + x1*slope1 + 2*y2 - 2*y1)/((x2 - x1)^3);
              a[i,2]:=(-(x2^2)*slope2-2*(x2^2)*slope1-3*x2*y1+x2*slope1*x1+3*x2*y2-x2*slope2*x1-3*y1*x1+slope1*(x1^2)+3*y2*x1+2*slope2*(x1^2))/((x2-x1)^3);
              a[i,3]:=-(-slope1*(x2^3)-2*(x2^2)*slope2*x1-(x2^2)*slope1*x1+x2*slope2*(x1^2)+2*x2*slope1*(x1^2)+6*x2*x1*y2-6*x2*x1*y1+slope2*(x1^3))/((x2-x1)^3);
              a[i,4]:=(-slope1*(x2^3)*x1+y1*(x2^3)-slope2*(x1^2)*(x2^2)+slope1*(x1^2)*(x2^2)-3*y1*(x2^2)*x1+3*y2*(x1^2)*x2+slope2*(x1^3)*x2-y2*(x1^3))/((x2-x1)^3);
        end for;
        a[1,  :] := { 0, 0, slope[1], y[1] - x[1]*slope[1]}; //vypocet prvni sady parametru kubiky  - primky
        a[n+1,:] := { 0, 0, slope[n], y[n] - x[n]*slope[n]}; //vypocet posledni sady parametru kubiky - primky

            annotation (Documentation(revisions="<html>
<p>author: Ondrej Vacek</p>
</html>"));
     end SplineCoefficients;

          model Curve
        "2D natural cubic interpolation spline defined with (x,y,slope) points"

               parameter Real x[:] = fill(Modelica.Constants.N_A,1)
          "x coordinations of interpolating points";
               parameter Real y[:] = fill(Modelica.Constants.N_A,1)
          "y coordinations of interpolating points";
               parameter Real slope[:] = fill(Modelica.Constants.N_A,1)
          "slopes at interpolating points";

               parameter Real[:,3] data = transpose({x,y,slope})
          "Array of interpolating points as {x,y,slope}";

              parameter Real Xscale = 1
          "conversion scale to SI unit of x values";
              parameter Real Yscale = 1
          "conversion scale to SI unit of y values";

               Modelica.Blocks.Interfaces.RealInput u
                            annotation (Placement(transformation(extent={{-120,
                  -20},{-80,20}})));
               Modelica.Blocks.Interfaces.RealOutput val
                               annotation (Placement(transformation(extent={{80,-20},
                  {120,20}})));

      protected
              parameter Real a[:,:] = SplineCoefficients( data[:, 1]*Xscale,data[:, 2]*Yscale,data[:, 3]*Yscale/Xscale)
          "cubic polynom coefficients of curve segments between interpolating points";

          equation
            val = Spline(
                  data[:, 1]*Xscale,
                  a,
                  u);

             annotation ( Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-70,-76},{-20,-48},{0,12},{34,62},{76,72}},
                color={0,0,127},
                smooth=Smooth.Bezier),
              Line(
                points={{-48,-82},{-48,90},{-48,90}},
                color={0,0,127},
                smooth=Smooth.Bezier,
                arrow={Arrow.None,Arrow.Filled}),
              Line(
                points={{-72,-74},{68,-74},{68,-74}},
                color={0,0,127},
                smooth=Smooth.Bezier,
                arrow={Arrow.None,Arrow.Filled})}));
          end Curve;
    end Interpolation;

    package Factors "Multiplication Effects"
      extends Modelica.Icons.Package;
      model Normalization "effect = u/NormalValue"
       extends Icons.BaseFactorIcon;

       parameter Real NormalValue=1
          "Normal value of u, because y=(u/NormalValue)*yBase.";

       parameter Boolean enabled=true "disabled => y=yBase";

       Modelica.Blocks.Interfaces.RealInput u
                    annotation (Placement(transformation(extent={{-100,-20},{-60,
                  20}})));

        Types.Fraction effect;
      equation
        effect = if enabled then u/NormalValue else 1;
        y=effect*yBase;
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p><h4>y = yBase * u</h4></p>
</html>"));
      end Normalization;

      model DamagedFraction "effect = 1 - DamagedAreaFraction"
       extends Icons.BaseFactorIcon;

       parameter Types.Fraction DamagedAreaFraction = 0;

        Types.Fraction effect;
      equation
        effect = 1-DamagedAreaFraction;
        y=yBase*effect;
      end DamagedFraction;

      model Spline "effect = spline(data,u)"
       extends Icons.BaseFactorIcon4;
       Modelica.Blocks.Interfaces.RealInput u(nominal=Xscale)
                    annotation (Placement(transformation(extent={{-100,-20},{-60,
                  20}})));

       parameter Boolean enabled=true "disabled => y=yBase";

       parameter Real[:,3] data "Array of interpolating points as {x,y,slope}";

       parameter Real Xscale = 1 "conversion scale to SI unit of x values";
       parameter Real Yscale = 1 "conversion scale to SI unit of y values";

       parameter Boolean UsePositiveLog10 = false
          "x = if u/scaleX <=1 then 0 else log10(u/scaleX)";

        Types.Fraction effect "Multiplication coeffecient for yBase to reach y";

      protected
          parameter Real a[:,:] = if enabled then Interpolation.SplineCoefficients(
                                                            data[:, 1],data[:, 2]*Yscale,data[:, 3]*Yscale) else zeros(1,1)
          "Cubic polynom coefficients of curve segments between interpolating points";

      equation
        effect = if not enabled then 1 elseif UsePositiveLog10 then Interpolation.Spline(data[:, 1],a,if u/Xscale <= 1 then 0 else log10(u/Xscale))
         else Interpolation.Spline(data[:, 1],a,u/Xscale);

        y=effect*yBase;
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Spline;

      model LagSpline "Adapt the input signal before interpolation"
       extends Icons.BaseFactorIcon5;
       Modelica.Blocks.Interfaces.RealInput u
                    annotation (Placement(transformation(extent={{-100,-20},{-60,
                  20}})));

       parameter Boolean enabled=true "disabled => y=yBase";

       parameter Types.Time HalfTime(displayUnit="min"); //=3462.468;

       parameter Real initialValue = 1 "as u/Xscale";

       parameter Real Xscale = 1 "conversion scale to SI unit of x values";
       parameter Real Yscale = 1 "conversion scale to SI unit of y values";

       parameter Boolean UsePositiveLog10 = false
          "x = if u_delayed/scaleX <=1 then 0 else log10(u_delayed/scaleX)";

       parameter Real[:,3] data;
        Blocks.Math.Integrator integrator(k=(Modelica.Math.log(2)/
              HalfTime), y_start=initialValue*Xscale,
          NominalValue=Xscale)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-38,38})));
        Modelica.Blocks.Math.Feedback feedback annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-38,68})));
        Types.Fraction effect;
        Spline spline(
          data=data,
          Xscale=Xscale,
          Yscale=Yscale,
          UsePositiveLog10=UsePositiveLog10,
          enabled=enabled)
          annotation (Placement(transformation(extent={{-10,-18},{10,2}})));
      equation
        effect = spline.effect;
        connect(feedback.y, integrator.u) annotation (Line(
            points={{-38,59},{-38,50}},
            color={0,0,127}));
        connect(integrator.y, feedback.u2) annotation (Line(
            points={{-38,27},{-38,16},{-62,16},{-62,68},{-46,68}},
            color={0,0,127}));
        connect(feedback.u1, u) annotation (Line(
            points={{-38,76},{-38,94},{-88,94},{-88,0},{-80,0}},
            color={0,0,127}));
        connect(integrator.y, spline.u) annotation (Line(
            points={{-38,27},{-38,-8},{-8,-8}},
            color={0,0,127}));
        connect(yBase, spline.yBase) annotation (Line(
            points={{0,20},{0,-6}},
            color={0,0,127}));
        connect(spline.y, y) annotation (Line(
            points={{0,-12},{0,-40}},
            color={0,0,127}));
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>If the input signal u is constant and it is different from starting delayed input d, the middle value between u and d will be reached after HalfTime.</p>
<p>The mathematical background:</p>
<p>d&apos;(t) = k*(u(t) - d(t))       =&GT;       The solution of d(t) in special case, if u(t) is constant at each time t:  d(t)=u+(d(0)-u)*e^(-k*t),  where the definition of HalfTime is  d(HalfTime) = d(0) + (d(0)-u)/2.</p>
</html>"));
      end LagSpline;

      model SplineLag "Adapt the effect after interpolation"
       extends Icons.BaseFactorIcon3;
       Modelica.Blocks.Interfaces.RealInput u
                    annotation (Placement(transformation(extent={{-100,-20},{-60,
                  20}})));

       parameter Boolean enabled=true "disabled => y=yBase";

       parameter Types.Time HalfTime(displayUnit="d");
                                                      //Tau(unit="day");

       parameter String stateName=getInstanceName()
          "Name in Utilities input/output function"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

       parameter Real Xscale = 1 "conversion scale to SI unit of x values";

       parameter Boolean UsePositiveLog10 = false
          "x = if u/scaleX <=1 then 0 else log10(u/scaleX)";

       parameter Real[:,3] data;
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,-32})));
        Blocks.Math.Integrator integrator(y_start=1, k=(
              Modelica.Math.log(2)/HalfTime),
          stateName=stateName)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-26,12})));
        Modelica.Blocks.Math.Feedback feedback annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-26,44})));
        Types.Fraction effect;
        Spline spline(
          data=data,
          Xscale=Xscale,
          UsePositiveLog10=UsePositiveLog10,
          enabled=enabled)
          annotation (Placement(transformation(extent={{-36,56},{-16,76}})));
        Types.Constants.FractionConst fraction(k(displayUnit="1") = 1)
          annotation (Placement(transformation(extent={{-44,82},{-36,90}})));
      equation
        //der(effect) = (ln(2)/HalfTime)*(spline(data,u)-effect)
        effect = integrator.y;
        connect(yBase, product.u1) annotation (Line(
            points={{0,20},{0,30},{0,-20},{6,-20}},
            color={0,0,127}));
        connect(product.y, y) annotation (Line(
            points={{-2.02067e-015,-43},{-2.02067e-015,-55.5},{0,-55.5},{0,-40}},
            color={0,0,127}));
        connect(feedback.y, integrator.u) annotation (Line(
            points={{-26,35},{-26,24}},
            color={0,0,127}));
        connect(integrator.y, feedback.u2) annotation (Line(
            points={{-26,1},{-26,-8},{-50,-8},{-50,44},{-34,44}},
            color={0,0,127}));
        connect(integrator.y, product.u2) annotation (Line(
            points={{-26,1},{-26,-8},{-6,-8},{-6,-20}},
            color={0,0,127}));
        connect(feedback.u1, spline.y) annotation (Line(
            points={{-26,52},{-26,62}},
            color={0,0,127}));
        connect(u, spline.u) annotation (Line(
            points={{-80,0},{-82,0},{-82,66},{-34,66}},
            color={0,0,127}));
        connect(fraction.y, spline.yBase) annotation (Line(
            points={{-35,86},{-26,86},{-26,68}},
            color={0,0,127}));
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SplineLag;

      model SplineLagOrZero "LagSpline if not Failed"
       extends Icons.BaseFactorIcon2;
       Modelica.Blocks.Interfaces.RealInput u
                    annotation (Placement(transformation(extent={{-120,-40},{-80,
                  0}}), iconTransformation(extent={{-120,-40},{-80,0}})));

       parameter Boolean enabled=true "disabled => y=yBase";

       parameter Types.Time HalfTime(displayUnit="d");
       parameter Real[:,3] data;

       parameter String stateName=getInstanceName()
          "Name in Utilities input/output function"
           annotation (Evaluate=true, HideResult=true, Dialog(group="Value I/O",tab="IO"));

       parameter Real Xscale = 1 "conversion scale to SI unit of x values";

        Interpolation.Curve
                     curve(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3],
          Xscale=Xscale)
          annotation (Placement(transformation(extent={{-76,-10},{-56,10}})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,-50})));
        Blocks.Math.Integrator integrator(y_start=1, k=(
              Modelica.Math.log(2)/HalfTime),
          stateName=stateName)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-14,-6})));
        Modelica.Blocks.Math.Feedback feedback annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-14,26})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{-48,40},{-28,60}})));
        Modelica.Blocks.Sources.Constant      Constant1(k=0)
          annotation (Placement(transformation(extent={{-70,52},{-58,64}})));
        Modelica.Blocks.Interfaces.BooleanInput
                                              Failed
                            annotation (Placement(transformation(extent={{-120,20},{-80,
                  60}})));
         Types.Fraction effect;
        Modelica.Blocks.Logical.Switch switch2
          annotation (Placement(transformation(extent={{-24,90},{-4,70}})));
        Types.Constants.OneConst One
          annotation (Placement(transformation(extent={{-60,78},{-40,98}})));
        Modelica.Blocks.Sources.BooleanConstant booleanConstant(k=enabled)
          annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      equation
        effect = integrator.y;
        connect(curve.u, u) annotation (Line(
            points={{-76,0},{-88,0},{-88,-20},{-100,-20}},
            color={0,0,127}));
        connect(yBase, product.u1) annotation (Line(
            points={{0,60},{0,31},{0,-38},{6,-38}},
            color={0,0,127}));
        connect(product.y, y) annotation (Line(
            points={{-2.02067e-015,-61},{-2.02067e-015,-55.5},{0,-55.5},{0,-60}},
            color={0,0,127}));
        connect(feedback.y, integrator.u) annotation (Line(
            points={{-14,17},{-14,6}},
            color={0,0,127}));
        connect(integrator.y, feedback.u2) annotation (Line(
            points={{-14,-17},{-14,-26},{-38,-26},{-38,26},{-22,26}},
            color={0,0,127}));
        connect(integrator.y, product.u2) annotation (Line(
            points={{-14,-17},{-14,-26},{-6,-26},{-6,-38}},
            color={0,0,127}));
        connect(curve.val, switch1.u3) annotation (Line(
            points={{-56,0},{-54,0},{-54,42},{-50,42}},
            color={0,0,127}));
        connect(Constant1.y, switch1.u1) annotation (Line(
            points={{-57.4,58},{-50,58}},
            color={0,0,127}));
        connect(switch1.u2, Failed) annotation (Line(
            points={{-50,50},{-58,50},{-58,38},{-80,38},{-80,40},{-100,40}},
            color={255,0,255}));
        connect(switch2.y, feedback.u1) annotation (Line(
            points={{-3,80},{0,80},{0,64},{-14,64},{-14,34}},
            color={0,0,127}));
        connect(booleanConstant.y, switch2.u2) annotation (Line(
            points={{-75,72},{-38,72},{-38,80},{-26,80}},
            color={255,0,255}));
        connect(switch2.u1, switch1.y) annotation (Line(
            points={{-26,72},{-34,72},{-34,66},{-22,66},{-22,50},{-27,50}},
            color={0,0,127}));
        connect(One.y, switch2.u3) annotation (Line(
            points={{-37.5,88},{-26,88}},
            color={0,0,127}));
        annotation (        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SplineLagOrZero;
    end Factors;

    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>"));
  end Blocks;

  package Chemical "Please use 'Chemical' library instead!"
   extends Modelica.Icons.Package;
    package Examples
      "Examples that demonstrate usage of the Pressure flow components"
    extends Modelica.Icons.ExamplesPackage;

      model SimpleReaction

         extends Modelica.Icons.Example;

        Components.Substance         A(solute_start=0.9)
          annotation (Placement(transformation(extent={{-56,-8},{-36,12}})));
        Components.ChemicalReaction          reaction(K=1,
          useNormalizedVolume=true,
          useDissociationConstantInput=false,
          useHeatPort=false)
          annotation (Placement(transformation(extent={{-10,-8},{10,12}})));
        Components.Substance         B(solute_start=0.1)
          annotation (Placement(transformation(extent={{42,-8},{62,12}})));
      equation

        connect(B.q_out, reaction.products[1]) annotation (Line(
            points={{52,2},{10,2}},
            color={107,45,134},
            thickness=1));
        connect(A.q_out, reaction.substrates[1]) annotation (Line(
            points={{-46,2},{-10,2}},
            color={107,45,134},
            thickness=1));
        annotation ( Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=1e-007));
      end SimpleReaction;

      model SimpleReaction2
         extends Modelica.Icons.Example;

        Components.Substance         A(solute_start=0.9)
          annotation (Placement(transformation(extent={{-40,-8},{-20,12}})));
        Components.ChemicalReaction          reaction(K=1, nP=2)
          annotation (Placement(transformation(extent={{-6,-8},{14,12}})));
        Components.Substance         B(solute_start=0.1)
          annotation (Placement(transformation(extent={{36,-8},{56,12}})));
        Components.Substance         C(solute_start=0.1)
          annotation (Placement(transformation(extent={{36,16},{56,36}})));
      equation

        connect(A.q_out, reaction.substrates[1]) annotation (Line(
            points={{-30,2},{-6,2}},
            color={107,45,134},
            thickness=1));
        connect(reaction.products[1], B.q_out) annotation (Line(
            points={{14,1.5},{24,1.5},{24,2},{46,2}},
            color={107,45,134},
            thickness=1));
        connect(reaction.products[2], C.q_out) annotation (Line(
            points={{14,2.5},{24,2.5},{24,26},{46,26}},
            color={107,45,134},
            thickness=1));
        annotation ( Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=1e-009));
      end SimpleReaction2;

      model ExothermicReaction

         extends Modelica.Icons.Example;

        Components.Substance         A(solute_start=0.9)
          annotation (Placement(transformation(extent={{-56,-8},{-36,12}})));
        Components.ChemicalReaction
                                  reaction(K=1,
          useHeatPort=true,
          dH=-1000,
          kf=1)
          annotation (Placement(transformation(extent={{-10,-8},{10,12}})));
        Components.Substance         B(solute_start=0.1)
          annotation (Placement(transformation(extent={{44,-8},{64,12}})));
        Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor
          annotation (Placement(transformation(extent={{12,-58},{32,-38}})));
        Thermal.Sources.UnlimitedHeat unlimitedHeat(T=310.15)
          annotation (Placement(transformation(extent={{74,-58},{54,-38}})));
      equation

        connect(B.q_out, reaction.products[1]) annotation (Line(
            points={{54,2},{10,2}},
            color={107,45,134},
            thickness=1));
        connect(A.q_out, reaction.substrates[1]) annotation (Line(
            points={{-46,2},{-10,2}},
            color={107,45,134},
            thickness=1));
        connect(reaction.heatPort, heatFlowSensor.port_a) annotation (Line(
            points={{0,2},{0,-48},{12,-48}},
            color={191,0,0},
            thickness=1));
        connect(unlimitedHeat.port, heatFlowSensor.port_b) annotation (Line(
            points={{54,-48},{32,-48}},
            color={191,0,0},
            thickness=1));
        annotation ( Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=5));
      end ExothermicReaction;

      model MichaelisMenten "Basic enzyme kinetics"
        import Physiolibrary;
        extends Modelica.Icons.Example;
        extends SteadyStates.Interfaces.SteadyStateSystem(
                                                   Simulation=Types.SimulationType.SteadyState);

        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage P(Conc=0)
          annotation (Placement(transformation(extent={{92,-12},{72,8}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage S(Conc=0.1)
          annotation (Placement(transformation(extent={{-94,-12},{-74,8}})));

           parameter Types.AmountOfSubstance tE=0.01 "total amount of enzyme";
           parameter Real k_cat(unit="1/s", displayUnit="1/min")= 1
          "forward rate of second reaction";
           parameter Types.Concentration Km = 0.1
          "Michaelis constant = substrate concentration at rate of half Vmax";

        Physiolibrary.Chemical.Components.Substance ES(solute_start=0, Simulation=
             Types.SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Physiolibrary.Chemical.Components.Substance E(
          solute_start=tE,
          isDependent=true,
          Simulation=Types.SimulationType.SteadyState)
          annotation (Placement(transformation(extent={{-10,38},{10,58}})));
            Components.ChemicalReaction
                             chemicalReaction(nS=2,
              K=2/Km,
              kf=2*k_cat/Km)
              annotation (Placement(transformation(extent={{-42,-10},{-22,10}})));
            Components.ChemicalReaction
                             chemicalReaction1(nP=2,
              K=Modelica.Constants.inf,
              kf=k_cat)
              annotation (Placement(transformation(extent={{24,-10},{44,10}})));

           // Real v(unit="mol/s", displayUnit="mmol/min") "test of MM equation";
      equation
            normalizedState[1]*tE = E.solute + ES.solute;

           //Michaelis-Menton: v=((E.q_out.conc + ES.q_out.conc)*k_cat)*S.concentration/(Km+S.concentration);

        connect(S.q_out, chemicalReaction.substrates[1]) annotation (Line(
            points={{-74,-2},{-60,-2},{-60,-0.5},{-42,-0.5}},
            color={107,45,134},
            thickness=1));
        connect(chemicalReaction1.products[1], P.q_out) annotation (Line(
            points={{44,-0.5},{54,-0.5},{54,-2},{72,-2}},
            color={107,45,134},
            thickness=1));
        connect(E.q_out, chemicalReaction.substrates[2]) annotation (Line(
            points={{0,48},{-50,48},{-50,0.5},{-42,0.5}},
            color={107,45,134},
            thickness=1));
        connect(E.q_out, chemicalReaction1.products[2]) annotation (Line(
            points={{0,48},{50,48},{50,0.5},{44,0.5}},
            color={107,45,134},
            thickness=1));
        connect(chemicalReaction.products[1], ES.q_out) annotation (Line(
            points={{-22,0},{0,0}},
            color={107,45,134},
            thickness=1));
        connect(ES.q_out, chemicalReaction1.substrates[1]) annotation (Line(
            points={{0,0},{24,0}},
            color={107,45,134},
            thickness=1));
            annotation ( Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=1));
      end MichaelisMenten;

      package Hemoglobin "Hemoglobin blood gases binding"
        model Allosteric_Hemoglobin_MWC "Monod,Wyman,Changeux (1965)"
        extends Modelica.Icons.Example;

        //extends SteadyStates.Interfaces.SteadyStateSystem(
        //                                         Simulation=SimulationType.SteadyState);

          parameter Types.Temperature T=310.15 "Temperature";
        //  parameter GasSolubility alpha =  Modelica.Constants.R*298.15 * 0.0105 * 1e-3
        //    "oxygen solubility in plasma";
                                           // by Siggaard Andersen: 0.0105 (mmol/l)/kPa

          parameter Types.Fraction L = 7.0529*10^6
            "=[T0]/[R0] .. dissociation constant of relaxed <-> tensed change of deoxyhemoglobin tetramer";
          parameter Types.Fraction c = 0.00431555
            "=KR/KT .. ration between oxygen affinities of relaxed vs. tensed subunit";
          parameter Types.Concentration KR = 0.000671946
            "oxygen dissociation on relaxed(R) hemoglobin subunit";
                                                                      //*7.875647668393782383419689119171e-5
                                                                    //10.500001495896 7.8756465463794e-05

          parameter Types.Concentration KT=KR/c
            "oxygen dissociation on tensed(T) hemoglobin subunit";

        //  Fraction sO2 "hemoglobin oxygen saturation";

          parameter Types.AmountOfSubstance totalAmountOfHemoglobin=1;
        //  AmountOfSubstance totalAmountOfRforms;
        //  AmountOfSubstance totalAmountOfTforms;

          Components.Substance                       T0(stateName="T0",Simulation=Types.SimulationType.SteadyState,
            solute_start=1)
            annotation (Placement(transformation(extent={{32,78},{52,98}})));

          Components.Substance                       T1(stateName="T1",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{34,36},{54,56}})));

          Components.Substance                       R1(stateName="R1",Simulation=Types.SimulationType.SteadyState,
            solute_start=0,
            isDependent=true)
            annotation (Placement(transformation(extent={{-20,36},{0,56}})));

          Components.Substance                       T2(stateName="T2",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{34,-10},{54,10}})));

          Components.Substance                       R2(stateName="R2",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{-20,-10},{0,10}})));

          Components.Substance                       T3(stateName="T3",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{34,-54},{54,-34}})));

          Components.Substance                       R3(stateName="R3",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{-20,-54},{0,-34}})));

          Components.Substance                       T4(stateName="T4",Simulation=Types.SimulationType.SteadyState,
            solute_start=0,
            isDependent=true)
            annotation (Placement(transformation(extent={{34,-92},{54,-72}})));

          Components.Substance                       R4(stateName="R4",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{-20,-92},{0,-72}})));

          Components.Substance                       R0(stateName="R0",Simulation=Types.SimulationType.SteadyState,
            solute_start=0)
            annotation (Placement(transformation(extent={{-20,78},{0,98}})));

          Components.ChemicalReaction               quaternaryForm(K=L)
            annotation (Placement(transformation(extent={{4,78},{24,98}})));
          Components.ChemicalReaction                oxyR1(nP=2, K=KR/4)
                                                                    annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-10,64})));
          Components.ChemicalReaction                oxyT1(nP=2, K=KT/4)
                                                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={44,64})));
          Components.ChemicalReaction                oxyR2(nP=2, K=KR/(3/2))
                                                                    annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-10,22})));
          Components.ChemicalReaction                oxyR3(nP=2, K=KR/(2/3))
                                                                    annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-10,-24})));
          Components.ChemicalReaction                oxyR4(nP=2, K=KR*4)
                                                                    annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=90,
                origin={-10,-66})));
          Components.ChemicalReaction                oxyT2(nP=2, K=KT/(3/2))
                                                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={44,22})));
          Components.ChemicalReaction                oxyT3(nP=2, K=KT/(2/3))
                                                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={44,-24})));
          Components.ChemicalReaction                oxyT4(nP=2, K=KT*4)
                                                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={44,-66})));
          Components.ChemicalReaction               quaternaryForm1(K=c*L)
            annotation (Placement(transformation(extent={{8,36},{28,56}})));
          Components.ChemicalReaction               quaternaryForm2(K=(c^2)*L)
            annotation (Placement(transformation(extent={{8,-10},{28,10}})));
          Components.ChemicalReaction               quaternaryForm3(K=(c^3)*L)
            annotation (Placement(transformation(extent={{8,-54},{28,-34}})));
          Components.ChemicalReaction               quaternaryForm4(K=(c^4)*L)
            annotation (Placement(transformation(extent={{10,-92},{30,-72}})));

          SteadyStates.Components.MolarConservationLaw hemoglobinConservationLaw(
            n=10, Total(displayUnit="mol") = 1,
            Simulation=Types.SimulationType.SteadyState)
            annotation (Placement(transformation(extent={{72,-2},{92,18}})));
          Modelica.Blocks.Math.Sum oxygen_bound(k={1,1,2,2,3,3,4,4}, nin=8)
            annotation (Placement(transformation(extent={{72,-56},{82,-46}})));
          Modelica.Blocks.Math.Division sO2_ "hemoglobin oxygen saturation"
            annotation (Placement(transformation(extent={{86,-60},{96,-50}})));
          Modelica.Blocks.Math.Sum tHb(nin=10, k=4*ones(10))
            annotation (Placement(transformation(extent={{72,-70},{82,-60}})));
          Components.Substance          oxygen_unbound(solute_start=0.000001*
                7.875647668393782383419689119171e-5, Simulation=Types.SimulationType.SteadyState)
            annotation (Placement(transformation(extent={{-56,-44},{-36,-24}})));
          Modelica.Blocks.Sources.Clock clock(offset=10)
            annotation (Placement(transformation(extent={{-94,44},{-74,64}})));
          Sources.UnlimitedGasStorage          O2_in_air(Simulation=Types.SimulationType.SteadyState,
            usePartialPressureInput=true,
            T=310.15)   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-66,24})));
          Components.GasSolubility          gasSolubility(
                                              useHeatPort=false,
            kH_T0=0.026029047188736,
            C=1700)
            annotation (Placement(transformation(extent={{-76,-14},{-56,6}})));
        equation
         //  sO2 = (R1.solute + 2*R2.solute + 3*R3.solute + 4*R4.solute + T1.solute + 2*T2.solute + 3*T3.solute + 4*T4.solute)/(4*totalAmountOfHemoglobin);
        //   totalAmountOfRforms = R0.solute + R1.solute + R2.solute + R3.solute + R4.solute;
        //   totalAmountOfTforms = T0.solute + T1.solute + T2.solute + T3.solute + T4.solute;

        //   totalAmountOfHemoglobin*normalizedState[1] = totalAmountOfRforms + totalAmountOfTforms;

          connect(quaternaryForm.products[1],T0. q_out) annotation (Line(
              points={{24,88},{42,88}},
              color={107,45,134},
              thickness=1));
          connect(oxyR1.substrates[1],R1. q_out) annotation (Line(
              points={{-10,54},{-10,46}},
              color={107,45,134},
              thickness=1));
          connect(R1.q_out,oxyR2. products[1]) annotation (Line(
              points={{-10,46},{-10,32},{-10.5,32}},
              color={107,45,134},
              thickness=1));
          connect(oxyR2.substrates[1],R2. q_out) annotation (Line(
              points={{-10,12},{-10,0}},
              color={107,45,134},
              thickness=1));
          connect(oxyR3.substrates[1],R3. q_out) annotation (Line(
              points={{-10,-34},{-10,-44}},
              color={107,45,134},
              thickness=1));
          connect(oxyR3.products[1],R2. q_out) annotation (Line(
              points={{-10.5,-14},{-10.5,-7},{-10,-7},{-10,0}},
              color={107,45,134},
              thickness=1));
          connect(R3.q_out,oxyR4. products[1]) annotation (Line(
              points={{-10,-44},{-10,-56},{-10.5,-56}},
              color={107,45,134},
              thickness=1));
          connect(oxyR4.substrates[1],R4. q_out) annotation (Line(
              points={{-10,-76},{-10,-82}},
              color={107,45,134},
              thickness=1));
          connect(oxyT1.products[1],T0. q_out) annotation (Line(
              points={{44.5,74},{44.5,88},{42,88}},
              color={107,45,134},
              thickness=1));
          connect(oxyT1.substrates[1],T1. q_out) annotation (Line(
              points={{44,54},{44,46}},
              color={107,45,134},
              thickness=1));
          connect(T1.q_out,oxyT2. products[1]) annotation (Line(
              points={{44,46},{44,32},{44.5,32}},
              color={107,45,134},
              thickness=1));
          connect(oxyT2.substrates[1],T2. q_out) annotation (Line(
              points={{44,12},{44,0}},
              color={107,45,134},
              thickness=1));
          connect(T2.q_out,oxyT3. products[1]) annotation (Line(
              points={{44,0},{44,-14},{44.5,-14}},
              color={107,45,134},
              thickness=1));
          connect(oxyT3.substrates[1],T3. q_out) annotation (Line(
              points={{44,-34},{44,-44}},
              color={107,45,134},
              thickness=1));
          connect(T3.q_out,oxyT4. products[1]) annotation (Line(
              points={{44,-44},{44,-56},{44.5,-56}},
              color={107,45,134},
              thickness=1));
          connect(oxyT4.substrates[1],T4. q_out) annotation (Line(
              points={{44,-76},{44,-82}},
              color={107,45,134},
              thickness=1));
          connect(R0.q_out,quaternaryForm. substrates[1]) annotation (Line(
              points={{-10,88},{4,88}},
              color={107,45,134},
              thickness=1));
          connect(R0.q_out,oxyR1. products[1]) annotation (Line(
              points={{-10,88},{-10,74},{-10.5,74}},
              color={107,45,134},
              thickness=1));
          connect(R1.q_out,quaternaryForm1. substrates[1]) annotation (Line(
              points={{-10,46},{8,46}},
              color={107,45,134},
              thickness=1));
          connect(quaternaryForm1.products[1],T1. q_out) annotation (Line(
              points={{28,46},{44,46}},
              color={107,45,134},
              thickness=1));
          connect(R2.q_out,quaternaryForm2. substrates[1]) annotation (Line(
              points={{-10,0},{8,0}},
              color={107,45,134},
              thickness=1));
          connect(quaternaryForm2.products[1],T2. q_out) annotation (Line(
              points={{28,0},{44,0}},
              color={107,45,134},
              thickness=1));
          connect(R3.q_out,quaternaryForm3. substrates[1]) annotation (Line(
              points={{-10,-44},{8,-44}},
              color={107,45,134},
              thickness=1));
          connect(quaternaryForm3.products[1],T3. q_out) annotation (Line(
              points={{28,-44},{44,-44}},
              color={107,45,134},
              thickness=1));
          connect(R4.q_out,quaternaryForm4. substrates[1]) annotation (Line(
              points={{-10,-82},{10,-82}},
              color={107,45,134},
              thickness=1));
          connect(quaternaryForm4.products[1],T4. q_out) annotation (Line(
              points={{30,-82},{44,-82}},
              color={107,45,134},
              thickness=1));
          connect(R4.solute,hemoglobinConservationLaw. fragment[1])        annotation (
              Line(
              points={{-4,-92},{-4,-98},{64,-98},{64,2.2},{72,2.2}},
              color={0,0,127}));
          connect(T4.solute,hemoglobinConservationLaw. fragment[2])        annotation (
              Line(
              points={{50,-92},{50,-98},{64,-98},{64,2.6},{72,2.6}},
              color={0,0,127}));
          connect(R3.solute,hemoglobinConservationLaw. fragment[3])        annotation (
              Line(
              points={{-4,-54},{64,-54},{64,3},{72,3}},
              color={0,0,127}));
          connect(T3.solute,hemoglobinConservationLaw. fragment[4])        annotation (
              Line(
              points={{50,-54},{64,-54},{64,3.4},{72,3.4}},
              color={0,0,127}));
          connect(R2.solute,hemoglobinConservationLaw. fragment[5])        annotation (
              Line(
              points={{-4,-10},{64,-10},{64,3.8},{72,3.8}},
              color={0,0,127}));
          connect(T2.solute,hemoglobinConservationLaw. fragment[6])        annotation (
              Line(
              points={{50,-10},{64,-10},{64,4.2},{72,4.2}},
              color={0,0,127}));
          connect(R1.solute,hemoglobinConservationLaw. fragment[7])        annotation (
              Line(
              points={{-4,36},{64,36},{64,4.6},{72,4.6}},
              color={0,0,127}));
          connect(T1.solute,hemoglobinConservationLaw. fragment[8])        annotation (
              Line(
              points={{50,36},{64,36},{64,5},{72,5}},
              color={0,0,127}));
          connect(R0.solute,hemoglobinConservationLaw. fragment[9])        annotation (
              Line(
              points={{-4,78},{64,78},{64,5.4},{72,5.4}},
              color={0,0,127}));
          connect(T0.solute,hemoglobinConservationLaw. fragment[10])        annotation (
             Line(
              points={{48,78},{64,78},{64,5.8},{72,5.8}},
              color={0,0,127}));
          connect(R1.solute,oxygen_bound. u[1]) annotation (Line(
              points={{-4,36},{64,36},{64,-51.875},{71,-51.875}},
              color={0,0,127}));
          connect(T1.solute,oxygen_bound. u[2]) annotation (Line(
              points={{50,36},{64,36},{64,-51.625},{71,-51.625}},
              color={0,0,127}));
          connect(R2.solute,oxygen_bound. u[3]) annotation (Line(
              points={{-4,-10},{64,-10},{64,-51.375},{71,-51.375}},
              color={0,0,127}));
          connect(T2.solute,oxygen_bound. u[4]) annotation (Line(
              points={{50,-10},{64,-10},{64,-51.125},{71,-51.125}},
              color={0,0,127}));
          connect(R3.solute,oxygen_bound. u[5]) annotation (Line(
              points={{-4,-54},{64,-54},{64,-50.875},{71,-50.875}},
              color={0,0,127}));
          connect(T3.solute,oxygen_bound. u[6]) annotation (Line(
              points={{50,-54},{64,-54},{64,-50.625},{71,-50.625}},
              color={0,0,127}));
          connect(R4.solute,oxygen_bound. u[7]) annotation (Line(
              points={{-4,-92},{-4,-98},{64,-98},{64,-50.375},{71,-50.375}},
              color={0,0,127}));
          connect(T4.solute,oxygen_bound. u[8]) annotation (Line(
              points={{50,-92},{50,-98},{64,-98},{64,-50.125},{71,-50.125}},
              color={0,0,127}));
          connect(oxygen_bound.y,sO2_. u1) annotation (Line(
              points={{82.5,-51},{84,-51},{84,-52},{85,-52}},
              color={0,0,127}));
          connect(sO2_.u2,tHb. y) annotation (Line(
              points={{85,-58},{84,-58},{84,-65},{82.5,-65}},
              color={0,0,127}));
          connect(R0.solute,tHb. u[1]) annotation (Line(
              points={{-4,78},{64,78},{64,-65.9},{71,-65.9}},
              color={0,0,127}));
          connect(T0.solute,tHb. u[2]) annotation (Line(
              points={{48,78},{64,78},{64,-65.7},{71,-65.7}},
              color={0,0,127}));
          connect(R1.solute,tHb. u[3]) annotation (Line(
              points={{-4,36},{64,36},{64,-65.5},{71,-65.5}},
              color={0,0,127}));
          connect(T1.solute,tHb. u[4]) annotation (Line(
              points={{50,36},{64,36},{64,-65.3},{71,-65.3}},
              color={0,0,127}));
          connect(R2.solute,tHb. u[5]) annotation (Line(
              points={{-4,-10},{64,-10},{64,-65.1},{71,-65.1}},
              color={0,0,127}));
          connect(T2.solute,tHb. u[6]) annotation (Line(
              points={{50,-10},{64,-10},{64,-64.9},{71,-64.9}},
              color={0,0,127}));
          connect(R3.solute,tHb. u[7]) annotation (Line(
              points={{-4,-54},{64,-54},{64,-64.7},{71,-64.7}},
              color={0,0,127}));
          connect(T3.solute,tHb. u[8]) annotation (Line(
              points={{50,-54},{64,-54},{64,-64.5},{71,-64.5}},
              color={0,0,127}));
          connect(R4.solute,tHb. u[9]) annotation (Line(
              points={{-4,-92},{-4,-98},{64,-98},{64,-64.3},{71,-64.3}},
              color={0,0,127}));
          connect(T4.solute,tHb. u[10]) annotation (Line(
              points={{50,-92},{50,-98},{64,-98},{64,-64.1},{71,-64.1}},
              color={0,0,127}));
          connect(oxyR1.products[2],oxygen_unbound. q_out)
                                              annotation (Line(
              points={{-9.5,74},{-46,74},{-46,-34}},
              color={107,45,134},
              thickness=1));
          connect(oxyR2.products[2],oxygen_unbound. q_out)
                                              annotation (Line(
              points={{-9.5,32},{-46,32},{-46,-34}},
              color={107,45,134},
              thickness=1));
          connect(oxyR3.products[2],oxygen_unbound. q_out)
                                              annotation (Line(
              points={{-9.5,-14},{-46,-14},{-46,-34}},
              color={107,45,134},
              thickness=1));
          connect(oxyR4.products[2],oxygen_unbound. q_out)
                                              annotation (Line(
              points={{-9.5,-56},{-46,-56},{-46,-34}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, oxyT1.products[2])
                                              annotation (Line(
              points={{-46,-34},{-46,74},{43.5,74}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, oxyT2.products[2])
                                              annotation (Line(
              points={{-46,-34},{-46,32},{43.5,32}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, oxyT3.products[2])
                                              annotation (Line(
              points={{-46,-34},{-46,-14},{43.5,-14}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, oxyT4.products[2])
                                              annotation (Line(
              points={{-46,-34},{-46,-56},{43.5,-56}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out,gasSolubility. q_in) annotation (Line(
              points={{-46,-34},{-66,-34},{-66,-12}},
              color={107,45,134},
              thickness=1));
          connect(O2_in_air.q_out,gasSolubility. q_out) annotation (Line(
              points={{-66,14},{-66,6}},
              color={107,45,134},
              thickness=1));
          connect(clock.y,O2_in_air. partialPressure) annotation (Line(
              points={{-73,54},{-66,54},{-66,34}},
              color={0,0,127}));
          annotation (          experiment(
              StopTime=15000,
              Tolerance=1e-014,
              __Dymola_Algorithm="Euler"),                  Documentation(info="<html>
<p>To understand the model is necessary to study the principles of MWC allosteric transitions first published by </p>
<p>[1] Monod,Wyman,Changeux (1965). &QUOT;On the nature of allosteric transitions: a plausible model.&QUOT; Journal of molecular biology 12(1): 88-118.</p>
<p><br>In short it is about binding oxygen to hemoglobin.</p>
<p>Oxgen are driven by its partial pressure using clock source - from very little pressure to pressure of 10kPa.</p>
<p>(Partial pressure of oxygen in air is the air pressure multiplied by the fraction of the oxygen in air.)</p>
<p>Hemoglobin was observed (by Perutz) in two structuraly different forms R and T.</p>
<p>These forms are represented by blocks T0..T4 and R0..R4, where the suffexed index means the number of oxygen bounded to the form.</p>
<p><br>In equilibrated model can be four chemical reactions removed and the results will be the same, but dynamics will change a lot. ;)</p>
<p>If you remove the quaternaryForm1,quaternaryForm2,quaternaryForm3,quaternaryForm4 then the model in equilibrium will be exactly the same as in MWC article.</p>
<p><br>Parameters was fitted to data of Severinghaus article from 1979. (For example at pO2=26mmHg is oxygen saturation sO2 = 48.27 &percnt;).</p>
</html>",     revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
        end Allosteric_Hemoglobin_MWC;

        model Allosteric_Hemoglobin2_MWC
          "Monod,Wyman,Changeux (1965) - The same allosteric hemoglobin model as Allosteric_Hemoglobin_MWC implemented by Speciation blocks"

         extends Modelica.Icons.Example;

          parameter Types.MolarEnergy dHT=10000
            "Enthalpy of heme oxygenation in T hemoglobin form";
          parameter Types.MolarEnergy dHR=20000
            "Enthalpy of heme oxygenation in R hemoglobin form";
          parameter Types.MolarEnergy dHL=-1000
            "Enthalpy of reaction T->R as hemoglobin tetramer structure change";

          parameter Types.Fraction L = 7.0529*10^6
            "=[T0]/[R0] .. dissociation constant of relaxed <-> tensed change of deoxyhemoglobin tetramer";
          parameter Types.Fraction c = 0.00431555
            "=KR/KT .. ration between oxygen affinities of relaxed vs. tensed subunit";
          parameter Types.Concentration KR = 0.000671946
            "oxygen dissociation on relaxed(R) hemoglobin subunit";
                                                                      //*7.875647668393782383419689119171e-5
                                                                    //10.500001495896 7.8756465463794e-05

          parameter Types.Concentration KT=KR/c
            "oxygen dissociation on tensed(T) hemoglobin subunit";

          parameter Types.AmountOfSubstance totalAmountOfHemoglobin=1;

          Components.ChemicalReaction quaternaryForm(
            K=L,
            TK=310.15,
            dH=dHL)
            annotation (Placement(transformation(extent={{-2,-76},{18,-56}})));
          Components.Speciation
                             R0_in_R(NumberOfSubunits=4, useInternalHeatsInput=true)
            annotation (Placement(transformation(extent={{-30,-68},{-50,-48}})));
          Components.Speciation
                             T0_in_T(NumberOfSubunits=4, useInternalHeatsInput=true)
            annotation (Placement(transformation(extent={{70,-66},{50,-46}})));
          Components.Substance OxyRHm[4](
            each Simulation=Types.SimulationType.SteadyState,
            each isDependent=true,
            each solute_start=4e-19,
            each dH=-dHL/4 - dHR)
            "Oxygenated subunit in R structure of hemoglobin tetramer"
            annotation (Placement(transformation(extent={{-96,-18},{-76,2}})));
          Components.ChemicalReaction oxygenation_R[4](
            each K=KR,
            each nP=2,
            each TK=310.15,
            each dH=dHR)
            annotation (Placement(transformation(extent={{-68,-18},{-48,2}})));
          Components.Substance DeoxyRHm[4](
            each Simulation=Types.SimulationType.SteadyState,
            each solute_start=4e-11,
            each dH=-dHL/4)
            "Deoxygenated subunit in R structure of hemoglobin tetramer"
            annotation (Placement(transformation(extent={{-40,-18},{-20,2}})));
          Components.Substance OxyTHm[4](
            each Simulation=Types.SimulationType.SteadyState,
            isDependent={false,true,true,true},
            each dH=-dHT,
            each solute_start=1e-14)
            "Oxygenated subunit in T structure of hemoglobin tetramer"
            annotation (Placement(transformation(extent={{14,-18},{34,2}})));
          Components.ChemicalReaction oxygenation_T[4](
            each K=KT,
            each nP=2,
            each dH=dHT,
            each TK=310.15)
            annotation (Placement(transformation(extent={{42,-18},{62,2}})));
          Components.Substance DeoxyTHm[4](
            each Simulation=Types.SimulationType.SteadyState,
            each solute_start=0.00025,
            each dH=0)
            "Deoxygenated subunit in T structure of hemoglobin tetramer"
            annotation (Placement(transformation(extent={{70,-18},{90,2}})));

          Components.Substance oxygen_unbound(Simulation=Types.SimulationType.SteadyState,
              solute_start=0.000001*7.875647668393782383419689119171e-5)
            annotation (Placement(transformation(extent={{-2,6},{18,26}})));
          Modelica.Blocks.Sources.Clock clock(offset=10)
            annotation (Placement(transformation(extent={{-40,74},{-20,94}})));
          Modelica.Blocks.Math.Add add[4] annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={-58,-36})));
          Modelica.Blocks.Math.Add add1[4] annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={30,-48})));
          Sources.UnlimitedGasStorage oxygen_in_air(
            Simulation=Types.SimulationType.SteadyState,
            usePartialPressureInput=true,
            isIsolatedInSteadyState=false,
            T=310.15)                                annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={8,68})));
          Components.GasSolubility
                                partialPressure1(          kH_T0(displayUnit="(mmol/l)/kPa at 25degC")=
                 0.026029047188736,
            T=310.15,
            C=1700)                                                       annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                origin={8,40})));
          SteadyStates.Components.MolarConservationLaw totalHb(
            Simulation=Types.SimulationType.SteadyState,
            Total(displayUnit="mol") = totalAmountOfHemoglobin,
            n=2)
            annotation (Placement(transformation(extent={{72,-84},{92,-64}})));
          Modelica.Blocks.Math.Sum sum1(nin=8, k=(1/4)*ones(8))
                                               annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={-72,-74})));
          Modelica.Blocks.Math.Division sO2_ "hemoglobin oxygen saturation"
            annotation (Placement(transformation(extent={{-62,-88},{-52,-78}})));
          Modelica.Blocks.Math.Sum internalHeat(nin=2)
            "hemoglobin enthalpy heat"
            annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                origin={8,-90})));
          Modelica.Blocks.Math.Add add2[
                                       4] annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={-73,-37})));
          Modelica.Blocks.Math.Add add3[4] annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={47,-39})));
        equation

          connect(R0_in_R.specificForm, quaternaryForm.substrates[1])
                                                           annotation (Line(
              points={{-50,-66},{-2,-66}},
              color={107,45,134},
              thickness=1));
          connect(quaternaryForm.products[1], T0_in_T.specificForm)
                                                         annotation (Line(
              points={{18,-66},{34,-66},{34,-64},{50,-64}},
              color={107,45,134},
              thickness=1));
          connect(OxyTHm.q_out, oxygenation_T.substrates[1])
                                                   annotation (Line(
              points={{24,-8},{42,-8}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_T.products[1], DeoxyTHm.q_out)
                                                 annotation (Line(
              points={{62,-8.5},{72,-8.5},{72,-8},{80,-8}},
              color={107,45,134},
              thickness=1));

          connect(OxyTHm.solute, add1.u2) annotation (Line(
              points={{30,-18},{30,-24},{27.6,-24},{27.6,-43.2}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(add1.u1, DeoxyTHm.solute) annotation (Line(
              points={{32.4,-43.2},{32.4,-24},{86,-24},{86,-18}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(partialPressure1.q_out, oxygen_in_air.q_out)
                                                    annotation (Line(
              points={{8,50},{8,58}},
              color={107,45,134},
              thickness=1));
          connect(partialPressure1.q_in, oxygen_unbound.q_out) annotation (Line(
              points={{8,32},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(clock.y, oxygen_in_air.partialPressure) annotation (Line(
              points={{-19,84},{8,84},{8,78}},
              color={0,0,127}));
          connect(add.y, R0_in_R.amountOfSubunit) annotation (Line(
              points={{-58,-40.4},{-58,-58},{-48,-58}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(OxyRHm.solute, add.u2) annotation (Line(
              points={{-80,-18},{-80,-24},{-60.4,-24},{-60.4,-31.2}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(DeoxyRHm.solute, add.u1) annotation (Line(
              points={{-24,-18},{-30,-18},{-30,-24},{-55.6,-24},{-55.6,-31.2}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(OxyRHm.q_out, oxygenation_R.substrates[1]) annotation (Line(
              points={{-86,-8},{-68,-8}},
              color={107,45,134},
              thickness=1));
          connect(DeoxyRHm.q_out, R0_in_R.specificSubunitForm) annotation (Line(
              points={{-30,-8},{-40,-8},{-40,-48}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_R.products[1], DeoxyRHm.q_out) annotation (Line(
              points={{-48,-8.5},{-40,-8.5},{-40,-8},{-30,-8}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_R[1].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{-48,-7.5},{-34,-7.5},{-34,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_R[2].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{-48,-7.5},{-34,-7.5},{-34,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_R[3].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{-48,-7.5},{-34,-7.5},{-34,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_R[4].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{-48,-7.5},{-34,-7.5},{-34,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_T[1].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{62,-7.5},{78,-7.5},{78,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(oxygenation_T[2].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{62,-7.5},{78,-7.5},{78,16},{8,16}},
              color={107,45,134},
              thickness=1));
         connect(oxygenation_T[3].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{62,-7.5},{78,-7.5},{78,16},{8,16}},
              color={107,45,134},
              thickness=1));
              connect(oxygenation_T[4].products[2], oxygen_unbound.q_out) annotation (Line(
              points={{62,-7.5},{78,-7.5},{78,16},{8,16}},
              color={107,45,134},
              thickness=1));
          connect(T0_in_T.specificSubunitForm, DeoxyTHm.q_out)
                                                       annotation (Line(
              points={{60,-46},{84,-46},{84,-8},{80,-8}},
              color={107,45,134},
              thickness=1));
          connect(add1.y, T0_in_T.amountOfSubunit) annotation (Line(
              points={{30,-52.4},{30,-56},{52,-56}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(R0_in_R.amount, totalHb.fragment[1]) annotation (Line(
              points={{-40,-66},{-40,-79},{72,-79}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(T0_in_T.amount, totalHb.fragment[2]) annotation (Line(
              points={{60,-64},{60,-64},{60,-77},{72,-77}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(OxyRHm.solute, sum1.u[1:4]) annotation (Line(
              points={{-80,-18},{-86,-18},{-86,-62},{-72,-62},{-72,-69.2},{-72.1,
                  -69.2}},
              color={0,0,127},
              smooth=Smooth.Bezier));

          connect(OxyTHm.solute, sum1.u[5:8]) annotation (Line(
              points={{30,-18},{30,-60},{-71.3,-60},{-71.3,-69.2}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(sO2_.u1, sum1.y) annotation (Line(
              points={{-63,-80},{-72,-80},{-72,-78.4}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(totalHb.totalAmountOfSubstance, sO2_.u2) annotation (Line(
              points={{92,-78},{100,-78},{100,-100},{-76,-100},{-76,-86},{-63,-86}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(R0_in_R.internalHeat, internalHeat.u[1]) annotation (Line(
              points={{-34,-66},{-34,-90.4},{3.2,-90.4}},
              color={0,0,127}));
          connect(T0_in_T.internalHeat, internalHeat.u[2]) annotation (Line(
              points={{66,-64},{66,-74},{-24,-74},{-24,-89.6},{3.2,-89.6}},
              color={0,0,127}));
          connect(add3.y, T0_in_T.subunitInternalHeat) annotation (Line(
              points={{47,-44.5},{47,-50},{52,-50}},
              color={0,0,127}));
          connect(add2.y, R0_in_R.subunitInternalHeat) annotation (Line(
              points={{-73,-42.5},{-73,-52},{-48,-52}},
              color={0,0,127}));
          connect(add3.u1, DeoxyTHm.internalHeat) annotation (Line(
              points={{50,-33},{50,-30},{91.6,-30},{91.6,-12}},
              color={0,0,127}));
          connect(OxyTHm.internalHeat, add3.u2) annotation (Line(
              points={{35.6,-12},{35.6,-30},{44,-30},{44,-33}},
              color={0,0,127}));
          connect(OxyRHm.internalHeat, add2.u2) annotation (Line(
              points={{-74.4,-12},{-74.4,-28},{-76,-28},{-76,-31}},
              color={0,0,127}));
          connect(DeoxyRHm.internalHeat, add2.u1) annotation (Line(
              points={{-18.4,-12},{-18.4,-28},{-70,-28},{-70,-31}},
              color={0,0,127}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics={Ellipse(
                  extent={{2,12},{100,-36}},
                  fillColor={255,181,181},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None), Ellipse(
                  extent={{-102,12},{-4,-36}},
                  fillColor={255,181,181},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None)}),
            experiment(
              StopTime=15000,
              Tolerance=1e-014,
              __Dymola_Algorithm="Euler"),
            Documentation(revisions=
                          "<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>Before silumation in &QUOT;Dymola 2014 FD01&QUOT; please chose &QUOT;Euler&QUOT; method!</p>
<p><br>To understand the model is necessary to study the principles of MWC allosteric transitions first published by </p>
<p>[1] Monod,Wyman,Changeux (1965). &QUOT;On the nature of allosteric transitions: a plausible model.&QUOT; Journal of molecular biology 12(1): 88-118.</p>
<p><br>In short it is about binding oxygen to hemoglobin.</p>
<p>Oxgen are driven by its partial pressure using clock source - from very little pressure to pressure of 10kPa.</p>
<p>(Partial pressure of oxygen in air is the air pressure multiplied by the fraction of the oxygen in air.)</p>
<p>Hemoglobin was observed (by Perutz) in two structuraly different forms R and T.</p>
<p>These forms are represented by blocks T0..T4 and R0..R4, where the suffexed index means the number of oxygen bounded to the form.</p>
<p><br>In equilibrated model can be four chemical reactions removed and the results will be the same, but dynamics will change a lot. ;)</p>
<p>If you remove the quaternaryForm1,quaternaryForm2,quaternaryForm3,quaternaryForm4 then the model in equilibrium will be exactly the same as in MWC article.</p>
<p><br>Parameters was fitted to data of Severinghaus article from 1979. (For example at pO2=26mmHg is oxygen saturation sO2 = 48.27 &percnt;).</p>
</html>"));
        end Allosteric_Hemoglobin2_MWC;

        model Hemoglobin_MKM_Specie "Part of model Hemoglobin_MKM_Adair"

        parameter Boolean loadStarts
            "Start values of state variables from data file (to help with initialization)";
        parameter Boolean storeState
            "Save state variables at the end of simulation";
        constant String dirName = Modelica.Utilities.Files.loadResource("modelica://Physiolibrary/Resources/Data/Hemoglobin_MKM")
            "Directory to load start gues values and store final simulation values";

        parameter Real[4] pKz
            "Dissociation coefficient of reaction z (Val1 amino terminal protonation)";
        parameter Real[4] pKc
            "Dissociation coefficient of reaction c (Val1 amino terminal carbamination)";
        parameter Real[4] pKh
            "Dissociation coefficient of reaction h (other Bohr protonation reactions of side chains)";

        parameter Types.MolarEnergy[4] dH_HbuANH2
            "Standard enthalpy of deprotonated and decarboxylated hemoglobin subunit";
        parameter Types.MolarEnergy[4] dHz
            "Enthalpy of reaction z (Val1 amino terminal protonation)";
        parameter Types.MolarEnergy[4] dHc
            "Enthalpy of reaction c (Val1 amino terminal carbamination)";
        parameter Types.MolarEnergy[4] dHh
            "Enthalpy of reaction h (other Bohr protonation reactions of side chains)";

        parameter Boolean isDependent=false
            "contains dependent equation (if solver is not smart enough)";

        Interfaces.ChemicalPort_a Hbtn annotation (Placement(transformation(
                  extent={{-108,-10},{-88,10}})));
            Components.Substance Hbu_A_NH3[4](
            each Simulation=Types.SimulationType.SteadyState,
            dH=dH_HbuANH2 - dHz,
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            each solute_start=1e-06)
            annotation (Placement(transformation(extent={{-32,70},{-12,90}})));
        Components.Substance Hbu_AH_NH3[4](
            each Simulation=Types.SimulationType.SteadyState,
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            each solute_start=1e-06,
            dH=dH_HbuANH2 - dHh - dHz)
            annotation (Placement(transformation(extent={{54,70},{74,90}})));
        Components.Substance Hbu_A_NH2[4](
            each Simulation=Types.SimulationType.SteadyState,
            isDependent={isDependent,true,true,true},
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            each solute_start=1e-06,
            dH=dH_HbuANH2)
            annotation (Placement(transformation(extent={{-32,-2},{-12,18}})));
        Components.Substance Hbu_AH_NH2[4](
            each Simulation=Types.SimulationType.SteadyState,
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            each solute_start=1e-06,
            dH=dH_HbuANH2 - dHh)
            annotation (Placement(transformation(extent={{54,-2},{74,18}})));
        Components.Substance Hbu_A_NHCOO[4](
            each Simulation=Types.SimulationType.SteadyState,
            dH=dH_HbuANH2 + dHc,
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            each solute_start=1e-06) annotation (Placement(transformation(
                  extent={{-32,-84},{-12,-64}})));
        Components.Substance Hbu_AH_NHCOO[4](
            each Simulation=Types.SimulationType.SteadyState,
            each dirName=dirName,
            each LOAD_STARTS=loadStarts,
            each SAVE_RESULTS=storeState,
            dH=dH_HbuANH2 + dHc,
            each solute_start=1e-06)
            annotation (Placement(transformation(extent={{54,-84},{74,-64}})));
        Components.ChemicalReaction h2[4](
            each nS=1,
            each nP=2,
            K=fill(10, 4) .^ (-pKh .+ 3),
            each TK=310.15,
            dH=dHh)
            annotation (Placement(transformation(extent={{32,-2},{12,18}})));
        Components.ChemicalReaction z1[4](
            each nP=2,
            K=fill(10, 4) .^ (-pKz .+ 3),
            dH=dHz,
            each TK=310.15) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-22,44})));
        Components.ChemicalReaction z2[4](
            each nP=2,
            K=fill(10, 4) .^ (-pKz .+ 3),
            each TK=310.15,
            dH=dHz) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={64,44})));
        Components.ChemicalReaction c1[4](
            each nS=2,
            each nP=2,
            K=fill(10, 4) .^ (-pKc .+ 3),
            each TK=310.15,
            dH=dHc) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-22,-34})));
        Components.ChemicalReaction c2[4](
            each nS=2,
            each nP=2,
            K=fill(10, 4) .^ (-pKc .+ 3),
            each TK=310.15,
            dH=dHc) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={64,-34})));
        Modelica.Blocks.Math.Sum totalAmounts[4](each nin=6) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-64,62})));
          Interfaces.ChemicalPort_a H(conc(nominal=10^(-7.2 + 3)))
            "hydrogen ions"
            annotation (Placement(transformation(extent={{90,76},{110,96}})));
          Interfaces.ChemicalPort_a CO2
            annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
          Components.Speciation Hb_tn(
            Simulation=Types.SimulationType.SteadyState,
            NumberOfSubunits=4,
            useInternalHeatsInput=true)
            annotation (Placement(transformation(extent={{-54,-22},{-74,-2}})));
        Types.RealIO.AmountOfSubstanceOutput tHb_u annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-100,-78})));
        Types.RealIO.EnergyOutput internalHeat "internal heat" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-100,-98})));
        Modelica.Blocks.Math.Sum totalHeats[4](each nin=6) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-64,32})));
        equation
        connect(Hbu_AH_NH3.q_out, z2.substrates[1]) annotation (Line(
            points={{64,80},{64,54}},
            color={107,45,134},
            thickness=1));
        connect(Hbu_A_NH3.q_out, z1.substrates[1]) annotation (Line(
            points={{-22,80},{-22,54}},
            color={107,45,134},
            thickness=1));
        connect(z1.products[1], Hbu_A_NH2.q_out) annotation (Line(
            points={{-22.5,34},{-22.5,22},{-22,22},{-22,8}},
            color={107,45,134},
            thickness=1));
        connect(z2.products[1], Hbu_AH_NH2.q_out) annotation (Line(
            points={{63.5,34},{63.5,22},{64,22},{64,8}},
            color={107,45,134},
            thickness=1));
        connect(h2.substrates[1], Hbu_AH_NH2.q_out) annotation (Line(
            points={{32,8},{64,8}},
            color={107,45,134},
            thickness=1));
        connect(Hbu_A_NH2.q_out, c1.substrates[1]) annotation (Line(
            points={{-22,8},{-22,-24},{-22.5,-24}},
            color={107,45,134},
            thickness=1));
        connect(Hbu_AH_NH2.q_out, c2.substrates[1]) annotation (Line(
            points={{64,8},{64,-24},{63.5,-24}},
            color={107,45,134},
            thickness=1));
        connect(c1.products[1], Hbu_A_NHCOO.q_out) annotation (Line(
            points={{-22.5,-44},{-22.5,-60},{-22,-60},{-22,-74}},
            color={107,45,134},
            thickness=1));
        connect(c2.products[1], Hbu_AH_NHCOO.q_out) annotation (Line(
            points={{63.5,-44},{63.5,-60},{64,-60},{64,-74}},
            color={107,45,134},
            thickness=1));
          connect(Hbu_A_NH3.solute, totalAmounts.u[1]) annotation (Line(
              points={{-16,70},{-44,70},{-44,63.6667},{-52,63.6667}},
              color={0,0,127}));
          connect(Hbu_AH_NH3.solute, totalAmounts.u[2]) annotation (Line(
              points={{70,70},{-2,70},{-2,63},{-52,63}},
              color={0,0,127}));
          connect(Hbu_A_NH2.solute, totalAmounts.u[3]) annotation (Line(
              points={{-16,-2},{-44,-2},{-44,62.3333},{-52,62.3333}},
              color={0,0,127}));
          connect(Hbu_AH_NH2.solute, totalAmounts.u[4]) annotation (Line(
              points={{70,-2},{-2,-2},{-2,61.6667},{-52,61.6667}},
              color={0,0,127}));
          connect(Hbu_A_NHCOO.solute, totalAmounts.u[5]) annotation (Line(
              points={{-16,-84},{-44,-84},{-44,61},{-52,61}},
              color={0,0,127}));
          connect(Hbu_AH_NHCOO.solute, totalAmounts.u[6]) annotation (Line(
              points={{70,-84},{-2,-84},{-2,60.3333},{-52,60.3333}},
              color={0,0,127}));

        connect(Hbu_A_NH2.q_out, h2.products[1]) annotation (Line(
            points={{-22,8},{-10,8},{-10,7.5},{12,7.5}},
            color={107,45,134},
            thickness=1));

          connect(Hb_tn.specificForm, Hbtn) annotation (Line(
              points={{-74,-20},{-86,-20},{-86,0},{-98,0}},
              color={107,45,134},
              thickness=1));
          connect(totalAmounts.y, Hb_tn.amountOfSubunit) annotation (Line(
              points={{-75,62},{-78,62},{-78,-12},{-72,-12}},
              color={0,0,127}));

          for i in 1:4 loop
            connect(z1[i].products[2], H) annotation (Line(
              points={{-21.5,34},{-21.5,28},{-4,28},{-4,96},{88,96},{88,86},{100,
                  86}},
              color={107,45,134},
              thickness=1));
          connect(z2[i].products[2], H) annotation (Line(
              points={{64.5,34},{64.5,28},{-4,28},{-4,96},{88,96},{88,86},{100,86}},
              color={107,45,134},
              thickness=1));

          connect(c1[i].products[2], H) annotation (Line(
              points={{-21.5,-44},{-21.5,-50},{-4,-50},{-4,96},{88,96},{88,86},{
                  100,86}},
              color={107,45,134},
              thickness=1));
          connect(c2[i].products[2], H) annotation (Line(
              points={{64.5,-44},{64.5,-50},{-4,-50},{-4,96},{88,96},{88,86},{100,
                  86}},
              color={107,45,134},
              thickness=1));

            connect(H, h2[i].products[2]) annotation (Line(
              points={{100,86},{88,86},{88,96},{-4,96},{-4,8.5},{12,8.5}},
              color={107,45,134},
              thickness=1));

            connect(CO2, c2[i].substrates[2]) annotation (Line(
              points={{100,-60},{88,-60},{88,-20},{64.5,-20},{64.5,-24}},
              color={107,45,134},
              thickness=1));
          connect(CO2, c1[i].substrates[2]) annotation (Line(
              points={{100,-60},{88,-60},{88,-20},{-21.5,-20},{-21.5,-24}},
              color={107,45,134},
              thickness=1));
          end for;
          connect(Hb_tn.specificSubunitForm, Hbu_A_NH2.q_out) annotation (Line(
              points={{-64,-2},{-64,8},{-22,8}},
              color={107,45,134},
              thickness=1));
          connect(tHb_u, Hb_tn.amount) annotation (Line(
              points={{-100,-78},{-64,-78},{-64,-20}},
              color={0,0,127}));

          connect(Hb_tn.internalHeat, internalHeat) annotation (Line(
              points={{-58,-20},{-58,-98},{-100,-98}},
              color={0,0,127}));

          connect(Hbu_A_NH3.internalHeat, totalHeats.u[1]) annotation (Line(
              points={{-10.4,76},{-44,76},{-44,33.6667},{-52,33.6667}},
              color={0,0,127}));
          connect(Hbu_AH_NH3.internalHeat, totalHeats.u[2]) annotation (Line(
              points={{75.6,76},{-2,76},{-2,33},{-52,33}},
              color={0,0,127}));
          connect(Hbu_A_NH2.internalHeat, totalHeats.u[3]) annotation (Line(
              points={{-10.4,4},{-44,4},{-44,32.3333},{-52,32.3333}},
              color={0,0,127}));
          connect(Hbu_AH_NH2.internalHeat, totalHeats.u[4]) annotation (Line(
              points={{75.6,4},{-2,4},{-2,31.6667},{-52,31.6667}},
              color={0,0,127}));
          connect(Hbu_A_NHCOO.internalHeat, totalHeats.u[5]) annotation (Line(
              points={{-10.4,-78},{-44,-78},{-44,31},{-52,31}},
              color={0,0,127}));
          connect(Hbu_AH_NHCOO.internalHeat, totalHeats.u[6]) annotation (Line(
              points={{75.6,-78},{-2,-78},{-2,30.3333},{-52,30.3333}},
              color={0,0,127}));
          connect(totalHeats.y, Hb_tn.subunitInternalHeat) annotation (Line(
              points={{-75,32},{-76,32},{-76,-6},{-72,-6}},
              color={0,0,127}));
        annotation ( Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>

<p>[1] Mateják M, Kulhánek T, Matouaek S. Adair-Based Hemoglobin Equilibrium with Oxygen, Carbon Dioxide and Hydrogen Ion Activity. Scandinavian Journal of Clinical &AMP; Laboratory Investigation; 2015</p>

<p>[2] Bauer C, Schr&ouml;der E. Carbamino compounds of haemoglobin in human adult and foetal blood. The Journal of physiology 1972;227:457-71.</p>

<p>[3] Siggaard-Andersen O. Oxygen-Linked Hydrogen Ion Binding of Human Hemoglobin. Effects of Carbon Dioxide and 2, 3-Diphosphoglycerate I. Studies on Erythrolysate. Scandinavian Journal of Clinical &AMP; Laboratory Investigation 1971;27:351-60.</p>

</html>"));
        end Hemoglobin_MKM_Specie;

        model Hemoglobin_MKM_Adair "Matejak,Kulhanek,Matousek (2014)"
          extends Modelica.Icons.Example;

          constant Real pKzD=7.73,pKcD=7.54,pKhD=7.52;
          constant Real pKzO=7.25,pKcO=8.35,pKhO=6.89;
          constant Types.MolarEnergy dHzD=-51400, dHzO=7700, dHcD=59100, dHcO=-41100, dHhD=49000, dHhO=-105000, dHo=50000, dH_HbuDANH2=0;
          // dHhD=0, dHhO=-104000, dHo=12700, dH_HbuDANH2=0;                           // dHhD=48600, dHhO=-104000, dHo=50000, dH_HbuDANH2=0;

          parameter Boolean storeResults=false;
          parameter Boolean loadStarts=true;

          Components.ChemicalReaction K1(
            K=0.0121,
            nS=1,
            nP=2) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={-44,68})));
          Components.ChemicalReaction K2(
            K=0.0117,
            nS=1,
            nP=2) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={-46,28})));
          Components.ChemicalReaction K3(
            K=0.0871,
            nS=1,
            nP=2) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={-48,-18})));
          Components.ChemicalReaction K4(
            K=0.000386,
            nS=1,
            nP=2) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={-50,-60})));
          Hemoglobin_MKM_Specie Hb0(
            pKz=fill(pKzD, 4),
            pKc=fill(pKcD, 4),
            pKh=fill(pKhD, 4),
            isDependent=true,
            dH_HbuANH2(displayUnit="kJ/mol") = fill(dH_HbuDANH2, 4),
            dHz(displayUnit="kJ/mol") = fill(dHzD, 4),
            dHc(displayUnit="kJ/mol") = fill(dHcD, 4),
            dHh(displayUnit="kJ/mol") = fill(dHhD, 4),
            storeState=storeResults,
            loadStarts=loadStarts)
            annotation (Placement(transformation(extent={{-24,78},{-4,98}})));
          Hemoglobin_MKM_Specie Hb1(
            pKz=cat(    1,
                        fill(pKzD, 3),
                        fill(pKzO, 1)),
            pKc=cat(    1,
                        fill(pKcD, 3),
                        fill(pKcO, 1)),
            pKh=cat(    1,
                        fill(pKhD, 3),
                        fill(pKhO, 1)),
            dH_HbuANH2(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dH_HbuDANH2, 3),
                      fill(dH_HbuDANH2 - dHo, 1)),
            dHz(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHzD, 3),
                      fill(dHzO, 1)),
            dHc(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHcD, 3),
                      fill(dHcO, 1)),
            dHh(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHhD, 3),
                      fill(dHhO, 1)),
            storeState=storeResults,
            loadStarts=loadStarts)
            annotation (Placement(transformation(extent={{-24,40},{-4,60}})));
          Hemoglobin_MKM_Specie Hb2(
            pKz=cat(    1,
                        fill(pKzD, 2),
                        fill(pKzO, 2)),
            pKc=cat(    1,
                        fill(pKcD, 2),
                        fill(pKcO, 2)),
            pKh=cat(    1,
                        fill(pKhD, 2),
                        fill(pKhO, 2)),
            dH_HbuANH2(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dH_HbuDANH2, 2),
                      fill(dH_HbuDANH2 - dHo, 2)),
            dHz(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHzD, 2),
                      fill(dHzO, 2)),
            dHc(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHcD, 2),
                      fill(dHcO, 2)),
            dHh(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHhD, 2),
                      fill(dHhO, 2)),
            storeState=storeResults,
            loadStarts=loadStarts)
            annotation (Placement(transformation(extent={{-24,0},{-4,20}})));
          Hemoglobin_MKM_Specie Hb3(
            pKz=cat(    1,
                        fill(pKzD, 1),
                        fill(pKzO, 3)),
            pKc=cat(    1,
                        fill(pKcD, 1),
                        fill(pKcO, 3)),
            pKh=cat(    1,
                        fill(pKhD, 1),
                        fill(pKhO, 3)),
            dH_HbuANH2(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dH_HbuDANH2, 1),
                      fill(dH_HbuDANH2 - dHo, 3)),
            dHz(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHzD, 1),
                      fill(dHzO, 3)),
            dHc(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHcD, 1),
                      fill(dHcO, 3)),
            dHh(displayUnit="kJ/mol") = cat(
                      1,
                      fill(dHhD, 1),
                      fill(dHhO, 3)),
            storeState=storeResults,
            loadStarts=loadStarts)
            annotation (Placement(transformation(extent={{-24,-44},{-4,-24}})));
          Hemoglobin_MKM_Specie Hb4(
            pKz=fill(pKzO, 4),
            pKc=fill(pKcO, 4),
            pKh=fill(pKhO, 4),
            dH_HbuANH2(displayUnit="kJ/mol") = fill(dH_HbuDANH2 - dHo, 4),
            dHz(displayUnit="kJ/mol") = fill(dHzO, 4),
            dHc(displayUnit="kJ/mol") = fill(dHcO, 4),
            dHh(displayUnit="kJ/mol") = fill(dHhO, 4),
            storeState=storeResults,
            loadStarts=loadStarts)
            annotation (Placement(transformation(extent={{-24,-88},{-4,-68}})));
          Sources.UnlimitedGasStorage CO2(
            Simulation=Types.SimulationType.SteadyState,
            isIsolatedInSteadyState=false,
            PartialPressure=0)
            annotation (Placement(transformation(extent={{96,72},{76,92}})));
          Sources.UnlimitedSolutionStorage pH(
            Simulation=Types.SimulationType.SteadyState,
            isIsolatedInSteadyState=false,
            Conc(displayUnit="mol/l") = 10^(-7 + 3)) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={34,82})));
          SteadyStates.Components.MolarConservationLaw totalHemoglobin(
            n=5,
            Total(displayUnit="mol") = 1,
            Simulation=Types.SimulationType.SteadyState)
            annotation (Placement(transformation(extent={{44,6},{64,26}})));
          Modelica.Blocks.Math.Sum sO2(nin=4, k={4/4,3/4,2/4,1/4})
            annotation (Placement(transformation(extent={{62,-30},{82,-10}})));
          Components.Substance oxygen_unbound(Simulation=Types.SimulationType.SteadyState,
              solute_start=1e-08)
            annotation (Placement(transformation(extent={{-94,-28},{-74,-8}})));
          Modelica.Blocks.Sources.Clock clock(offset=10)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-84,70})));
          Sources.UnlimitedGasStorage oxygen_in_air(
            Simulation=Types.SimulationType.SteadyState,
            isIsolatedInSteadyState=false,
            PartialPressure(displayUnit="Pa") = 10,
            usePartialPressureInput=true,
            T=310.15) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-84,34})));
          Components.GasSolubility partialPressure1(
            kH_T0(displayUnit="(mmol/l)/kPa at 25degC") = 0.026029047188736,
            C=1700,
            T=310.15) annotation (Placement(transformation(extent={{-10,-10},{
                    10,10}}, origin={-84,6})));
          Modelica.Blocks.Math.Sum internalHeat(nin=5)
            annotation (Placement(transformation(extent={{44,-62},{64,-42}})));
          Modelica.Blocks.Math.Gain gain(k=4)
            annotation (Placement(transformation(extent={{38,-92},{46,-84}})));
          Modelica.Blocks.Continuous.Der der1
            annotation (Placement(transformation(extent={{52,-80},{60,-72}})));
          Modelica.Blocks.Continuous.Der der2
            annotation (Placement(transformation(extent={{52,-92},{60,-84}})));
          Modelica.Blocks.Math.Division derInternalHeat_per_derO2
            annotation (Placement(transformation(extent={{72,-92},{92,-72}})));
          Components.GasSolubility partialPressure2(
            T=310.15,
            kH_T0(displayUnit="(mmol/l)/kPa at 25degC") = 0.60734443440384,
            C=2400) annotation (Placement(transformation(extent={{-10,-10},{10,
                    10}}, origin={68,62})));
          Components.Substance CO2_unbound(Simulation=Types.SimulationType.SteadyState,
              solute_start=0.0012)
            annotation (Placement(transformation(extent={{58,30},{78,50}})));
        equation
          connect(oxygen_unbound.q_out, K2.products[1]) annotation (Line(
              points={{-84,-18},{-62,-18},{-62,42},{-46,42},{-46,38},{-46.5,38}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, K3.products[1]) annotation (Line(
              points={{-84,-18},{-62,-18},{-62,0},{-48.5,0},{-48.5,-8}},
              color={107,45,134},
              thickness=1));
          connect(K1.products[1], oxygen_unbound.q_out) annotation (Line(
              points={{-44.5,78},{-44.5,80},{-62,80},{-62,-18},{-84,-18}},
              color={107,45,134},
              thickness=1));
          connect(oxygen_unbound.q_out, K4.products[1]) annotation (Line(
              points={{-84,-18},{-62,-18},{-62,-44},{-50.5,-44},{-50.5,-50}},
              color={107,45,134},
              thickness=1));

          connect(CO2_unbound.q_out, Hb0.CO2) annotation (Line(
              points={{68,40},{4,40},{4,82},{-4,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb0.H, pH.q_out) annotation (Line(
              points={{-4,96.6},{10,96.6},{10,82},{24,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb1.H, Hb0.H) annotation (Line(
              points={{-4,58.6},{10,58.6},{10,96.6},{-4,96.6}},
              color={107,45,134},
              thickness=1));
          connect(Hb3.H, Hb0.H) annotation (Line(
              points={{-4,-25.4},{10,-25.4},{10,96.6},{-4,96.6}},
              color={107,45,134},
              thickness=1));
          connect(Hb4.H, Hb0.H) annotation (Line(
              points={{-4,-69.4},{10,-69.4},{10,96.6},{-4,96.6}},
              color={107,45,134},
              thickness=1));
          connect(Hb2.H, Hb0.H) annotation (Line(
              points={{-4,18.6},{10,18.6},{10,96.6},{-4,96.6}},
              color={107,45,134},
              thickness=1));
          connect(Hb1.CO2, Hb0.CO2) annotation (Line(
              points={{-4,44},{4,44},{4,82},{-4,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb2.CO2, Hb0.CO2) annotation (Line(
              points={{-4,4},{4,4},{4,82},{-4,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb3.CO2, Hb0.CO2) annotation (Line(
              points={{-4,-40},{4,-40},{4,82},{-4,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb4.CO2, Hb0.CO2) annotation (Line(
              points={{-4,-84},{4,-84},{4,82},{-4,82}},
              color={107,45,134},
              thickness=1));
          connect(Hb0.Hbtn, K1.products[2]) annotation (Line(
              points={{-23.8,88},{-43.5,88},{-43.5,78}},
              color={107,45,134},
              thickness=1));
          connect(Hb1.Hbtn, K1.substrates[1]) annotation (Line(
              points={{-23.8,50},{-44,50},{-44,58}},
              color={107,45,134},
              thickness=1));
          connect(Hb1.Hbtn, K2.products[2]) annotation (Line(
              points={{-23.8,50},{-44,50},{-44,38},{-45.5,38}},
              color={107,45,134},
              thickness=1));
          connect(Hb2.Hbtn, K2.substrates[1]) annotation (Line(
              points={{-23.8,10},{-46,10},{-46,18}},
              color={107,45,134},
              thickness=1));
          connect(Hb2.Hbtn, K3.products[2]) annotation (Line(
              points={{-23.8,10},{-46,10},{-46,-8},{-47.5,-8}},
              color={107,45,134},
              thickness=1));
          connect(Hb3.Hbtn, K3.substrates[1]) annotation (Line(
              points={{-23.8,-34},{-48,-34},{-48,-28}},
              color={107,45,134},
              thickness=1));
          connect(Hb3.Hbtn, K4.products[2]) annotation (Line(
              points={{-23.8,-34},{-48,-34},{-48,-50},{-49.5,-50}},
              color={107,45,134},
              thickness=1));
          connect(Hb4.Hbtn, K4.substrates[1]) annotation (Line(
              points={{-23.8,-78},{-50,-78},{-50,-70}},
              color={107,45,134},
              thickness=1));
          connect(Hb4.tHb_u, totalHemoglobin.fragment[1]) annotation (Line(
              points={{-24,-85.8},{-32,-85.8},{-32,-96},{22,-96},{22,10.4},{44,10.4}},
              color={0,0,127}));
          connect(Hb3.tHb_u, totalHemoglobin.fragment[2]) annotation (Line(
              points={{-24,-41.8},{-32,-41.8},{-32,-48},{20,-48},{20,11.2},{44,11.2}},
              color={0,0,127}));
          connect(Hb2.tHb_u, totalHemoglobin.fragment[3]) annotation (Line(
              points={{-24,2.2},{-32,2.2},{-32,-4},{18,-4},{18,12},{44,12}},
              color={0,0,127}));
          connect(Hb1.tHb_u, totalHemoglobin.fragment[4]) annotation (Line(
              points={{-24,42.2},{-28,42.2},{-28,34},{16,34},{16,12.8},{44,12.8}},
              color={0,0,127}));
          connect(Hb0.tHb_u, totalHemoglobin.fragment[5]) annotation (Line(
              points={{-24,80.2},{-28,80.2},{-28,64},{18,64},{18,13.6},{44,13.6}},
              color={0,0,127}));

          connect(Hb1.tHb_u, sO2.u[4]) annotation (Line(
              points={{-24,42.2},{-28,42.2},{-28,34},{16,34},{16,-18.5},{60,-18.5}},
              color={0,0,127}));
          connect(Hb2.tHb_u, sO2.u[3]) annotation (Line(
              points={{-24,2.2},{-32,2.2},{-32,2},{-32,2},{-32,-4},{18,-4},{18,-19.5},{60,
                  -19.5}},
              color={0,0,127}));

          connect(Hb3.tHb_u, sO2.u[2]) annotation (Line(
              points={{-24,-41.8},{-32,-41.8},{-32,-48},{20,-48},{20,-20.5},{60,-20.5}},
              color={0,0,127}));
          connect(Hb4.tHb_u, sO2.u[1]) annotation (Line(
              points={{-24,-85.8},{-32,-85.8},{-32,-96},{22,-96},{22,-21.5},{60,-21.5}},
              color={0,0,127}));
          connect(partialPressure1.q_out,oxygen_in_air. q_out)
                                                    annotation (Line(
              points={{-84,16},{-84,24}},
              color={107,45,134},
              thickness=1));
          connect(partialPressure1.q_in,oxygen_unbound. q_out) annotation (Line(
              points={{-84,-2},{-84,-18}},
              color={107,45,134},
              thickness=1));
          connect(Hb0.internalHeat, internalHeat.u[1]) annotation (Line(
              points={{-24,78.2},{-24,66},{34,66},{34,-53.6},{42,-53.6}},
              color={0,0,127}));
          connect(Hb1.internalHeat, internalHeat.u[2]) annotation (Line(
              points={{-24,40.2},{-26,40.2},{-26,36},{34,36},{34,-52.8},{42,-52.8}},
              color={0,0,127}));
          connect(Hb2.internalHeat, internalHeat.u[3]) annotation (Line(
              points={{-24,0.2},{-28,0.2},{-28,-2},{34,-2},{34,-52},{42,-52}},
              color={0,0,127}));
          connect(Hb3.internalHeat, internalHeat.u[4]) annotation (Line(
              points={{-24,-43.8},{-28,-43.8},{-28,-46},{34,-46},{34,-51.2},{42,
                  -51.2}},
              color={0,0,127}));
          connect(Hb4.internalHeat, internalHeat.u[5]) annotation (Line(
              points={{-24,-87.8},{-28,-87.8},{-28,-90},{34,-90},{34,-52},{42,-52},
                  {42,-50.4}},
              color={0,0,127}));
          connect(gain.u, sO2.y) annotation (Line(
              points={{37.2,-88},{34,-88},{34,-96},{98,-96},{98,-20},{83,-20}},
              color={0,0,127}));
          connect(internalHeat.y, der1.u) annotation (Line(
              points={{65,-52},{68,-52},{68,-66},{48,-66},{48,-76},{51.2,-76}},
              color={0,0,127}));
          connect(gain.y, der2.u) annotation (Line(
              points={{46.4,-88},{51.2,-88}},
              color={0,0,127}));
          connect(clock.y, oxygen_in_air.partialPressure) annotation (Line(
              points={{-84,59},{-84,44}},
              color={0,0,127}));
          connect(derInternalHeat_per_derO2.u2, der2.y) annotation (Line(
              points={{70,-88},{60.4,-88}},
              color={0,0,127}));
          connect(derInternalHeat_per_derO2.u1, der1.y) annotation (Line(
              points={{70,-76},{60.4,-76}},
              color={0,0,127}));
          connect(CO2_unbound.q_out, partialPressure2.q_in) annotation (Line(
              points={{68,40},{68,54}},
              color={107,45,134},
              thickness=1));
          connect(CO2.q_out, partialPressure2.q_out) annotation (Line(
              points={{76,82},{68,82},{68,72}},
              color={107,45,134},
              thickness=1));
          annotation (          experiment(
              StopTime=15000,
              Tolerance=1e-014,
              __Dymola_Algorithm="Euler"), Documentation(info="<html>
<p>Before silumation in &QUOT;Dymola 2014 FD01&QUOT; please set environment variable &QUOT;<code><b>Advanced.Define.NonLinearIterations&nbsp;=&nbsp;3&QUOT;</b></code> and chose &QUOT;Euler&QUOT; method!</p>

<p>[1] Mateják M, Kulhánek T, Matouaek S. Adair-Based Hemoglobin Equilibrium with Oxygen, Carbon Dioxide and Hydrogen Ion Activity. Scandinavian Journal of Clinical &AMP; Laboratory Investigation; 2015</p>

<p>[2] Bauer C, Schr&ouml;der E. Carbamino compounds of haemoglobin in human adult and foetal blood. The Journal of physiology 1972;227:457-71.</p>

<p>[3] Siggaard-Andersen O. Oxygen-Linked Hydrogen Ion Binding of Human Hemoglobin. Effects of Carbon Dioxide and 2, 3-Diphosphoglycerate I. Studies on Erythrolysate. Scandinavian Journal of Clinical &AMP; Laboratory Investigation 1971;27:351-60.</p>

<p>[4] Severinghaus JW. Simple, accurate equations for human blood O2 dissociation computations. Journal of Applied Physiology 1979;46:599-602.</p>
</html>",   revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
        end Hemoglobin_MKM_Adair;

        package Develop
          extends Modelica.Icons.UnderConstruction;

          model QuaternaryForm
            "Model of hemoglobin space-structure form (can be parametrized as relaxed or tensed)"

            parameter Boolean isDependent = false;

            parameter Types.Concentration KA = 10^(-6.89+3)
              "dissociation coefficient for acid chains of subunit";
            parameter Types.Concentration Kz = 10^(-7.25+3)
              "valine 1 amino terminus dissociation coefficient of protonation to NH3+";
            parameter Types.Concentration Kc = 10^(-8.35+3)
              "valine 1 amino terminus dissociation coefficient of protonation to NH3+";
            parameter Types.Concentration KO2 = 0.000671946
              "oxygen dissociation coefficient of hemoglobin subunit";

            Components.Speciation Speciation(NumberOfSubunits=12)
              annotation (Placement(transformation(extent={{60,-20},{40,0}})));
            Components.Substance OxyHm[4](
              each solute_start=0,
              each Simulation=Types.SimulationType.SteadyState,
              isDependent={isDependent,true,true,true})
              "Oxygenated subunit of hemoglobin tetramer" annotation (Placement(
                  transformation(extent={{-90,-68},{-70,-48}})));
            Components.ChemicalReaction oxygenation1[4](each nP=2, each K=KO2)
              annotation (Placement(transformation(extent={{-62,-68},{-42,-48}})));
            Components.Substance DeoxyHm[4](each Simulation=Types.SimulationType.SteadyState,
                each solute_start=1e-08)
              "Deoxygenated subunit of hemoglobin tetramer" annotation (
                Placement(transformation(extent={{-34,-68},{-14,-48}})));

            Modelica.Blocks.Math.Add add[4] annotation (Placement(transformation(
                  extent={{-4,-4},{4,4}},
                  rotation=270,
                  origin={-58,-80})));
            Interfaces.ChemicalPort_a O2 annotation (Placement(transformation(
                    extent={{-26,-50},{-6,-30}}), iconTransformation(extent={{-26,
                      -50},{-6,-30}})));
            Interfaces.ChemicalPort_a sForm annotation (Placement(
                  transformation(extent={{72,-54},{92,-34}}),
                  iconTransformation(extent={{68,-50},{88,-30}})));
            Interfaces.ChemicalPort_a H "hydrogen ion (proton)" annotation (
                Placement(transformation(extent={{-32,18},{-12,38}}),
                  iconTransformation(extent={{-32,18},{-12,38}})));
            Components.Substance A[4](each Simulation=Types.SimulationType.SteadyState,
                each solute_start=1e-08)
              "residual acid chains of hemoglobin subunits "
              annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
            Components.Substance HA[4](
              each solute_start=0,
              each Simulation=Types.SimulationType.SteadyState,
              each isDependent=true)
              "residual acid chains of hemoglobin subunits " annotation (
                Placement(transformation(extent={{-90,-14},{-70,6}})));
            Components.ChemicalReaction protonation1[4](each nP=2, each K=KA)
              annotation (Placement(transformation(extent={{-62,-14},{-42,6}})));
            Modelica.Blocks.Math.Add add1[
                                         4] annotation (Placement(transformation(
                  extent={{-4,-4},{4,4}},
                  rotation=270,
                  origin={-52,-24})));
            Components.Substance NH2[4](each Simulation=Types.SimulationType.SteadyState,
                each solute_start=1e-08)
              "Val1 terminal of hemoglobin subunits "
              annotation (Placement(transformation(extent={{-10,52},{10,72}})));
            Components.Substance NH3[4](
              each solute_start=0,
              each Simulation=Types.SimulationType.SteadyState,
              each isDependent=true) "Val1 terminal of hemoglobin subunits "
              annotation (Placement(transformation(extent={{-86,52},{-66,72}})));
            Components.ChemicalReaction protonation2[4](each nP=2, each K=Kz)
              annotation (Placement(transformation(extent={{-58,52},{-38,72}})));
            Modelica.Blocks.Math.Add3 add2[
                                         4] annotation (Placement(transformation(
                  extent={{-4,-4},{4,4}},
                  rotation=270,
                  origin={0,40})));
            Interfaces.ChemicalPort_a CO2 annotation (Placement(transformation(
                    extent={{-6,76},{14,96}}), iconTransformation(extent={{-6,
                      76},{14,96}})));
            Components.ChemicalReaction carboxylation[4](
              each nP=2,
              each nS=2,
              each K=Kc)
              "Carboxylation of Valin1 amino terminus of hemogloni subunit"
              annotation (Placement(transformation(extent={{36,52},{56,72}})));
            Components.Substance NHCOO[4](each Simulation=Types.SimulationType.SteadyState,
                each solute_start=1e-08)
              "Val1 terminal of hemoglobin subunits "
              annotation (Placement(transformation(extent={{66,52},{86,72}})));
            Types.RealIO.AmountOfSubstanceOutput tAmount(start=1e-08)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={50,-86}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={40,-90})));
            Types.RealIO.AmountOfSubstanceOutput protonation annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  origin={100,14}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  origin={90,20})));
            Modelica.Blocks.Math.Sum add3(k=cat(
                  1,
                  -ones(4),
                  ones(8)), nin=12)
              annotation (Placement(transformation(extent={{78,10},{86,18}})));
            Modelica.Blocks.Math.Sum add4(nin=4)
              annotation (Placement(transformation(extent={{-4,-4},{4,4}},
                  rotation=270,
                  origin={-80,-86})));
            Types.RealIO.AmountOfSubstanceOutput oxygenation
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={-80,-110}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={-80,-90})));
          equation

            connect(OxyHm.solute, add.u2) annotation (Line(
                points={{-80,-68},{-80,-74},{-60.4,-74},{-60.4,-75.2}},
                color={0,0,127}));
            connect(DeoxyHm.solute, add.u1) annotation (Line(
                points={{-24,-68},{-26,-68},{-26,-75.2},{-55.6,-75.2}},
                color={0,0,127}));
            connect(OxyHm.q_out, oxygenation1.substrates[1]) annotation (Line(
                points={{-80,-58},{-62,-58}},
                color={107,45,134},
                thickness=1));
            connect(oxygenation1.products[1], DeoxyHm.q_out) annotation (Line(
                points={{-42,-58.5},{-34,-58.5},{-34,-58},{-24,-58}},
                color={107,45,134},
                thickness=1));
            connect(Speciation.specificForm, sForm) annotation (Line(
                points={{40,-18},{40,-44},{82,-44}},
                color={107,45,134},
                thickness=1));
            connect(oxygenation1[1].products[2], O2) annotation (Line(
                points={{-42,-57.5},{-36,-57.5},{-36,-40},{-16,-40}},
                color={107,45,134},
                thickness=1));
            connect(oxygenation1[2].products[2], O2) annotation (Line(
                points={{-42,-57.5},{-36,-57.5},{-36,-40},{-16,-40}},
                color={107,45,134},
                thickness=1));
            connect(oxygenation1[3].products[2], O2) annotation (Line(
                points={{-42,-57.5},{-36,-57.5},{-36,-40},{-16,-40}},
                color={107,45,134},
                thickness=1));
            connect(oxygenation1[4].products[2], O2) annotation (Line(
                points={{-42,-57.5},{-36,-57.5},{-36,-40},{-16,-40}},
                color={107,45,134},
                thickness=1));
            connect(HA.q_out, protonation1.substrates[1]) annotation (Line(
                points={{-80,-4},{-62,-4}},
                color={107,45,134},
                thickness=1));
            connect(protonation1.products[1], A.q_out) annotation (Line(
                points={{-42,-4.5},{-42,-4},{-14,-4}},
                color={107,45,134},
                thickness=1));
            connect(H, protonation1[1].products[2]) annotation (Line(
                points={{-22,28},{-32,28},{-32,-3.5},{-42,-3.5}},
                color={107,45,134},
                thickness=1));
            connect(protonation1[2].products[2], H) annotation (Line(
                points={{-42,-3.5},{-32,-3.5},{-32,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(protonation1[3].products[2], H) annotation (Line(
                points={{-42,-3.5},{-32,-3.5},{-32,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(protonation1[4].products[2], H) annotation (Line(
                points={{-42,-3.5},{-32,-3.5},{-32,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(HA.solute, add1.u2) annotation (Line(
                points={{-80,-14},{-80,-19.2},{-54.4,-19.2}},
                color={0,0,127}));
            connect(A.solute, add1.u1) annotation (Line(
                points={{-14,-14},{-14,-16},{-49.6,-16},{-49.6,-19.2}},
                color={0,0,127}));
            connect(DeoxyHm.q_out, Speciation.specificSubunitForm[1:4])
              annotation (Line(
                points={{-24,-58},{-24,-52},{28,-52},{28,0},{50,0},{50,-0.416667}},
                color={107,45,134},
                thickness=1));

            connect(A.q_out, Speciation.specificSubunitForm[5:8]) annotation (
                Line(
                points={{-14,-4},{-14,0.25},{50,0.25}},
                color={107,45,134},
                thickness=1));
            connect(add.y, Speciation.amountOfSubunit[1:4]) annotation (Line(
                points={{-58,-84.4},{-58,-86},{14,-86},{14,-10.8333},{42,-10.8333}},
                color={0,0,127}));

            connect(add1.y, Speciation.amountOfSubunit[5:8]) annotation (Line(
                points={{-52,-28.4},{-52,-28},{12,-28},{12,-9.5},{42,-9.5}},
                color={0,0,127}));
            connect(NH3.q_out, protonation2.substrates[1]) annotation (Line(
                points={{-76,62},{-58,62}},
                color={107,45,134},
                thickness=1));
            connect(protonation2.products[1], NH2.q_out) annotation (Line(
                points={{-38,61.5},{0,61.5},{0,62}},
                color={107,45,134},
                thickness=1));
            connect(H, protonation2[1].products[2]) annotation (Line(
                points={{-22,28},{-22,62.5},{-38,62.5}},
                color={107,45,134},
                thickness=1));
            connect(protonation2[2].products[2], H) annotation (Line(
                points={{-38,62.5},{-22,62.5},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(protonation2[3].products[2], H) annotation (Line(
                points={{-38,62.5},{-22,62.5},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(protonation2[4].products[2], H) annotation (Line(
                points={{-38,62.5},{-22,62.5},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(add2.y, Speciation.amountOfSubunit[9:12]) annotation (Line(
                points={{0,35.6},{0,32},{12,32},{12,-8.16667},{42,-8.16667}},
                color={0,0,127}));
            connect(NH2.q_out, Speciation.specificSubunitForm[9:12]) annotation (
                Line(
                points={{0,62},{0,58},{28,58},{28,0.916667},{50,0.916667}},
                color={107,45,134},
                thickness=1));
            connect(NH2.q_out, carboxylation.substrates[1]) annotation (Line(
                points={{0,62},{0,61.5},{36,61.5}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation.products[1], NHCOO.q_out) annotation (Line(
                points={{56,61.5},{76,61.5},{76,62}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[1].products[2], H) annotation (Line(
                points={{56,62.5},{62,62.5},{62,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[1].substrates[2], CO2) annotation (Line(
                points={{36,62.5},{26,62.5},{26,86},{4,86}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[2].products[2], H) annotation (Line(
                points={{56,62.5},{62,62.5},{62,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[2].substrates[2], CO2) annotation (Line(
                points={{36,62.5},{26,62.5},{26,86},{4,86}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[3].products[2], H) annotation (Line(
                points={{56,62.5},{62,62.5},{62,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[3].substrates[2], CO2) annotation (Line(
                points={{36,62.5},{26,62.5},{26,86},{4,86}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[4].products[2], H) annotation (Line(
                points={{56,62.5},{62,62.5},{62,28},{-22,28}},
                color={107,45,134},
                thickness=1));
            connect(carboxylation[4].substrates[2], CO2) annotation (Line(
                points={{36,62.5},{26,62.5},{26,86},{4,86}},
                color={107,45,134},
                thickness=1));
            connect(NH3.solute, add2.u3) annotation (Line(
                points={{-76,52},{-76,44.8},{-3.2,44.8}},
                color={0,0,127}));
            connect(NH2.solute, add2.u2) annotation (Line(
                points={{0,52},{0,44.8}},
                color={0,0,127}));
            connect(NHCOO.solute, add2.u1) annotation (Line(
                points={{76,52},{76,44.8},{3.2,44.8}},
                color={0,0,127}));
            connect(Speciation.amount, tAmount) annotation (Line(
                points={{50,-18},{50,-86}},
                color={0,0,127}));
            connect(HA.solute, add3.u[9:12]) annotation (Line(
                points={{-80,-14},{-80,-20},{-98,-20},{-98,14.7333},{77.2,14.7333}},
                color={0,0,127}));
            connect(NH3.solute, add3.u[5:8]) annotation (Line(
                points={{-76,52},{-76,14.2},{77.2,14.2}},
                color={0,0,127}));
            connect(NHCOO.solute, add3.u[1:4]) annotation (Line(
                points={{76,52},{76,13.6667},{77.2,13.6667}},
                color={0,0,127}));
            connect(add3.y, protonation) annotation (Line(
                points={{86.4,14},{100,14}},
                color={0,0,127}));
            connect(OxyHm.solute, add4.u) annotation (Line(
                points={{-80,-68},{-80,-81.2}},
                color={0,0,127}));
            connect(add4.y, oxygenation) annotation (Line(
                points={{-80,-90.4},{-80,-110}},
                color={0,0,127}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics={
                  Ellipse(
                    extent={{-94,-44},{4,-80}},
                    lineColor={127,0,0},
                    fillColor={255,170,170},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-98,16},{8,-28}},
                    lineColor={0,0,255},
                    fillColor={179,254,255},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-94,80},{98,42}},
                    lineColor={127,127,0},
                    fillColor={213,255,170},
                    fillPattern=FillPattern.Solid)}),
              Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",     info="<html>
<p>[1] Morrow J, Matthew J, Wittebort R, Gurd F. Carbon 13 resonances of 13CO2 carbamino adducts of alpha and beta chains in human adult hemoglobin. Journal of Biological Chemistry 1976;251:477-84.</p>
<p>[2] Bauer C, Schr&ouml;der E. Carbamino compounds of haemoglobin in human adult and foetal blood. The Journal of physiology 1972;227:457-71.</p>
<p>[3] Antonini E, Wyman J, Brunori M, Fronticelli C, Bucci E, Rossi-Fanelli A. Studies on the relations between molecular and functional properties of hemoglobin V. The influence of temperature on the Bohr effect in human and in horse hemoglobin. Journal of Biological Chemistry 1965;240:1096-103.</p>
</html>"),    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                      {100,100}}),
                  graphics={
                  Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,127},
                    fillColor={215,215,215},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-94,78},{98,40}},
                    lineColor={127,127,0},
                    fillColor={213,255,170},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-98,14},{8,-30}},
                    lineColor={0,0,255},
                    fillColor={179,254,255},
                    fillPattern=FillPattern.Solid),
                  Ellipse(
                    extent={{-94,-46},{4,-82}},
                    lineColor={127,0,0},
                    fillColor={255,170,170},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-240,-110},{40,-160}},
                    lineColor={0,0,0},
                    textString="%name")}));
          end QuaternaryForm;

          model Hemoglobin2 "Hemoglobin model"

           extends SteadyStates.Interfaces.SteadyStateSystem(
                                                    Simulation=Types.SimulationType.SteadyState);

          //  parameter GasSolubility alpha =  0.0105 * 1e-3 "oxygen solubility in plasma";   // by Siggaard Andersen: 0.0105 (mmol/l)/kPa

            parameter Types.Fraction L = 7.0529*10^6
              "=[T0]/[R0] .. dissociation constant of relaxed <-> tensed change of deoxyhemoglobin tetramer";
            parameter Types.Fraction Ln = 26884.8
              "quaternaly form ratio for specific stripped species of hemoglobin tetramer";
                                           //L*0.00381188                                                                     //"=L*(fnT/fnR)^4 for pH=7.2464 and CO2=0";
            parameter Types.Fraction c = 0.00431555
              "=KR/KT .. ration between oxygen affinities of relaxed vs. tensed subunit";
            parameter Types.Concentration KR = 0.000671946
              "oxygen dissociation on relaxed(R) hemoglobin subunit";
                                                                        //*7.875647668393782383419689119171e-5
                                                                      //10.500001495896 7.8756465463794e-05

            parameter Types.Concentration KT=KR/c
              "oxygen dissociation on tensed(T) hemoglobin subunit";

            parameter Types.AmountOfSubstance totalAmountOfHemoglobin=0.001;

            Components.ChemicalReaction quaternaryForm(K=Ln)
              annotation (Placement(transformation(extent={{-16,26},{4,46}})));

            QuaternaryForm R(
              KO2=KR,
              KA=10^(-6.89 + 3),
              Kz=10^(-7.25 + 3),
              Kc=10^(-8.35 + 3),
              isDependent=true) annotation (Placement(transformation(extent={{-40,
                      30},{-20,50}})));
            QuaternaryForm T(
              KO2=KT,
              KA=10^(-7.52 + 3),
              Kz=10^(-7.73 + 3),
              Kc=10^(-7.54 + 3))
              annotation (Placement(transformation(extent={{32,30},{12,50}})));
            SteadyStates.Components.MolarConservationLaw totalHb(
              n=2,
              Total=totalAmountOfHemoglobin,
              Simulation=Types.SimulationType.SteadyState)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={0,2})));
            Interfaces.ChemicalPort_a H "H+ (proton)" annotation (Placement(
                  transformation(extent={{6,66},{26,86}}), iconTransformation(
                    extent={{90,90},{110,110}})));
            Interfaces.ChemicalPort_a CO2 "carbon dioxide" annotation (
                Placement(transformation(extent={{-22,54},{-2,74}}),
                  iconTransformation(extent={{14,40},{34,60}})));
            Interfaces.ChemicalPort_a O2 "oxygen" annotation (Placement(
                  transformation(extent={{-54,78},{-34,98}}),
                  iconTransformation(extent={{90,-10},{110,10}})));
            Types.RealIO.FractionOutput          protonation annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  origin={100,-40}),iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={-80,-90})));
            Modelica.Blocks.Math.Add add(k1=1/4, k2=1/4)
              annotation (Placement(transformation(extent={{16,-40},{26,-30}})));
            Modelica.Blocks.Math.Division division
              annotation (Placement(transformation(extent={{42,-46},{54,-34}})));
            Modelica.Blocks.Math.Add add1(
                                         k1=1/4, k2=1/4)
              annotation (Placement(transformation(extent={{42,-62},{54,-50}})));
            Modelica.Blocks.Math.Division division1
              annotation (Placement(transformation(extent={{66,-86},{78,-74}})));
            Types.RealIO.FractionOutput sO2
              annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
          equation

            connect(R.CO2, CO2) annotation (Line(
                points={{-29.6,48.6},{-29.6,64},{-12,64}},
                color={107,45,134},
                thickness=1));
            connect(CO2, T.CO2) annotation (Line(
                points={{-12,64},{22,64},{22,48},{21.6,48},{21.6,48.6}},
                color={107,45,134},
                thickness=1));

            connect(R.O2, O2) annotation (Line(
                points={{-31.6,36},{-44,36},{-44,88}},
                color={107,45,134},
                thickness=1));
            connect(R.H, H) annotation (Line(
                points={{-32.2,42.8},{-32.2,42},{-34,42},{-34,76},{16,76}},
                color={107,45,134},
                thickness=1));
            connect(R.sForm, quaternaryForm.substrates[1]) annotation (Line(
                points={{-22.2,36},{-16,36}},
                color={107,45,134},
                thickness=1));
            connect(T.O2, O2) annotation (Line(
                points={{23.6,36},{36,36},{36,88},{-44,88}},
                color={107,45,134},
                thickness=1));
            connect(T.H, H) annotation (Line(
                points={{24.2,42.8},{26,42.8},{26,76},{16,76}},
                color={107,45,134},
                thickness=1));
            connect(T.sForm, quaternaryForm.products[1]) annotation (Line(
                points={{14.2,36},{4,36}},
                color={107,45,134},
                thickness=1));
            connect(R.tAmount, totalHb.fragment[1]) annotation (Line(
                points={{-26,31},{-26,18},{-4,18},{-4,12},{-5,12}},
                color={0,0,127}));
            connect(T.tAmount, totalHb.fragment[2]) annotation (Line(
                points={{18,31},{18,18},{-3,18},{-3,12}},
                color={0,0,127}));
            connect(T.protonation, add.u1) annotation (Line(
                points={{13,42},{13,-32},{15,-32}},
                color={0,0,127}));
            connect(R.protonation, add.u2) annotation (Line(
                points={{-21,42},{-21,-38},{15,-38}},
                color={0,0,127}));
            connect(division.u2, totalHb.totalAmountOfSubstance) annotation (Line(
                points={{40.8,-43.6},{-4,-43.6},{-4,-8}},
                color={0,0,127}));
            connect(division.u1, add.y) annotation (Line(
                points={{40.8,-36.4},{38,-36.4},{38,-35},{26.5,-35}},
                color={0,0,127}));
            connect(protonation, division.y) annotation (Line(
                points={{100,-40},{54.6,-40}},
                color={0,0,127}));
            connect(division1.u1, add1.y) annotation (Line(
                points={{64.8,-76.4},{56,-76.4},{56,-56},{54.6,-56}},
                color={0,0,127}));
            connect(R.oxygenation, add1.u2) annotation (Line(
                points={{-38,31},{-38,-59.6},{40.8,-59.6}},
                color={0,0,127}));
            connect(T.oxygenation, add1.u1) annotation (Line(
                points={{30,31},{30,-52.4},{40.8,-52.4}},
                color={0,0,127}));
            connect(totalHb.totalAmountOfSubstance, division1.u2) annotation (
                Line(
                points={{-4,-8},{-4,-83.6},{64.8,-83.6}},
                color={0,0,127}));
            connect(division1.y, sO2) annotation (Line(
                points={{78.6,-80},{100,-80}},
                color={0,0,127}));
            annotation (             Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",     info="<html>
<p>[1] Monod J, Wyman J, Changeux J-P. On the nature of allosteric transitions: a plausible model. Journal of Molecular Biology 1965;12:88-118.</p>
</html>"));
          end Hemoglobin2;

          model Hemoglobin_oxygenation "Hemoglobin oxygenation experiment"

            import Physiolibrary.Types.*;

           extends Modelica.Icons.Example;

            Components.Substance oxygen_unbound(Simulation=SimulationType.SteadyState,
                solute_start=0.000001*7.875647668393782383419689119171e-5)
              annotation (Placement(transformation(extent={{-4,-2},{16,18}})));
            Modelica.Blocks.Sources.Clock clock(offset=1e-06)
              annotation (Placement(transformation(extent={{-40,74},{-20,94}})));
            Sources.UnlimitedGasStorage oxygen_in_air(
              Simulation=Types.SimulationType.SteadyState,
              usePartialPressureInput=true,
              T=310.15,
              isIsolatedInSteadyState=false) annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={6,60})));
            Components.GasSolubility partialPressure1(
              kH_T0(displayUnit="(mmol/l)/kPa at 25degC") = 0.026029047188736,
              T=310.15,
              C=1700) annotation (Placement(transformation(extent={{-10,-10},{
                      10,10}}, origin={6,32})));
            Sources.UnlimitedSolutionStorage pH(
              q_out(conc(nominal=10^(-7.4 + 3))),
              Simulation=Types.SimulationType.SteadyState,
              Conc=10^(-7.2464 + 3),
              isIsolatedInSteadyState=false) annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={62,-10})));
            Sources.UnlimitedGasStorage CO2_gas(Simulation=Types.SimulationType.SteadyState,
                PartialPressure=5332.8954966) annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={-34,56})));
            Components.GasSolubility gasSolubility(C=2400, kH_T0(displayUnit=
                    "(mmol/l)/kPa at 25degC") = 0.81805576878885) annotation (
                Placement(transformation(extent={{-44,20},{-24,40}})));
            Components.Substance CO2_liquid(Simulation=Types.SimulationType.SteadyState,
                isDependent=true) annotation (Placement(transformation(extent={
                      {-44,-4},{-24,16}})));
            Hemoglobin2 hemoglobin annotation (Placement(transformation(extent=
                      {{-26,-74},{-6,-54}})));
          equation

            connect(partialPressure1.q_out, oxygen_in_air.q_out)
                                                      annotation (Line(
                points={{6,42},{6,50}},
                color={107,45,134},
                thickness=1));
            connect(partialPressure1.q_in, oxygen_unbound.q_out) annotation (Line(
                points={{6,24},{6,8}},
                color={107,45,134},
                thickness=1));
            connect(clock.y, oxygen_in_air.partialPressure) annotation (Line(
                points={{-19,84},{6,84},{6,70}},
                color={0,0,127}));
            connect(gasSolubility.q_in,CO2_liquid. q_out) annotation (Line(
                points={{-34,22},{-34,6}},
                color={107,45,134},
                thickness=1));
            connect(CO2_gas.q_out,gasSolubility. q_out) annotation (Line(
                points={{-34,46},{-34,40}},
                color={107,45,134},
                thickness=1));
            connect(hemoglobin.CO2, CO2_liquid.q_out) annotation (Line(
                points={{-13.6,-59},{-13.6,-23.5},{-34,-23.5},{-34,6}},
                color={107,45,134},
                thickness=1));
            connect(hemoglobin.H, pH.q_out) annotation (Line(
                points={{-6,-54},{26,-54},{26,-10},{52,-10}},
                color={107,45,134},
                thickness=1));
            connect(hemoglobin.O2, oxygen_unbound.q_out) annotation (Line(
                points={{-6,-64},{-10,-64},{-10,8},{6,8}},
                color={107,45,134},
                thickness=1));
            annotation (            experiment(
                StopTime=18000,
                Tolerance=1e-014,
                __Dymola_Algorithm="Euler"), Documentation(revisions=
                          "<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",     info="<html>
<p>[1] Severinghaus JW. Simple, accurate equations for human blood O2 dissociation computations. Journal of Applied Physiology 1979;46:599-602.</p>
</html>"));
          end Hemoglobin_oxygenation;

          model Hemoglobin_titration "Hemoglobin titration experiment"

            import Physiolibrary.Types.*;

           extends Modelica.Icons.Example;

           extends SteadyStates.Interfaces.SteadyStateSystem(
                                                    Simulation=SimulationType.SteadyState);

          //  parameter GasSolubility alpha =  0.0105 * 1e-3 "oxygen solubility in plasma";   // by Siggaard Andersen: 0.0105 (mmol/l)/kPa

            parameter Fraction L = 7.0529*10^6
              "=[T0]/[R0] .. dissociation constant of relaxed <-> tensed change of deoxyhemoglobin tetramer";
            parameter Fraction Ln = 26884.8
              "quaternaly form ratio for specific stripped species of hemoglobin tetramer";
                                           //L*0.00381188                                                                     //"=L*(fnT/fnR)^4 for pH=7.2464 and CO2=0";
            parameter Fraction c = 0.00431555
              "=KR/KT .. ration between oxygen affinities of relaxed vs. tensed subunit";
            parameter Concentration KR = 0.000671946
              "oxygen dissociation on relaxed(R) hemoglobin subunit";
                                                                        //*7.875647668393782383419689119171e-5
                                                                      //10.500001495896 7.8756465463794e-05

            parameter Concentration KT=KR/c
              "oxygen dissociation on tensed(T) hemoglobin subunit";

            parameter AmountOfSubstance totalAmountOfHemoglobin=0.001;

            Components.Substance oxygen_unbound(Simulation=SimulationType.SteadyState,
                solute_start=0.000001*7.875647668393782383419689119171e-5)
              annotation (Placement(transformation(extent={{-4,-2},{16,18}})));
            Modelica.Blocks.Sources.Clock clock(offset=6.7)
              annotation (Placement(transformation(extent={{30,34},{50,54}})));
            Sources.UnlimitedGasStorage oxygen_in_air(
              Simulation=Types.SimulationType.SteadyState,
              usePartialPressureInput=false,
              PartialPressure=0,
              T=310.15,
              isIsolatedInSteadyState=false) annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={6,60})));
            Components.GasSolubility partialPressure1(
              kH_T0(displayUnit="(mmol/l)/kPa at 25degC") = 0.024913516594933,
              T=310.15,
              C=1700) annotation (Placement(transformation(extent={{-10,-10},{
                      10,10}}, origin={6,32})));
            Sources.UnlimitedSolutionStorage pH(
              q_out(conc(nominal=10^(-7.4 + 3))),
              isIsolatedInSteadyState=false,
              Simulation=Types.SimulationType.SteadyState,
              Conc=10^(-7.2464 + 3),
              useConcentrationInput=true) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={62,-10})));
            Sources.UnlimitedGasStorage CO2_gas(
              Simulation=Types.SimulationType.SteadyState,
              usePartialPressureInput=false,
              PartialPressure=0) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={-34,56})));
            Components.GasSolubility gasSolubility(C=2400, kH_T0(displayUnit=
                    "(mmol/l)/kPa at 25degC") = 0.81805576878885) annotation (
                Placement(transformation(extent={{-44,20},{-24,40}})));
            Components.Substance CO2_liquid(Simulation=Types.SimulationType.SteadyState,
                isDependent=true) annotation (Placement(transformation(extent={
                      {-44,-4},{-24,16}})));
            Hemoglobin2 deoxyhemoglobin annotation (Placement(transformation(
                    extent={{-22,-68},{-2,-48}})));
            Types.RealIO.FractionOutput protonation
              "allosteric-dependent protonation"
              annotation (Placement(transformation(extent={{68,-76},{88,-56}})));
            Blocks.Math.Power pow annotation (Placement(transformation(
                  extent={{-4,-4},{4,4}},
                  rotation=270,
                  origin={92,38})));
            Modelica.Blocks.Math.Gain gain(k=-1)
              annotation (Placement(transformation(extent={{62,34},{82,54}})));
            Modelica.Blocks.Math.Gain toMolPerM3(k=1000)
              "from mol/liter to mmol/liter (=mol/m3)" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={92,12})));
          equation

            connect(partialPressure1.q_out, oxygen_in_air.q_out)
                                                      annotation (Line(
                points={{6,42},{6,50}},
                color={107,45,134},
                thickness=1));
            connect(partialPressure1.q_in, oxygen_unbound.q_out) annotation (Line(
                points={{6,24},{6,8}},
                color={107,45,134},
                thickness=1));
            connect(gasSolubility.q_in,CO2_liquid. q_out) annotation (Line(
                points={{-34,22},{-34,6}},
                color={107,45,134},
                thickness=1));
            connect(CO2_gas.q_out,gasSolubility. q_out) annotation (Line(
                points={{-34,46},{-34,40}},
                color={107,45,134},
                thickness=1));
            connect(deoxyhemoglobin.CO2, CO2_liquid.q_out) annotation (Line(
                points={{-9.6,-53},{-9.6,-23.5},{-34,-23.5},{-34,6}},
                color={107,45,134},
                thickness=1));
            connect(clock.y, gain.u) annotation (Line(
                points={{51,44},{60,44}},
                color={0,0,127}));
            connect(gain.y, pow.exponent) annotation (Line(
                points={{83,44},{90,44},{90,42},{89.6,42}},
                color={0,0,127}));
            connect(pH.concentration, toMolPerM3.y) annotation (Line(
                points={{72,-10},{92,-10},{92,1}},
                color={0,0,127}));
            connect(toMolPerM3.u, pow.y) annotation (Line(
                points={{92,24},{92,33.6}},
                color={0,0,127}));
            connect(deoxyhemoglobin.H, pH.q_out) annotation (Line(
                points={{-2,-48},{26,-48},{26,-10},{52,-10}},
                color={107,45,134},
                thickness=1));
            connect(deoxyhemoglobin.O2, oxygen_unbound.q_out) annotation (Line(
                points={{-2,-58},{-6,-58},{-6,8},{6,8}},
                color={107,45,134},
                thickness=1));
            connect(deoxyhemoglobin.protonation, protonation) annotation (Line(
                points={{-20,-67},{-20,-66},{78,-66}},
                color={0,0,127}));
            annotation (            experiment(StopTime=1.3), Documentation(revisions=
                          "<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",     info="<html>
<p>[1] Siggaard-Andersen O, Garby L. The Bohr effect and the Haldane effect. Scandinavian Journal of Clinical &AMP; Laboratory Investigation 1973;31:1-8.</p>
</html>"));
          end Hemoglobin_titration;

          model Hemoglobin_titration_shifts
            "Hemoglobin titration shift caused by full deoxygenation (Bohr protons binding)"
            extends Modelica.Icons.Example;

            Hemoglobin_titration hemoglobin_titration
              annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
            Hemoglobin_titration hemoglobin_titration1(CO2_gas(PartialPressure(
                    displayUnit="kPa") = 1470))
              annotation (Placement(transformation(extent={{-28,60},{-8,80}})));
            Hemoglobin_titration hemoglobin_titration2(CO2_gas(PartialPressure(
                    displayUnit="kPa") = 4530))
              annotation (Placement(transformation(extent={{0,60},{20,80}})));
            Hemoglobin_titration hemoglobin_titration3(CO2_gas(PartialPressure(
                    displayUnit="kPa") = 10670))
              annotation (Placement(transformation(extent={{30,60},{50,80}})));
            Hemoglobin_titration hemoglobin_titration4(CO2_gas(PartialPressure(
                    displayUnit="kPa") = 26660))
              annotation (Placement(transformation(extent={{60,60},{80,80}})));
            Hemoglobin_titration hemoglobin_titration5(oxygen_in_air(
                  PartialPressure=19998.35811225))
              annotation (Placement(transformation(extent={{-60,-26},{-40,-6}})));
            Hemoglobin_titration hemoglobin_titration6(oxygen_in_air(
                  PartialPressure=19998.35811225), CO2_gas(PartialPressure(
                    displayUnit="kPa") = 1470))
              annotation (Placement(transformation(extent={{-28,-26},{-8,-6}})));
            Hemoglobin_titration hemoglobin_titration7(oxygen_in_air(
                  PartialPressure=19998.35811225), CO2_gas(PartialPressure(
                    displayUnit="kPa") = 4530))
              annotation (Placement(transformation(extent={{0,-26},{20,-6}})));
            Hemoglobin_titration hemoglobin_titration8(oxygen_in_air(
                  PartialPressure=19998.35811225), CO2_gas(PartialPressure(
                    displayUnit="kPa") = 10670))
              annotation (Placement(transformation(extent={{30,-26},{50,-6}})));
            Hemoglobin_titration hemoglobin_titration9(oxygen_in_air(
                  PartialPressure=19998.35811225), CO2_gas(PartialPressure(
                    displayUnit="kPa") = 26660))
              annotation (Placement(transformation(extent={{60,-26},{80,-6}})));
            Modelica.Blocks.Math.Feedback dH
              annotation (Placement(transformation(extent={{-54,22},{-34,42}})));
            Modelica.Blocks.Math.Feedback dH1
              annotation (Placement(transformation(extent={{-26,22},{-6,42}})));
            Modelica.Blocks.Math.Feedback dH2
              annotation (Placement(transformation(extent={{10,22},{30,42}})));
            Modelica.Blocks.Math.Feedback dH3
              annotation (Placement(transformation(extent={{36,22},{56,42}})));
            Modelica.Blocks.Math.Feedback dH4
              annotation (Placement(transformation(extent={{70,20},{90,40}})));
          equation
            connect(hemoglobin_titration.protonation, dH.u1) annotation (Line(
                points={{-42.2,63.4},{-42.2,47.7},{-52,47.7},{-52,32}},
                color={0,0,127}));
            connect(dH.u2, hemoglobin_titration5.protonation) annotation (Line(
                points={{-44,24},{-42,24},{-42,-22.6},{-42.2,-22.6}},
                color={0,0,127}));
            connect(hemoglobin_titration1.protonation, dH1.u1) annotation (Line(
                points={{-10.2,63.4},{-10.2,47.7},{-24,47.7},{-24,32}},
                color={0,0,127}));
            connect(dH1.u2, hemoglobin_titration6.protonation) annotation (Line(
                points={{-16,24},{-14,24},{-14,-22.6},{-10.2,-22.6}},
                color={0,0,127}));
            connect(dH2.u2, hemoglobin_titration7.protonation) annotation (Line(
                points={{20,24},{20,-22.6},{17.8,-22.6}},
                color={0,0,127}));
            connect(hemoglobin_titration2.protonation, dH2.u1) annotation (Line(
                points={{17.8,63.4},{17.8,47.7},{12,47.7},{12,32}},
                color={0,0,127}));
            connect(hemoglobin_titration3.protonation, dH3.u1) annotation (Line(
                points={{47.8,63.4},{47.8,46.7},{38,46.7},{38,32}},
                color={0,0,127}));
            connect(dH3.u2, hemoglobin_titration8.protonation) annotation (Line(
                points={{46,24},{47.8,24},{47.8,-22.6}},
                color={0,0,127}));
            connect(hemoglobin_titration4.protonation, dH4.u1) annotation (Line(
                points={{77.8,63.4},{77.8,46.7},{72,46.7},{72,30}},
                color={0,0,127}));
            connect(dH4.u2, hemoglobin_titration9.protonation) annotation (Line(
                points={{80,22},{80,-22.6},{77.8,-22.6}},
                color={0,0,127}));
            annotation (
              experiment(
                StopTime=1.1,
                Tolerance=1e-014,
                __Dymola_Algorithm="Euler"), Documentation(info=
                     "<html>
<p>[1] Siggaard-Andersen O. Oxygen-Linked Hydrogen Ion Binding of Human Hemoglobin. Effects of Carbon Dioxide and 2, 3-Diphosphoglycerate I. Studies on Erythrolysate. Scandinavian Journal of Clinical &AMP; Laboratory Investigation 1971;27:351-60.</p>
</html>"));
          end Hemoglobin_titration_shifts;
        end Develop;

      end Hemoglobin;

      package AcidBase
        model WaterSelfIonization
          "2 H2O  <->  OH-   +   H3O+ (It is better to solve this model using Euler solver, because there is only time dependence/no integration needed/)"
            extends Modelica.Icons.Example;
          Components.Substance H3O(
            q_out(conc(nominal=10^(-7 + 3))),
            Simulation=Types.SimulationType.SteadyState,
            solute_start=10^(-7 + 3))
                              annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                origin={-8,12})));
          SteadyStates.Components.ElementaryChargeConservationLaw electroneutrality(
            Simulation=Types.SimulationType.SteadyState,
            NumberOfParticles=2,
            Total=0,
            Charges={1,-1},
            useTotalInput=true) "strong ion difference of solution"
            annotation (Placement(transformation(extent={{46,-94},{66,-74}})));
          Components.Substance OH(
            q_out(conc(nominal=10^(-7.4 + 3))),
            Simulation=Types.SimulationType.SteadyState,
            solute_start=10^(-7 + 3),
            isDependent=true)         annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                origin={-8,-32})));
          Components.Substance H2O(
            q_out(conc(nominal=5.55e+4)),
            Simulation=Types.SimulationType.SteadyState,
            solute_start(displayUnit="mol") = 1/0.018,
            isDependent=true) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                origin={-82,-12})));
          Components.ChemicalReaction waterDissociation(nP=2,
            s={2},
            K=(1e-8)*((18e-6)^2))
            annotation (Placement(transformation(extent={{-56,-22},{-36,-2}})));
          SteadyStates.Components.MolarConservationLaw tH2O(
            Simulation=Types.SimulationType.SteadyState,
            n=3,
            Total(displayUnit="mol") = 1/0.018) "total water concentration"
            annotation (Placement(transformation(extent={{-48,-74},{-28,-54}})));
          Modelica.Blocks.Sources.Clock SID(offset=-1e-6)
            "strong ions difference with respect to albumin charge shift"
            annotation (Placement(transformation(extent={{52,74},{72,94}})));
          Modelica.Blocks.Math.Gain toColoumn(k(unit="C/s")=-Modelica.Constants.F,  y(unit="C"))
            "from elementary charge to electric charge, which is needed in system"
                                                annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={80,-74})));
        equation
          connect(H2O.q_out, waterDissociation.substrates[1]) annotation (Line(
              points={{-82,-12},{-56,-12}},
              color={107,45,134},
              thickness=1));
          connect(waterDissociation.products[2], H3O.q_out) annotation (Line(
              points={{-36,-11.5},{-26,-11.5},{-26,12},{-8,12}},
              color={107,45,134},
              thickness=1));
          connect(waterDissociation.products[1], OH.q_out) annotation (Line(
              points={{-36,-12.5},{-26,-12.5},{-26,-32},{-8,-32}},
              color={107,45,134},
              thickness=1));
          connect(tH2O.fragment[1], H2O.solute) annotation (Line(
              points={{-48,-69.3333},{-76,-69.3333},{-76,-22}},
              color={0,0,127}));
          connect(OH.solute, tH2O.fragment[2]) annotation (Line(
              points={{-2,-42},{-2,-50},{-76,-50},{-76,-68},{-48,-68}},
              color={0,0,127}));
          connect(H3O.solute, tH2O.fragment[3]) annotation (Line(
              points={{-2,2},{-2,-6},{8,-6},{8,-52},{-72,-52},{-72,-66.6667},{-48,
                  -66.6667}},
              color={0,0,127}));

          connect(SID.y,toColoumn. u) annotation (Line(
              points={{73,84},{100,84},{100,-74},{92,-74}},
              color={0,0,127}));
          connect(toColoumn.y, electroneutrality.total) annotation (Line(
              points={{69,-74},{56,-74},{56,-76}},
              color={0,0,127}));
          connect(H3O.solute, electroneutrality.fragment[1]) annotation (Line(
              points={{-2,2},{-2,-6},{8,-6},{8,-89},{46,-89}},
              color={0,0,127}));
          connect(OH.solute, electroneutrality.fragment[2]) annotation (Line(
              points={{-2,-42},{-2,-87},{46,-87}},
              color={0,0,127}));
          annotation ( Documentation(info="<html>
<p>Self-ionization of water.</p>
<p>Ions difference (SID) in water causes the acidity/basicity, where pH = -log10(aH+). An activity of hydrogen ions aH+ is approximated with concentration (mol/l) of the oxonium cations H3O+.</p>
<pre><b>plotExpression(apply(-log10(WaterSelfIonization.H3O.solute)),&nbsp;false,&nbsp;&QUOT;pH&QUOT;,&nbsp;1);</b></pre>
<p><br>The titration slope der(pH)/der(SID)=1.48e+6 1/(mol/L) at pH=7.4.</p>
</html>",        revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),  experiment(StopTime=2e-006, __Dymola_Algorithm="Euler"));
        end WaterSelfIonization;

        model CarbonDioxideInWater "CO2 as alone acid-base buffer"
            extends Modelica.Icons.Example;
          Components.Substance HCO3(                  Simulation=Types.SimulationType.SteadyState)
            annotation (Placement(transformation(extent={{-18,46},{2,66}})));
          Components.ChemicalReaction HendersonHasselbalch(
            nP=2,
            K=10^(-6.103 + 3),
            nS=1,
            dH(displayUnit="kJ/mol") = 7300)
            annotation (Placement(transformation(extent={{-58,22},{-38,42}})));
          Sources.UnlimitedGasStorage CO2_gas(
              Simulation=Types.SimulationType.SteadyState,
              PartialPressure=5332.8954966)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-80,82})));
          Components.Substance H3O(
            q_out(conc(nominal=10^(-7.4 + 3))),
            Simulation=Types.SimulationType.SteadyState,
            solute_start=10^(-7 + 3)) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                origin={-8,12})));
          Components.GasSolubility gasSolubility(C=2400, kH_T0(displayUnit="(mmol/l)/kPa at 25degC")=
                 0.81805576878885)
            annotation (Placement(transformation(extent={{-90,46},{-70,66}})));
          Components.Substance CO2_liquid(Simulation=Types.SimulationType.SteadyState,
              isDependent=true)
            annotation (Placement(transformation(extent={{-90,22},{-70,42}})));
          SteadyStates.Components.ElementaryChargeConservationLaw electroneutrality(
            Simulation=Types.SimulationType.SteadyState,
            useTotalInput=true,
            NumberOfParticles=3,
            Charges={-1,-2,1},
            Total=2894.560197) "strong ion difference of solution"
            annotation (Placement(transformation(extent={{46,-94},{66,-74}})));
          Components.Substance CO3(
            Simulation=Types.SimulationType.SteadyState,
            isDependent=true,
            solute_start=1e-08)
            annotation (Placement(transformation(extent={{54,46},{74,66}})));
          Components.ChemicalReaction c2(
            nP=2,
            K=10^(-10.33 + 3),
            nS=1,
            dH(displayUnit="kJ/mol") = 14900)
            annotation (Placement(transformation(extent={{16,46},{36,66}})));
          Modelica.Blocks.Math.Gain toColoumn(k(unit="C/s")=-Modelica.Constants.F, y(unit="C"))
            "from elementary charge to to electric charge, which is needed in system"
                                                annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={80,-74})));
          Modelica.Blocks.Sources.Clock SID(offset=-0.01)
            "strong ions difference with respect to albumin charge shift"
            annotation (Placement(transformation(extent={{54,74},{74,94}})));
        equation
          connect(HendersonHasselbalch.products[1], HCO3.q_out) annotation (Line(
              points={{-38,31.5},{-26,31.5},{-26,56},{-8,56}},
              color={107,45,134},
              thickness=1));
          connect(H3O.q_out, HendersonHasselbalch.products[2]) annotation (Line(
              points={{-8,12},{-26,12},{-26,32.5},{-38,32.5}},
              color={107,45,134},
              thickness=1));
          connect(CO2_liquid.q_out, HendersonHasselbalch.substrates[1]) annotation (
             Line(
              points={{-80,32},{-58,32}},
              color={107,45,134},
              thickness=1));
          connect(gasSolubility.q_in, CO2_liquid.q_out) annotation (Line(
              points={{-80,48},{-80,32}},
              color={107,45,134},
              thickness=1));
          connect(CO2_gas.q_out, gasSolubility.q_out) annotation (Line(
              points={{-80,72},{-80,66}},
              color={107,45,134},
              thickness=1));
          connect(HCO3.solute, electroneutrality.fragment[1]) annotation (Line(
              points={{-2,46},{-2,38},{16,38},{16,-89.3333},{46,-89.3333}},
              color={0,0,127}));
          connect(CO3.solute, electroneutrality.fragment[2]) annotation (Line(
              points={{70,46},{70,38},{18,38},{18,-88},{46,-88}},
              color={0,0,127}));
          connect(H3O.solute, electroneutrality.fragment[3]) annotation (Line(
              points={{-2,2},{-2,-6},{22,-6},{22,-86.6667},{46,-86.6667}},
              color={0,0,127}));
          connect(H3O.q_out, c2.products[2]) annotation (Line(
              points={{-8,12},{48,12},{48,56.5},{36,56.5}},
              color={107,45,134},
              thickness=1));
          connect(HCO3.q_out, c2.substrates[1]) annotation (Line(
              points={{-8,56},{16,56}},
              color={107,45,134},
              thickness=1));
          connect(c2.products[1], CO3.q_out) annotation (Line(
              points={{36,55.5},{52,55.5},{52,56},{64,56}},
              color={107,45,134},
              thickness=1));
          connect(SID.y,toColoumn. u) annotation (Line(
              points={{75,84},{100,84},{100,-74},{92,-74}},
              color={0,0,127}));
          connect(electroneutrality.total, toColoumn.y) annotation (Line(
              points={{56,-76},{56,-74},{69,-74}},
              color={0,0,127}));
          annotation ( Documentation(info="<html>
<p>CO2 solution in water without any other acid-base buffers.</p>
<pre><b>plotExpression(apply(-log10(CarbonDioxideInWater.H3O.solute)),&nbsp;false,&nbsp;&QUOT;pH&QUOT;,&nbsp;1);</b></pre>
<p><br>Please note, that OH- (and CO3^-2) can be neglected from electroneutrality calculation, because of very small concentrations (in physiological pH) anyway. </p>
<p>And if SID&GT;0 then also H3O+ can be also neglected from electroneutrality, because only bicarbonate anions HCO3- (or CO3^-2) are needed there to balance the electroneutrality.</p>
<p><br>The partial pressure of CO2 in gas are input parameter. Outputs are an amount of free dissolved CO2 in liquid and an amount of HCO3-.</p>
<p><br>The titration slope der(pH)/der(SID)=17.5 1/(mol/L) at pH=7.4 and pCO2=40 mmHg.</p>
<p><br>Molar heat of formation (aqueous):</p>
<p>CO2:        -413.5 kJ/mol  (gas: -393.5 kJ/mol )</p>
<p>H2O:        -285.8 kJ/mol</p>
<p>HCO3-:        -692.0 kJ/mol</p>
<p>CO3^-2:        -677.1 kJ/mol</p>
<p><br>Enthalphy of reaction H2O + CO2 &LT;-&GT; HCO3- + H+  :         7.3 kJ/mol</p>
<p>Enthalphy of reaction HCO3- &LT;-&GT; CO3^-2 + H+  :        14.9 kJ/mol</p>
</html>",        revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),  experiment(StopTime=0.02, __Dymola_Algorithm="Euler"));
        end CarbonDioxideInWater;

        model AlbuminTitration "Figge-Fencl model (22. Dec. 2007)"
          extends Modelica.Icons.Example;

          Components.Substance H3O(
            q_out(conc(nominal=10^(-7.4 + 3))),
            Simulation=Types.SimulationType.SteadyState,
            solute_start=10^(-7.4 + 3),
            isDependent=true) "hydrogen ions activity" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                origin={14,22})));

          SteadyStates.Components.MolarConservationLaw
            molarConservationLaw[n](
            each n=2,
            each Simulation=Types.SimulationType.SteadyState,
            each Total=0.00066)
            annotation (Placement(transformation(extent={{44,-6},{64,14}})));
          SteadyStates.Components.ElementaryChargeConservationLaw electroneutrality(
            Simulation=Types.SimulationType.SteadyState,
            NumberOfParticles=n,
            Charges=ones(n),
            useTotalInput=true,
            Total=6425.92363734) "strong ion difference of solution"
            annotation (Placement(transformation(extent={{46,-94},{66,-74}})));
          Modelica.Blocks.Math.Gain toColoumn(k(unit="C/s")=-Modelica.Constants.F,y(unit="C"))
            "from elementary charge to to electric charge, which is needed in system"
                                                annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={80,-74})));
          Modelica.Blocks.Sources.Clock SID(offset=-0.0832)
            "strong ions difference with respect to albumin charge shift"
            annotation (Placement(transformation(extent={{54,76},{74,96}})));

          parameter Integer n=218
            "Number of weak acid group in albumin molecule";
          parameter Real pKAs[n]=cat(1,{8.5},fill(4.0,98),fill(11.7,18),fill(12.5,24),fill(5.8,2),fill(6.0,2),{7.6,7.8,7.8,8,8},fill(10.3,50),{7.19,7.29,7.17,7.56,7.08,7.38,6.82,6.43,4.92,5.83,6.24,6.8,5.89,5.2,6.8,5.5,8,3.1})
            "acid dissociation constants";

          Components.Substance A[n](
            each Simulation=Types.SimulationType.SteadyState,
            each isDependent=true,
            each solute_start=0.00033) "deprotonated acid groups"
            annotation (Placement(transformation(extent={{4,-16},{24,4}})));
          Components.ChemicalReaction react[n](each nP=2, K=fill(10.0, n) .^ (-
                pKAs .+ 3))
            annotation (Placement(transformation(extent={{-44,-2},{-24,18}})));

          Components.Substance HA[n](each Simulation=Types.SimulationType.SteadyState,
              each solute_start=0.00033) "protonated acid groups"
            annotation (Placement(transformation(extent={{-76,-2},{-56,18}})));

        equation
          connect(react.products[1], A.q_out) annotation (Line(
              points={{-24,7.5},{-12,7.5},{-12,-6},{14,-6}},
              color={107,45,134},
              thickness=1));
          for i in 1:n loop
            connect(react[i].products[2], H3O.q_out) annotation (Line(
                points={{-24,8.5},{-14,8.5},{-14,22},{14,22}},
                color={107,45,134},
                thickness=1));
          end for;
          connect(HA.q_out, react.substrates[1]) annotation (Line(
              points={{-66,8},{-44,8}},
              color={107,45,134},
              thickness=1));
          connect(A.solute, molarConservationLaw.fragment[1]) annotation (Line(
              points={{20,-16},{20,-20},{36,-20},{36,-1},{44,-1}},
              color={0,0,127}));
          connect(HA.solute, molarConservationLaw.fragment[2]) annotation (Line(
              points={{-60,-2},{-60,-8},{-78,-8},{-78,36},{36,36},{36,0},{44,0},{
                  44,1}},
              color={0,0,127}));
          connect(SID.y,toColoumn. u) annotation (Line(
              points={{75,86},{100,86},{100,-74},{92,-74}},
              color={0,0,127}));
          connect(HA.solute, electroneutrality.fragment) annotation (Line(
              points={{-60,-2},{-60,-88},{46,-88}},
              color={0,0,127}));
          connect(toColoumn.y, electroneutrality.total) annotation (Line(
              points={{69,-74},{56,-74},{56,-76}},
              color={0,0,127}));
          annotation ( Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",         info="<html>
<pre><b>plotExpression(apply(-log10(AlbuminTitration.H3O.solute)),&nbsp;false,&nbsp;&QUOT;pH&QUOT;,&nbsp;1);</b></pre>
<p>The titration slope der(pH)/der(SID)=185 1/(mol/L) at pH=7.4 and tAlb=0.66 mmol/l.</p>
<p><br>Data and model is described in</p>
<p><font style=\"color: #222222; \">Jame Figge: Role of non-volatile weak acids (albumin, phosphate and citrate). In: Stewart&apos;s Textbook of Acid-Base, 2nd Edition, John A. Kellum, Paul WG Elbers editors, &nbsp;AcidBase org, 2009, pp. 216-232.</font></p>
</html>"),  experiment(
              StopTime=0.0235,
              __Dymola_fixedstepsize=5e-005,
              __Dymola_Algorithm="Euler"));
        end AlbuminTitration;

        model Phosphate
            extends Modelica.Icons.Example;

          parameter Types.Concentration totalPO4=0.00115
            "Total phosphate concentration";

          Modelica.Blocks.Math.Log10 minusPh "value of minus pH"
            annotation (Placement(transformation(extent={{64,-20},{84,0}})));

          Modelica.Blocks.Sources.Clock SID(offset=0)
            "strong ions difference with respect to albumin charge shift"
            annotation (Placement(transformation(extent={{44,74},{64,94}})));

          Components.Substance H(
            q_out(conc(nominal=10^(-7.4 + 3))),
            Simulation=Types.SimulationType.SteadyState,
            solute_start=10^(-7.4 + 3),
            isDependent=true) "hydrogen ions activity" annotation (Placement(
                transformation(extent={{-10,-10},{10,10}}, origin={36,-12})));

          Components.Substance H3PO4(
            Simulation=Types.SimulationType.SteadyState,
            isDependent=true,
            solute_start=1e-08) annotation (Placement(transformation(extent={{-98,
                    -58},{-78,-38}})));
          Components.Substance H2PO4(Simulation=Types.SimulationType.SteadyState,
              solute_start=0.0005) annotation (Placement(transformation(extent=
                    {{-44,-58},{-24,-38}})));
          Components.Substance HPO4(Simulation=Types.SimulationType.SteadyState,
              solute_start=0.0006)
            annotation (Placement(transformation(extent={{16,-58},{36,-38}})));
          Components.Substance PO4(Simulation=Types.SimulationType.SteadyState,
              solute_start=1e-08)
            annotation (Placement(transformation(extent={{72,-58},{92,-38}})));

          Components.ChemicalReaction chemicalReaction(nP=2, K=10^(-1.915 + 3))
            annotation (Placement(transformation(extent={{-70,-58},{-50,-38}})));
          Components.ChemicalReaction chemicalReaction1(nP=2, K=10^(-6.66 + 3))
            annotation (Placement(transformation(extent={{-14,-58},{6,-38}})));
          Components.ChemicalReaction chemicalReaction2(nP=2, K=10^(-11.78 + 3))
            annotation (Placement(transformation(extent={{44,-58},{64,-38}})));
          SteadyStates.Components.MolarConservationLaw tP04(
            each Simulation=Types.SimulationType.SteadyState,
            each n=4,
            each Total=totalPO4*1)
            annotation (Placement(transformation(extent={{-28,-90},{-8,-70}})));

          SteadyStates.Components.ElementaryChargeConservationLaw
            electroneutrality(
            Simulation=Types.SimulationType.SteadyState,
            Total(displayUnit="meq") = 3502.41783837,
            useTotalInput=true,
            NumberOfParticles=3,
            Charges={-1,-2,-3})
            annotation (Placement(transformation(extent={{48,-94},{68,-74}})));

          Modelica.Blocks.Math.Gain toColoumn(k(unit="C/s")=Modelica.Constants.F,y(unit="C"))
            "from elementary charge to Coloumn" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={84,-86})));

        equation
          connect(H3PO4.q_out, chemicalReaction.substrates[1]) annotation (Line(
              points={{-88,-48},{-70,-48}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction.products[1], H2PO4.q_out) annotation (Line(
              points={{-50,-48.5},{-42,-48.5},{-42,-48},{-34,-48}},
              color={107,45,134},
              thickness=1));
          connect(H2PO4.q_out, chemicalReaction1.substrates[1]) annotation (Line(
              points={{-34,-48},{-14,-48}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction1.products[1], HPO4.q_out) annotation (Line(
              points={{6,-48.5},{16,-48.5},{16,-48},{26,-48}},
              color={107,45,134},
              thickness=1));
          connect(HPO4.q_out, chemicalReaction2.substrates[1]) annotation (Line(
              points={{26,-48},{44,-48}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction2.products[1], PO4.q_out) annotation (Line(
              points={{64,-48.5},{74,-48.5},{74,-48},{82,-48}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction.products[2], H.q_out) annotation (Line(
              points={{-50,-47.5},{-44,-47.5},{-44,-32},{36,-32},{36,-12}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction1.products[2], H.q_out) annotation (Line(
              points={{6,-47.5},{14,-47.5},{14,-32},{36,-32},{36,-12}},
              color={107,45,134},
              thickness=1));
          connect(chemicalReaction2.products[2], H.q_out) annotation (Line(
              points={{64,-47.5},{72,-47.5},{72,-32},{36,-32},{36,-12}},
              color={107,45,134},
              thickness=1));
          connect(H3PO4.solute, tP04.fragment[1]) annotation (Line(
              points={{-82,-58},{-82,-86},{-28,-86},{-28,-85.5}},
              color={0,0,127}));
          connect(H2PO4.solute, tP04.fragment[2]) annotation (Line(
              points={{-28,-58},{-28,-62},{-64,-62},{-64,-84.5},{-28,-84.5}},
              color={0,0,127}));
          connect(HPO4.solute, tP04.fragment[3]) annotation (Line(
              points={{32,-58},{32,-64},{-50,-64},{-50,-83.5},{-28,-83.5}},
              color={0,0,127}));
          connect(PO4.solute, tP04.fragment[4]) annotation (Line(
              points={{88,-58},{88,-68},{-40,-68},{-40,-82.5},{-28,-82.5}},
              color={0,0,127}));
          connect(H.solute, minusPh.u) annotation (Line(
              points={{42,-22},{42,-26},{54,-26},{54,-10},{62,-10}},
              color={0,0,127}));
          connect(SID.y, toColoumn.u) annotation (Line(
              points={{65,84},{100,84},{100,-86},{96,-86}},
              color={0,0,127}));
          connect(toColoumn.y, electroneutrality.total) annotation (Line(
              points={{73,-86},{70,-86},{70,-76},{58,-76}},
              color={0,0,127}));
          connect(H2PO4.solute, electroneutrality.fragment[1]) annotation (Line(
              points={{-28,-58},{-28,-62},{24,-62},{24,-89.3333},{48,-89.3333}},
              color={0,0,127}));
          connect(HPO4.solute, electroneutrality.fragment[2]) annotation (Line(
              points={{32,-58},{32,-88},{48,-88}},
              color={0,0,127}));
          connect(PO4.solute, electroneutrality.fragment[3]) annotation (Line(
              points={{88,-58},{88,-68},{28,-68},{28,-86.6667},{48,-86.6667}},
              color={0,0,127}));
          annotation ( Documentation(info="<html>
<p>Henderson-Hasselbalch equation in ideal buffered solution, where pH remains constant.</p>
<p>The partial pressure of CO2 in gas are input parameter. Outputs are an amount of free dissolved CO2 in liquid and an amount of HCO3-.</p>
</html>",        revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),  experiment(StopTime=0.05));
        end Phosphate;

        class Develop
          extends Modelica.Icons.UnderConstruction;
          model PlasmaAcidBase

            Components.Substance H3O(
              q_out(conc(nominal=10^(-7.4 + 3))),
              Simulation=Types.SimulationType.SteadyState,
              solute_start=10^(-7.4 + 3),
              isDependent=true) "hydrogen ions activity" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  origin={38,40})));

            SteadyStates.Components.MolarConservationLaw tAlb[n](
              each n=2,
              each Simulation=Types.SimulationType.SteadyState,
              each Total=0.00066)
              annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
            SteadyStates.Components.ElementaryChargeConservationLaw electroneutrality(
              Simulation=Types.SimulationType.SteadyState,
              useTotalInput=true,
              Charges=cat(
                  1,
                  {-1,-1,-2,-1},
                  ones(n)),
              NumberOfParticles=m + n,
              Total=6425.92363734) "strong ion difference of solution"
              annotation (Placement(transformation(extent={{46,-94},{66,-74}})));
            Modelica.Blocks.Math.Gain toColoumn(k(unit="C/s")=-Modelica.Constants.F,y(unit="C"))
              "from elementary charge to to electric charge, which is needed in system"
                                                  annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=180,
                  origin={78,-70})));
            Modelica.Blocks.Sources.Clock SID_less_Cl(offset=-0.0832)
              "strong ions difference without chloride with respect to albumin charge shift"
              annotation (Placement(transformation(extent={{68,-42},{88,-22}})));

            constant Integer m=4
              "number of particle types in electroneutrality equation";

            parameter Boolean isDependent[3] = {false,false,false};

            parameter Types.AmountOfSubstance totalPO4=0.00115
              "Total phosphate concentration";
            parameter Types.AmountOfSubstance totalAlb=0.00066
              "Total albumin concentration";

            parameter Integer n=218
              "Number of weak acid group in albumin molecule";
            parameter Real pKAs[n]=cat(1,{8.5},fill(4.0,98),fill(11.7,18),fill(12.5,24),fill(5.8,2),fill(6.0,2),{7.6,7.8,7.8,8,8},fill(10.3,50),{7.19,7.29,7.17,7.56,7.08,7.38,6.82,6.43,4.92,5.83,6.24,6.8,5.89,5.2,6.8,5.5,8,3.1})
              "acid dissociation constants";

            Components.Substance A[n](
              each Simulation=Types.SimulationType.SteadyState,
              each isDependent=true,
              each solute_start=0.00033) "deprotonated acid groups"
              annotation (Placement(transformation(extent={{-10,14},{10,34}})));
            Components.ChemicalReaction react[n](each nP=2, K=fill(10.0, n) .^
                  (-pKAs .+ 3)) annotation (Placement(transformation(extent={{-44,
                      16},{-24,36}})));

            Components.Substance HA[n](each Simulation=Types.SimulationType.SteadyState,
                each solute_start=0.00033) "protonated acid groups" annotation (
               Placement(transformation(extent={{-76,16},{-56,36}})));

            Components.Substance CO2_liquid(Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[1])
              annotation (Placement(transformation(extent={{-76,64},{-56,84}})));
            Components.Substance HCO3(                  Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[2])
              annotation (Placement(transformation(extent={{42,70},{62,90}})));
            Interfaces.ChemicalPort_a substances[3]
              "{free dissolved CO2, bicarbonate, chloride}"
              annotation (Placement(transformation(extent={{-10,70},{10,90}})));
            Components.Substance                        H2PO4(Simulation=Types.SimulationType.SteadyState,
                solute_start=0.0005)
              annotation (Placement(transformation(extent={{-62,-54},{-42,-34}})));
            Components.ChemicalReaction phosphateAcidification(nP=2, K=10^(-6.66 + 3))
              annotation (Placement(transformation(extent={{-32,-54},{-12,-34}})));
            Components.Substance                        HPO4(Simulation=Types.SimulationType.SteadyState,
              isDependent=true,
              solute_start=0.0006)
              annotation (Placement(transformation(extent={{-2,-54},{18,-34}})));
            SteadyStates.Components.MolarConservationLaw               tP04(
              each Simulation=Types.SimulationType.SteadyState,
              each n=2,
              each Total=totalPO4)
              annotation (Placement(transformation(extent={{-28,-80},{-8,-60}})));
            Components.Substance Cl(Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[3]) "chloride anion"
              annotation (Placement(transformation(extent={{76,42},{96,62}})));
          equation
            connect(react.products[1], A.q_out) annotation (Line(
                points={{-24,25.5},{-12,25.5},{-12,24},{0,24}},
                color={107,45,134},
                thickness=1));
            for i in 1:n loop
              connect(react[i].products[2], H3O.q_out) annotation (Line(
                  points={{-24,26.5},{-14,26.5},{-14,40},{38,40}},
                  color={107,45,134},
                  thickness=1));
            end for;
            connect(HA.q_out, react.substrates[1]) annotation (Line(
                points={{-66,26},{-44,26}},
                color={107,45,134},
                thickness=1));
            connect(A.solute, tAlb.fragment[1]) annotation (Line(
                points={{6,14},{6,10},{-54,10},{-54,-5},{-40,-5}},
                color={0,0,127}));
            connect(HA.solute, tAlb.fragment[2]) annotation (Line(
                points={{-60,16},{-60,-4},{-40,-4},{-40,-3}},
                color={0,0,127}));
            connect(toColoumn.y, electroneutrality.total) annotation (Line(
                points={{69.2,-70},{56,-70},{56,-76}},
                color={0,0,127}));
            connect(substances[1], CO2_liquid.q_out) annotation (Line(
                points={{0,73.3333},{0,74},{-66,74}},
                color={107,45,134},
                thickness=1));
            connect(HCO3.q_out, substances[2]) annotation (Line(
                points={{52,80},{0,80}},
                color={107,45,134},
                thickness=1));
            connect(H2PO4.q_out, phosphateAcidification.substrates[1]) annotation (Line(
                points={{-52,-44},{-32,-44}},
                color={107,45,134},
                thickness=1));
            connect(phosphateAcidification.products[1], HPO4.q_out) annotation (Line(
                points={{-12,-44.5},{-2,-44.5},{-2,-44},{8,-44}},
                color={107,45,134},
                thickness=1));
            connect(H2PO4.solute, tP04.fragment[1]) annotation (Line(
                points={{-46,-54},{-46,-75},{-28,-75}},
                color={0,0,127}));
            connect(HPO4.solute, tP04.fragment[2]) annotation (Line(
                points={{14,-54},{14,-60},{-40,-60},{-40,-73},{-28,-73}},
                color={0,0,127}));
            connect(phosphateAcidification.products[2], H3O.q_out) annotation (Line(
                points={{-12,-43.5},{-4,-43.5},{-4,-28},{20,-28},{20,40},{38,40}},
                color={107,45,134},
                thickness=1));
            connect(HCO3.solute, electroneutrality.fragment[1]) annotation (Line(
                points={{58,70},{58,-62},{32,-62},{32,-88},{46,-88}},
                color={0,0,127}));
            connect(H2PO4.solute, electroneutrality.fragment[2]) annotation (Line(
                points={{-46,-54},{-46,-86},{46,-86},{46,-88}},
                color={0,0,127}));
            connect(HPO4.solute, electroneutrality.fragment[3]) annotation (Line(
                points={{14,-54},{14,-88},{46,-88}},
                color={0,0,127}));
            connect(Cl.q_out, substances[3]) annotation (Line(
                points={{86,52},{0,52},{0,86.6667}},
                color={107,45,134},
                thickness=1));
            connect(HA.solute, electroneutrality.fragment[(m+1):(n+m)]) annotation (Line(
                points={{-60,16},{-60,-88},{46,-88}},
                color={0,0,127}));
            connect(SID_less_Cl.y, toColoumn.u) annotation (Line(
                points={{89,-32},{92,-32},{92,-70},{87.6,-70}},
                color={0,0,127}));
            connect(Cl.solute, electroneutrality.fragment[4]) annotation (Line(
                points={{92,42},{92,10},{54,10},{54,-64},{34,-64},{34,-88},{46,
                    -88}},
                color={0,0,127}));
            annotation ( Documentation(revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",           info="<html>
<pre><b>plotExpression(apply(-log10(AlbuminTitration.H3O.solute)),&nbsp;false,&nbsp;&QUOT;pH&QUOT;,&nbsp;1);</b></pre>
<p>The titration slope der(pH)/der(SID)=185 1/(mol/L) at pH=7.4 and tAlb=0.66 mmol/l.</p>
<p><br>Data and model is described in</p>
<p><font style=\"color: #222222; \">Jame Figge: Role of non-volatile weak acids (albumin, phosphate and citrate). In: Stewart&apos;s Textbook of Acid-Base, 2nd Edition, John A. Kellum, Paul WG Elbers editors, &nbsp;AcidBase org, 2009, pp. 216-232.</font></p>
</html>"),    experiment(
                StopTime=0.0235,
                __Dymola_fixedstepsize=5e-005,
                __Dymola_Algorithm="Euler"));
          end PlasmaAcidBase;

          model ErythrocyteAcidBase
            parameter Boolean isDependent[4] = {false,false,false,false};

            Components.Substance H3O(
              q_out(conc(nominal=10^(-7.4 + 3))),
              Simulation=Types.SimulationType.SteadyState,
              solute_start=10^(-7.4 + 3),
              isDependent=isDependent[4]) "hydrogen ions activity" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  origin={-12,36})));
            Components.ChemicalReaction HendersonHasselbalch(
              nP=2,
              dH=15.13,
              K=10^(-6.103 + 3),
              nS=1)
              annotation (Placement(transformation(extent={{-60,46},{-40,66}})));
            Components.Substance CO2_liquid(Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[1])
              annotation (Placement(transformation(extent={{-90,46},{-70,66}})));
            Components.Substance HCO3(                  Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[2])
              annotation (Placement(transformation(extent={{-22,70},{-2,90}})));
            Interfaces.ChemicalPort_a substances[3]
              "{free dissolved CO2, bicarbonate, chloride}"
              annotation (Placement(transformation(extent={{-90,70},{-70,90}})));
            Components.Substance Cl(Simulation=Types.SimulationType.SteadyState,
                isDependent=isDependent[3]) "chloride anion"
              annotation (Placement(transformation(extent={{76,82},{96,102}})));
          equation
            connect(HendersonHasselbalch.products[1],HCO3. q_out) annotation (Line(
                points={{-40,55.5},{-30,55.5},{-30,80},{-12,80}},
                color={107,45,134},
                thickness=1));
            connect(H3O.q_out,HendersonHasselbalch. products[2]) annotation (Line(
                points={{-12,36},{-30,36},{-30,56.5},{-40,56.5}},
                color={107,45,134},
                thickness=1));
            connect(CO2_liquid.q_out,HendersonHasselbalch. substrates[1]) annotation (
               Line(
                points={{-80,56},{-60,56}},
                color={107,45,134},
                thickness=1));
            connect(substances[1], CO2_liquid.q_out) annotation (Line(
                points={{-80,73.3333},{-80,56}},
                color={107,45,134},
                thickness=1));
            connect(HCO3.q_out, substances[2]) annotation (Line(
                points={{-12,80},{-80,80}},
                color={107,45,134},
                thickness=1));
            connect(Cl.q_out, substances[3]) annotation (Line(
                points={{86,92},{-80,92},{-80,86.6667}},
                color={107,45,134},
                thickness=1));
          end ErythrocyteAcidBase;

          model BloodAcidBase
            PlasmaAcidBase plasmaAcidBase
              annotation (Placement(transformation(extent={{-34,-6},{-14,14}})));
            Develop.ErythrocyteAcidBase erythrocyteAcidBase
              annotation (Placement(transformation(extent={{56,-6},{76,14}})));
            Components.Membrane membrane(NumberOfParticles=3)
              annotation (Placement(transformation(extent={{14,2},{34,22}})));
          equation
            connect(plasmaAcidBase.substances, membrane.particlesInside)
              annotation (Line(
                points={{-24,12},{14,12}},
                color={107,45,134},
                thickness=1));
            connect(membrane.particlesOutside, erythrocyteAcidBase.substances)
              annotation (Line(
                points={{34,12},{58,12}},
                color={107,45,134},
                thickness=1));
          end BloodAcidBase;
        end Develop;
      end AcidBase;
    end Examples;

    package Components
      extends Modelica.Icons.Package;
      model Substance "Substance accumulation in solution"
        extends Icons.Substance;
        extends Interfaces.ConditionalVolume;

        extends SteadyStates.Interfaces.SteadyState(
        state(nominal=NominalSolute),
        change(nominal=NominalSolute/60),
        state_start=solute_start,
        storeUnit="mmol");

        parameter Types.AmountOfSubstance solute_start(nominal=NominalSolute) = 1e-8
          "Initial solute amount in compartment"
           annotation ( HideResult=true, Dialog(group="Initialization"));

        Types.RealIO.AmountOfSubstanceOutput solute(nominal=
            NominalSolute) "Current amount of solute"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));

        parameter Types.AmountOfSubstance NominalSolute = 0.001
          "Numerical scale. Default is from mmol to mol, but for some substances such as hormones, hydronium or hydroxide ions can be much smaller."
            annotation ( HideResult=true, Dialog(tab="Solver",group="Numerical support of very small concentrations"));

        Interfaces.ChemicalPort_b q_out(conc(start=solute_start/NormalVolume))
          "Concentration and molar flow from/to compartment"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

        parameter Types.MolarEnergy dH=0 "Standard Enthalpy Change"
          annotation ( HideResult=true, Dialog(tab="Energies"));

        Types.RealIO.EnergyOutput internalHeat
          "Internal heat energy = enthalpy*amountOfSubstance" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              origin={116,-40})));
      equation
        q_out.conc = solute/volume;

        state = solute; // der(solute)=q_out.q
        change = q_out.q;

        internalHeat = dH*solute;

                                                                                                          annotation (
          Icon(coordinateSystem(
                preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-80,90},{280,130}},
                lineColor={0,0,255},
                textString="%name")}),
          Documentation(revisions="<html>
<p>2009-2015 by Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<h4>Solute = Concentration &middot; Volume = &int; MolarFlow</h4>
<p>The main class from &ldquo;Chemical&rdquo; package is called &QUOT;Substance&QUOT;. It has one chemical connector, where molar concentration and molar flow is presented as usually. An amount of a substance (&QUOT;solute&QUOT;) is accumulated by molar flow inside an instance of this class. In the default setting the volume is set to one liter, so in this setting the concentration at &ldquo;mol/L&rdquo; has the same value as the variable solute at &ldquo;mol&rdquo;. But in the advanced settings the default volume can be changed with external input. The molar flow at the port can be also negative, which means that the solute leaves the Substance instance.&nbsp;</p>
<p><br>Having defined amount of all particles in solution as n(solution) and mass of solvent as m(solvent). It can be expressed mole fraction x and molality b as follows:</p>
<p><b>x = Solute / n(solution) = Concentration &middot; Volume /n(solution)</b></p>
<p><b>b = Solute / m(solvent) = Concentration &middot; Volume /m(solvent)</b></p>
<p><br>The activity (mole fraction based) can be expressed using mole-fraction-based activity coefficient gamma as:</p>
<h4>a = gamma * x</h4>
</html>"));
      end Substance;

      model ChemicalReaction "Chemical Reaction"
        import Physiolibrary;

        Real KaT "Dissociation constant at current temperature";
        Types.MolarFlowRate rr "Reaction molar flow rate";

        extends Physiolibrary.Chemical.Interfaces.ConditionalVolume;

        parameter Boolean useDissociationConstantInput = false
          "=true, if external dissociation ratio is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Boolean useForwardRateInput = false
          "=true, if external forward rate is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        Modelica.Blocks.Interfaces.RealInput dissociationConstant(start=K) = KBase if useDissociationConstantInput
          "Dissociation coefficient [SI-unit]"
                                            annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40})));

        Physiolibrary.Chemical.Interfaces.ChemicalPort_b products[nP]
          "Products"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));

        Physiolibrary.Chemical.Interfaces.ChemicalPort_a substrates[nS]
          "Substrates"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));

        parameter Real K = 1
          "Fixed dissociation constant [SI-unit] if useDissociationConstantInput=false"
          annotation ( HideResult=true, Dialog(enable=not useDissociationConstantInput));

        parameter Real kf = 10^8 "Forward reaction rate coefficient [SI unit]"
          annotation ( HideResult=true, Dialog(enable=not useForwardRateInput));
        //  annotation (Dialog(group="Parameters")); //forward K*(10^rateLevel) at temperature TK

        parameter Integer nS=1 "Number of substrates types"
          annotation ( HideResult=true, Dialog(group="Substrates", tab="Reaction type"));
        parameter Integer nP=1 "Number of products types"
          annotation ( HideResult=true, Dialog(group="Products", tab="Reaction type"));

        parameter Types.StoichiometricNumber s[nS]=ones(nS)
          "Stoichiometric reaction coefficient for substrates"
          annotation (  HideResult=true, Dialog(group="Substrates", tab="Reaction type"));
        parameter Modelica.SIunits.ActivityCoefficient as[nS]=ones(nS)
          "Activity coefficients of substrates"
          annotation ( HideResult=true, Dialog(group="Substrates", tab="Reaction type"));

        parameter Types.StoichiometricNumber p[nP]=ones(nP)
          "Stoichiometric reaction coefficients for products"
          annotation ( HideResult=true, Dialog(group="Products", tab="Reaction type"));
         parameter Modelica.SIunits.ActivityCoefficient ap[nP]=ones(nP)
          "Activity coefficients of products"
          annotation ( HideResult=true, Dialog(group="Products", tab="Reaction type"));

       extends Physiolibrary.Chemical.Interfaces.ConditionalHeatPort;

        parameter Types.Temperature TK=298.15 "Base temperature"
          annotation ( HideResult=true, Dialog(tab="Temperature dependence"));

        parameter Types.MolarEnergy dH=0
          "Standard Enthalpy Change (negative=exothermic)"
          annotation ( HideResult=true, Dialog(tab="Temperature dependence"));

        parameter Types.Fraction solventFraction=1
          "Free solvent fraction in liquid (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";

        Real KBase "dissociation constant at TK" annotation (HideResult=true);

        Real forwardRate;
      protected
        parameter Types.Fraction fsp=solventFraction^(sum(s)+sum(p));
        parameter Types.Fraction fs=solventFraction^(sum(s));
        parameter Types.Fraction fp=solventFraction^(sum(p));

      public
        Modelica.Blocks.Interfaces.RealInput forwardRateCoefficient(start=kf)=forwardRate if
                                                                                      useForwardRateInput
          "Reaction forward rate coefficient [SI-unit]" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={40,40})));
      equation
        if not useDissociationConstantInput then
          KBase = K;
        end if;
        if not useForwardRateInput then
          forwardRate = kf;
        end if;

        KaT = KBase * Modelica.Math.exp(((-dH)/Modelica.Constants.R)*(1/T_heatPort - 1/TK));  //Hoff's equation
        //this Hoff's equation is valid in gases reactions with the same number of substrates and products and plus-minus in liquid solutions.
        //for gaseous reaction with dn!=0 (stoichoimetry difference, i.e. the stoichiometru number of products minus the stoichiometry number of reactants) is the Van't Hoff's energy (dE) different from enthalphy of reaction (DH): dE=dH-dn*R*T (Ref: D. M. Golden, "Standard states for thermochemical and activation parameters," Journal of Chemical Education, vol. 48, p. 235, 1971/04/01 1971.)

        rr*fsp = forwardRate*volume*(product((as.*substrates.conc).^s)*fp - (1/KaT)*product((ap.*products.conc).^p)*fs);  //Elementary first-order rate kinetics - the main equation

        lossHeat = -dH*rr; //dH<0 => Exothermic => lossHeat>0, Endothermic otherwise

        rr*s = substrates.q;
        rr*p = -products.q;

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={
              Rectangle(
                extent={{-100,-30},{100,30}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-128,-66},{142,-40}},
                textString="%name",
                lineColor={0,0,255}),
              Polygon(
                points={{-60,6},{-60,4},{54,4},{54,4},{18,14},{18,6},{-60,6}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{54,-8},{54,-6},{-60,-6},{-60,-6},{-24,-16},{-24,-8},{54,-8}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<p><i>2013-2015 by </i>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p><b>s<sub>1</sub>&middot;S<sub>1</sub> + .. + s<sub>nS</sub>&middot;S<sub>nS</sub> &LT;-&GT; p<sub>1</sub>&middot;P<sub>1</sub> + .. + p<sub>nP</sub>&middot;P<sub>nP</b></sub> </p>
<h4><span style=\"color:#008000\">Relations</span></h4>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>k<sub>f</sub>&middot;volume&middot;<a href=\"modelica://ModelicaReference.Operators.'product()'\">product</a>(S<a href=\"ModelicaReference.Operators.ElementaryOperators\">.^</a>s)</p></td>
<td><p>forward rate</p></td>
</tr>
<tr>
<td><p>k<sub>b</sub>&middot;volume&middot;<a href=\"modelica://ModelicaReference.Operators.'product()'\">product</a>(P<a href=\"ModelicaReference.Operators.ElementaryOperators\">.^</a>p)</p></td>
<td><p>backward rate</p></td>
</tr>
<tr>
<td><p>K<sub>aT</sub> = k<sub>f</sub>/k<sub>b</sub> = <a href=\"modelica://ModelicaReference.Operators.'product()'\">product</a>(P<a href=\"ModelicaReference.Operators.ElementaryOperators\">.^</a>p) / <a href=\"modelica://ModelicaReference.Operators.'product()'\">product</a>(S<a href=\"ModelicaReference.Operators.ElementaryOperators\">.^</a>s)&nbsp;</p></td>
<td><p>equilibrium</p></td>
</tr>
<tr>
<td><p><a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(K<sub>aT</sub>/K<sub>Base</sub>) = (-&Delta;H/<a href=\"modelica://Modelica.Constants\">R</a>)&middot;(1/T<sub>heatPort</sub> - 1/T<sub>K</sub>)&nbsp;</p></td>
<td><p>van&apos;t Hoff&apos;s equation</p></td>
</tr>
<tr>
<td><p>&Delta;<sub>r</sub>G<sup>0</sup>= &Delta;H - T&middot;&Delta;S = -R&middot;T&middot;<a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(K<sub>aT</sub>) </p></td>
<td><p>Gibb&apos;s energy </p></td>
</tr>
<tr>
<td><p>&Delta;S = <a href=\"modelica://Modelica.Constants\">k</a>&middot;<a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(&omega;) </p></td>
<td><p>entropy </p></td>
</tr>
</table>
<h4><span style=\"color:#008000\">Notations</span></h4>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>S<sub>i</sub></p></td>
<td><p>molar concentration of i-th substrate</p></td>
</tr>
<tr>
<td><p>s<sub>i</sub></p></td>
<td><p>stochiometric coefficients of i-th substrate</p></td>
</tr>
<tr>
<td><p>nS</p></td>
<td><p>number of substrates</p></td>
</tr>
<tr>
<td><p>P<sub>j</sub></p></td>
<td><p>molar concentration of j-th product</p></td>
</tr>
<tr>
<td><p>p<sub>j</sub></p></td>
<td><p>stochiometric coefficients of j-th product</p></td>
</tr>
<tr>
<td><p>nP</p></td>
<td><p>number of products</p></td>
</tr>
<tr>
<td><p>K<sub>aT</sub></p></td>
<td><p>dissociation constant at current temperature T</p></td>
</tr>
<tr>
<td><p>k<sub>f</sub></p></td>
<td><p>forward rate coefficient at current temperature T</p></td>
</tr>
<tr>
<td><p>k<sub>b</sub></p></td>
<td><p>backward rate coefficient at current temperature T</p></td>
</tr>
<tr>
<td><p>volume &nbsp;</p></td>
<td><p>solution volume</p></td>
</tr>
<tr>
<td><p>&Delta;H</p></td>
<td><p>enthalpy of the reaction</p></td>
</tr>
<tr>
<td><p>T<sub>heatPort</sub></p></td>
<td><p>current temperature T</p></td>
</tr>
<tr>
<td><p>K<sub>Base</sub></p></td>
<td><p>tabulated dissociation constant at base temperature T<sub>K</sub></p></td>
</tr>
<tr>
<td><p>T<sub>K</sub></p></td>
<td><p>base temperature of tabulated coefficients</p></td>
</tr>
<tr>
<td><p>&omega;</p></td>
<td><p>change of number of microstates of particles</p></td>
</tr>
<tr>
<td><p>&Delta;S</p></td>
<td><p>entropy of the reaction</p></td>
</tr>
<tr>
<td><p>&Delta;<sub>r</sub>G<sup>0</sup></p></td>
<td><p>Gibb&apos;s energy of the reaction</p></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</table>
</html>"));
      end ChemicalReaction;

      model GasSolubility "Henry's law of gas solubility in liquid."
         //q_in is dissolved in liquid and q_out is in gaseous solution"

        extends Icons.GasSolubility;
        extends Interfaces.ConditionalHeatPort;

        parameter Types.DiffusionPermeability solubilityRateCoef=0.01
          "The rate constant of incoming gas to solution (default 10 liter per second)"
                                                                                       annotation ( HideResult=true);

        Types.GasSolubility kH
          "Henry's law coefficient such as liquid-gas concentration ratio";

        parameter Types.GasSolubility kH_T0
          "Henry's law coefficient at base temperature (i.e. in (mmol/l)/kPa at 25degC: aO2=0.011, aCO2=0.245, ..)"
                                                                                                      annotation ( HideResult=true);
        parameter Types.Temperature T0=298.15 "Base temperature for kH_T0"
           annotation (HideResult=true,Dialog(tab="Temperature dependence"));
        parameter Types.Temperature C(displayUnit="K")
          "Gas-liquid specific constant for Van't Hoff's change of kH (i.e.: O2..1700K,CO2..2400K,N2..1300K,CO..1300K,..)"
          annotation (HideResult=true,Dialog(tab="Temperature dependence"));

        parameter Types.Fraction solventFraction=1
          "Free solvent fraction in liquid (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";

        Interfaces.ChemicalPort_b q_out "Gaseous solution"
          annotation (Placement(transformation(extent={{-10,90},{10,110}})));

        Interfaces.ChemicalPort_a q_in "Dissolved in liquid solution"
          annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));
      equation
        q_in.q + q_out.q = 0;

        kH = kH_T0 * Modelica.Math.exp(C* (1/T_heatPort - 1/T0)); // Van't Hoff equation

        // equilibrium:  liquid.conc = kH * gas.conc;
        q_out.q = solubilityRateCoef*(kH * q_out.conc - q_in.conc/solventFraction); //negative because of outflow

        lossHeat = C*Modelica.Constants.R*q_out.q; //negative = heat are comsumed when change from liquid to gas

         annotation (Documentation(revisions="<html>
<p><i>2009-2015 by </i>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p><b>Concentration<sub>Liquid</sub> = k<sub>H</sub> &middot; Concentration<sub>Gas</b></sub></p>
<p>Henry&apos;s law: The concentration of the gas in the liquid is proportional to the partial pressure of the gas during equilibrium. </p>
<h4><span style=\"color:#008000\">Relations</span></h4>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>k<sub>d</sub>&middot;A&middot;c<sub>gas</sub></p></td>
<td><p>dissolution rate</p></td>
</tr>
<tr>
<td><p>k<sub>v</sub>&middot;A&middot;c<sub>liquid</sub></p></td>
<td><p>volatility rate</p></td>
</tr>
<tr>
<td><p>k<sub>H</sub> = k<sub>d</sub>/k<sub>v</sub> = c<sub>liquid</sub>/c<sub>gas</sub></p></td>
<td><p>equilibrium</p></td>
</tr>
<tr>
<td><p><a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(k<sub>H</sub>/K<sub>H0</sub>) = (-&Delta;H/<a href=\"modelica://Modelica.Constants\">R</a>)&middot;(1/T<sub>heatPort</sub> - 1/T<sub>K</sub>)&nbsp;</p></td>
<td><p>van&apos;t Hoff&apos;s equation</p></td>
</tr>
<tr>
<td><p>&Delta;<sub>r</sub>G<sup>0</sup>= &Delta;H - T&middot;&Delta;S = -R&middot;T&middot;<a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(K<sub>H</sub>) </p></td>
<td><p>Gibb&apos;s energy </p></td>
</tr>
<tr>
<td><p>&Delta;S = <a href=\"modelica://Modelica.Constants\">k</a>&middot;<a href=\"modelica://ModelicaReference.Operators.'log()'\">log</a>(&Omega;) </p></td>
<td><p>entropy </p></td>
</tr>
</table>
<h4><span style=\"color:#008000\">Notations</span></h4>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>c<sub>gas</sub></p></td>
<td><p>gaseous molar concentration of the substance</p></td>
</tr>
<tr>
<td><p>c<sub>liquid</sub></p></td>
<td><p>liquid molar concentration of the substance</p></td>
</tr>
<tr>
<td><p>K<sub>H</sub></p></td>
<td><p>Henry&apos;s coeficient at current temperature T</p></td>
</tr>
<tr>
<td><p>k<sub>d</sub></p></td>
<td><p>dissolution rate coefficient in liquid at current temperature T</p></td>
</tr>
<tr>
<td><p>k<sub>v</sub></p></td>
<td><p>volatility rate coefficient at current temperature T</p></td>
</tr>
<tr>
<td><p>A &nbsp;</p></td>
<td><p>surface area between gas and liquid</p></td>
</tr>
<tr>
<td><p>&Delta;H</p></td>
<td><p>enthalpy of dissolution</p></td>
</tr>
<tr>
<td><p>T<sub>heatPort</sub></p></td>
<td><p>current temperature T</p></td>
</tr>
<tr>
<td><p>K<sub>H0</sub></p></td>
<td><p>tabulated Henry&apos;s constant at base temperature T<sub>K</sub></p></td>
</tr>
<tr>
<td><p>T<sub>K</sub></p></td>
<td><p>base temperature of tabulated coefficients</p></td>
</tr>
<tr>
<td><p>&Omega;</p></td>
<td><p>change of number of ways of arranging molecules</p></td>
</tr>
<tr>
<td><p>&Delta;S</p></td>
<td><p>entropy of the dissolution</p></td>
</tr>
<tr>
<td><p>&Delta;<sub>s</sub>G<sup>0</sup></p></td>
<td><p>Gibb&apos;s energy of the dissolution</p></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</table>
<p>Henry&apos;s coefficient <b>k<sub>H</sub></b> depends on temperature and on the identities of all substances present in solution.</p>
<p>Water fraction (W_solution, plasma 0.94, RBC 0.65 =&GT; blood 0.81 ml/ml) in solution can change the solubility of gases in water [1] as c_pure=c_solution/W_solution. </p>
<h4><span style=\"color:#008000\">References</span></h4>
<p>[1] Dash RK, Bassingthwaighte JB. Erratum to: Blood HbO2 and HbCO2 dissociation curves at varied O2, CO2, pH, 2, 3-DPG and temperature levels. Ann Biomed Eng 2010;38:1683-701. </p>
</html>"));
      end GasSolubility;

      model Diffusion "Solute diffusion"
        extends Icons.Diffusion;
        extends Interfaces.OnePort;

        parameter Boolean useConductanceInput = false
          "=true, if external conductance value is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.DiffusionPermeability Conductance=0
          "Diffusion conductance if useConductanceInput=false"
          annotation (Dialog(enable=not useConductanceInput));

      protected
        Types.DiffusionPermeability c;
      public
        Types.RealIO.DiffusionPermeabilityInput conductance = c if useConductanceInput
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,40})));
      equation
        if not useConductanceInput then
          c=Conductance;
        end if;

         q_in.q = c * (q_in.conc - q_out.conc);

         annotation (                 Documentation(revisions="<html>
<p><i>2009-2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p><a name=\"firstHeading\">The diffusion conductance parameter can be estimated using the Fick&apos;s laws of diffusion: </a></p>
<p>J= -D*(dPhi)/dx</p>
<p>where</p>
<p>J is molar flow of solute per area [mol/(m2.s)]. </p>
<p>D is diffusion constant [m2/s]. </p>
<p>dPhi is concentration gradient [mol/m3].</p>
<p>dx is length of diffusion [m].</p>
<p><br>The solution on both sides must have the same properties (for example solubilities, chemical activities, osmolarities,...)!</p>
</html>"));
      end Diffusion;

      model Membrane
        "Donnan's equilibrium of electrolytes usable for glomerular membrane, open/leak membrane channels, pores, ..."
        extends Icons.Membrane;
        extends Interfaces.ConditionalHeatPort;

        parameter Integer NumberOfParticles = 1
          "Number of penetrating particle types";
        parameter Integer Charges[NumberOfParticles] = zeros(NumberOfParticles)
          "Elementary charges of particles";
        parameter Types.DiffusionPermeability Permeabilities[NumberOfParticles] = zeros(NumberOfParticles)
          "Permeabilities of particles through membrane chanel";

        parameter Boolean usePermeabilityInput = false
          "=true, if external permeability value is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        Interfaces.ChemicalPort_a particlesInside[NumberOfParticles]
          "inner side of membrane, solution"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Interfaces.ChemicalPort_b particlesOutside[NumberOfParticles]
          "outer side of membrane, solution"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));

        Types.RealIO.DiffusionPermeabilityInput permeability[NumberOfParticles] = p if usePermeabilityInput
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,100})));

        Types.GasSolubility kH[NumberOfParticles]
          "Concentration ratio at equilibrium";

        parameter Types.GasSolubility kH_T0[NumberOfParticles] = ones( NumberOfParticles)
          "Equilibrated concentration ratio at temperature T0 - can be estimated by Henry's law coefficient ratios (kH1/kH2)"
           annotation ( HideResult=true,Dialog(tab="Different solubilities"));
        parameter Types.Temperature T0=298.15 "Base temperature for kH_T0"
           annotation (HideResult=true,Dialog(tab="Temperature dependence"));
        parameter Types.Temperature C[NumberOfParticles](displayUnit="K") = zeros(NumberOfParticles)
          "Specific constant difference (C1-C2) for Van't Hoff's change of kH"
          annotation (HideResult=true,Dialog(tab="Temperature dependence"));

        parameter Types.Fraction solventFractionInside=1
          "Free solvent fraction inside (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";
        parameter Types.Fraction solventFractionOutside=1
          "Free solvent fraction outside (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";

      protected
         Real KAdjustment
          "=(Cations-AnionLessProteins)/(Cations+AnionLessProteins)";
         Types.DiffusionPermeability p[NumberOfParticles];

      equation
        if not usePermeabilityInput then
          p=Permeabilities;
        end if;

         //no accumulation of particles:
         particlesInside.q + particlesOutside.q = zeros(NumberOfParticles); //nothing lost inside

         //electroneutrality:
         if abs(Charges.*Charges*p)<=Modelica.Constants.eps then
           KAdjustment=0; //no penetrating electrolytes => KAdjustment and electroneutrality of flux is not needed
         else
           Charges*particlesInside.q = 0; //electroneutrality of flux through membrane
         end if;

         //diffusion, penetration, particle movement:
         for i in 1:NumberOfParticles loop
           if Charges[i]==0 then //normal diffusion
             particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - kH[i]*particlesOutside[i].conc/solventFractionOutside);
           elseif Charges[i]>0 then //cation goes to Donnan's equilibrium
             particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - (1+KAdjustment)*kH[i]*particlesOutside[i].conc/solventFractionOutside);
           else //anion goes to Donnan's equilibrium
             particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - (1-KAdjustment)*kH[i]*particlesOutside[i].conc/solventFractionOutside);
           end if;
         end for;

         //different solubilities:
         kH = kH_T0 .* Modelica.Math.exp(C * (1/T_heatPort - 1/T0));
         lossHeat = Modelica.Constants.R* C*particlesOutside.q; //negative = heat are comsumed when change from liquid to gas

        annotation ( Documentation(info="<html>
<p><u><b><font style=\"color: #008000; \">Filtration throught semipermeable membrane.</font></b></u></p>
<p>The penetrating particles are driven by electric and chemical gradient to reach Donnan&apos;s equilibrium. The permeabilities of particles are used only in dynamic simulation with non-zero fluxes. If zero-flow Donnan&apos;s equilibrium is reached, it is independent on the permeabilities. </p>
<p>This class can be used for glomerular membrane, open(leak) channels (pores) of cellular (or any lipid bilayer) membrane, chloride schift, ...</p>
<p><br>The membrane permeabilities depends on <code>(D/membrameThicknes)*membraneArea</code>, where D is Fick&apos;s diffusion coefficient.<code> </code></p>
<p>................................</p>
<h4><span style=\"color:#008000\">Filtration example of tree particles</span></h4>
<p>ALP .. small penetrating anion</p>
<p>P .. nonpenetrating protein with negative charge</p>
<p>C .. small penetrating cation</p>
<p>In outer side of membrane are not protein P (it leaves inside). </p>
<p>In equilibrium 4 concentration are unknown:</p>
<p>ALP_in, ALP_out, C_in, C_out.</p>
<p>Closed system equilibrium equations:</p>
<p>tALP = ALP_in + ALP_out ... total amount of ALP </p>
<p>tC = C_in + C_out ... total amount of C</p>
<p>P + ALP_in = C_in ... electroneutrality inside</p>
<p>ALP_out = C_out ... electroneutrality outside</p>
<p>----------------------------------------------------</p>
<p>It is possible to write these equations also in form of KAdjustment, which connect also more than tree type of particles with Donnan&apos;s equilibrium equations:</p>
<p>ALP_in/ALP_out = (1-KAdjustment) </p>
<p>C_in/C_out = (1+KAdjustment) </p>
<p>where KAdjustment = P/(2*C_in-P) and C_out=ALP_out=(2*C_in-P)/2, because ALP_in/ALP_out = (C_in - P)/C_out = (2C_in-2P)/(2C_in-P) = 1 - P/(2C_in-P) = 1-KAdjustment and C_in/C_out = (2C_in)/(2C_in-P) = 1 + P/(2C_in-P) = 1+KAdjustment .</p>
<p><br><h4><span style=\"color:#008000\">Problem with different solubilities/Henry constants/ (kH1, kH2)</span></h4></p>
<p>Equilibrated is chemical potential, not concentrations (c1,c2)!</p>
<p>Equality of chemical potential is approximated by equality of partial pressure (p1,p2): </p>
<p>p1=kH1*c1 </p>
<p>p2=kH2*c2</p>
<p><br>c2 = (kH1/kH2) * c1</p>
<p>Henry constant between both side can be defined as<b> kH_T0 = kH1/kH2</b> at temperature T0, where kH1 is Henry constant in first side of membrane and kH2 is Henry constant in second side of membrane.</p>
<h4><span style=\"color:#008000\">Temperature dependence of Henry constants by Van't Hoff</span></h4>
<p><code>kH1&nbsp;=&nbsp;kH1_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C1*&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p><code>kH2&nbsp;=&nbsp;kH2_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C2*&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p>kH1/kH2 = <code>kH_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C *&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p>Specific&nbsp;constant&nbsp;for&nbsp;Van&apos;t&nbsp;Hoff&apos;s&nbsp;change&nbsp;of&nbsp;kH_T0 can be defined as<b> C = C1-C2</b>, where C1 is specific constant in first side of membrane and C2 is specific constant in second side of membrane.</p>
</html>"));
      end Membrane;

      model Speciation
        "Chemical species definition by independent binding sides of macromolecule"
        extends Icons.Speciation;

        extends SteadyStates.Interfaces.SteadyStateSystem(
                                                 Simulation=Types.SimulationType.SteadyState, NumberOfDependentStates=NumberOfSubunits-1);
        extends Interfaces.ConditionalVolume;

        parameter Integer NumberOfSubunits=1
          "Number of independent subunits occurring in molecule";

        Interfaces.ChemicalPort_a specificForm
          "Specific form composed with subunits form of subunitSpiecies"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
        Interfaces.ChemicalPort_a specificSubunitForm[NumberOfSubunits]
          "Specific form of subunits of specific molecule form in connector called spieces"
          annotation (Placement(transformation(extent={{-10,90},{10,110}})));
      protected
        Real fractions[NumberOfSubunits];
      public
        Types.RealIO.AmountOfSubstanceInput amountOfSubunit[NumberOfSubunits]
          "Total amount of the subunits in all forms"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,0})));
        Types.RealIO.AmountOfSubstanceOutput amount
          "Total amount of macromolecules in this system"
         annotation (Placement(
              transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,-80})));                                                             //(start=1e-8)
        Types.RealIO.EnergyOutput internalHeat
          "Relative internal heat of all chemical forms in this system"                                                                annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-60,-80}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-60,-80})));

      //system internal heat
        parameter Boolean useInternalHeatsInput = false
          "=true, if subunitInternalHeat inputs are used instead of parameter SubunitEnthalpies"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs",tab="Heat"));

        parameter Types.MolarEnergy SubunitEnthalpies[NumberOfSubunits]=zeros(NumberOfSubunits)
          "Enthalpy changes of substances (can relative to one chosen specific form of chemical substance in the system) if useEnthalpiesInput=false"
          annotation (HideResult=not useInternalHeatsInput, Dialog(enable=not useInternalHeatsInput,tab="Heat"));

        Types.RealIO.EnergyInput subunitInternalHeat[NumberOfSubunits](each start=0)=internalHeatOfSubunit if useInternalHeatsInput
        annotation (Dialog(enable=false),
           Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,60})));

         Types.Energy internalHeatOfSubunit[NumberOfSubunits]
          "Internal heat of subunits";
      equation

        amount = amountOfSubunit[1];

        fractions = if (amount < Modelica.Constants.eps) then zeros(NumberOfSubunits)
                    else specificSubunitForm.conc ./ (amountOfSubunit/volume);

        specificForm.conc = (amount/volume)*product(fractions); //chemical speciation

        for i in 2:NumberOfSubunits loop
                   normalizedState[i-1]*amount = amountOfSubunit[i];
        end for;

      //molar flow:
        specificSubunitForm.q = -specificForm.q * ones(NumberOfSubunits);

      //heat:
         if not useInternalHeatsInput then
          internalHeatOfSubunit = SubunitEnthalpies.*amountOfSubunit;
        end if;
        internalHeat=sum(internalHeatOfSubunit);

        annotation (defaultComponentName="macromoleculeSpecie_in_macromoleculeGroup",
          Documentation(revisions="<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p>This block identifies one specific chemical form of one macromolecule defined by forms of its subunits  (one chosen chemical species - called <i>specie</i>).</p>
<p>Only main connector called <b>species </b>is designed for inflow and outflow of macromolecule to/from <i>system</i>. The concentration in this connector is the concentration of its specific <i>specie.</i></p>
<p>Connectors <b>subunitSpecies[:] </b>represent specific forms of the macromolecule subunit types. If the subnunit type occures n-times in macromolecule, the inflow is n-time greater than the inflow of macromolecule.</p>
<p><br>Initial total concentrations of subunits must be set to be right distribution of total macromolecule concentration. So the ratios between subunit concentrations are the ratios of their occurrence in macromolecule. In equilibrium are this proporties fulfilled.</p>
<p><br>For example: If the macromolecule has four identical independent subunits and each subunit can occur in two form F1 and F2, then the concentration of macromolecule <i>specie </i>composed only from four subunits in form F1 is <b>species.conc=</b>conc*fF1^4. </p>
<p>Where:</p>
<p>conc is totat concentration of macromolecule in <i>system</i> accumulated by <b>species.q</b>,</p>
<p>fF1 = F1/(F1+F2) is fraction of form F1 in subsystem of subunit,</p>
<p>4 is number of subunits (<b>numberOfSubunit</b>).</p>
<p><br>This block can be connected to chemical reactions such as it was the chosen species with subsystem behind. It is recommended to use this block only as an equilibrated subsystem.</p>
<h4><span style=\"color:#008000\">Heat of chemical system.</span></h4>
<p>Enthalpy of each subunit species can be presented as <b>subunitEnthalpies[:]</b>. Then the total enthalpy of the chemical system can be calculated by equation:</p>
<h4>systemEnthalpy = sum(subunitEnthalpies[i] * totalSubunitAmount[i]) / totalSubsystemAmount</h4>
<p>And the stored heat as enthalpy is <b>systemEnthalpy*totalSubsystemAmount.</b></p>
</html>"));
      end Speciation;

      model Degradation "Degradation of solute"
        extends Interfaces.ConditionalVolume;

        Interfaces.ChemicalPort_a q_in "Degraded solute outflow"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));

        parameter Types.Time HalfTime
          "Degradation half time. The time after which will remain half of initial concentration in the defined volume when no other generation nor clearence nor degradation exist.";

      protected
        Types.VolumeFlowRate Clearance;
      equation
        Clearance = volume*Modelica.Math.log(2)/HalfTime;
        q_in.q = Clearance*q_in.conc;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                              graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,26},{62,0},{-80,-26},{-80,26}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-100},{150,-60}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{-100,-30},{100,-50}},
                lineColor={0,0,0},
                textString="half-time=%HalfTime s"),
              Polygon(
                points={{-68,24},{-68,-24},{-58,-22},{-58,22},{-68,24}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-46,20},{-46,-20},{-36,-18},{-36,18},{-46,20}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-24,16},{-24,-16},{-14,-14},{-14,14},{-24,16}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-2,12},{-2,-12},{8,-10},{8,10},{-2,12}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{20,8},{20,-8},{30,-6},{30,6},{20,8}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{40,4},{40,-4},{50,-2},{50,2},{40,4}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2013</td>
</tr>
</table>
</html>"));
      end Degradation;

      model Clearance "Clearance with or without solvent outflow"

        parameter Types.VolumeFlowRate Clearance=0
          "Clearance of solute if useSolutionFlowInput=false"
          annotation (Dialog(enable=not useSolutionFlowInput));

        parameter Real K(unit="1")=1
          "Coefficient such that Clearance = K*solutionFlow";

        extends Hydraulic.Interfaces.ConditionalSolutionFlow(SolutionFlow=
              Clearance/K);

        Interfaces.ChemicalPort_a q_in "solute outflow"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));

        Types.VolumeFlowRate clearance;
      equation

        clearance = q*K;

        q_in.q = clearance*q_in.conc;

      //  assert(clearance>=-Modelica.Constants.eps, "Clearance can not be negative!");

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-100},{150,-60}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{-100,-30},{100,-50}},
                lineColor={0,0,0},
                textString="K=%K")}),        Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
</table>
</html>"));
      end Clearance;

      model Stream "Flow of whole solution"
        extends Interfaces.OnePort;
        extends Hydraulic.Interfaces.ConditionalSolutionFlow;

      equation
        q_in.q = if
                   (q>0) then q*q_in.conc else q*q_out.conc;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                textString="%name",
                lineColor={0,0,255},
                origin={2,-74},
                rotation=180)}),
          Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
</table>
</html>",       info="<html>
<p><h4><font color=\"#008000\">Bidirectional mass flow by concentration</font></h4></p>
<p>Possible field values: </p>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0.1\"><tr>
<td></td>
<td><p align=\"center\"><h4>forward flow</h4></p></td>
<td><p align=\"center\"><h4>backward flow</h4></p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>solutionFlow</h4></p></td>
<td><p align=\"center\">&GT;=0</p></td>
<td><p align=\"center\">&LT;=0</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_in.q</h4></p></td>
<td><p align=\"center\">=solutionFlow*q_in.conc</p></td>
<td><p align=\"center\">=-q_out.q</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_out.q</h4></p></td>
<td><p align=\"center\">=-q_in.q</p></td>
<td><p align=\"center\">=solutionFlow*q_out.conc</p></td>
</tr>
</table>
<br/>
</html>"));
      end Stream;

      model SolutePump "Prescribed solute flow"
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalSoluteFlow;

      equation
        q_in.q = q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Polygon(
                points={{-80,25},{80,0},{-80,-25},{-80,25}},
                lineColor={0,0,127},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid,
                rotation=360),
              Text(
                extent={{-150,-20},{150,20}},
                lineColor={0,0,255},
                origin={-10,-76},
                rotation=360,
                textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SolutePump;

      model Dilution "Adding/removing of the solvent to/from running solution"
        extends Interfaces.OnePort;
        extends Icons.Dilution;

        parameter Boolean useDilutionInput = false
          "=true, if dilition input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Fraction Dilution=1
          "Concentration ratio after per before dilution (0..no solutes, 1..no dilution) if useDilutionInput=false"
          annotation (Dialog(enable=not useSolventFlow));

        Types.RealIO.FractionInput dilution(start=Dilution)= d if useDilutionInput
          "Fraction of final undilutes solution"
          annotation (Placement(transformation(extent={{-120,60},{-80,100}})));
      protected
        Types.Fraction d;
      equation
        if not useDilutionInput then
          d=Dilution;
        end if;
        q_out.conc = d * q_in.conc;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Text(
                extent={{-120,20},{120,-20}},
                textString="%name",
                lineColor={0,0,255},
                origin={0,-60},
                rotation=180)}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Dilution;

      model Reabsorption "Reabsorption as input fraction"
         extends Icons.Reabsorption;

        parameter Boolean useEffect = false
          "=true, if reabsorption fraction is BaseReabsorption^(1/Effect)"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Boolean useMaxReabInput = false
          "=true, if external maximum of reabsorption molar flow is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Boolean useBaseReabsorption = false
          "=false, if BaseReabsorption=1"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.MolarFlowRate MaxReabsorption = Modelica.Constants.inf
          "Maximal reabsorption molar flow if useMaxReabInput=false"
          annotation (Dialog(enable=not useMaxReabInput));

        Interfaces.ChemicalPort_a Inflow "Tubular inflow"
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        Interfaces.ChemicalPort_b Outflow "Tubular outflow"
          annotation (Placement(transformation(extent={{90,30},{110,50}})));

        Interfaces.ChemicalPort_b Reabsorption "Reabsorption from tubules"
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
        Types.RealIO.FractionInput baseReabsorption=baseReabFract if useBaseReabsorption
          "Base fraction of molar inflow for reabsorption flow"
                                     annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={40,100})));

        Types.RealIO.FractionInput Effect(displayUnit="1")=e if useEffect
          "Effects<1 decrease reabsorption, effects>1 increase reabsorption fraction by equation ReabFract=BaseReabsorption^(1/Effect)"
                                     annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={0,100})));
        Types.RealIO.MolarFlowRateInput               MaxReab=mr if useMaxReabInput
          "Maximal allowed reabsorption molar flow rate"
                                     annotation (Placement(transformation(extent={{-100,
                  -80},{-60,-40}})));
        Types.RealIO.FractionOutput               ReabFract=reabFract if useEffect
          "Actual reabsorbed fraction from solute inflow rate"                                annotation (Placement(transformation(extent={{80,-100},
                  {120,-60}})));

        Types.Fraction reabFract,baseReabFract,e;
        Types.MolarFlowRate mr;
      equation
        Inflow.conc = Outflow.conc;
        0 = Inflow.q + Outflow.q + Reabsorption.q;

        Reabsorption.q=-min(mr,reabFract*Inflow.q);

        reabFract = baseReabFract^(1/e);

        if not useBaseReabsorption then
          baseReabFract=1;
        end if;

        if not useMaxReabInput then
          mr=MaxReabsorption;
        end if;

        if not useEffect then
          e=1;
        end if;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                  {100,100}}),       graphics={
              Text(
                extent={{0,-102},{154,-132}},
                lineColor={0,0,255},
                textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Reabsorption;

    end Components;

    package Sensors
      extends Modelica.Icons.SensorsPackage;

      model MolarFlowMeasure "Measure of molar flow"
        extends Interfaces.OnePort;
        //extends Icons.MolarFlowMeasure;
        extends Modelica.Icons.RotationalSensor;

       Types.RealIO.MolarFlowRateOutput molarFlowRate
                               annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={0,-60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-80})));
      equation
        q_in.conc = q_out.conc;

        molarFlowRate = q_in.q;

       annotation (
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),   Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Text(
                extent={{-31,-7},{28,-66}},
                lineColor={0,0,0},
                textString="n'")}));
      end MolarFlowMeasure;

      model ConcentrationMeasure "Measure of molar concentration"
        extends Modelica.Icons.RotationalSensor;

        Interfaces.ChemicalPort_a q_in "For measure only" annotation (Placement(
              transformation(extent={{-10,-10},{10,10}}), iconTransformation(
                extent={{-10,-10},{10,10}})));
        Types.RealIO.ConcentrationOutput concentration "Concentration"
                               annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=90,
              origin={0,40}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-80})));
      equation

        concentration =         q_in.conc;

        q_in.q = 0;
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Text(
                extent={{-29,-3},{30,-62}},
                lineColor={0,0,0},
                textString="c")}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end ConcentrationMeasure;

      model IncrementalFlowConcentrationMeasure
        "Incremental flow concentration meassure in circulation after absorption/secretion source (i.e. portal vein concentration)"
        extends Modelica.Icons.RotationalSensor;

        extends Hydraulic.Interfaces.ConditionalSolutionFlow;

       Types.RealIO.ConcentrationOutput concentration
          "Concentration after absorption source"                           annotation (Placement(transformation(extent={{-12,-86},
                  {28,-46}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-62})));

        Types.RealIO.MolarFlowRateInput addition annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,40})));
        Interfaces.ChemicalPort_a q_in
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      equation
        concentration = if (q>0) then q_in.conc + addition/q else q_in.conc;
        q_in.q=0;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={        Text(
                extent={{-88,-48},{86,0}},
                textString="%name",
                lineColor={0,0,0})}),          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end IncrementalFlowConcentrationMeasure;
    end Sensors;

    package Sources
      extends Modelica.Icons.SourcesPackage;

      model UnlimitedSolutePump "Molar pump of solute to system"
        extends Interfaces.ConditionalSoluteFlow;

        Interfaces.ChemicalPort_b q_out "Outflow"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));

      equation
        q_out.q = - q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-42},{100,40}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-48,20},{50,0},{-48,-21},{-48,20}},
                lineColor={107,45,134},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-82,-82},{90,-58}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end UnlimitedSolutePump;

      model UnlimitedSolutionStorage "Constant concentration source"

        Interfaces.ChemicalPort_b q_out
          "constant concentration with any possible flow"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));

        parameter Boolean useConcentrationInput = false
          "=true, if fixed concentration is from input instead of parameter"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Types.Concentration Conc = 0
          "Fixed concentration if useConcentrationInput=false"
          annotation (Dialog(enable=not useConcentrationInput));

        parameter Boolean isIsolatedInSteadyState = true
          "=true, if there is no flow at port in steady state"
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "If in equilibrium, then zero-flow equation is added."
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

         Types.RealIO.ConcentrationInput concentration(start=Conc)=c if useConcentrationInput
          annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

      protected
        Types.Concentration c "Current concentration";

      initial equation
        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.InitSteadyState) then
          q_out.q = 0;
        end if;

      equation
         if not useConcentrationInput then
           c=Conc;
         end if;

        q_out.conc = c;

        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.SteadyState) then
          q_out.q = 0;
        end if;

        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
              graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillColor={107,45,134},
                fillPattern=FillPattern.Backward),
              Text(
                extent={{0,0},{-100,-100}},
                lineColor={0,0,0},
                textString="conc"),
              Line(
                points={{-62,0},{56,0}},
                color={191,0,0},
                thickness=0.5),
              Polygon(
                points={{38,-20},{38,20},{78,0},{38,-20}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{140,-100},{-140,-160}},
                lineColor={0,0,0},
                textString="%Conc mmol/l")}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end UnlimitedSolutionStorage;

      model UnlimitedGasStorage "Constant ideal gas source"
        extends Interfaces.ConditionalHeatPort;
        Interfaces.ChemicalPort_b q_out
          "constant gas concentration with any possible flow"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));

        parameter Boolean usePartialPressureInput = false
          "=true, if fixed partial pressure is from input instead of parameter"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Types.Pressure PartialPressure = 0
          "Fixed partial pressure if usePartialPressureInput=false"
          annotation (Dialog(enable=not usePartialPressureInput));

        Types.RealIO.PressureInput partialPressure(start=PartialPressure) = p if usePartialPressureInput
          "Partial pressure of Gas = air pressure * gas fraction"
          annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

       parameter Boolean isIsolatedInSteadyState = true
          "=true, if there is no flow at port in steady state"
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "If in equilibrium, then zero-flow equation is added."
          annotation (Evaluate=true, HideResult=true, Dialog(group="Simulation",tab="Equilibrium"));

      protected
        Types.Pressure p "Current partial pressure";

      initial equation
        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.InitSteadyState) then
          q_out.q = 0;
        end if;

      equation
        if not usePartialPressureInput then
          p=PartialPressure;
        end if;

        q_out.conc = p / (Modelica.Constants.R * T_heatPort);  //ideal gas equation

        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.SteadyState) then
           q_out.q = 0;
        end if;

        lossHeat=0; //only read temperature from heat port

        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
              graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillColor={170,255,255},
              fillPattern=FillPattern.Backward),
              Polygon(
                points={{-100,100},{100,-100},{100,100},{-100,100}},
                fillColor={159,159,223},
                fillPattern=FillPattern.Backward,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Text(
                extent={{0,0},{-100,-100}},
                lineColor={0,0,0},
                textString="P,T"),
              Line(
                points={{-62,0},{56,0}},
                color={191,0,0},
                thickness=0.5),
              Polygon(
                points={{38,-20},{38,20},{78,0},{38,-20}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{-150,-110},{150,-140}},
                lineColor={0,0,0},
                textString="T=%T")}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end UnlimitedGasStorage;

      model UnlimitedSolutePumpOut "Molar pump of solute out of system"
        extends Interfaces.ConditionalSoluteFlow;

        Interfaces.ChemicalPort_a q_in "Inflow"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));

      equation
        q_in.q = q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,-42},{100,40}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-48,20},{50,0},{-48,-21},{-48,20}},
                lineColor={107,45,134},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-82,-82},{90,-58}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end UnlimitedSolutePumpOut;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;

      connector ChemicalPort "Concentration and Solute flow"
        Types.Concentration conc "Solute concentration";
        flow Types.MolarFlowRate q "Solute flow";
        annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end ChemicalPort;

      connector ChemicalPort_a
        "Concentration and expected positive Solute inflow"
        extends ChemicalPort;

      annotation (
          defaultComponentName="port_a",
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={107,45,134},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={107,45,134},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={107,45,134},
                fillColor={107,45,134},
                fillPattern=FillPattern.Solid),
         Text(extent=  {{-160,110},{40,50}}, lineColor=  {107,45,134}, textString=  "%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end ChemicalPort_a;

      connector ChemicalPort_b
        "Concentration and expected negative Solute outflow"
        extends ChemicalPort;

      annotation (
          defaultComponentName="port_b",
          Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false),
              graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={107,45,134},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={107,45,134},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
         Text(extent=  {{-160,110},{40,50}}, lineColor=  {107,45,134}, textString=  "%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end ChemicalPort_b;

      partial model OnePort
        "Partial transfer of solute between two ports without its accumulation"

        ChemicalPort_b            q_out
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        ChemicalPort_a            q_in
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      equation
        q_in.q + q_out.q = 0;
      end OnePort;

      partial model ConditionalHeatPort
        "Partial model to include a conditional HeatPort in order to describe the power loss via a thermal network"

        parameter Boolean useHeatPort = false "=true, if HeatPort is enabled"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true), Dialog(group="External inputs/outputs"));
        parameter Types.Temperature T=310.15
          "Fixed device temperature if useHeatPort = false"
          annotation ( HideResult=true, Dialog(enable=not useHeatPort,tab="Temperature dependence"));

        Thermal.Interfaces.HeatPort_a       heatPort(T(start=T)=T_heatPort, Q_flow=-lossHeat) if useHeatPort
          annotation (Placement(transformation(extent={{-10,-10},{10,10}}),
              iconTransformation(extent={{-10,-10},{10,10}})));

        Types.Temperature T_heatPort "Temperature of HeatPort";
        Types.HeatFlowRate lossHeat "Loss heat leaving component via HeatPort";
      equation
        if not useHeatPort then
           T_heatPort = T;
        end if;

        annotation (        Documentation(revisions="<html>
<ul>
<li><i> February 17, 2009   </i>
       by Christoph Clauss<br> initially implemented<br>
       </li>
<li><i> January 21, 2014   </i>
       by Marek Matejak<br> integrated to Physiolibrary<br>
       </li>
</ul>
</html>",       info="<html>
<p>
This partial model provides a conditional heating port for the connection to a thermal network.
</p>
<ul>
<li> If <b>useHeatPort</b> is set to <b>false</b> (default), no heat port is available, and the thermal
     loss power flows internally to the ground. In this case, the parameter <b>T</b> specifies
     the fixed device temperature (the default for T = 20<sup>o</sup>C).</li>
<li> If <b>useHeatPort</b> is set to <b>true</b>, a heat port is available.</li>
</ul>

<p>
If this model is used, the loss power has to be provided by an equation in the model which inherits from
ConditionalHeatingPort model (<b>lossPower = ...</b>). As device temperature
<b>T_heatPort</b> can be used to describe the influence of the device temperature
on the model behaviour.
</p>
</html>"));
      end ConditionalHeatPort;

      partial model ConditionalVolume
        "Chemical processes can be modeled with or without(normalized to 1 liter) variable solution volume"

        constant Types.Volume NormalVolume=0.001 "1 liter" annotation(Evaluate=true, HideResult=true);

        parameter Boolean useNormalizedVolume = true
          "Normalized volume of solution is 1 liter"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        Types.Volume volume "Solution volume"; //annotation(HideResult=useNormalizedVolume);

        Types.RealIO.VolumeInput solutionVolume=volume if not useNormalizedVolume
          "Volume of solution"                                                                         annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-40,40})));
      equation
        if useNormalizedVolume then
          volume = NormalVolume;
        end if;

      end ConditionalVolume;

      partial model ConditionalSoluteFlow
        "Input of solute molar flow vs. parametric solute molar flow"

        parameter Boolean useSoluteFlowInput = false
          "=true, if solute flow input is used instead of parameter SoluteFlow"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.MolarFlowRate SoluteFlow=0
          "Volumetric flow of solute if useSoluteFlowInput=false"
          annotation (HideResult=not useSoluteFlowInput, Dialog(enable=not useSoluteFlowInput));

        Types.RealIO.MolarFlowRateInput soluteFlow(start=SoluteFlow)=q if   useSoluteFlowInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={40,40})));

        Types.MolarFlowRate q "Current solute flow";
      equation
        if not useSoluteFlowInput then
          q = SoluteFlow;
        end if;

      end ConditionalSoluteFlow;

      record SubstanceDefinition
        "Invariant properties of substance (molar weight, enthalpy, entropy, ...)"

       parameter String fullName=getInstanceName()
          "Full physiological name of substance";
       parameter String shortName=getInstanceName()
          "Short physiological name of substance";

       parameter Types.MolarMass mw "Molar weight in kg/mol or kDa";
       parameter Types.MolarEnergy dH=0 "Enthalpy";
       parameter Types.MolarEnergy dS=0 "Entropy";

       parameter Types.AmountOfSubstance molpIU=1
          "Pharmacological international unit conversion: mols per IU (or 1 if unknown)";
       parameter Types.AmountOfSubstance molpGU=1
          "Goldblatt unit conversion: mols per GU (or 1 if unknown)";

       parameter String storeUnit="mmol/l"
          "Default substance unit in files or databaseses";

       parameter Types.Utilities.UnitConversions.RealTypeRecord[:] unitConversions = cat(1,
          Types.Utilities.UnitConversions.GenerateSubstanceUnits("g",1e-3/mw),
          Types.Utilities.UnitConversions.GenerateSubstanceUnits("IU",molpIU),
          Types.Utilities.UnitConversions.GenerateSubstanceUnits("GU",molpGU));

      end SubstanceDefinition;
    end Interfaces;

    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>In physiology books, chapters about chemical substances are organized by their types. The main reason for this is that each substance in the human body is regulated in a different way. For example the regulation of sodium is different from the regulation of potassium, and from the regulation of glucose, and so on. This view leads to the idea of having separate models of each substance. The origin of different flows and regulations is the (cellular) membrane. Water and solutions can cross it in different directions at the same time. Crossings occur for different reasons: water is driven mostly by osmotic gradients, electrolytes are driven by charge to reach Donnan&apos;s equilibrium, and some solutes can even be actively transported against their concentration or electrical gradients. And all this is specifically driven from the higher levels by neural and hormonal responses.&nbsp; </p>
<p>In Physiolibrary flows and fluxes of solutes are supported mostly by the Chemical package. All parts inside this Chemical package use the connector ChemicalPort, which defines the molar concentration and molar flow/flux rate of one solute. This is the supporting infrastructure for modeling membrane diffusion, accumulations of substances, reversal chemical reactions, Henry&apos;s law of gas solubility, dilution with additional solvent flow, membrane reabsorption, chemical degradation and physiological clearance. </p>
</html>"));
  end Chemical;

  package Osmotic "Please use 'Chemical' library instead!"
   extends Modelica.Icons.Package;

    package Examples
      "Examples that demonstrate usage of the Osmotic flow components"
    extends Modelica.Icons.ExamplesPackage;

      model Cell
      extends Modelica.Icons.Example;

        Physiolibrary.Osmotic.Components.OsmoticCell cells(volume_start(
              displayUnit="l") = 0.001, ImpermeableSolutes={0.285})
          annotation (Placement(transformation(extent={{-44,36},{-24,56}})));
        Physiolibrary.Osmotic.Components.OsmoticCell interstitium(volume_start(
              displayUnit="l") = 0.001, ImpermeableSolutes={0.28})
          annotation (Placement(transformation(extent={{34,36},{54,56}})));
        Physiolibrary.Osmotic.Components.Membrane membrane(cond=
              1.2501026264094e-10)
          annotation (Placement(transformation(extent={{-4,36},{16,56}})));
        Physiolibrary.Osmotic.Components.OsmoticCell cells1(volume_start(
              displayUnit="l") = 0.001, ImpermeableSolutes={0.285})
          annotation (Placement(transformation(extent={{-44,-64},{-24,-44}})));
        Physiolibrary.Osmotic.Components.OsmoticCell interstitium1(volume_start(
              displayUnit="l") = 0.001, ImpermeableSolutes={0.29})
          annotation (Placement(transformation(extent={{34,-64},{54,-44}})));
        Physiolibrary.Osmotic.Components.Membrane membrane1(cond=
              1.2501026264094e-10)
          annotation (Placement(transformation(extent={{-4,-64},{16,-44}})));
      equation
        connect(cells.q_in[1], membrane.q_in) annotation (Line(
            points={{-34,46},{-4,46}},
            color={127,127,0},
            thickness=1));
        connect(membrane.q_out, interstitium.q_in[1]) annotation (Line(
            points={{16,46},{44,46}},
            color={127,127,0},
            thickness=1));
        connect(cells1.q_in[1], membrane1.q_in) annotation (Line(
            points={{-34,-54},{-4,-54}},
            color={127,127,0},
            thickness=1));
        connect(membrane1.q_out, interstitium1.q_in[1]) annotation (Line(
            points={{16,-54},{44,-54}},
            color={127,127,0},
            thickness=1));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics={
              Text(
                extent={{-52,84},{42,76}},
                lineColor={135,135,135},
                textString="Cells in hypotonic environment"),
              Text(
                extent={{-52,-16},{42,-24}},
                lineColor={95,95,95},
                textString="Cells in hypertonic environment"),
              Line(
                points={{-98,8},{98,8}},
                color={135,135,135},
                thickness=1)}),
          experiment(StopTime=60),
          Documentation(revisions=
                          "<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end Cell;

      model CerebrospinalFluid
      extends Modelica.Icons.Example;

        Physiolibrary.Osmotic.Components.OsmoticCell CSF_osmotic(volume_start(
              displayUnit="ml") = 0.00015, ImpermeableSolutes={(0.286*0.15)})
          "cerebro-spinal fluid"
          annotation (Placement(transformation(extent={{-76,-6},{-56,14}})));
        Physiolibrary.Osmotic.Components.Membrane choroid_plexus(
            useHydraulicPressureInputs=true, cond(displayUnit="ml/(mmHg.day)")=
            1.9966916949595e-12) "choroid plexus"
          annotation (Placement(transformation(extent={{-16,-6},{-36,14}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel CSF_hydraulic(
          volume_start=0.00015,
          ZeroPressureVolume=0.000145,
          Compliance=2.250184727537e-09) "cerebro-spinal fluid"
          annotation (Placement(transformation(extent={{-96,-32},{-76,-12}})));
        Physiolibrary.Hydraulic.Components.Pump choroid_plexus_hydraulic(
            useSolutionFlowInput=true) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={8,-22})));
        Physiolibrary.Osmotic.Sensors.FlowMeasure flowMeasure annotation (
            Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={8,4})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
          annotation (Placement(transformation(extent={{-90,64},{-70,84}})));
        Physiolibrary.Osmotic.Sources.UnlimitedSolution ECF_osmotic(Osm=285)
          "extracellular (extracerebrospinal) fluid osmolarity" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={46,32})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins(P=0) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={82,86})));
        Physiolibrary.Osmotic.Components.Membrane arachnoid_villi(
            useHydraulicPressureInputs=true, cond(displayUnit="ml/(mmHg.day)")=
            1.1285648710641e-11) "choroid plexus"
          annotation (Placement(transformation(extent={{-36,46},{-16,66}})));
        Physiolibrary.Hydraulic.Components.Pump arachnoid_villi_hydraulic(
            useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-2,96},{18,76}})));
        Physiolibrary.Osmotic.Sensors.FlowMeasure flowMeasure1
          annotation (Placement(transformation(extent={{-2,66},{18,46}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume arteries(P=12665.626804425)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,26})));
        Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
              displayUnit="ml/(mmHg.min)") = 3.7503078792283e-11) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={96,0})));
        Physiolibrary.Hydraulic.Components.ElasticVessel choroidPlexusCapilaries(
            volume_start=1.4e-05, Compliance=3.7503078792283e-09)
          annotation (Placement(transformation(extent={{56,-32},{76,-12}})));
        Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance=8.750718384866e-11)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={66,50})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
          annotation (Placement(transformation(extent={{68,64},{48,84}})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure2
          annotation (Placement(transformation(extent={{62,-22},{42,-2}})));
      equation
        connect(CSF_hydraulic.q_in, pressureMeasure.q_in) annotation (Line(
            points={{-86,-22},{-86,68},{-84,68}},
            thickness=1));
        connect(CSF_hydraulic.q_in, choroid_plexus_hydraulic.q_out) annotation (
            Line(
            points={{-86,-22},{-2,-22}},
            thickness=1));
        connect(flowMeasure.q_in, ECF_osmotic.port) annotation (Line(
            points={{18,4},{32,4},{32,32},{36,32}},
            color={127,127,0},
            thickness=1));
        connect(CSF_osmotic.q_in[1], arachnoid_villi.q_in) annotation (Line(
            points={{-66,4},{-66,56},{-36,56}},
            color={127,127,0},
            thickness=1));
        connect(CSF_hydraulic.q_in, arachnoid_villi_hydraulic.q_in) annotation (
            Line(
            points={{-86,-22},{-86,86},{-2,86}},
            thickness=1));
        connect(arachnoid_villi_hydraulic.q_out, veins.y) annotation (Line(
            points={{18,86},{72,86}},
            thickness=1));
        connect(arachnoid_villi.q_out, flowMeasure1.q_in) annotation (Line(
            points={{-16,56},{-2,56}},
            color={127,127,0},
            thickness=1));
        connect(flowMeasure1.q_out, ECF_osmotic.port) annotation (Line(
            points={{18,56},{32,56},{32,32},{36,32}},
            color={127,127,0},
            thickness=1));
        connect(conductor.q_out, choroidPlexusCapilaries.q_in) annotation (Line(
            points={{96,-10},{96,-22},{66,-22}},
            thickness=1));
        connect(choroidPlexusCapilaries.q_in, conductor1.q_in) annotation (Line(
            points={{66,-22},{66,40}},
            thickness=1));
        connect(veins.y, conductor1.q_out) annotation (Line(
            points={{72,86},{66,86},{66,60}},
            thickness=1));
        connect(arteries.y, conductor.q_in) annotation (Line(
            points={{90,26},{96,26},{96,10}},
            thickness=1));
        connect(choroid_plexus_hydraulic.q_in, choroidPlexusCapilaries.q_in)
          annotation (Line(
            points={{18,-22},{66,-22}},
            thickness=1));
        connect(pressureMeasure1.q_in, veins.y) annotation (Line(
            points={{62,68},{66,68},{66,86},{72,86}},
            thickness=1));
        connect(choroidPlexusCapilaries.q_in, pressureMeasure2.q_in) annotation (
            Line(
            points={{66,-22},{56,-22},{56,-18}},
            thickness=1));
        connect(CSF_osmotic.q_in[1], choroid_plexus.q_out) annotation (Line(
            points={{-66,4},{-36,4}},
            color={127,127,0},
            thickness=1));
        connect(choroid_plexus.q_in, flowMeasure.q_out) annotation (Line(
            points={{-16,4},{-2,4}},
            color={127,127,0},
            thickness=1));
        connect(pressureMeasure2.pressure, choroid_plexus.hydraulicPressureIn)
          annotation (Line(
            points={{46,-16},{28,-16},{28,20},{-18,20},{-18,12}},
            color={0,0,127}));
        connect(pressureMeasure1.pressure, arachnoid_villi.hydraulicPressureOut)
          annotation (Line(
            points={{52,70},{-18,70},{-18,64}},
            color={0,0,127}));
        connect(pressureMeasure.pressure, arachnoid_villi.hydraulicPressureIn)
          annotation (Line(
            points={{-74,70},{-34,70},{-34,64}},
            color={0,0,127}));
        connect(pressureMeasure.pressure, choroid_plexus.hydraulicPressureOut)
          annotation (Line(
            points={{-74,70},{-52,70},{-52,28},{-34,28},{-34,12}},
            color={0,0,127}));
        connect(flowMeasure1.volumeFlowRate, arachnoid_villi_hydraulic.solutionFlow)
          annotation (Line(
            points={{8,64},{8,79}},
            color={0,0,127}));
        connect(flowMeasure.volumeFlowRate, choroid_plexus_hydraulic.solutionFlow)
          annotation (Line(
            points={{8,-4},{8,-15}},
            color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics={
              Text(
                extent={{-46,-64},{50,-50}},
                lineColor={215,215,215},
                textString="the same volume of CSF"),
              Line(
                points={{-50,-54},{-62,-14}},
                color={215,215,215},
                arrow={Arrow.None,Arrow.Filled}),
              Line(
                points={{-50,-54},{-72,-30}},
                color={215,215,215},
                arrow={Arrow.None,Arrow.Filled})}),
          experiment(StopTime=86400),
          Documentation(revisions=
                          "<html>
<p><i>2013</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>Parameters are only manually estimated to reach steady state at 150ml CSF with CSF production and rebsorbtion 550ml/day and osmolarity 285 mosm/l.</p>
<p><br>[1] Dee Unglaub Silverthorn: Human Physiology</p>
<p>The cerebrospinal fluid (CSF) circulation: blood capilaries -&GT; choriod plexus of third and fourth ventricle -&GT; arachnoid villi -&GT; blood in venous sinus.</p>
<p><br><font style=\"color: #222222; \">[2] Hochwald, G. M., Wald, A., DiMattio, J., &AMP; Malhan, C. (1974). The effects of serum osmolarity on cerebrospinal fluid volume flow.&nbsp;<i>Life sciences</i>,&nbsp;<i>15</i>(7), 1309-1316.</font></p>
<p><br><font style=\"color: #2e2e2e; \">The effects of changes in serum osmolarity on cerebrospinal fluid (CSF) formation were studied in cats. CSF production rates were measured by ventriculocisternal perfusion both before and after intravenous infusion of glucose solutions.</font></p>
<p><font style=\"color: #2e2e2e; \">Infusion of glucose, hyperosmolar with respect to serum, increased serum osmolarity and caused a decrease in CSF formation rate; conversely, infusion of hypoosmolar solutions lowered serum osmolarity and increased CSF formation. CSF production and serum osmolarity were found to be linearly related. A 1&percnt; serum osmolarity change resulted in a 6.7&percnt; change in CSF formation. CSF formation increased by 130&percnt; with a serum osmolarity of 265 m0sm/1 and was undetectable with serum of 380 m0sm/1.</font></p>
<p><br><font style=\"color: #2e2e2e; \">[3] https://en.wikipedia.org/wiki/Cerebrospinal_fluid</font></p>
<p>The brain produces roughly 500 mL of cerebrospinal fluid per day. This fluid is constantly reabsorbed, so that only 100-160 mL is present at any one time.&nbsp;<a href=\"https://en.wikipedia.org/wiki/Ependymal_cells\">Ependymal cells</a>&nbsp;of the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Choroid_plexus\">choroid plexus</a>&nbsp;produce more than two thirds of CSF. The&nbsp;<a href=\"https://en.wikipedia.org/wiki/Choroid_plexus\">choroid plexus</a>&nbsp;is a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Venous_plexus\">venous plexus</a>&nbsp;contained within the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Ventricular_system\">four ventricles</a>&nbsp;of the brain, hollow structures inside the brain filled with CSF. The remainder of the CSF is produced by the surfaces of the ventricles and by the lining surrounding the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Subarachnoid_space\">subarachnoid space</a>.&nbsp;</p>
<p>Ependymal cells actively secrete sodium into the lateral ventricles. This creates&nbsp;<a href=\"https://en.wikipedia.org/wiki/Osmotic_pressure\">osmotic pressure</a>&nbsp;and draws water into the CSF space. Chloride, with a negative charge, maintains&nbsp;<a href=\"https://en.wikipedia.org/w/index.php?title=Electroneutrality&action=edit&redlink=1\">electroneutrality</a>&nbsp;and moves with the positively-charged sodium. As a result, CSF contains a higher concentration of sodium and chloride than blood plasma, but less potassium, calcium and glucose and protein.&nbsp;</p>
</html>"));
      end CerebrospinalFluid;

    end Examples;

    package Components
      extends Modelica.Icons.Package;

      model OsmoticCell "Solvent container"
        extends Icons.OsmoticCell;
        extends SteadyStates.Interfaces.SteadyState(
                                           state_start=volume_start, storeUnit=
            "mOsm/l");

        parameter Integer NumberOfMembraneTypes=1
          "Membrane type is determined by membrane permeabilities for substances.";

        Interfaces.OsmoticPort_a
                            q_in[NumberOfMembraneTypes]
          "Flux to/from osmotic compartment"                                               annotation (Placement(
              transformation(extent={{-10,-10},{10,10}})));
        parameter Types.Volume volume_start = 0.001
          "Initial volume of compartment"
           annotation (Dialog(group="Initialization"));

        parameter Boolean useImpermeableSolutesInput = false
          "=true, if impermeable substance amount as an input"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.AmountOfSubstance ImpermeableSolutes[NumberOfMembraneTypes]=zeros(NumberOfMembraneTypes)
          "Amount of impermeable substance if useImpermeableSolutesInput=false"
          annotation (Dialog(enable=not useImpermeableSolutesInput));

        Types.RealIO.AmountOfSubstanceInput impermeableSolutes[NumberOfMembraneTypes](start=ImpermeableSolutes)= is if useImpermeableSolutesInput
          "Amount of impermeable solutes in compartment"                                                                                    annotation (Placement(transformation(extent={{-100,40},
                  {-60,80}})));
        Types.RealIO.VolumeOutput volume "Actual volume of compartment"
          annotation (Placement(transformation(extent={{16,-64},{56,-24}}),
              iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));
      protected
        Types.AmountOfSubstance is[NumberOfMembraneTypes]
          "Current amount of impermeable solutes";
      equation
        if not useImpermeableSolutesInput then
          is=ImpermeableSolutes;
        end if;

        q_in.o = is / volume;

        change = ones(NumberOfMembraneTypes) * q_in.q;    //der(volume)=q_in.q
        state = volume;

        //  assert(volume>=-Modelica.Constants.eps,"Collapsed cells by osmotic pressure are not supported!");

        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                                                     graphics={
                                     Text(
                extent={{-80,100},{240,140}},
                textString="%name",
                lineColor={0,0,255})}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>The liquid volume of the penetrating solution is accumulated in &QUOT;OsmoticCell&QUOT;, where the nonpenetrating solutes are held. Instances of this class can represent both sides of the membrane, for example intracellular space, extracellular space, interstitial space, blood plasma or cerebrospinal fluid.</p>
</html>"));
      end OsmoticCell;

      model Membrane "Solvent diffusion through semipermeable membrane"
       extends Interfaces.OnePort;
       extends Icons.Membrane; //Icons.Resistor;

       parameter Boolean useConductanceInput = false
          "=true, if membrane permeability input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

       parameter Types.OsmoticPermeability cond=1e-15
          "Membrane permeability for solvent if useConductanceInput = false"
            annotation (Dialog(enable=not useConductanceInput));

        parameter Boolean useHydraulicPressureInputs = false
          "=true, if hydraulic pressure inputs is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Pressure HydraulicPressureIn=0
          "Hydraulic pressure inside if useHydraulicPressureInputs=false"
          annotation (Dialog(enable=not useHydraulicPressureInputs));
        parameter Types.Pressure HydraulicPressureOut=0
          "Hydraulic pressure outside if useHydraulicPressureInputs=false"
          annotation (Dialog(enable=not useHydraulicPressureInputs));

        Types.RealIO.PressureInput hydraulicPressureIn(start=HydraulicPressureIn)=pi if useHydraulicPressureInputs annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,80})));
        Types.RealIO.PressureInput hydraulicPressureOut(start=HydraulicPressureOut)=po if useHydraulicPressureInputs annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={80,80})));

        parameter Boolean useTemperatureInputs = false
          "=true, if temperature on both sides is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Temperature T=310.15
          "Temperature on both membrane sides if  useTemperatureInputs=false"
          annotation (Dialog(enable=not  useTemperatureInputs));

        Types.RealIO.TemperatureInput temperatureIn(start=T)=ti if useTemperatureInputs annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-80})));
        Types.RealIO.TemperatureInput temperatureOut(start=T)=to if useTemperatureInputs annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={80,-80})));

        Types.OsmoticPermeability perm;

        Types.Pressure opi "osmotic pressure at q_in", opo
          "osmotic pressure at q_out";
      protected
        Types.Pressure pi,po;
        Types.Temperature ti,to;

      public
        Types.RealIO.OsmoticPermeabilityInput conduction=perm if useConductanceInput
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80}),   iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));
      equation
        if not useHydraulicPressureInputs then
          pi=HydraulicPressureIn;
          po=HydraulicPressureOut;
        end if;
        if not useTemperatureInputs then
          ti=T;
          to=T;
        end if;
        if not useConductanceInput then
          cond=perm;
        end if;

        q_in.q = perm * ( (-po + q_out.o*(Modelica.Constants.R*to)) - (-pi + q_in.o*(Modelica.Constants.R*ti)));

        opi = q_in.o*(Modelica.Constants.R*ti);
        opo = q_out.o*(Modelica.Constants.R*to);
        annotation (        Documentation(revisions="<html>
<p><i>2009-2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>The main element of osmotic phenomena is a semipermeable membrane, which generates the flow of penetrating substances together with water. The connector on both sides is composed of molar concentration of non-penetrating solutes (osmolarity), and from penetrating volumetric flow (osmotic flux). Flow through the membrane depends on a pressure gradient, where pressure on both sides is calculated from the osmotic and hydraulic component.</p>
</html>"),   Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}),      graphics={
                                     Text(
                extent={{-140,112},{140,150}},
                textString="%name",
                lineColor={0,0,255})}));
      end Membrane;

      model SolventFlux "Prescripted solvent flow"
        extends Interfaces.OnePort;
        extends Hydraulic.Interfaces.ConditionalSolutionFlow;

      equation
        q_in.q = q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Text(
                extent={{-100,-80},{100,-54}},
                textString="%name",
                lineColor={0,0,255}),
              Rectangle(
                extent={{-100,-50},{100,50}},
                lineColor={127,127,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-78,25},{82,0},{-78,-25},{-78,25}},
                lineColor={127,127,0},
                fillColor={127,127,0},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SolventFlux;

      model IdealOverflowFiltration
        "Semipermeable membrane filtration (e.g. flux through capillary membrane) of overflowing solution (e.g. blood microcirculation)"
        extends Icons.FlowFiltration;
        extends Hydraulic.Interfaces.ConditionalSolutionFlow;
                                                            // "E.g. volumetric inflow to capilary net";

        Interfaces.OsmoticPort_a port_a
          "Inflowing ospomarity and positive filtrate flow rate (e.g. blood osmolarity and flux through capillary membrane from blood to interstitium)"
                                                                                                              annotation (Placement(transformation(extent={{
                  -106,30},{-86,50}}), iconTransformation(extent={{-106,30},{-86,50}})));
        Interfaces.OsmoticPort_b filtrate
          "Outer osmolarity and negative filtrate flow rate (e.g. interstitium osmolarity and flux through capillary membrane from interstitium to blood)"
                                                                                                              annotation (Placement(transformation(extent={{
                  -10,-112},{10,-92}}), iconTransformation(extent={{-10,-112},{10,-92}})));

         parameter Boolean useHydraulicPressureInputs = false
          "=true, if hydraulic pressure inputs is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Pressure HydraulicPressureIn=0
          "Hydraulic pressure inside of leaving overflow (e.g. blood pressure after capillary net) if useHydraulicPressureInputs=false"
          annotation (Dialog(enable=not useHydraulicPressureInputs));
        parameter Types.Pressure HydraulicPressureOut=0
          "Hydraulic pressure outside (e.g. interstitium hydraulic pressure) if useHydraulicPressureInputs=false"
          annotation (Dialog(enable=not useHydraulicPressureInputs));

        Types.RealIO.PressureInput hydraulicPressureIn(start=HydraulicPressureIn)=pi if useHydraulicPressureInputs annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,80})));
        Types.RealIO.PressureInput hydraulicPressureOut(start=HydraulicPressureOut)=po if useHydraulicPressureInputs annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={80,80}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={100,-80})));

        parameter Boolean useTemperatureInputs = false
          "=true, if temperature on both sides is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.Temperature T=310.15
          "Temperature on both membrane sides if  useTemperatureInputs=false"
          annotation (Dialog(enable=not  useTemperatureInputs));

        Types.RealIO.TemperatureInput temperature(start=T)=t if useTemperatureInputs annotation (Placement(
              transformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-80}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={100,0})));

      protected
        Types.Pressure pi,po;
        Types.Temperature t;

        Types.Osmolarity osmolarityO;

      equation
       if not useHydraulicPressureInputs then
          pi=HydraulicPressureIn;
          po=HydraulicPressureOut;
        end if;
        if not useTemperatureInputs then
          t=T;
        end if;

        port_a.q+filtrate.q=0; //flux through membrane

        pi - osmolarityO*Modelica.Constants.R*T = po - filtrate.o*Modelica.Constants.R*T; // venous and interstitium pressure is equilibrated

        port_a.o*q = osmolarityO*(q-port_a.q); //definition of venous osmolarity

      //  port_a.o*q = (q-port_a.q)*filtrate.o; //equilibration without hydraulic part

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={
              Text(
                extent={{-150,-20},{150,20}},
                textString="%name",
                lineColor={0,0,255},
                origin={70,104},
                rotation=180)}),
          Documentation(revisions="<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>Copyright:</td>
<td>In public domains</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
</table>
</html>",       info="<html>
<p><h4><font color=\"#008000\">Bidirectional mass flow by concentration</font></h4></p>
<p>Possible field values: </p>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0.1\"><tr>
<td></td>
<td><p align=\"center\"><h4>forward flow</h4></p></td>
<td><p align=\"center\"><h4>backward flow</h4></p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>solutionFlow</h4></p></td>
<td><p align=\"center\">&GT;=0</p></td>
<td><p align=\"center\">&LT;=0</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_in.q</h4></p></td>
<td><p align=\"center\">=solutionFlow*q_in.conc</p></td>
<td><p align=\"center\">=-q_out.q</p></td>
</tr>
<tr>
<td><p align=\"center\"><h4>q_out.q</h4></p></td>
<td><p align=\"center\">=-q_in.q</p></td>
<td><p align=\"center\">=solutionFlow*q_out.conc</p></td>
</tr>
</table>
<br/>
</html>"));
      end IdealOverflowFiltration;

      model Reabsorption "Divide inflow to outflow and reabsorption"
        import Physiolibrary;
        extends Icons.Reabsorption;

        Interfaces.OsmoticPort_a
                             Inflow                    annotation (Placement(
              transformation(extent={{-114,26},{-86,54}})));
        Interfaces.OsmoticPort_b
                             Outflow
          annotation (Placement(transformation(extent={{86,26},{114,54}})));
        Interfaces.OsmoticPort_b
                             Reabsorption                annotation (Placement(
              transformation(extent={{-14,-114},{14,-86}})));

        Types.RealIO.FractionInput FractReab
                                     annotation (Placement(transformation(extent={{-100,
                  -60},{-60,-20}})));

        parameter Boolean useExternalOutflowMin = false
          "=true, if minimal outflow is garanted"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

        parameter Types.VolumeFlowRate OutflowMin = 0
          "Minimal outflow if useExternalOutflowMin=false"
          annotation (Dialog(enable=not useExternalOutflowMin));

        Types.RealIO.VolumeFlowRateInput outflowMin(start=OutflowMin) = om if useExternalOutflowMin
                                                             annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=270,
              origin={40,80})));

      protected
         Types.VolumeFlowRate om;
      equation
        if not useExternalOutflowMin then
          om = OutflowMin;
        end if;

        Inflow.o = Outflow.o;
        0 = Inflow.q + Outflow.q + Reabsorption.q;

       // assert(Inflow.q>=-Modelica.Constants.eps,"Only one directional flow is supported!");

        Reabsorption.q = -max(0,FractReab*(Inflow.q-om));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                  {100,100}}),       graphics={Text(
                extent={{-100,130},{100,108}},
                lineColor={0,0,255},
                textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",       info="<html>
<p><h4><font color=\"#008000\">Hydraulic Reabsorption</font></h4></p>
<p>If useOutflowMin=false then the next schema is used.</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorption.png\"/></li>
</ul></p>
<p><br/>If  useOutflowMin=true then the extended schema is used:</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorptionWithOutflowMin.png\"/></li>
</ul></p>
</html>"));
      end Reabsorption;
    end Components;

    package Sensors
      extends Modelica.Icons.SensorsPackage;
      model FlowMeasure "Measurement of flux through semipermeable membrane"
        extends Interfaces.OnePort;
        extends Modelica.Icons.RotationalSensor;
        //extends Icons.FlowMeasure;

        Types.RealIO.VolumeFlowRateOutput volumeFlowRate
          "Flux through membrane"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-80})));
      equation
        q_out.o = q_in.o;

        volumeFlowRate = q_in.q;

       annotation (
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),   Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Text(
                extent={{-29,-7},{30,-66}},
                lineColor={0,0,0},
                textString="V'")}));
      end FlowMeasure;
    end Sensors;

    package Sources
      extends Modelica.Icons.SourcesPackage;
      model SolventInflux "Prescribed solvent inflow"
        extends Hydraulic.Interfaces.ConditionalSolutionFlow;

        Interfaces.OsmoticPort_b
                            q_out
                               annotation (Placement(
              transformation(extent={{50,-10},{70,10}})));

      equation
        q_out.q = - q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                              graphics={
              Rectangle(
                extent={{-60,-30},{60,30}},
                lineColor={127,127,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-48,20},{50,0},{-48,-21},{-48,20}},
                lineColor={127,127,0},
                fillColor={127,127,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-92,-58},{80,-34}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SolventInflux;

      model SolventOutflux "Prescribed solvent outflow"
       extends Hydraulic.Interfaces.ConditionalSolutionFlow;
        Interfaces.OsmoticPort_a
                            q_in
                               annotation ( Placement(
              transformation(extent={{-70,-10},{-50,10}})));
      equation
        q_in.q = q;

       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-60,-30},{60,30}},
                lineColor={127,127,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-46,22},{52,0},{-46,-22},{-46,22}},
                lineColor={127,127,0},
                fillColor={127,127,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-78,-58},{72,-36}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end SolventOutflux;

      model UnlimitedSolution "Prescribed osmolarity"

        parameter Boolean useOsmolarityInput = false
          "=true, if fixed osmolarity at port is from input instead of parameter"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Types.Osmolarity Osm = 0
          "Fixed osmolarity at port if useOsmolarityInput=false"
          annotation (Dialog(enable=not useOsmolarityInput));

        parameter Boolean isIsolatedInSteadyState = true
          "=true, if there is no flow at port in steady state"
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

        parameter Types.SimulationType  Simulation=Types.SimulationType.NormalInit
          "If in equilibrium, then zero-flow equation is added."
          annotation (Dialog(group="Simulation",tab="Equilibrium"));

        Interfaces.OsmoticPort_b    port annotation (Placement(transformation(extent={{90,-10},
                  {110,10}})));

      protected
        Types.Osmolarity o "Current osmolarity";
      public
        Types.RealIO.TemperatureInput osmolarity(start=Osmolarity)=o if
                                                                 useOsmolarityInput
          annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

      initial equation
        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.InitSteadyState) then
          port.q = 0;
        end if;

      equation
        if not useOsmolarityInput then
          o=Osm;
        end if;

        port.o = o;

        if isIsolatedInSteadyState and (Simulation==Types.SimulationType.SteadyState) then
            port.q = 0;
        end if;

         annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
                              graphics={
              Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255}),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillColor={127,127,0},
                fillPattern=FillPattern.Backward),
              Text(
                extent={{38,-34},{-100,-100}},
                lineColor={0,0,0},
                textString="Osm"),
              Line(
                points={{-52,0},{56,0}},
                color={191,0,0},
                thickness=0.5),
              Polygon(
                points={{50,-20},{50,20},{90,0},{50,-20}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{140,-100},{-140,-160}},
                lineColor={0,0,0},
                textString="%Osm mosm/l")}),
          Documentation(info="<HTML>
<p>
This model defines a fixed temperature T at its port in Kelvin,
i.e., it defines a fixed temperature as a boundary condition.
</p>
</HTML>
"));
      end UnlimitedSolution;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;

       connector OsmoticPort
        "Flux through semipermeable membrane by osmotic pressure gradient"
        Types.Concentration o
          "Osmolarity is the molar concentration of the impermeable solutes";
        flow Types.VolumeFlowRate q
          "The flux of the permeable solvent (!not the impermeable solutes!)";
        annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
       end OsmoticPort;

      connector OsmoticPort_a "Influx"
        extends OsmoticPort;

      annotation (
          defaultComponentName="port_a",
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={127,127,0},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={127,127,0},
                fillColor={127,127,0},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={127,127,0},
                fillColor={127,127,0},
                fillPattern=FillPattern.Solid),
          Text(extent=  {{-160,110},{40,50}}, lineColor=  {127,127,0}, textString=  "%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end OsmoticPort_a;

      connector OsmoticPort_b "Outflux"
        extends OsmoticPort;

      annotation (
          defaultComponentName="port_b",
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{100,
                  100}}),     graphics={Rectangle(
                extent={{-20,10},{20,-10}},
                lineColor={127,127,0},
                lineThickness=1),       Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={127,127,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}),
              graphics={Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={127,127,0},
               fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
          Text(extent=  {{-160,110},{40,50}}, lineColor=  {127,127,0}, textString=  "%name")}),
          Documentation(info="<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));

      end OsmoticPort_b;

      partial model OnePort "Osmotic one port"

       OsmoticPort_a       q_in "Forward flux through membrane"
                              annotation (Placement(
              transformation(extent={{-110,-10},{-90,10}})));
        OsmoticPort_b       q_out "Backward flux through membrane"
                               annotation (Placement(
              transformation(extent={{90,-10},{110,10}})));
      equation
        q_in.q + q_out.q = 0;
        annotation ( Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end OnePort;

    end Interfaces;
    annotation (Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>",   info="<html>
<p>One of the basic phenomenon of biological systems is the osmotically-driven flow of water. This is always connected with semipermeable membranes. The different concentrations of impermeable solutes on both sides of the membrane causes the hydrostatic pressure at the concentrated side to rise. This pressure difference is called osmotic pressure. Osmotic pressure is linearly proportional to the concentration gradient of impermeable solutes. The osmolarity (osmotic concentration) is also one of the main indexes of human body balance, called homeostasis. Its value should not significantly deviate for a long period of time from a value of 285-295 mosm/l. </p>
<p>In Physiolibrary the osmotic connector OsmoticPort is composed of the osmotic concentration and the volumetric flux of permeable liquid. The two main blocks are called Membrane and OsmoticCell. Here, inside the membrane blocks, it is of course possible to also define hydraulic pressure and temperatures effects on both sides of membrane. </p>
</html>"));
  end Osmotic;
  annotation (preferredView="info",
version="2.3.1",
versionBuild=1,
versionDate="2015-09-15",
dateModified = "2015-09-15 12:49:00Z",
revisionId="",
uses(Modelica(version="3.2.1")),
conversion(
  from(version="BioChem-1.0.1", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertBioChem_1.0.1_to_Physiolibrary_2.3.mos"),
  from(version="0.4980", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_0.4980_to_2.3.mos"),
  from(version="1.0", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.0_to_2.3.mos"),
  from(version="1.1", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.1_to_2.3.mos"),
  from(version="1.2", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.2_to_2.3.mos"),
  from(version="2.0", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.0_to_2.3.mos"),
  from(version="2.1", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_2.3.mos"),
  from(version="2.1.0", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_2.3.mos"),
  from(version="2.1.1", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_2.3.mos"),
  from(version="2.1.2", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_2.3.mos"),
  from(version="2.2.0", script="modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.2_to_2.3.mos")),
  Documentation(revisions="<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, Charles University in Prague </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &QUOT;AS IS&QUOT; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>", info="<html>
<ul>
<li>Web pages: <a href=\"http://www.physiolibrary.org\">www.physiolibrary.org</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Overview\">Overview</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Connectors\">Connectors</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Contact\">Contact</a></li>
</ul>

<p><br/>The origin of this Modelica Physiolibrary was in the first version of our HumMod Golem Edition model implementation, where it was called HumMod.Library. As the successors of Guyton&apos;s Medical Physiology School write, the original HumMod model is &ldquo;The best, most complete, mathematical model of human physiology ever created&rdquo;.</p>
<p>We are also developing many types of smaller physiological models for use in medical education, so it was essential to separate this library from our HumMod Modelica implementation. This separation improves the quality of the next HumMod release and provides a useful Modelica library to modelers in this bioscience.</p>
<p>The library contains only carefully-chosen elementary physiological laws, which are the basis of more complex physiological processes. For example from only two type of blocks (Chemical.ChemicalReaction and Chemical.Substance) it is possible to compose the allosteric transitions or the Michaelis-Menten equation.</p>
<p><br/>Physiology is a very progressive discipline, that examines how the living body works. And it is no surprise that all processes in the human body are driven by physical laws of nature. The great challenge is to marry old empirical experiments with the &ldquo;new&rdquo; physical principles. Many teams and projects in the word deal with this formalization of physiology, for example: Physiome, SBML, EuroPhysiome, VPH, CellML etc. It is our hope that this library helps this unflagging effort of physiologists to exactly describe the processes.</p>
</html>"));
end Physiolibrary;

package Modelica "Modelica Standard Library - Version 3.2.1 (Build 2)"
extends Modelica.Icons.Package;

  package Blocks
  "Library of basic input/output control blocks (continuous, discrete, logical, table blocks)"
  import SI = Modelica.SIunits;
  extends Modelica.Icons.Package;

    package Continuous
    "Library of continuous control blocks with internal states"
      import Modelica.Blocks.Interfaces;
      import Modelica.SIunits;
      extends Modelica.Icons.Package;

      block TransferFunction "Linear transfer function"
        import Modelica.Blocks.Types.Init;
        extends Interfaces.SISO;

        parameter Real b[:]={1}
        "Numerator coefficients of transfer function (e.g., 2*s+3 is specified as {2,3})";
        parameter Real a[:]={1}
        "Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6})";
        parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
        "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
                                           annotation(Evaluate=true, Dialog(group=
                "Initialization"));
        parameter Real x_start[size(a, 1) - 1]=zeros(nx)
        "Initial or guess values of states"
          annotation (Dialog(group="Initialization"));
        parameter Real y_start=0
        "Initial value of output (derivatives of y are zero upto nx-1-th derivative)"
          annotation(Dialog(enable=initType == Init.InitialOutput, group=
                "Initialization"));
        output Real x[size(a, 1) - 1](start=x_start)
        "State of transfer function from controller canonical form";
    protected
        parameter Integer na=size(a, 1)
        "Size of Denominator of transfer function.";
        parameter Integer nb=size(b, 1)
        "Size of Numerator of transfer function.";
        parameter Integer nx=size(a, 1) - 1;
        parameter Real bb[:] = vector([zeros(max(0,na-nb),1);b]);
        parameter Real d = bb[1]/a[1];
        parameter Real a_end = if a[end] > 100*Modelica.Constants.eps*sqrt(a*a) then a[end] else 1.0;
        Real x_scaled[size(x,1)] "Scaled vector x";

      initial equation
        if initType == Init.SteadyState then
          der(x_scaled) = zeros(nx);
        elseif initType == Init.InitialState then
          x_scaled = x_start*a_end;
        elseif initType == Init.InitialOutput then
          y = y_start;
          der(x_scaled[2:nx]) = zeros(nx-1);
        end if;
      equation
        assert(size(b,1) <= size(a,1), "Transfer function is not proper");
        if nx == 0 then
           y = d*u;
        else
           der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1];
           der(x_scaled[2:nx]) = x_scaled[1:nx-1];
           y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u;
           x = x_scaled/a_end;
        end if;
        annotation (
          Documentation(info="<html>
<p>
This block defines the transfer function between the input
u and the output y
as (nb = dimension of b, na = dimension of a):
</p>
<pre>
           b[1]*s^[nb-1] + b[2]*s^[nb-2] + ... + b[nb]
   y(s) = --------------------------------------------- * u(s)
           a[1]*s^[na-1] + a[2]*s^[na-2] + ... + a[na]
</pre>
<p>
State variables <b>x</b> are defined according to <b>controller canonical</b>
form. Internally, vector <b>x</b> is scaled to improve the numerics (the states in versions before version 3.0 of the Modelica Standard Library have been not scaled). This scaling is
not visible from the outside of this block because the non-scaled vector <b>x</b>
is provided as output signal and the start value is with respect to the non-scaled
vector <b>x</b>.
Initial values of the states <b>x</b> can be set via parameter <b>x_start</b>.
</p>

<p>
Example:
</p>
<pre>
     TransferFunction g(b = {2,4}, a = {1,3});
</pre>
<p>
results in the following transfer function:
</p>
<pre>
        2*s + 4
   y = --------- * u
         s + 3
</pre>
</html>"),Icon(
              coordinateSystem(preserveAspectRatio=true,
                extent={{-100.0,-100.0},{100.0,100.0}},
                initialScale=0.1),
                graphics={
              Line(visible=true,
                points={{-80.0,0.0},{80.0,0.0}},
                color={0,0,127}),
            Text(visible=true,
              lineColor={0,0,127},
              extent={{-90.0,10.0},{90.0,90.0}},
              textString="b(s)"),
            Text(visible=true,
              lineColor={0,0,127},
              extent={{-90.0,-90.0},{90.0,-10.0}},
              textString="a(s)")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{40,0},{-40,0}}, color={0,0,0}),
              Text(
                extent={{-55,55},{55,5}},
                lineColor={0,0,0},
                textString="b(s)"),
              Text(
                extent={{-55,-5},{55,-55}},
                lineColor={0,0,0},
                textString="a(s)"),
              Rectangle(extent={{-60,60},{60,-60}}, lineColor={0,0,255}),
              Line(points={{-100,0},{-60,0}}, color={0,0,255}),
              Line(points={{60,0},{100,0}}, color={0,0,255})}));
      end TransferFunction;

      block Der "Derivative of input (= analytic differentiations)"
          extends Interfaces.SISO;

      equation
        y = der(u);
          annotation (defaultComponentName="der1",
       Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-96,28},{94,-24}},
                textString="der()",
                lineColor={0,0,127})}),
              Documentation(info="<HTML>
<p>
Defines that the output y is the <i>derivative</i>
of the input u. Note, that Modelica.Blocks.Continuous.Derivative
computes the derivative in an approximate sense, where as this block computes
the derivative exactly. This requires that the input u is differentiated
by the Modelica translator, if this derivative is not yet present in
the model.
</p>
</HTML>"));
      end Der;
      annotation (
        Documentation(info="<html>
<p>
This package contains basic <b>continuous</b> input/output blocks
described by differential equations.
</p>

<p>
All blocks of this package can be initialized in different
ways controlled by parameter <b>initType</b>. The possible
values of initType are defined in
<a href=\"modelica://Modelica.Blocks.Types.Init\">Modelica.Blocks.Types.Init</a>:
</p>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td valign=\"top\"><b>Name</b></td>
      <td valign=\"top\"><b>Description</b></td></tr>

  <tr><td valign=\"top\"><b>Init.NoInit</b></td>
      <td valign=\"top\">no initialization (start values are used as guess values with fixed=false)</td></tr>

  <tr><td valign=\"top\"><b>Init.SteadyState</b></td>
      <td valign=\"top\">steady state initialization (derivatives of states are zero)</td></tr>

  <tr><td valign=\"top\"><b>Init.InitialState</b></td>
      <td valign=\"top\">Initialization with initial states</td></tr>

  <tr><td valign=\"top\"><b>Init.InitialOutput</b></td>
      <td valign=\"top\">Initialization with initial outputs (and steady state of the states if possible)</td></tr>
</table>

<p>
For backward compatibility reasons the default of all blocks is
<b>Init.NoInit</b>, with the exception of Integrator and LimIntegrator
where the default is <b>Init.InitialState</b> (this was the initialization
defined in version 2.2 of the Modelica standard library).
</p>

<p>
In many cases, the most useful initial condition is
<b>Init.SteadyState</b> because initial transients are then no longer
present. The drawback is that in combination with a non-linear
plant, non-linear algebraic equations occur that might be
difficult to solve if appropriate guess values for the
iteration variables are not provided (i.e., start values with fixed=false).
However, it is often already useful to just initialize
the linear blocks from the Continuous blocks library in SteadyState.
This is uncritical, because only linear algebraic equations occur.
If Init.NoInit is set, then the start values for the states are
interpreted as <b>guess</b> values and are propagated to the
states with fixed=<b>false</b>.
</p>

<p>
Note, initialization with Init.SteadyState is usually difficult
for a block that contains an integrator
(Integrator, LimIntegrator, PI, PID, LimPID).
This is due to the basic equation of an integrator:
</p>

<pre>
  <b>initial equation</b>
     <b>der</b>(y) = 0;   // Init.SteadyState
  <b>equation</b>
     <b>der</b>(y) = k*u;
</pre>

<p>
The steady state equation leads to the condition that the input to the
integrator is zero. If the input u is already (directly or indirectly) defined
by another initial condition, then the initialization problem is <b>singular</b>
(has none or infinitely many solutions). This situation occurs often
for mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and
since speed is both a state and a derivative, it is always defined by
Init.InitialState or Init.SteadyState initialization.
</p>

<p>
In such a case, <b>Init.NoInit</b> has to be selected for the integrator
and an additional initial equation has to be added to the system
to which the integrator is connected. E.g., useful initial conditions
for a 1-dim. rotational inertia controlled by a PI controller are that
<b>angle</b>, <b>speed</b>, and <b>acceleration</b> of the inertia are zero.
</p>

</html>"),     Icon(graphics={Line(
              origin={0.061,4.184},
              points={{81.939,36.056},{65.362,36.056},{14.39,-26.199},{-29.966,
                  113.485},{-65.374,-61.217},{-78.061,-78.184}},
              color={95,95,95},
              smooth=Smooth.Bezier)}));
    end Continuous;

    package Interfaces
    "Library of connectors and partial models for input/output blocks"
      import Modelica.SIunits;
      extends Modelica.Icons.InterfacesPackage;

      connector RealInput = input Real "'input Real' as connector" annotation (
        defaultComponentName="u",
        Icon(graphics={
          Polygon(
            lineColor={0,0,127},
            fillColor={0,0,127},
            fillPattern=FillPattern.Solid,
            points={{-100.0,100.0},{100.0,0.0},{-100.0,-100.0}})},
          coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}},
            preserveAspectRatio=true,
            initialScale=0.2)),
        Diagram(
          coordinateSystem(preserveAspectRatio=true,
            initialScale=0.2,
            extent={{-100.0,-100.0},{100.0,100.0}}),
            graphics={
          Polygon(
            lineColor={0,0,127},
            fillColor={0,0,127},
            fillPattern=FillPattern.Solid,
            points={{0.0,50.0},{100.0,0.0},{0.0,-50.0},{0.0,50.0}}),
          Text(
            lineColor={0,0,127},
            extent={{-10.0,60.0},{-10.0,85.0}},
            textString="%name")}),
        Documentation(info="<html>
<p>
Connector with one input signal of type Real.
</p>
</html>"));

      connector RealOutput = output Real "'output Real' as connector" annotation (
        defaultComponentName="y",
        Icon(
          coordinateSystem(preserveAspectRatio=true,
            extent={{-100.0,-100.0},{100.0,100.0}},
            initialScale=0.1),
            graphics={
          Polygon(
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid,
            points={{-100.0,100.0},{100.0,0.0},{-100.0,-100.0}})}),
        Diagram(
          coordinateSystem(preserveAspectRatio=true,
            extent={{-100.0,-100.0},{100.0,100.0}},
            initialScale=0.1),
            graphics={
          Polygon(
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid,
            points={{-100.0,50.0},{0.0,0.0},{-100.0,-50.0}}),
          Text(
            lineColor={0,0,127},
            extent={{30.0,60.0},{30.0,110.0}},
            textString="%name")}),
        Documentation(info="<html>
<p>
Connector with one output signal of type Real.
</p>
</html>"));

      connector BooleanInput = input Boolean "'input Boolean' as connector"
        annotation (
        defaultComponentName="u",
        Icon(graphics={Polygon(
              points={{-100,100},{100,0},{-100,-100},{-100,100}},
              lineColor={255,0,255},
              fillColor={255,0,255},
              fillPattern=FillPattern.Solid)}, coordinateSystem(
            extent={{-100,-100},{100,100}},
            preserveAspectRatio=true,
            initialScale=0.2)),
        Diagram(coordinateSystem(
            preserveAspectRatio=true,
            initialScale=0.2,
            extent={{-100,-100},{100,100}}), graphics={Polygon(
              points={{0,50},{100,0},{0,-50},{0,50}},
              lineColor={255,0,255},
              fillColor={255,0,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-10,85},{-10,60}},
              lineColor={255,0,255},
              textString="%name")}),
        Documentation(info="<html>
<p>
Connector with one input signal of type Boolean.
</p>
</html>"));

      connector BooleanOutput = output Boolean "'output Boolean' as connector"
        annotation (
        defaultComponentName="y",
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}}), graphics={Polygon(
              points={{-100,100},{100,0},{-100,-100},{-100,100}},
              lineColor={255,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}}), graphics={Polygon(
              points={{-100,50},{0,0},{-100,-50},{-100,50}},
              lineColor={255,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{30,110},{30,60}},
              lineColor={255,0,255},
              textString="%name")}),
        Documentation(info="<html>
<p>
Connector with one output signal of type Boolean.
</p>
</html>"));

      partial block SO "Single Output continuous control block"
        extends Modelica.Blocks.Icons.Block;

        RealOutput y "Connector of Real output signal" annotation (Placement(
              transformation(extent={{100,-10},{120,10}}, rotation=0)));
        annotation (Documentation(info="<html>
<p>
Block has one continuous Real output signal.
</p>
</html>"));

      end SO;

      partial block SISO "Single Input Single Output continuous control block"
        extends Modelica.Blocks.Icons.Block;

        RealInput u "Connector of Real input signal" annotation (Placement(
              transformation(extent={{-140,-20},{-100,20}}, rotation=0)));
        RealOutput y "Connector of Real output signal" annotation (Placement(
              transformation(extent={{100,-10},{120,10}}, rotation=0)));
        annotation (Documentation(info="<html>
<p>
Block has one continuous Real input and one continuous Real output signal.
</p>
</html>"));
      end SISO;

      partial block SI2SO
      "2 Single Input / 1 Single Output continuous control block"
        extends Modelica.Blocks.Icons.Block;

        RealInput u1 "Connector of Real input signal 1" annotation (Placement(
              transformation(extent={{-140,40},{-100,80}}, rotation=0)));
        RealInput u2 "Connector of Real input signal 2" annotation (Placement(
              transformation(extent={{-140,-80},{-100,-40}}, rotation=0)));
        RealOutput y "Connector of Real output signal" annotation (Placement(
              transformation(extent={{100,-10},{120,10}}, rotation=0)));

        annotation (Documentation(info="<html>
<p>
Block has two continuous Real input signals u1 and u2 and one
continuous Real output signal y.
</p>
</html>"));

      end SI2SO;

      partial block SIMO
      "Single Input Multiple Output continuous control block"
        extends Modelica.Blocks.Icons.Block;
        parameter Integer nout=1 "Number of outputs";
        RealInput u "Connector of Real input signal" annotation (Placement(
              transformation(extent={{-140,-20},{-100,20}}, rotation=0)));
        RealOutput y[nout] "Connector of Real output signals" annotation (Placement(
              transformation(extent={{100,-10},{120,10}}, rotation=0)));

        annotation (Documentation(info="<HTML>
<p> Block has one continuous Real input signal and a
    vector of continuous Real output signals.</p>

</html>"));
      end SIMO;

      partial block MISO
      "Multiple Input Single Output continuous control block"

        extends Modelica.Blocks.Icons.Block;
        parameter Integer nin=1 "Number of inputs";
        RealInput u[nin] "Connector of Real input signals" annotation (Placement(
              transformation(extent={{-140,-20},{-100,20}}, rotation=0)));
        RealOutput y "Connector of Real output signal" annotation (Placement(
              transformation(extent={{100,-10},{120,10}}, rotation=0)));
        annotation (Documentation(info="<HTML>
<p>
Block has a vector of continuous Real input signals and
one continuous Real output signal.
</p>
</html>"));
      end MISO;

      partial block partialBooleanSource
      "Partial source block (has 1 output Boolean signal and an appropriate default icon)"
        extends Modelica.Blocks.Icons.PartialBooleanBlock;

        Blocks.Interfaces.BooleanOutput y "Connector of Boolean output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                  100}}), graphics={
              Polygon(
                points={{-80,88},{-88,66},{-72,66},{-80,88}},
                lineColor={255,0,255},
                fillColor={255,0,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,66},{-80,-82}}, color={255,0,255}),
              Line(points={{-90,-70},{72,-70}}, color={255,0,255}),
              Polygon(
                points={{90,-70},{68,-62},{68,-78},{90,-70}},
                lineColor={255,0,255},
                fillColor={255,0,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{71,7},{85,-7}},
                lineColor=DynamicSelect({235,235,235}, if y > 0.5 then {0,255,0}
                     else {235,235,235}),
                fillColor=DynamicSelect({235,235,235}, if y > 0.5 then {0,255,0}
                     else {235,235,235}),
                fillPattern=FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Polygon(
                  points={{-70,92},{-76,70},{-64,70},{-70,92}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),Line(points={{-70,70},{-70,-88}},
                color={95,95,95}),Line(points={{-90,-70},{68,-70}}, color={95,95,95}),
                Polygon(
                  points={{90,-70},{68,-64},{68,-76},{90,-70}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),Text(
                  extent={{54,-80},{106,-92}},
                  lineColor={0,0,0},
                  textString="time"),Text(
                  extent={{-64,92},{-46,74}},
                  lineColor={0,0,0},
                  textString="y")}),
          Documentation(info="<html>
<p>
Basic block for Boolean sources of package Blocks.Sources.
This component has one continuous Boolean output signal y
and a 3D icon (e.g., used in Blocks.Logical library).
</p>
</html>"));

      end partialBooleanSource;

      partial block partialBooleanThresholdComparison
      "Partial block to compare the Real input u with a threshold and provide the result as 1 Boolean output signal"

        parameter Real threshold=0 "Comparison with respect to threshold";

        Blocks.Interfaces.RealInput u "Connector of Boolean input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}},
                rotation=0)));
        Blocks.Interfaces.BooleanOutput y "Connector of Boolean output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));

        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=5.0,
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Text(
                extent={{-150,-140},{150,-110}},
                lineColor={0,0,0},
                textString="%threshold"),
              Ellipse(
                extent={{71,7},{85,-7}},
                lineColor=DynamicSelect({235,235,235}, if y > 0.5 then {0,255,0}
                     else {235,235,235}),
                fillColor=DynamicSelect({235,235,235}, if y > 0.5 then {0,255,0}
                     else {235,235,235}),
                fillPattern=FillPattern.Solid)}), Documentation(info="<html>
<p>
Block has one continuous Real input and one continuous Boolean output signal
as well as a 3D icon (e.g., used in Blocks.Logical library).
</p>
</html>"));

      end partialBooleanThresholdComparison;
      annotation (Documentation(info="<HTML>
<p>
This package contains interface definitions for
<b>continuous</b> input/output blocks with Real,
Integer and Boolean signals. Furthermore, it contains
partial models for continuous and discrete blocks.
</p>

</html>",     revisions="<html>
<ul>
<li><i>Oct. 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       Added several new interfaces.
<li><i>Oct. 24, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       RealInputSignal renamed to RealInput. RealOutputSignal renamed to
       output RealOutput. GraphBlock renamed to BlockIcon. SISOreal renamed to
       SISO. SOreal renamed to SO. I2SOreal renamed to M2SO.
       SignalGenerator renamed to SignalSource. Introduced the following
       new models: MIMO, MIMOs, SVcontrol, MVcontrol, DiscreteBlockIcon,
       DiscreteBlock, DiscreteSISO, DiscreteMIMO, DiscreteMIMOs,
       BooleanBlockIcon, BooleanSISO, BooleanSignalSource, MI2BooleanMOs.</li>
<li><i>June 30, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized a first version, based on an existing Dymola library
       of Dieter Moormann and Hilding Elmqvist.</li>
</ul>
</html>"));
    end Interfaces;

    package Logical
    "Library of components with Boolean input and output signals"
      extends Modelica.Icons.Package;

      block GreaterThreshold
      "Output y is true, if input u is greater than threshold"
        extends Blocks.Interfaces.partialBooleanThresholdComparison;
      equation
        y = u > threshold;
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-90,-40},{60,40}},
                lineColor={0,0,0},
                textString=">")}), Documentation(info="<html>
<p>
The output is <b>true</b> if the Real input is greater than
parameter <b>threshold</b>, otherwise
the output is <b>false</b>.
</p>
</html>"));
      end GreaterThreshold;

      block Switch "Switch between two Real signals"
        extends Modelica.Blocks.Icons.PartialBooleanBlock;
        Blocks.Interfaces.RealInput u1 "Connector of first Real input signal"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}},
                rotation=0)));
        Blocks.Interfaces.BooleanInput u2 "Connector of Boolean input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}},
                rotation=0)));
        Blocks.Interfaces.RealInput u3 "Connector of second Real input signal"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}},
                rotation=0)));
        Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));

      equation
        y = if u2 then u1 else u3;
        annotation (
          defaultComponentName="switch1",
          Documentation(info="<html>
<p>The Logical.Switch switches, depending on the
logical connector u2 (the middle connector)
between the two possible input signals
u1 (upper connector) and u3 (lower connector).</p>
<p>If u2 is <b>true</b>, the output signal y is set equal to
u1, else it is set equal to u3.</p>
</html>"),Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              initialScale=0.1), graphics={
              Line(points={{12.0,0.0},{100.0,0.0}},
                color={0,0,127}),
              Line(points={{-100.0,0.0},{-40.0,0.0}},
                color={255,0,255}),
              Line(points={{-100.0,-80.0},{-40.0,-80.0},{-40.0,-80.0}},
                color={0,0,127}),
              Line(points={{-40.0,12.0},{-40.0,-12.0}},
                color={255,0,255}),
              Line(points={{-100.0,80.0},{-38.0,80.0}},
                color={0,0,127}),
              Line(points={{-38.0,80.0},{6.0,2.0}},
                color={0,0,127},
                thickness=1.0),
              Ellipse(lineColor={0,0,255},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                extent={{2.0,-8.0},{18.0,8.0}})}));
      end Switch;
      annotation (Documentation(info="<html>
<p>
This package provides blocks with Boolean input and output signals
to describe logical networks. A typical example for a logical
network built with package Logical is shown in the next figure:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/LogicalNetwork1.png\"
     alt=\"LogicalNetwork1.png\">
</p>

<p>
The actual value of Boolean input and/or output signals is displayed
in the respective block icon as \"circle\", where \"white\" color means
value <b>false</b> and \"green\" color means value <b>true</b>. These
values are visualized in a diagram animation.
</p>
</html>"),     Icon(graphics={Line(
              visible=true,
              points={{-86,-22},{-50,-22},{-50,22},{48,22},{48,-22},{88,-24}},
              color={255,0,255})}));
    end Logical;

    package Math
    "Library of Real mathematical functions as input/output blocks"
      import Modelica.SIunits;
      import Modelica.Blocks.Interfaces;
      extends Modelica.Icons.Package;

          block Gain "Output the product of a gain value with the input signal"

            parameter Real k(start=1, unit="1")
        "Gain value multiplied with input signal";
    public
            Interfaces.RealInput u "Input signal connector"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}},
                rotation=0)));
            Interfaces.RealOutput y "Output signal connector"
              annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));

          equation
            y = k*u;
            annotation (
              Documentation(info="<html>
<p>
This block computes output <i>y</i> as
<i>product</i> of gain <i>k</i> with the
input <i>u</i>:
</p>
<pre>
    y = k * u;
</pre>

</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,-140},{150,-100}},
                lineColor={0,0,0},
                textString="k=%k"),
              Text(
                extent={{-150,140},{150,100}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Polygon(
                points={{-100,-100},{-100,100},{100,0},{-100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-76,38},{0,-34}},
                textString="k",
                lineColor={0,0,255})}));
          end Gain;

          block Sum "Output the sum of the elements of the input vector"
            extends Interfaces.MISO;
            parameter Real k[nin]=ones(nin) "Optional: sum coefficients";
          equation
            y = k*u;
            annotation (defaultComponentName="sum1",
              Documentation(info="<html>
<p>
This blocks computes output <b>y</b> as
<i>sum</i> of the elements of the input signal vector
<b>u</b>:
</p>
<pre>
    <b>y</b> = <b>u</b>[1] + <b>u</b>[2] + ...;
</pre>
<p>
Example:
</p>
<pre>
     parameter:   nin = 3;

  results in the following equations:

     y = u[1] + u[2] + u[3];
</pre>

</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Line(
                points={{26,42},{-34,42},{6,2},{-34,-38},{26,-38}},
                color={0,0,0},
                thickness=0.25), Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Line(
                points={{26,42},{-34,42},{6,2},{-34,-38},{26,-38}},
                color={0,0,0},
                thickness=0.25)}));
          end Sum;

          block Feedback
      "Output difference between commanded and feedback input"

            Interfaces.RealInput u1 annotation (Placement(transformation(
                extent={{-100,-20},{-60,20}}, rotation=0)));
            Interfaces.RealInput u2
              annotation (Placement(transformation(
              origin={0,-80},
              extent={{-20,-20},{20,20}},
              rotation=90)));
            Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{80,-10},{100,10}}, rotation=0)));

          equation
            y = u1 - u2;
            annotation (
              Documentation(info="<html>
<p>
This blocks computes output <b>y</b> as <i>difference</i> of the
commanded input <b>u1</b> and the feedback
input <b>u2</b>:
</p>
<pre>
    <b>y</b> = <b>u1</b> - <b>u2</b>;
</pre>
<p>
Example:
</p>
<pre>
     parameter:   n = 2

  results in the following equations:

     y = u1 - u2
</pre>

</html>"),           Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}, initialScale = 0.1), graphics = {
                Ellipse(
                  lineColor=  {0,0,127},
                  fillColor=  {235,235,235},
                  fillPattern=  FillPattern.Solid,
                  extent=  {{-20,-20},{20,20}}),
                Line(points=  {{-60,0},{-20,0}}, color=  {0,0,127}),
                Line(points=  {{20,0},{80,0}}, color=  {0,0,127}),
                Line(points=  {{0,-20},{0,-60}}, color=  {0,0,127}),
                Text(extent=  {{-14,-94},{82,0}}, textString=  "-"),
                Text(
                  lineColor=  {0,0,255},
                  extent=  {{-150,44},{150,94}},
                  textString=  "%name")}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-20,20},{20,-20}},
                pattern=LinePattern.Solid,
                lineThickness=0.25,
                fillColor={235,235,235},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,255}),
              Line(points={{-60,0},{-20,0}}, color={0,0,255}),
              Line(points={{20,0},{80,0}}, color={0,0,255}),
              Line(points={{0,-20},{0,-60}}, color={0,0,255}),
              Text(
                extent={{-12,10},{84,-84}},
                lineColor={0,0,0},
                textString="-")}));
          end Feedback;

          block Add "Output the sum of the two inputs"
            extends Interfaces.SI2SO;

            parameter Real k1=+1 "Gain of upper input";
            parameter Real k2=+1 "Gain of lower input";

          equation
            y = k1*u1 + k2*u2;
            annotation (
              Documentation(info="<html>
<p>
This blocks computes output <b>y</b> as <i>sum</i> of the
two input signals <b>u1</b> and <b>u2</b>:
</p>
<pre>
    <b>y</b> = k1*<b>u1</b> + k2*<b>u2</b>;
</pre>
<p>
Example:
</p>
<pre>
     parameter:   k1= +2, k2= -3

  results in the following equations:

     y = 2 * u1 - 3 * u2
</pre>

</html>"),           Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}, initialScale = 0.1), graphics = {
                Text(
                  lineColor=  {0,0,255},
                  extent=  {{-150,110},{150,150}},
                  textString=  "%name"),
                Line(
                  points=  {{-100,60},{-74,24},{-44,24}},
                  color=  {0,0,127}),
                Line(
                  points=  {{-100,-60},{-74,-28},{-42,-28}},
                  color=  {0,0,127}),
                Ellipse(
                  lineColor=  {0,0,127},
                  extent=  {{-50,-50},{50,50}}),
                Line(
                  points=  {{50,0},{100,0}},
                  color=  {0,0,127}),
                Text(
                  extent=  {{-38,-34},{38,34}},
                  textString=  "+"),
                Text(
                  extent=  {{-100,52},{5,92}},
                  textString=  "%k1"),
                Text(
                  extent=  {{-100,-92},{5,-52}},
                  textString=  "%k2")}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{50,0},{100,0}}, color={0,0,255}),
              Line(points={{-100,60},{-74,24},{-44,24}}, color={0,0,127}),
              Line(points={{-100,-60},{-74,-28},{-42,-28}}, color={0,0,127}),
              Ellipse(extent={{-50,50},{50,-50}}, lineColor={0,0,127}),
              Line(points={{50,0},{100,0}}, color={0,0,127}),
              Text(
                extent={{-36,38},{40,-30}},
                lineColor={0,0,0},
                textString="+"),
              Text(
                extent={{-100,52},{5,92}},
                lineColor={0,0,0},
                textString="k1"),
              Text(
                extent={{-100,-52},{5,-92}},
                lineColor={0,0,0},
                textString="k2")}));
          end Add;

          block Add3 "Output the sum of the three inputs"
            extends Modelica.Blocks.Icons.Block;

            parameter Real k1=+1 "Gain of upper input";
            parameter Real k2=+1 "Gain of middle input";
            parameter Real k3=+1 "Gain of lower input";
            Interfaces.RealInput u1 "Connector 1 of Real input signals"
              annotation (Placement(transformation(extent={{-140,60},{-100,100}},
                rotation=0)));
            Interfaces.RealInput u2 "Connector 2 of Real input signals"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}},
                rotation=0)));
            Interfaces.RealInput u3 "Connector 3 of Real input signals"
              annotation (Placement(transformation(extent={{-140,-100},{-100,-60}},
                rotation=0)));
            Interfaces.RealOutput y "Connector of Real output signals"
              annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));

          equation
            y = k1*u1 + k2*u2 + k3*u3;
            annotation (
              Documentation(info="<html>
<p>
This blocks computes output <b>y</b> as <i>sum</i> of the
three input signals <b>u1</b>, <b>u2</b> and <b>u3</b>:
</p>
<pre>
    <b>y</b> = k1*<b>u1</b> + k2*<b>u2</b> + k3*<b>u3</b>;
</pre>
<p>
Example:
</p>
<pre>
     parameter:   k1= +2, k2= -3, k3=1;

  results in the following equations:

     y = 2 * u1 - 3 * u2 + u3;
</pre>

</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-100,50},{5,90}},
                lineColor={0,0,0},
                textString="%k1"),
              Text(
                extent={{-100,-20},{5,20}},
                lineColor={0,0,0},
                textString="%k2"),
              Text(
                extent={{-100,-50},{5,-90}},
                lineColor={0,0,0},
                textString="%k3"),
              Text(
                extent={{2,36},{100,-44}},
                lineColor={0,0,0},
                textString="+")}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,50},{5,90}},
                lineColor={0,0,0},
                textString="k1"),
              Text(
                extent={{-100,-20},{5,20}},
                lineColor={0,0,0},
                textString="k2"),
              Text(
                extent={{-100,-50},{5,-90}},
                lineColor={0,0,0},
                textString="k3"),
              Text(
                extent={{2,46},{100,-34}},
                lineColor={0,0,0},
                textString="+")}));
          end Add3;

          block Product "Output product of the two inputs"
            extends Interfaces.SI2SO;

          equation
            y = u1*u2;
            annotation (
              Documentation(info="<html>
<p>
This blocks computes the output <b>y</b> (element-wise)
as <i>product</i> of the corresponding elements of
the two inputs <b>u1</b> and <b>u2</b>:
</p>
<pre>
    y = u1 * u2;
</pre>

</html>"),           Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}, initialScale = 0.1), graphics = {
                Line(
                  points=  {{-100,60},{-40,60},{-30,40}},
                  color=  {0,0,127}),
                Line(
                  points=  {{-100,-60},{-40,-60},{-30,-40}},
                  color=  {0,0,127}),
                Line(
                  points=  {{50,0},{100,0}},
                  color=  {0,0,127}),
                Line(
                  points=  {{-30,0},{30,0}}),
                Line(
                  points=  {{-15,25.99},{15,-25.99}}),
                Line(
                  points=  {{-15,-25.99},{15,25.99}}),
                Ellipse(
                  lineColor=  {0,0,127},
                  extent=  {{-50,-50},{50,50}})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,60},{-40,60},{-30,40}}, color={0,0,255}),
              Line(points={{-100,-60},{-40,-60},{-30,-40}}, color={0,0,255}),
              Line(points={{50,0},{100,0}}, color={0,0,255}),
              Line(points={{-30,0},{30,0}}, color={0,0,0}),
              Line(points={{-15,25.99},{15,-25.99}}, color={0,0,0}),
              Line(points={{-15,-25.99},{15,25.99}}, color={0,0,0}),
              Ellipse(extent={{-50,50},{50,-50}}, lineColor={0,0,255})}));
          end Product;

          block Division "Output first input divided by second input"
            extends Interfaces.SI2SO;

          equation
            y = u1/u2;
            annotation (
              Documentation(info="<html>
<p>
This block computes the output <b>y</b> (element-wise)
by <i>dividing</i> the corresponding elements of
the two inputs <b>u1</b> and <b>u2</b>:
</p>
<pre>
    y = u1 / u2;
</pre>

</html>"),           Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}, initialScale = 0.1), graphics = {
                Line(
                  points=  {{50,0},{100,0}},
                  color=  {0,0,127}),
                Line(
                  points=  {{-30,0},{30,0}}),
                Ellipse(
                  fillPattern=  FillPattern.Solid,
                  extent=  {{-5,20},{5,30}}),
                Ellipse(
                  fillPattern=  FillPattern.Solid,
                  extent=  {{-5,-30},{5,-20}}),
                Ellipse(
                  lineColor=  {0,0,127},
                  extent=  {{-50,-50},{50,50}}),
                Text(
                  lineColor=  {0,0,255},
                  extent=  {{-150,110},{150,150}},
                  textString=  "%name"),
                Line(
                  points=  {{-100,60},{-66,60},{-40,30}},
                  color=  {0,0,127}),
                Line(
                  points=  {{-100,-60},{0,-60},{0,-50}},
                  color=  {0,0,127})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{50,0},{100,0}}, color={0,0,255}),
              Line(points={{-30,0},{30,0}}, color={0,0,0}),
              Ellipse(
                extent={{-5,20},{5,30}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-5,-20},{5,-30}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(extent={{-50,50},{50,-50}}, lineColor={0,0,255}),
              Line(points={{-100,60},{-66,60},{-40,30}}, color={0,0,255}),
              Line(points={{-100,-60},{0,-60},{0,-50}}, color={0,0,255})}));
          end Division;

          block Log10
      "Output the base 10 logarithm of the input (input > 0 required)"

            extends Interfaces.SISO;
          equation
            y = Modelica.Math.log10(u);
            annotation (
              Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{90,0},{68,8},{68,-8},{90,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,0},{68,0}}, color={192,192,192}),
              Line(points={{-79.8,-80},{-79.2,-50.6},{-78.4,-37},{-77.6,-28},{-76.8,
                    -21.3},{-75.2,-11.4},{-72.8,-1.31},{-69.5,8.08},{-64.7,17.9},{-57.5,
                    28},{-47,38.1},{-31.8,48.1},{-10.1,58},{22.1,68},{68.7,78.1},{
                    80,80}}, color={0,0,0}, smooth=Smooth.Bezier),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-80},{-80,68}}, color={192,192,192}),
              Text(
                extent={{-30,-22},{60,-70}},
                lineColor={192,192,192},
                textString="log10")}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-80,80},{-88,80}}, color={192,192,192}),
              Line(points={{-80,-80},{-88,-80}}, color={192,192,192}),
              Line(points={{-80,-90},{-80,84}}, color={192,192,192}),
              Text(
                extent={{-65,96},{-38,78}},
                lineColor={160,160,164},
                textString="y"),
              Polygon(
                points={{-80,100},{-86,84},{-74,84},{-80,100}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,0},{84,0}}, color={192,192,192}),
              Polygon(
                points={{100,0},{84,6},{84,-6},{100,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-79.8,-80},{-79.2,-50.6},{-78.4,-37},{-77.6,-28},{-76.8,
                    -21.3},{-75.2,-11.4},{-72.8,-1.31},{-69.5,8.08},{-64.7,17.9},{-57.5,
                    28},{-47,38.1},{-31.8,48.1},{-10.1,58},{22.1,68},{68.7,78.1},{
                    80,80}}, color={0,0,0}),
              Text(
                extent={{70,-3},{90,-23}},
                textString="20",
                lineColor={0,0,255}),
              Text(
                extent={{-78,-1},{-58,-21}},
                textString="1",
                lineColor={0,0,255}),
              Text(
                extent={{-109,72},{-89,88}},
                textString=" 1.3",
                lineColor={0,0,255}),
              Text(
                extent={{-109,-88},{-89,-72}},
                textString="-1.3",
                lineColor={0,0,255}),
              Text(
                extent={{62,30},{90,10}},
                lineColor={160,160,164},
                textString="u")}),
              Documentation(info="<HTML>
<p>
This blocks computes the output <b>y</b> as the
<i>base 10 logarithm</i> of the input <b>u</b>:
</p>
<pre>
    y = <b>log10</b>( u );
</pre>
<p>
An error occurs if the elements of the input <b>u</b> are
zero or negative.
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/log10.png\"
     alt=\"log10.png\">
</p>

</html>"));
          end Log10;
      annotation (
        Documentation(info="<html>
<p>
This package contains basic <b>mathematical operations</b>,
such as summation and multiplication, and basic <b>mathematical
functions</b>, such as <b>sqrt</b> and <b>sin</b>, as
input/output blocks. All blocks of this library can be either
connected with continuous blocks or with sampled-data blocks.
</p>
</html>",     revisions="<html>
<ul>
<li><i>October 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       New blocks added: RealToInteger, IntegerToReal, Max, Min, Edge, BooleanChange, IntegerChange.</li>
<li><i>August 7, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized (partly based on an existing Dymola library
       of Dieter Moormann and Hilding Elmqvist).
</li>
</ul>
</html>"),     Icon(graphics={Line(
              points={{-80,-2},{-68.7,32.2},{-61.5,51.1},{-55.1,64.4},{-49.4,72.6},
                  {-43.8,77.1},{-38.2,77.8},{-32.6,74.6},{-26.9,67.7},{-21.3,57.4},
                  {-14.9,42.1},{-6.83,19.2},{10.1,-32.8},{17.3,-52.2},{23.7,-66.2},
                  {29.3,-75.1},{35,-80.4},{40.6,-82},{46.2,-79.6},{51.9,-73.5},{
                  57.5,-63.9},{63.9,-49.2},{72,-26.8},{80,-2}},
              color={95,95,95},
              smooth=Smooth.Bezier)}));
    end Math;

    package Nonlinear
    "Library of discontinuous or non-differentiable algebraic control blocks"
      import Modelica.Blocks.Interfaces;
      extends Modelica.Icons.Package;

          block DeadZone "Provide a region of zero output"
            parameter Real uMax(start=1) "Upper limits of dead zones";
            parameter Real uMin=-uMax "Lower limits of dead zones";
            parameter Boolean deadZoneAtInit = true
        "= false, if dead zone is ignored during initialization (i.e., y=u)";
            extends Interfaces.SISO;

          equation
            assert(uMax >= uMin, "DeadZone: Limits must be consistent. However, uMax (=" + String(uMax) +
                                 ") < uMin (=" + String(uMin) + ")");

            if initial() and not deadZoneAtInit then
               y = u;
            else
               y = smooth(0,if u > uMax then u - uMax else if u < uMin then u - uMin else 0);
            end if;
            annotation (
              Documentation(info="<html>
<p>
The DeadZone block defines a region of zero output.
</p>
<p>
If the input is within uMin ... uMax, the output
is zero. Outside of this zone, the output is a linear
function of the input with a slope of 1.
</p>
</html>"),           Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{0,-90},{0,68}}, color={192,192,192}),
              Polygon(
                points={{0,90},{-8,68},{8,68},{0,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,0},{68,0}}, color={192,192,192}),
              Polygon(
                points={{90,0},{68,-8},{68,8},{90,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-60},{-20,0},{20,0},{80,60}}, color={0,0,0}),
              Text(
                extent={{-150,-150},{150,-110}},
                lineColor={160,160,164},
                textString="uMax=%uMax"),
              Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255})}),
              Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{0,-60},{0,50}}, color={192,192,192}),
              Polygon(
                points={{0,60},{-5,50},{5,50},{0,60}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-76,0},{74,0}}, color={192,192,192}),
              Polygon(
                points={{84,0},{74,-5},{74,5},{84,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-81,-40},{-38,0},{40,0},{80,40}}, color={0,0,0}),
              Text(
                extent={{62,-7},{88,-25}},
                lineColor={128,128,128},
                textString="u"),
              Text(
                extent={{-36,72},{-5,50}},
                lineColor={128,128,128},
                textString="y"),
              Text(
                extent={{-51,1},{-28,19}},
                lineColor={128,128,128},
                textString="uMin"),
              Text(
                extent={{27,21},{52,5}},
                lineColor={128,128,128},
                textString="uMax")}));
          end DeadZone;
          annotation (
            Documentation(info="<html>
<p>
This package contains <b>discontinuous</b> and
<b>non-differentiable, algebraic</b> input/output blocks.
</p>
</html>",     revisions="<html>
<ul>
<li><i>October 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       New block VariableLimiter added.
<li><i>August 22, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized, based on an existing Dymola library
       of Dieter Moormann and Hilding Elmqvist.
</li>
</ul>
</html>"),     Icon(graphics={Line(points={{-80,-66},{-26,-66},{28,52},{88,52}},
                color={95,95,95})}));
    end Nonlinear;

    package Sources
    "Library of signal source blocks generating Real and Boolean signals"
      import Modelica.Blocks.Interfaces;
      import Modelica.SIunits;
      extends Modelica.Icons.SourcesPackage;

      block Clock "Generate actual time signal"
        parameter Modelica.SIunits.Time offset=0 "Offset of output signal";
        parameter Modelica.SIunits.Time startTime=0
        "Output = offset for time < startTime";
        extends Interfaces.SO;

      equation
        y = offset + (if time < startTime then 0 else time - startTime);
        annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Ellipse(extent={{-80,80},{80,-80}}, lineColor={160,160,164}),
              Line(points={{0,80},{0,60}}, color={160,160,164}),
              Line(points={{80,0},{60,0}}, color={160,160,164}),
              Line(points={{0,-80},{0,-60}}, color={160,160,164}),
              Line(points={{-80,0},{-60,0}}, color={160,160,164}),
              Line(points={{37,70},{26,50}}, color={160,160,164}),
              Line(points={{70,38},{49,26}}, color={160,160,164}),
              Line(points={{71,-37},{52,-27}}, color={160,160,164}),
              Line(points={{39,-70},{29,-51}}, color={160,160,164}),
              Line(points={{-39,-70},{-29,-52}}, color={160,160,164}),
              Line(points={{-71,-37},{-50,-26}}, color={160,160,164}),
              Line(points={{-71,37},{-54,28}}, color={160,160,164}),
              Line(points={{-38,70},{-28,51}}, color={160,160,164}),
              Line(
                points={{0,0},{-50,50}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{0,0},{40,0}},
                color={0,0,0},
                thickness=0.5),
              Text(
                extent={{-150,-150},{150,-110}},
                lineColor={0,0,0},
                textString="startTime=%startTime")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-80,90},{-85,68},{-75,68},{-80,90}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,68},{-80,-80}}, color={95,95,95}),
              Line(
                points={{-80,0},{-10,0},{60,70}},
                color={0,0,255},
                thickness=0.5),
              Line(points={{-90,-70},{82,-70}}, color={95,95,95}),
              Polygon(
                points={{90,-70},{68,-64},{68,-76},{90,-70}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-34,0},{-37,-13},{-31,-13},{-34,0}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-34,0},{-34,-70}},   color={95,95,95}),
              Polygon(
                points={{-34,-70},{-37,-57},{-31,-57},{-34,-70},{-34,-70}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-77,-28},{-35,-40}},
                lineColor={0,0,0},
                textString="offset"),
              Text(
                extent={{-30,-73},{18,-86}},
                lineColor={0,0,0},
                textString="startTime"),
              Text(
                extent={{-81,91},{-40,71}},
                lineColor={0,0,0},
                textString="y"),
              Text(
                extent={{63,-79},{94,-89}},
                lineColor={0,0,0},
                textString="time"),
              Line(points={{-10,0},{-10,-70}}, color={95,95,95}),
              Line(points={{-10,0},{50,0}}, color={95,95,95}),
              Line(points={{50,0},{50,60}}, color={95,95,95}),
              Text(
                extent={{35,33},{50,23}},
                lineColor={0,0,0},
                textString="1"),
              Text(
                extent={{14,13},{32,1}},
                lineColor={0,0,0},
                textString="1")}),
          Documentation(info="<html>
<p>
The Real output y is a clock signal:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/Sources/Clock.png\"
     alt=\"Clock.png\">
</p>
</html>"));
      end Clock;

      block Constant "Generate constant signal of type Real"
        parameter Real k(start=1) "Constant output value";
        extends Interfaces.SO;

      equation
        y = k;
        annotation (
          defaultComponentName="const",
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-80,68},{-80,-80}}, color={192,192,192}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,-70},{82,-70}}, color={192,192,192}),
              Polygon(
                points={{90,-70},{68,-62},{68,-78},{90,-70}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,0},{80,0}}, color={0,0,0}),
              Text(
                extent={{-150,-150},{150,-110}},
                lineColor={0,0,0},
                textString="k=%k")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-80,90},{-86,68},{-74,68},{-80,90}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,68},{-80,-80}}, color={95,95,95}),
              Line(
                points={{-80,0},{80,0}},
                color={0,0,255},
                thickness=0.5),
              Line(points={{-90,-70},{82,-70}}, color={95,95,95}),
              Polygon(
                points={{90,-70},{68,-64},{68,-76},{90,-70}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-83,92},{-30,74}},
                lineColor={0,0,0},
                textString="y"),
              Text(
                extent={{70,-80},{94,-100}},
                lineColor={0,0,0},
                textString="time"),
              Text(
                extent={{-101,8},{-81,-12}},
                lineColor={0,0,0},
                textString="k")}),
          Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/Sources/Constant.png\"
     alt=\"Constant.png\">
</p>
</html>"));
      end Constant;

      block Sine "Generate sine signal"
        parameter Real amplitude=1 "Amplitude of sine wave";
        parameter SIunits.Frequency freqHz(start=1) "Frequency of sine wave";
        parameter SIunits.Angle phase=0 "Phase of sine wave";
        parameter Real offset=0 "Offset of output signal";
        parameter SIunits.Time startTime=0
        "Output = offset for time < startTime";
        extends Interfaces.SO;
    protected
        constant Real pi=Modelica.Constants.pi;

      equation
        y = offset + (if time < startTime then 0 else amplitude*Modelica.Math.sin(2
          *pi*freqHz*(time - startTime) + phase));
        annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-80,68},{-80,-80}}, color={192,192,192}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,0},{68,0}}, color={192,192,192}),
              Polygon(
                points={{90,0},{68,8},{68,-8},{90,0}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,0},{-68.7,34.2},{-61.5,53.1},{-55.1,66.4},{-49.4,
                    74.6},{-43.8,79.1},{-38.2,79.8},{-32.6,76.6},{-26.9,69.7},{-21.3,
                    59.4},{-14.9,44.1},{-6.83,21.2},{10.1,-30.8},{17.3,-50.2},{23.7,
                    -64.2},{29.3,-73.1},{35,-78.4},{40.6,-80},{46.2,-77.6},{51.9,-71.5},
                    {57.5,-61.9},{63.9,-47.2},{72,-24.8},{80,0}}, color={0,0,0}, smooth=  Smooth.Bezier),
              Text(
                extent={{-147,-152},{153,-112}},
                lineColor={0,0,0},
                textString="freqHz=%freqHz")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-80,-90},{-80,84}}, color={95,95,95}),
              Polygon(
                points={{-80,97},{-84,81},{-76,81},{-80,97}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-99,-40},{85,-40}}, color={95,95,95}),
              Polygon(
                points={{97,-40},{81,-36},{81,-45},{97,-40}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-41,-2},{-31.6,34.2},{-26.1,53.1},{-21.3,66.4},{-17.1,74.6},
                    {-12.9,79.1},{-8.64,79.8},{-4.42,76.6},{-0.201,69.7},{4.02,59.4},
                    {8.84,44.1},{14.9,21.2},{27.5,-30.8},{33,-50.2},{37.8,-64.2},{
                    42,-73.1},{46.2,-78.4},{50.5,-80},{54.7,-77.6},{58.9,-71.5},{
                    63.1,-61.9},{67.9,-47.2},{74,-24.8},{80,0}},
                color={0,0,255},
                thickness=0.5,
                smooth=Smooth.Bezier),
              Line(
                points={{-41,-2},{-80,-2}},
                color={0,0,255},
                thickness=0.5),
              Text(
                extent={{-87,12},{-40,0}},
                lineColor={0,0,0},
                textString="offset"),
              Line(points={{-41,-2},{-41,-40}}, color={95,95,95}),
              Text(
                extent={{-60,-43},{-14,-54}},
                lineColor={0,0,0},
                textString="startTime"),
              Text(
                extent={{75,-47},{100,-60}},
                lineColor={0,0,0},
                textString="time"),
              Text(
                extent={{-80,99},{-40,82}},
                lineColor={0,0,0},
                textString="y"),
              Line(points={{-9,80},{43,80}}, color={95,95,95}),
              Line(points={{-41,-2},{50,-2}}, color={95,95,95}),
              Polygon(
                points={{33,80},{30,67},{36,67},{33,80}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{37,57},{83,39}},
                lineColor={0,0,0},
                textString="amplitude"),
              Polygon(
                points={{33,-2},{30,11},{36,11},{33,-2},{33,-2}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{33,80},{33,-2}}, color={95,95,95})}),
          Documentation(info="<html>
<p>
The Real output y is a sine signal:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/Sources/Sine.png\"
     alt=\"Sine.png\">
</p>
</html>"));
      end Sine;

      block Pulse "Generate pulse signal of type Real"
        parameter Real amplitude=1 "Amplitude of pulse";
        parameter Real width(
          final min=Modelica.Constants.small,
          final max=100) = 50 "Width of pulse in % of period";
        parameter Modelica.SIunits.Time period(final min=Modelica.Constants.small,
            start=1) "Time for one period";
        parameter Integer nperiod=-1
        "Number of periods (< 0 means infinite number of periods)";
        parameter Real offset=0 "Offset of output signals";
        parameter Modelica.SIunits.Time startTime=0
        "Output = offset for time < startTime";
        extends Modelica.Blocks.Interfaces.SO;
    protected
        Modelica.SIunits.Time T_width=period*width/100;
        Modelica.SIunits.Time T_start "Start time of current period";
        Integer count "Period count";
      initial algorithm
        count := integer((time - startTime)/period);
        T_start := startTime + count*period;
      equation
        when integer((time - startTime)/period) > pre(count) then
          count = pre(count) + 1;
          T_start = time;
        end when;
        y = offset + (if (time < startTime or nperiod == 0 or (nperiod > 0 and
          count >= nperiod)) then 0 else if time < T_start + T_width then amplitude
           else 0);
        annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-80,68},{-80,-80}}, color={192,192,192}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-90,-70},{82,-70}}, color={192,192,192}),
              Polygon(
                points={{90,-70},{68,-62},{68,-78},{90,-70}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-70},{-40,-70},{-40,44},{0,44},{0,-70},{40,-70},{40,
                    44},{79,44}}, color={0,0,0}),
              Text(
                extent={{-147,-152},{153,-112}},
                lineColor={0,0,0},
                textString="period=%period")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Polygon(
                points={{-80,90},{-85,68},{-75,68},{-80,90}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,68},{-80,-80}}, color={95,95,95}),
              Line(points={{-90,-70},{82,-70}}, color={95,95,95}),
              Polygon(
                points={{90,-70},{68,-65},{68,-75},{90,-70}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-34,0},{-37,-13},{-31,-13},{-34,0}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(points={{-34,0},{-34,-70}},  color={95,95,95}),
              Polygon(
                points={{-34,-70},{-37,-57},{-31,-57},{-34,-70},{-34,-70}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-78,-24},{-35,-36}},
                lineColor={0,0,0},
                textString="offset"),
              Text(
                extent={{-30,-72},{16,-81}},
                lineColor={0,0,0},
                textString="startTime"),
              Text(
                extent={{-82,96},{-49,79}},
                lineColor={0,0,0},
                textString="y"),
              Text(
                extent={{66,-80},{87,-90}},
                lineColor={0,0,0},
                textString="time"),
              Line(points={{-10,0},{-10,-70}}, color={95,95,95}),
              Line(
                points={{-80,0},{-10,0},{-10,50},{30,50},{30,0},{50,0},{50,50},{90,
                    50}},
                color={0,0,255},
                thickness=0.5),
              Line(points={{-10,88},{-10,50}}, color={95,95,95}),
              Line(points={{30,74},{30,50}}, color={95,95,95}),
              Line(points={{50,88},{50,50}}, color={95,95,95}),
              Line(points={{-10,83},{50,83}}, color={95,95,95}),
              Line(points={{-10,69},{30,69}}, color={95,95,95}),
              Text(
                extent={{-3,93},{39,84}},
                lineColor={0,0,0},
                textString="period"),
              Text(
                extent={{-7,78},{30,69}},
                lineColor={0,0,0},
                textString="width"),
              Line(points={{-43,50},{-10,50}}, color={95,95,95}),
              Line(points={{-34,50},{-34,0}}, color={95,95,95}),
              Text(
                extent={{-77,30},{-37,21}},
                lineColor={0,0,0},
                textString="amplitude"),
              Polygon(
                points={{-34,50},{-37,37},{-31,37},{-34,50}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-34,0},{-37,13},{-31,13},{-34,0},{-34,0}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{90,50},{90,0},{100,0}},
                color={0,0,255},
                thickness=0.5),
              Polygon(
                points={{-10,69},{-1,71},{-1,67},{-10,69}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{30,69},{22,71},{22,67},{30,69}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-10,83},{-1,85},{-1,81},{-10,83}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{50,83},{42,85},{42,81},{50,83}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<p>
The Real output y is a pulse signal:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/Sources/Pulse.png\"
     alt=\"Pulse.png\">
</p>
</html>"));
      end Pulse;

      block BooleanConstant "Generate constant signal of type Boolean"
        parameter Boolean k=true "Constant output value";
        extends Interfaces.partialBooleanSource;

      equation
        y = k;
        annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={Line(points={{-80,0},{80,0}}, color={0,0,0}),
                Text(
                extent={{-150,-140},{150,-110}},
                lineColor={0,0,0},
                textString="%k")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}}), graphics={
              Line(
                points={{-70,0},{80,0}},
                color={0,0,255},
                thickness=0.5),
              Text(
                extent={{-69,20},{-49,0}},
                lineColor={0,0,0},
                textString="k"),
              Text(
                extent={{-96,6},{-76,-4}},
                lineColor={0,0,0},
                textString="true"),
              Text(
                extent={{-98,-58},{-72,-68}},
                lineColor={0,0,0},
                textString="false")}),
            Documentation(info="<html>
<p>
The Boolean output y is a constant signal:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Blocks/Sources/BooleanConstant.png\"
     alt=\"BooleanConstant.png\">
</p>
</html>"));
      end BooleanConstant;
      annotation (Documentation(info="<HTML>
<p>
This package contains <b>source</b> components, i.e., blocks which
have only output signals. These blocks are used as signal generators
for Real, Integer and Boolean signals.
</p>

<p>
All Real source signals (with the exception of the Constant source)
have at least the following two parameters:
</p>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td valign=\"top\"><b>offset</b></td>
      <td valign=\"top\">Value which is added to the signal</td>
  </tr>
  <tr><td valign=\"top\"><b>startTime</b></td>
      <td valign=\"top\">Start time of signal. For time &lt; startTime,
                the output y is set to offset.</td>
  </tr>
</table>

<p>
The <b>offset</b> parameter is especially useful in order to shift
the corresponding source, such that at initial time the system
is stationary. To determine the corresponding value of offset,
usually requires a trimming calculation.
</p>
</html>",     revisions="<html>
<ul>
<li><i>October 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       Integer sources added. Step, TimeTable and BooleanStep slightly changed.</li>
<li><i>Nov. 8, 1999</i>
       by <a href=\"mailto:clauss@eas.iis.fhg.de\">Christoph Clau&szlig;</a>,
       <a href=\"mailto:Andre.Schneider@eas.iis.fraunhofer.de\">Andre.Schneider@eas.iis.fraunhofer.de</a>,
       <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       New sources: Exponentials, TimeTable. Trapezoid slightly enhanced
       (nperiod=-1 is an infinite number of periods).</li>
<li><i>Oct. 31, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       <a href=\"mailto:clauss@eas.iis.fhg.de\">Christoph Clau&szlig;</a>,
       <a href=\"mailto:Andre.Schneider@eas.iis.fraunhofer.de\">Andre.Schneider@eas.iis.fraunhofer.de</a>,
       All sources vectorized. New sources: ExpSine, Trapezoid,
       BooleanConstant, BooleanStep, BooleanPulse, SampleTrigger.
       Improved documentation, especially detailed description of
       signals in diagram layer.</li>
<li><i>June 29, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized a first version, based on an existing Dymola library
       of Dieter Moormann and Hilding Elmqvist.</li>
</ul>
</html>"));
    end Sources;

    package Types
    "Library of constants and types with choices, especially to build menus"
      extends Modelica.Icons.TypesPackage;

      type Init = enumeration(
        NoInit
          "No initialization (start values are used as guess values with fixed=false)",

        SteadyState
          "Steady state initialization (derivatives of states are zero)",
        InitialState "Initialization with initial states",
        InitialOutput
          "Initialization with initial outputs (and steady state of the states if possible)")
      "Enumeration defining initialization of a block"   annotation (Evaluate=true,
        Documentation(info="<html>
  <p>The following initialization alternatives are available:</p>
  <dl>
    <dt><code><strong>NoInit</strong></code></dt>
      <dd>No initialization (start values are used as guess values with <code>fixed=false</code>)</dd>
    <dt><code><strong>SteadyState</strong></code></dt>
      <dd>Steady state initialization (derivatives of states are zero)</dd>
    <dt><code><strong>InitialState</strong></code></dt>
      <dd>Initialization with initial states</dd>
    <dt><code><strong>InitialOutput</strong></code></dt>
      <dd>Initialization with initial outputs (and steady state of the states if possible)</dd>
  </dl>
</html>"));
      annotation (Documentation(info="<HTML>
<p>
In this package <b>types</b>, <b>constants</b> and <b>external objects</b> are defined that are used
in library Modelica.Blocks. The types have additional annotation choices
definitions that define the menus to be built up in the graphical
user interface when the type is used as parameter in a declaration.
</p>
</HTML>"));
    end Types;

    package Icons "Icons for Blocks"
        extends Modelica.Icons.IconsPackage;

        partial block Block "Basic graphical layout of input/output block"

          annotation (
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255})}),
          Documentation(info="<html>
<p>
Block that has only the basic icon for an input/output
block (no declarations, no equations). Most blocks
of package Modelica.Blocks inherit directly or indirectly
from this block.
</p>
</html>"));

        end Block;

      partial block PartialBooleanBlock
      "Basic graphical layout of logical block"

        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                lineThickness=5.0,
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised), Text(
                extent={{-150,150},{150,110}},
                textString="%name",
                lineColor={0,0,255})}),                        Documentation(info="<html>
<p>
Block that has only the basic icon for an input/output,
Boolean block (no declarations, no equations) used especially
in the Blocks.Logical library.
</p>
</html>"));
      end PartialBooleanBlock;
    end Icons;
  annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1), graphics={
        Rectangle(
          origin={0.0,35.1488},
          fillColor={255,255,255},
          extent={{-30.0,-20.1488},{30.0,20.1488}}),
        Rectangle(
          origin={0.0,-34.8512},
          fillColor={255,255,255},
          extent={{-30.0,-20.1488},{30.0,20.1488}}),
        Line(
          origin={-51.25,0.0},
          points={{21.25,-35.0},{-13.75,-35.0},{-13.75,35.0},{6.25,35.0}}),
        Polygon(
          origin={-40.0,35.0},
          pattern=LinePattern.None,
          fillPattern=FillPattern.Solid,
          points={{10.0,0.0},{-5.0,5.0},{-5.0,-5.0}}),
        Line(
          origin={51.25,0.0},
          points={{-21.25,35.0},{13.75,35.0},{13.75,-35.0},{-6.25,-35.0}}),
        Polygon(
          origin={40.0,-35.0},
          pattern=LinePattern.None,
          fillPattern=FillPattern.Solid,
          points={{-10.0,0.0},{5.0,5.0},{5.0,-5.0}})}), Documentation(info="<html>
<p>
This library contains input/output blocks to build up block diagrams.
</p>

<dl>
<dt><b>Main Author:</b>
<dd><a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a><br>
    Deutsches Zentrum f&uuml;r Luft und Raumfahrt e. V. (DLR)<br>
    Oberpfaffenhofen<br>
    Postfach 1116<br>
    D-82230 Wessling<br>
    email: <A HREF=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</A><br>
</dl>
<p>
Copyright &copy; 1998-2013, Modelica Association and DLR.
</p>
<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</html>",   revisions="<html>
<ul>
<li><i>June 23, 2004</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Introduced new block connectors and adapted all blocks to the new connectors.
       Included subpackages Continuous, Discrete, Logical, Nonlinear from
       package ModelicaAdditions.Blocks.
       Included subpackage ModelicaAdditions.Table in Modelica.Blocks.Sources
       and in the new package Modelica.Blocks.Tables.
       Added new blocks to Blocks.Sources and Blocks.Logical.
       </li>
<li><i>October 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       New subpackage Examples, additional components.
       </li>
<li><i>June 20, 2000</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a> and
       Michael Tiller:<br>
       Introduced a replaceable signal type into
       Blocks.Interfaces.RealInput/RealOutput:
<pre>
   replaceable type SignalType = Real
</pre>
       in order that the type of the signal of an input/output block
       can be changed to a physical type, for example:
<pre>
   Sine sin1(outPort(redeclare type SignalType=Modelica.SIunits.Torque))
</pre>
      </li>
<li><i>Sept. 18, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Renamed to Blocks. New subpackages Math, Nonlinear.
       Additional components in subpackages Interfaces, Continuous
       and Sources. </li>
<li><i>June 30, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized a first version, based on an existing Dymola library
       of Dieter Moormann and Hilding Elmqvist.</li>
</ul>
</html>"));
  end Blocks;

  package Mechanics
  "Library of 1-dim. and 3-dim. mechanical components (multi-body, rotational, translational)"
  extends Modelica.Icons.Package;

    package MultiBody "Library to model 3-dimensional mechanical systems"
      extends Modelica.Icons.Package;
    import SI = Modelica.SIunits;
    import Cv = Modelica.SIunits.Conversions;
    import C = Modelica.Constants;

      package Frames "Functions to transform rotational frame quantities"
        extends Modelica.Icons.Package;

        record Orientation
        "Orientation object defining rotation from a frame 1 into a frame 2"

          extends Modelica.Icons.Record;
          Real T[3, 3] "Transformation matrix from world frame to local frame";
          SI.AngularVelocity w[3]
          "Absolute angular velocity of local frame, resolved in local frame";

          encapsulated function equalityConstraint
          "Return the constraint residues to express that two frames have the same orientation"

            import Modelica;
            import Modelica.Mechanics.MultiBody.Frames;
            extends Modelica.Icons.Function;
            input Frames.Orientation R1
            "Orientation object to rotate frame 0 into frame 1";
            input Frames.Orientation R2
            "Orientation object to rotate frame 0 into frame 2";
            output Real residue[3]
            "The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)";
          algorithm
            residue := {
               Modelica.Math.atan2(cross(R1.T[1, :], R1.T[2, :])*R2.T[2, :],R1.T[1,:]*R2.T[1,:]),
               Modelica.Math.atan2(-cross(R1.T[1, :],R1.T[2, :])*R2.T[1, :],R1.T[2,:]*R2.T[2,:]),
               Modelica.Math.atan2(R1.T[2, :]*R2.T[1, :],R1.T[3,:]*R2.T[3,:])};
            annotation(Inline=true);
          end equalityConstraint;

          annotation (Documentation(info="<html>
<p>
This object describes the <b>rotation</b> from a <b>frame 1</b> into a <b>frame 2</b>.
An instance of this type should never be directly accessed but
only with the access functions provided
in package Modelica.Mechanics.MultiBody.Frames. As a consequence, it is not necessary to know
the internal representation of this object as described in the next paragraphs.
</p>
<p>
\"Orientation\" is defined to be a record consisting of two
elements: \"Real T[3,3]\", the transformation matrix to rotate frame 1
into frame 2 and \"Real w[3]\", the angular velocity of frame 2 with
respect to frame 1, resolved in frame 2. Element \"T\"
has the following interpretation:
</p>
<pre>
   Orientation R;
   <b>R.T</b> = [<b>e</b><sub>x</sub>, <b>e</b><sub>y</sub>, <b>e</b><sub>z</sub>];
       e.g., <b>R.T</b> = [1,0,0; 0,1,0; 0,0,1]
</pre>
<p>
where <b>e</b><sub>x</sub>,<b>e</b><sub>y</sub>,<b>e</b><sub>z</sub>
are unit vectors in the direction of the x-axis, y-axis, and z-axis
of frame 1, resolved in frame 2, respectively. Therefore, if <b>v</b><sub>1</sub>
is vector <b>v</b> resolved in frame 1 and <b>v</b><sub>2</sub> is
vector <b>v</b> resolved in frame 2, the following relationship holds:
</p>
<pre>
    <b>v</b><sub>2</sub> = <b>R.T</b> * <b>v</b><sub>1</sub>
</pre>
<p>
The <b>inverse</b> orientation
<b>R_inv.T</b> = <b>R.T</b><sup>T</sup> describes the rotation
from frame 2 into frame 1.
</p>
<p>
Since the orientation is described by 9 variables, there are
6 constraints between these variables. These constraints
are defined in function <b>Frames.orientationConstraint</b>.
</p>
<p>
R.w is the angular velocity of frame 2 with respect to frame 1, resolved
in frame 2. Formally, R.w is defined as:<br>
<b>skew</b>(R.w) = R.T*<b>der</b>(transpose(R.T))
with
</p>
<pre>
             |   0   -w[3]  w[2] |
   <b>skew</b>(w) = |  w[3]   0   -w[1] |
             | -w[2]  w[1]     0 |
</pre>
</html>"));
        end Orientation;

        function nullRotation
        "Return orientation object that does not rotate a frame"
          extends Modelica.Icons.Function;
          output Orientation R
          "Orientation object such that frame 1 and frame 2 are identical";
        algorithm
          R := Orientation(T=identity(3),w= zeros(3));
          annotation(Inline=true);
        end nullRotation;
        annotation ( Documentation(info="<HTML>
<p>
Package <b>Frames</b> contains type definitions and
functions to transform rotational frame quantities. The basic idea is to
hide the actual definition of an <b>orientation</b> in this package
by providing essentially type <b>Orientation</b> together with
<b>functions</b> operating on instances of this type.
</p>
<h4>Content</h4>
<p>In the table below an example is given for every function definition.
The used variables have the following declaration:
</p>
<pre>
   Frames.Orientation R, R1, R2, R_rel, R_inv;
   Real[3,3]   T, T_inv;
   Real[3]     v1, v2, w1, w2, n_x, n_y, n_z, e, e_x, res_ori, phi;
   Real[6]     res_equal;
   Real        L, angle;
</pre>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><th><b><i>Function/type</i></b></th><th><b><i>Description</i></b></th></tr>
  <tr><td valign=\"top\"><b>Orientation R;</b></td>
      <td valign=\"top\">New type defining an orientation object that describes<br>
          the rotation of frame 1 into frame 2.
      </td>
  </tr>
  <tr><td valign=\"top\">res_ori = <b>orientationConstraint</b>(R);</td>
      <td valign=\"top\">Return the constraints between the variables of an orientation object<br>
      (shall be zero).</td>
  </tr>
  <tr><td valign=\"top\">w1 = <b>angularVelocity1</b>(R);</td>
      <td valign=\"top\">Return angular velocity resolved in frame 1 from
          orientation object R.
     </td>
  </tr>
  <tr><td valign=\"top\">w2 = <b>angularVelocity2</b>(R);</td>
      <td valign=\"top\">Return angular velocity resolved in frame 2 from
          orientation object R.
     </td>
  </tr>
  <tr><td valign=\"top\">v1 = <b>resolve1</b>(R,v2);</td>
      <td valign=\"top\">Transform vector v2 from frame 2 to frame 1.
      </td>
  </tr>
  <tr><td valign=\"top\">v2 = <b>resolve2</b>(R,v1);</td>
      <td valign=\"top\">Transform vector v1 from frame 1 to frame 2.
     </td>
  </tr>
  <tr><td valign=\"top\">v2 = <b>resolveRelative</b>(v1,R1,R2);</td>
      <td valign=\"top\">Transform vector v1 from frame 1 to frame 2
          using absolute orientation objects R1 of frame 1 and R2 of frame 2.
      </td>
  </tr>
  <tr><td valign=\"top\">D1 = <b>resolveDyade1</b>(R,D2);</td>
      <td valign=\"top\">Transform second order tensor D2 from frame 2 to frame 1.
      </td>
  </tr>
  <tr><td valign=\"top\">D2 = <b>resolveDyade2</b>(R,D1);</td>
      <td valign=\"top\">Transform second order tensor D1 from frame 1 to frame 2.
     </td>
  </tr>
  <tr><td valign=\"top\">R = <b>nullRotation</b>()</td>
      <td valign=\"top\">Return orientation object R that does not rotate a frame.
  </tr>
  <tr><td valign=\"top\">R_inv = <b>inverseRotation</b>(R);</td>
      <td valign=\"top\">Return inverse orientation object.
      </td>
  </tr>
  <tr><td valign=\"top\">R_rel = <b>relativeRotation</b>(R1,R2);</td>
      <td valign=\"top\">Return relative orientation object from two absolute
          orientation objects.
      </td>
  </tr>
  <tr><td valign=\"top\">R2 = <b>absoluteRotation</b>(R1,R_rel);</td>
      <td valign=\"top\">Return absolute orientation object from another
          absolute<br> and a relative orientation object.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>planarRotation</b>(e, angle, der_angle);</td>
      <td valign=\"top\">Return orientation object of a planar rotation.
      </td>
  </tr>
  <tr><td valign=\"top\">angle = <b>planarRotationAngle</b>(e, v1, v2);</td>
      <td valign=\"top\">Return angle of a planar rotation, given the rotation axis<br>
        and the representations of a vector in frame 1 and frame 2.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>axisRotation</b>(axis, angle, der_angle);</td>
      <td valign=\"top\">Return orientation object R to rotate around angle along axis of frame 1.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>axesRotations</b>(sequence, angles, der_angles);</td>
      <td valign=\"top\">Return rotation object to rotate in sequence around 3 axes. Example:<br>
          R = axesRotations({1,2,3},{pi/2,pi/4,-pi}, zeros(3));
      </td>
  </tr>
  <tr><td valign=\"top\">angles = <b>axesRotationsAngles</b>(R, sequence);</td>
      <td valign=\"top\">Return the 3 angles to rotate in sequence around 3 axes to<br>
          construct the given orientation object.
      </td>
  </tr>
  <tr><td valign=\"top\">phi = <b>smallRotation</b>(R);</td>
      <td valign=\"top\">Return rotation angles phi valid for a small rotation R.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_nxy</b>(n_x, n_y);</td>
      <td valign=\"top\">Return orientation object from n_x and n_y vectors.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_nxz</b>(n_x, n_z);</td>
      <td valign=\"top\">Return orientation object from n_x and n_z vectors.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_T</b>(T,w);</td>
      <td valign=\"top\">Return orientation object R from transformation matrix T and
          its angular velocity w.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_T2</b>(T,der(T));</td>
      <td valign=\"top\">Return orientation object R from transformation matrix T and
          its derivative der(T).
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_T_inv</b>(T_inv,w);</td>
      <td valign=\"top\">Return orientation object R from inverse transformation matrix T_inv and
          its angular velocity w.
      </td>
  </tr>
  <tr><td valign=\"top\">R = <b>from_Q</b>(Q,w);</td>
      <td valign=\"top\">Return orientation object R from quaternion orientation object Q
          and its angular velocity w.
      </td>
  </tr>
  <tr><td valign=\"top\">T = <b>to_T</b>(R);</td>
      <td valign=\"top\">Return transformation matrix T from orientation object R.
  </tr>
  <tr><td valign=\"top\">T_inv = <b>to_T_inv</b>(R);</td>
      <td valign=\"top\">Return inverse transformation matrix T_inv from orientation object R.
      </td>
  </tr>
  <tr><td valign=\"top\">Q = <b>to_Q</b>(R);</td>
      <td valign=\"top\">Return quaternion orientation object Q from orientation object R.
      </td>
  </tr>
  <tr><td valign=\"top\">exy = <b>to_exy</b>(R);</td>
      <td valign=\"top\">Return [e_x, e_y] matrix of an orientation object R, <br>
          with e_x and e_y vectors of frame 2, resolved in frame 1.
  </tr>
  <tr><td valign=\"top\">L = <b>length</b>(n_x);</td>
      <td valign=\"top\">Return length L of a vector n_x.
      </td>
  </tr>
  <tr><td valign=\"top\">e_x = <b>normalize</b>(n_x);</td>
      <td valign=\"top\">Return normalized vector e_x of n_x such that length of e_x is one.
      </td>
  </tr>
  <tr><td valign=\"top\">e = <b>axis</b>(i);</td>
      <td valign=\"top\">Return unit vector e directed along axis i
      </td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Mechanics.MultiBody.Frames.Quaternions\">Quaternions</a></td>
      <td valign=\"top\"><b>Package</b> with functions to transform rotational frame quantities based
          on quaternions (also called Euler parameters).
      </td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Mechanics.MultiBody.Frames.TransformationMatrices\">TransformationMatrices</a></td>
      <td valign=\"top\"><b>Package</b> with functions to transform rotational frame quantities based
          on transformation matrices.
      </td>
  </tr>
</table>
</HTML>"),       Icon(graphics={
              Line(points={{-2,-18},{80,-60}}, color={95,95,95}),
              Line(points={{-2,-18},{-2,80}}, color={95,95,95}),
              Line(points={{-78,-56},{-2,-18}}, color={95,95,95})}));
      end Frames;

      package Interfaces
      "Connectors and partial models for 3-dim. mechanical components"
        extends Modelica.Icons.InterfacesPackage;

        partial function partialSurfaceCharacteristic
          extends Modelica.Icons.Function;
           input Integer nu "Number of points in u-Dimension";
           input Integer nv "Number of points in v-Dimension";
           input Boolean multiColoredSurface=false
          "= true: Color is defined for each surface point";
           output Modelica.SIunits.Position X[nu,nv]
          "[nu,nv] positions of points in x-Direction resolved in surface frame";
           output Modelica.SIunits.Position Y[nu,nv]
          "[nu,nv] positions of points in y-Direction resolved in surface frame";
           output Modelica.SIunits.Position Z[nu,nv]
          "[nu,nv] positions of points in z-Direction resolved in surface frame";
           output Real C[if multiColoredSurface then nu else 0,
                         if multiColoredSurface then nv else 0,3]
          "[nu,nv,3] Color array, defining the color for each surface point";
        end partialSurfaceCharacteristic;
        annotation ( Documentation(info="<html>
<p>
This package contains connectors and partial models (i.e., models
that are only used to build other models) of the MultiBody library.
</p>
</html>"));
      end Interfaces;

      package Types
      "Constants and types with choices, especially to build menus"
        extends Modelica.Icons.TypesPackage;

        type SpecularCoefficient = Modelica.Icons.TypeReal(min=0)
        "Reflection of ambient light (= 0: light is completely absorbed)"
             annotation (
               choices(choice=0 "\"0.0 (dull)\"",choice=0.7 "\"0.7 (medium)\"", choice=1
            "\"1.0 (glossy)\""),
          Documentation(info="<html>
<p>
Type <b>SpecularCoefficient</b> defines the reflection of
ambient light on shape surfaces. If value = 0, the light
is completely absorbed. Often, 0.7 is a reasonable value.
It might be that from some viewing directions, a body is no
longer visible, if the SpecularCoefficient value is too high.
In the following image, the different values of SpecularCoefficient
are shown for a cylinder:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Visualizers/SpecularCoefficient.png\" />
</p>
</html>"));

        type ShapeType = Modelica.Icons.TypeString
        "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring, <external shape>)"
           annotation ( choices(
            choice="box" "\"box\"",
            choice="sphere" "\"sphere\"",
            choice="cylinder" "\"cylinder\"",
            choice="pipecylinder" "\"pipecylinder\"",
            choice="cone" "\"cone\"",
            choice="pipe" "\"pipe\"",
            choice="beam" "\"beam\"",
            choice="gearwheel" "\"gearwheel\"",
            choice="spring" "\"spring\"",
            choice="modelica://PackageName/PathName.dxf"),
          Documentation(info="<html>
<p>
Type <b>ShapeType</b> is used to define the shape of the
visual object as parameter String. Usually, \"shapeType\" is used
as instance name. The following
values for shapeType are possible, e.g., shapeType=\"box\":
</p>

<p>
<IMG src=\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Shape.png\" ALT=\"model Visualizers.FixedShape\">
</p>

<p>
The dark blue arrows in the figure above are directed along
variable <b>lengthDirection</b>. The light blue arrows are directed
along variable <b>widthDirection</b>. The <b>coordinate systems</b>
in the figure represent frame_a of the Shape component.
</p>

<p>
Additionally, external shapes can be specified as (not all options might be supported by all tools):
</p>

<ul>
<li> <b>\"1\", \"2\", ...</b><br>
     define external shapes specified in DXF format in files \"1.dxf\", \"2.dxf\", ...
     The DXF-files must be found either in the current directory or in the directory where
     the Shape instance is stored that references the DXF file.
     This (very limited) option should not be used for new models. Example:<br>
    shapeType=\"1\".<br></li>

<li> \"<b>modelica:</b>//&lt;Modelica-name&gt;/&lt;relative-path-file-name&gt;\"<br>
     characterizes the file that is stored under the location of the
     &lt;Modelica-name&gt; library path with the given relative file name.
     Example:<br> shapeType = \"modelica://Modelica/Resources/Data/Shapes/Engine/piston.dxf\".<br></li>

<li> \"<b>file:</b>//&lt;absolute-file-name&gt;\"<br>
     characterizes an absolute file name in the file system. Example:<br>
     shapeType=\"file://C:/users/myname/shapes/piston.dxf\".</li>
</ul>

<p>
The supported file formats are tool dependent. Most tools support
at least DXF-files (a tool might support 3-dim. Face of the DXF format only),
but may support other format as well (such as stl, obj, 3ds).
Since visualization files contain color and other data, the corresponding
information in the model is usually ignored.
</p>
</html>"));

        type ShapeExtra = Modelica.Icons.TypeReal
        "Type of the additional data that can be defined for an elementary ShapeType"
             annotation (
          Documentation(info="<html>
<p>
This type is used in shapes of visual objects to define
extra data depending on the shape type. Usually, input
variable <b>extra</b> is used as instance name:
</p>

<table border=1 cellspacing=0 cellpadding=2>
<tr><th><b>shapeType</b></th><th>Meaning of parameter <b>extra</b></th></tr>
<tr>
  <td valign=\"top\">\"cylinder\"</td>
  <td valign=\"top\">if extra &gt; 0, a black line is included in the
      cylinder to show the rotation of it.</td>
</tr>
<tr>
  <td valign=\"top\">\"cone\"</td>
  <td valign=\"top\">extra = diameter-left-side / diameter-right-side, i.e.,<br>
      extra = 1: cylinder<br>
      extra = 0: \"real\" cone.</td>
</tr>
<tr>
  <td valign=\"top\">\"pipe\"</td>
  <td valign=\"top\">extra = outer-diameter / inner-diameter, i.e, <br>
      extra = 1: cylinder that is completely hollow<br>
      extra = 0: cylinder without a hole.</td>
</tr>
<tr>
  <td valign=\"top\">\"gearwheel\"</td>
  <td valign=\"top\">extra is the number of teeth of the (external) gear.
If extra &lt; 0, an internal gear is visualized with |extra| teeth.
The axis of the gearwheel is along \"lengthDirection\", and usually:
width = height = 2*radiusOfGearWheel.</td>
</tr>
<tr>
  <td valign=\"top\">\"spring\"</td>
  <td valign=\"top\">extra is the number of windings of the spring.
      Additionally, \"height\" is <b>not</b> the \"height\" but
      2*coil-width.</td>
</tr>
<tr>
  <td valign=\"top\">external shape</td>
  <td valign=\"top\">extra = 0: Visualization from file is not scaled.<br>
                     extra = 1: Visualization from file is scaled with \"length\", \"width\" and height\"
                                of the shape</td>
</tr>

</table>

</html>"));
        annotation ( Documentation(info="<HTML>
<p>
In this package <b>types</b> and <b>constants</b> are defined that are used in the
MultiBody library. The types have additional annotation choices
definitions that define the menus to be built up in the graphical
user interface when the type is used as parameter in a declaration.
</p>
</HTML>"));
      end Types;
    annotation (
      Documentation(info="<HTML>
<p>
Library <b>MultiBody</b> is a <b>free</b> Modelica package providing
3-dimensional mechanical components to model in a convenient way
<b>mechanical systems</b>, such as robots, mechanisms, vehicles.
Typical animations generated with this library are shown
in the next figure:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/MultiBody.png\">
</p>

<p>
For an introduction, have especially a look at:
</p>
<ul>
<li> <a href=\"modelica://Modelica.Mechanics.MultiBody.UsersGuide\">MultiBody.UsersGuide</a>
     discusses the most important aspects how to use this library.</li>
<li> <a href=\"modelica://Modelica.Mechanics.MultiBody.Examples\">MultiBody.Examples</a>
     contains examples that demonstrate the usage of this library.</li>
</ul>

<p>
Copyright &copy; 1998-2013, Modelica Association and DLR.
</p>
<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</HTML>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={
            Polygon(
              points={{-58,76},{6,76},{-26,50},{-58,76}},
              lineColor={95,95,95},
              smooth=Smooth.None,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(
              points={{-26,50},{28,-50}},
              color={0,0,0},
              smooth=Smooth.None),
            Ellipse(
              extent={{-4,-14},{60,-78}},
              lineColor={135,135,135},
              fillPattern=FillPattern.Sphere,
              fillColor={255,255,255})}));
    end MultiBody;
  annotation (
    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1), graphics={
        Rectangle(
          origin={8.6,63.3333},
          lineColor={64,64,64},
          fillColor={192,192,192},
          fillPattern=FillPattern.HorizontalCylinder,
          extent={{-4.6,-93.3333},{41.4,-53.3333}}),
        Ellipse(
          origin={9.0,46.0},
          extent={{-90.0,-60.0},{-80.0,-50.0}}),
        Line(
          origin={9.0,46.0},
          points={{-85.0,-55.0},{-60.0,-21.0}},
          thickness=0.5),
        Ellipse(
          origin={9.0,46.0},
          extent={{-65.0,-26.0},{-55.0,-16.0}}),
        Line(
          origin={9.0,46.0},
          points={{-60.0,-21.0},{9.0,-55.0}},
          thickness=0.5),
        Ellipse(
          origin={9.0,46.0},
          fillPattern=FillPattern.Solid,
          extent={{4.0,-60.0},{14.0,-50.0}}),
        Line(
          origin={9.0,46.0},
          points={{-10.0,-26.0},{72.0,-26.0},{72.0,-86.0},{-10.0,-86.0}})}),
    Documentation(info="<HTML>
<p>
This package contains components to model the movement
of 1-dim. rotational, 1-dim. translational, and
3-dim. <b>mechanical systems</b>.
</p>

<p>
Note, all <b>dissipative</b> components of the Modelica.Mechanics library have
an optional <b>heatPort</b> connector to which the
dissipated energy is transported in form of heat. This connector is enabled
via parameter \"useHeatPort\". If the heatPort connector is enabled,
it must be connected, and if it is not enabled, it must not be connected.
Independently, whether the heatPort is enabled or not,
the dissipated power is available from variable \"<b>lossPower</b>\" (which is
positive if heat is flowing out of the heatPort).
</p>
</html>"));
  end Mechanics;

  package Thermal
  "Library of thermal system components to model heat transfer and simple thermo-fluid pipe flow"
    extends Modelica.Icons.Package;

    package HeatTransfer
    "Library of 1-dimensional heat transfer with lumped elements"
      extends Modelica.Icons.Package;

      package Components "Lumped thermal components"
      extends Modelica.Icons.Package;

        model ThermalConductor
        "Lumped thermal element transporting heat without storing it"
          extends Interfaces.Element1D;
          parameter Modelica.SIunits.ThermalConductance G
          "Constant thermal conductance of material";

        equation
          Q_flow = G*dT;
          annotation (
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Rectangle(
                  extent={{-90,70},{90,-70}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  fillColor={192,192,192},
                  fillPattern=FillPattern.Backward),
                Line(
                  points={{-90,70},{-90,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{90,70},{90,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Text(
                  extent={{-150,115},{150,75}},
                  textString="%name",
                  lineColor={0,0,255}),
                Text(
                  extent={{-150,-75},{150,-105}},
                  lineColor={0,0,0},
                  textString="G=%G")}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={
                Line(
                  points={{-80,0},{80,0}},
                  color={255,0,0},
                  thickness=0.5,
                  arrow={Arrow.None,Arrow.Filled}),
                Text(
                  extent={{-100,-20},{100,-40}},
                  lineColor={255,0,0},
                  textString="Q_flow"),
                Text(
                  extent={{-100,40},{100,20}},
                  lineColor={0,0,0},
                  textString="dT = port_a.T - port_b.T")}),
            Documentation(info="<HTML>
<p>
This is a model for transport of heat without storing it; see also:
<a href=\"modelica://Modelica.Thermal.HeatTransfer.Components.ThermalResistor\">ThermalResistor</a>.
It may be used for complicated geometries where
the thermal conductance G (= inverse of thermal resistance)
is determined by measurements and is assumed to be constant
over the range of operations. If the component consists mainly of
one type of material and a regular geometry, it may be calculated,
e.g., with one of the following equations:
</p>
<ul>
<li><p>
    Conductance for a <b>box</b> geometry under the assumption
    that heat flows along the box length:</p>
    <pre>
    G = k*A/L
    k: Thermal conductivity (material constant)
    A: Area of box
    L: Length of box
    </pre>
    </li>
<li><p>
    Conductance for a <b>cylindrical</b> geometry under the assumption
    that heat flows from the inside to the outside radius
    of the cylinder:</p>
    <pre>
    G = 2*pi*k*L/log(r_out/r_in)
    pi   : Modelica.Constants.pi
    k    : Thermal conductivity (material constant)
    L    : Length of cylinder
    log  : Modelica.Math.log;
    r_out: Outer radius of cylinder
    r_in : Inner radius of cylinder
    </pre>
    </li>
</ul>
<pre>
    Typical values for k at 20 degC in W/(m.K):
      aluminium   220
      concrete      1
      copper      384
      iron         74
      silver      407
      steel        45 .. 15 (V2A)
      wood         0.1 ... 0.2
</pre>
</html>"));
        end ThermalConductor;
        annotation (Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}), graphics = {
          Rectangle(
            origin=  {12,40},
            fillColor=  {192,192,192},
            fillPattern=  FillPattern.Backward,
            extent=  {{-100,-100},{-70,18}}),
          Line(
            origin=  {12,40},
            points=  {{-44,16},{-44,-100}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-4,16},{-4,-100}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{30,18},{30,-100}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{66,18},{66,-100}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{66,-100},{76,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{66,-100},{56,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{30,-100},{40,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{30,-100},{20,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-4,-100},{6,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-4,-100},{-14,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-44,-100},{-34,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-44,-100},{-54,-80}},
            color=  {0,127,255}),
          Line(
            origin=  {12,40},
            points=  {{-70,-60},{66,-60}},
            color=  {191,0,0}),
          Line(
            origin=  {12,40},
            points=  {{46,-70},{66,-60}},
            color=  {191,0,0}),
          Line(
            origin=  {12,40},
            points=  {{46,-50},{66,-60}},
            color=  {191,0,0}),
          Line(
            origin=  {12,40},
            points=  {{46,-30},{66,-20}},
            color=  {191,0,0}),
          Line(
            origin=  {12,40},
            points=  {{46,-10},{66,-20}},
            color=  {191,0,0}),
          Line(
            origin=  {12,40},
            points=  {{-70,-20},{66,-20}},
            color=  {191,0,0})}), Documentation(
              info="<html>

</html>"));
      end Components;

      package Sensors "Thermal sensors"
        extends Modelica.Icons.SensorsPackage;

        model HeatFlowSensor "Heat flow rate sensor"
          extends Modelica.Icons.RotationalSensor;
          Modelica.Blocks.Interfaces.RealOutput Q_flow(unit="W")
          "Heat flow from port_a to port_b as output signal"   annotation (Placement(
                transformation(
                origin={0,-100},
                extent={{-10,-10},{10,10}},
                rotation=270)));
          Interfaces.HeatPort_a port_a annotation (Placement(transformation(extent={{
                    -110,-10},{-90,10}}, rotation=0)));
          Interfaces.HeatPort_b port_b annotation (Placement(transformation(extent={{
                    90,-10},{110,10}}, rotation=0)));
        equation
          port_a.T = port_b.T;
          port_a.Q_flow + port_b.Q_flow = 0;
          Q_flow = port_a.Q_flow;
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Line(points={{-70,0},{-95,0}}, color={191,0,0}),
                Line(points={{0,-70},{0,-90}}, color={0,0,127}),
                Line(points={{94,0},{69,0}}, color={191,0,0})}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Text(
                  extent={{5,-86},{116,-110}},
                  lineColor={0,0,0},
                  textString="Q_flow"),
                Line(points={{-70,0},{-90,0}}, color={191,0,0}),
                Line(points={{69,0},{90,0}}, color={191,0,0}),
                Line(points={{0,-70},{0,-90}}, color={0,0,127}),
                Text(
                  extent={{-150,125},{150,85}},
                  textString="%name",
                  lineColor={0,0,255})}),
            Documentation(info="<HTML>
<p>
This model is capable of monitoring the heat flow rate flowing through
this component. The sensed value of heat flow rate is the amount that
passes through this sensor while keeping the temperature drop across the
sensor zero.  This is an ideal model so it does not absorb any energy
and it has no direct effect on the thermal response of a system it is included in.
The output signal is positive, if the heat flows from port_a to port_b.
</p>
</html>"));
        end HeatFlowSensor;
        annotation (   Documentation(info="<html>

</html>"));
      end Sensors;

      package Sources "Thermal sources"
      extends Modelica.Icons.SourcesPackage;

        model PrescribedTemperature
        "Variable temperature boundary condition in Kelvin"

          Interfaces.HeatPort_b port annotation (Placement(transformation(extent={{90,
                    -10},{110,10}}, rotation=0)));
          Modelica.Blocks.Interfaces.RealInput T(unit="K") annotation (Placement(transformation(
                  extent={{-140,-20},{-100,20}}, rotation=0)));
        equation
          port.T = T;
          annotation (
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  fillColor={159,159,223},
                  fillPattern=FillPattern.Backward),
                Line(
                  points={{-102,0},{64,0}},
                  color={191,0,0},
                  thickness=0.5),
                Text(
                  extent={{0,0},{-100,-100}},
                  lineColor={0,0,0},
                  textString="K"),
                Text(
                  extent={{-150,150},{150,110}},
                  textString="%name",
                  lineColor={0,0,255}),
                Polygon(
                  points={{50,-20},{50,20},{90,0},{50,-20}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid)}),
            Documentation(info="<HTML>
<p>
This model represents a variable temperature boundary condition.
The temperature in [K] is given as input signal <b>T</b>
to the model. The effect is that an instance of this model acts as
an infinite reservoir able to absorb or generate as much energy
as required to keep the temperature at the specified value.
</p>
</html>"),         Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  fillColor={159,159,223},
                  fillPattern=FillPattern.Backward),
                Text(
                  extent={{0,0},{-100,-100}},
                  lineColor={0,0,0},
                  textString="K"),
                Line(
                  points={{-102,0},{64,0}},
                  color={191,0,0},
                  thickness=0.5),
                Polygon(
                  points={{52,-20},{52,20},{90,0},{52,-20}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid)}));
        end PrescribedTemperature;

        model FixedHeatFlow "Fixed heat flow boundary condition"
          parameter Modelica.SIunits.HeatFlowRate Q_flow
          "Fixed heat flow rate at port";
          parameter Modelica.SIunits.Temperature T_ref=293.15
          "Reference temperature";
          parameter Modelica.SIunits.LinearTemperatureCoefficient alpha=0
          "Temperature coefficient of heat flow rate";
          Interfaces.HeatPort_b port annotation (Placement(transformation(extent={{90,
                    -10},{110,10}}, rotation=0)));
        equation
          port.Q_flow = -Q_flow*(1 + alpha*(port.T - T_ref));
          annotation (
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={
                Text(
                  extent={{-150,100},{150,60}},
                  textString="%name",
                  lineColor={0,0,255}),
                Text(
                  extent={{-150,-55},{150,-85}},
                  lineColor={0,0,0},
                  textString="Q_flow=%Q_flow"),
                Line(
                  points={{-100,-20},{48,-20}},
                  color={191,0,0},
                  thickness=0.5),
                Line(
                  points={{-100,20},{46,20}},
                  color={191,0,0},
                  thickness=0.5),
                Polygon(
                  points={{40,0},{40,40},{70,20},{40,0}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,-40},{40,0},{70,-20},{40,-40}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{70,40},{90,-40}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid)}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{-100,40},{0,-36}},
                  lineColor={0,0,0},
                  textString="Q_flow=const."),
                Line(
                  points={{-48,-20},{60,-20}},
                  color={191,0,0},
                  thickness=0.5),
                Line(
                  points={{-48,20},{60,20}},
                  color={191,0,0},
                  thickness=0.5),
                Polygon(
                  points={{60,0},{60,40},{90,20},{60,0}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{60,-40},{60,0},{90,-20},{60,-40}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid)}),
            Documentation(info="<HTML>
<p>
This model allows a specified amount of heat flow rate to be \"injected\"
into a thermal system at a given port.  The constant amount of heat
flow rate Q_flow is given as a parameter. The heat flows into the
component to which the component FixedHeatFlow is connected,
if parameter Q_flow is positive.
</p>
<p>
If parameter alpha is &lt;&gt; 0, the heat flow is multiplied by (1 + alpha*(port.T - T_ref))
in order to simulate temperature dependent losses (which are given with respect to reference temperature T_ref).
</p>
</html>"));
        end FixedHeatFlow;
        annotation (   Documentation(info="<html>

</html>"));
      end Sources;

      package Interfaces "Connectors and partial models"
        extends Modelica.Icons.InterfacesPackage;

        partial connector HeatPort "Thermal port for 1-dim. heat transfer"
          Modelica.SIunits.Temperature T "Port temperature";
          flow Modelica.SIunits.HeatFlowRate Q_flow
          "Heat flow rate (positive if flowing from outside into the component)";
          annotation (Documentation(info="<html>

</html>"));
        end HeatPort;

        connector HeatPort_a
        "Thermal port for 1-dim. heat transfer (filled rectangular icon)"

          extends HeatPort;

          annotation(defaultComponentName = "port_a",
            Documentation(info="<HTML>
<p>This connector is used for 1-dimensional heat flow between components.
The variables in the connector are:</p>
<pre>
   T       Temperature in [Kelvin].
   Q_flow  Heat flow rate in [Watt].
</pre>
<p>According to the Modelica sign convention, a <b>positive</b> heat flow
rate <b>Q_flow</b> is considered to flow <b>into</b> a component. This
convention has to be used whenever this connector is used in a model
class.</p>
<p>Note, that the two connector classes <b>HeatPort_a</b> and
<b>HeatPort_b</b> are identical with the only exception of the different
<b>icon layout</b>.</p></html>"),         Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid)}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Rectangle(
                  extent={{-50,50},{50,-50}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-120,120},{100,60}},
                  lineColor={191,0,0},
                  textString="%name")}));
        end HeatPort_a;

        connector HeatPort_b
        "Thermal port for 1-dim. heat transfer (unfilled rectangular icon)"

          extends HeatPort;

          annotation(defaultComponentName = "port_b",
            Documentation(info="<HTML>
<p>This connector is used for 1-dimensional heat flow between components.
The variables in the connector are:</p>
<pre>
   T       Temperature in [Kelvin].
   Q_flow  Heat flow rate in [Watt].
</pre>
<p>According to the Modelica sign convention, a <b>positive</b> heat flow
rate <b>Q_flow</b> is considered to flow <b>into</b> a component. This
convention has to be used whenever this connector is used in a model
class.</p>
<p>Note, that the two connector classes <b>HeatPort_a</b> and
<b>HeatPort_b</b> are identical with the only exception of the different
<b>icon layout</b>.</p></html>"),         Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics={Rectangle(
                  extent={{-50,50},{50,-50}},
                  lineColor={191,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-100,120},{120,60}},
                  lineColor={191,0,0},
                  textString="%name")}),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                    100,100}}), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={191,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end HeatPort_b;

        partial model Element1D
        "Partial heat transfer element with two HeatPort connectors that does not store energy"

          Modelica.SIunits.HeatFlowRate Q_flow
          "Heat flow rate from port_a -> port_b";
          Modelica.SIunits.TemperatureDifference dT "port_a.T - port_b.T";
      public
          HeatPort_a port_a annotation (Placement(transformation(extent={{-110,-10},
                    {-90,10}}, rotation=0)));
          HeatPort_b port_b annotation (Placement(transformation(extent={{90,-10},{
                    110,10}}, rotation=0)));
        equation
          dT = port_a.T - port_b.T;
          port_a.Q_flow = Q_flow;
          port_b.Q_flow = -Q_flow;
          annotation (Documentation(info="<HTML>
<p>
This partial model contains the basic connectors and variables to
allow heat transfer models to be created that <b>do not store energy</b>,
This model defines and includes equations for the temperature
drop across the element, <b>dT</b>, and the heat flow rate
through the element from port_a to port_b, <b>Q_flow</b>.
</p>
<p>
By extending this model, it is possible to write simple
constitutive equations for many types of heat transfer components.
</p>
</html>"));
        end Element1D;
        annotation (                               Documentation(info="<html>

</html>"));
      end Interfaces;
      annotation (
         Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100,-100},{100,100}}), graphics = {
          Polygon(
            origin=  {13.758,27.517},
            lineColor=  {128,128,128},
            fillColor=  {192,192,192},
            fillPattern=  FillPattern.Solid,
            points=  {{-54,-6},{-61,-7},{-75,-15},{-79,-24},{-80,-34},{-78,-42},{-73,-49},{-64,-51},{-57,-51},{-47,-50},{-41,-43},{-38,-35},{-40,-27},{-40,-20},{-42,-13},{-47,-7},{-54,-5},{-54,-6}}),
        Polygon(
            origin=  {13.758,27.517},
            fillColor=  {160,160,164},
            fillPattern=  FillPattern.Solid,
            points=  {{-75,-15},{-79,-25},{-80,-34},{-78,-42},{-72,-49},{-64,-51},{-57,-51},{-47,-50},{-57,-47},{-65,-45},{-71,-40},{-74,-33},{-76,-23},{-75,-15},{-75,-15}}),
          Polygon(
            origin=  {13.758,27.517},
            lineColor=  {160,160,164},
            fillColor=  {192,192,192},
            fillPattern=  FillPattern.Solid,
            points=  {{39,-6},{32,-7},{18,-15},{14,-24},{13,-34},{15,-42},{20,-49},{29,-51},{36,-51},{46,-50},{52,-43},{55,-35},{53,-27},{53,-20},{51,-13},{46,-7},{39,-5},{39,-6}}),
          Polygon(
            origin=  {13.758,27.517},
            fillColor=  {160,160,164},
            fillPattern=  FillPattern.Solid,
            points=  {{18,-15},{14,-25},{13,-34},{15,-42},{21,-49},{29,-51},{36,-51},{46,-50},{36,-47},{28,-45},{22,-40},{19,-33},{17,-23},{18,-15},{18,-15}}),
          Polygon(
            origin=  {13.758,27.517},
            lineColor=  {191,0,0},
            fillColor=  {191,0,0},
            fillPattern=  FillPattern.Solid,
            points=  {{-9,-23},{-9,-10},{18,-17},{-9,-23}}),
          Line(
            origin=  {13.758,27.517},
            points=  {{-41,-17},{-9,-17}},
            color=  {191,0,0},
            thickness=  0.5),
          Line(
            origin=  {13.758,27.517},
            points=  {{-17,-40},{15,-40}},
            color=  {191,0,0},
            thickness=  0.5),
          Polygon(
            origin=  {13.758,27.517},
            lineColor=  {191,0,0},
            fillColor=  {191,0,0},
            fillPattern=  FillPattern.Solid,
            points=  {{-17,-46},{-17,-34},{-40,-40},{-17,-46}})}),
                                Documentation(info="<HTML>
<p>
This package contains components to model <b>1-dimensional heat transfer</b>
with lumped elements. This allows especially to model heat transfer in
machines provided the parameters of the lumped elements, such as
the heat capacity of a part, can be determined by measurements
(due to the complex geometries and many materials used in machines,
calculating the lumped element parameters from some basic analytic
formulas is usually not possible).
</p>
<p>
Example models how to use this library are given in subpackage <b>Examples</b>.<br>
For a first simple example, see <b>Examples.TwoMasses</b> where two masses
with different initial temperatures are getting in contact to each
other and arriving after some time at a common temperature.<br>
<b>Examples.ControlledTemperature</b> shows how to hold a temperature
within desired limits by switching on and off an electric resistor.<br>
A more realistic example is provided in <b>Examples.Motor</b> where the
heating of an electrical motor is modelled, see the following screen shot
of this example:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Thermal/HeatTransfer/driveWithHeatTransfer.png\" ALT=\"driveWithHeatTransfer\">
</p>

<p>
The <b>filled</b> and <b>non-filled red squares</b> at the left and
right side of a component represent <b>thermal ports</b> (connector HeatPort).
Drawing a line between such squares means that they are thermally connected.
The variables of a HeatPort connector are the temperature <b>T</b> at the port
and the heat flow rate <b>Q_flow</b> flowing into the component (if Q_flow is positive,
the heat flows into the element, otherwise it flows out of the element):
</p>
<pre>   Modelica.SIunits.Temperature  T  \"absolute temperature at port in Kelvin\";
   Modelica.SIunits.HeatFlowRate Q_flow  \"flow rate at the port in Watt\";
</pre>
<p>
Note, that all temperatures of this package, including initial conditions,
are given in Kelvin. For convenience, in subpackages <b>HeatTransfer.Celsius</b>,
 <b>HeatTransfer.Fahrenheit</b> and <b>HeatTransfer.Rankine</b> components are provided such that source and
sensor information is available in degree Celsius, degree Fahrenheit, or degree Rankine,
respectively. Additionally, in package <b>SIunits.Conversions</b> conversion
functions between the units Kelvin and Celsius, Fahrenheit, Rankine are
provided. These functions may be used in the following way:
</p>
<pre>  <b>import</b> SI=Modelica.SIunits;
  <b>import</b> Modelica.SIunits.Conversions.*;
     ...
  <b>parameter</b> SI.Temperature T = from_degC(25);  // convert 25 degree Celsius to Kelvin
</pre>

<p>
There are several other components available, such as AxialConduction (discretized PDE in
axial direction), which have been temporarily removed from this library. The reason is that
these components reference material properties, such as thermal conductivity, and currently
the Modelica design group is discussing a general scheme to describe material properties.
</p>
<p>
For technical details in the design of this library, see the following reference:<br>
<b>Michael Tiller (2001)</b>: <a href=\"http://www.amazon.de\">
Introduction to Physical Modeling with Modelica</a>.
Kluwer Academic Publishers Boston.
</p>
<p>
<b>Acknowledgements:</b><br>
Several helpful remarks from the following persons are acknowledged:
John Batteh, Ford Motors, Dearborn, U.S.A;
<a href=\"http://www.haumer.at/\">Anton Haumer</a>, Technical Consulting &amp; Electrical Engineering, Austria;
Ludwig Marvan, VA TECH ELIN EBG Elektronik GmbH, Wien, Austria;
Hans Olsson, Dassault Syst&egrave;mes AB, Sweden;
Hubertus Tummescheit, Lund Institute of Technology, Lund, Sweden.
</p>
<dl>
  <dt><b>Main Authors:</b></dt>
  <dd>
  <p>
  <a href=\"http://www.haumer.at/\">Anton Haumer</a><br>
  Technical Consulting &amp; Electrical Engineering<br>
  A-3423 St.Andrae-Woerdern, Austria<br>
  email: <a href=\"mailto:a.haumer@haumer.at\">a.haumer@haumer.at</a>
</p>
  </dd>
</dl>
<p><b>Copyright &copy; 2001-2013, Modelica Association, Michael Tiller and DLR.</b></p>

<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</html>",     revisions="<html>
<ul>
<li><i>July 15, 2002</i>
       by Michael Tiller, <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and Nikolaus Sch&uuml;rmann:<br>
       Implemented.
</li>
<li><i>June 13, 2005</i>
       by <a href=\"http://www.haumer.at/\">Anton Haumer</a><br>
       Refined placing of connectors (cosmetic).<br>
       Refined all Examples; removed Examples.FrequencyInverter, introducing Examples.Motor<br>
       Introduced temperature dependent correction (1 + alpha*(T - T_ref)) in Fixed/PrescribedHeatFlow<br>
</li>
  <li> v1.1.1 2007/11/13 Anton Haumer<br>
       components moved to sub-packages</li>
  <li> v1.2.0 2009/08/26 Anton Haumer<br>
       added component ThermalCollector</li>

</ul>
</html>"));
    end HeatTransfer;
    annotation (
     Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
      Line(
      origin={-47.5,11.6667},
      points={{-2.5,-91.6667},{17.5,-71.6667},{-22.5,-51.6667},{17.5,-31.6667},{-22.5,-11.667},{17.5,8.3333},{-2.5,28.3333},{-2.5,48.3333}},
        smooth=Smooth.Bezier),
      Polygon(
      origin={-50.0,68.333},
      pattern=LinePattern.None,
      fillPattern=FillPattern.Solid,
        points={{0.0,21.667},{-10.0,-8.333},{10.0,-8.333}}),
      Line(
      origin={2.5,11.6667},
      points={{-2.5,-91.6667},{17.5,-71.6667},{-22.5,-51.6667},{17.5,-31.6667},{-22.5,-11.667},{17.5,8.3333},{-2.5,28.3333},{-2.5,48.3333}},
        smooth=Smooth.Bezier),
      Polygon(
      origin={0.0,68.333},
      pattern=LinePattern.None,
      fillPattern=FillPattern.Solid,
        points={{0.0,21.667},{-10.0,-8.333},{10.0,-8.333}}),
      Line(
      origin={52.5,11.6667},
      points={{-2.5,-91.6667},{17.5,-71.6667},{-22.5,-51.6667},{17.5,-31.6667},{-22.5,-11.667},{17.5,8.3333},{-2.5,28.3333},{-2.5,48.3333}},
        smooth=Smooth.Bezier),
      Polygon(
      origin={50.0,68.333},
      pattern=LinePattern.None,
      fillPattern=FillPattern.Solid,
        points={{0.0,21.667},{-10.0,-8.333},{10.0,-8.333}})}),
      Documentation(info="<html>
<p>
This package contains libraries to model heat transfer
and fluid heat flow.
</p>
</html>"));
  end Thermal;

  package Math
  "Library of mathematical functions (e.g., sin, cos) and of functions operating on vectors and matrices"
  import SI = Modelica.SIunits;
  extends Modelica.Icons.Package;

  package Icons "Icons for Math"
    extends Modelica.Icons.IconsPackage;

    partial function AxisLeft
    "Basic icon for mathematical function with y-axis on left side"

      annotation (
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,-80},{-80,68}}, color={192,192,192}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-150,150},{150,110}},
              textString="%name",
              lineColor={0,0,255})}),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={Line(points={{-80,80},{-88,80}}, color={95,
              95,95}),Line(points={{-80,-80},{-88,-80}}, color={95,95,95}),Line(
              points={{-80,-90},{-80,84}}, color={95,95,95}),Text(
                  extent={{-75,104},{-55,84}},
                  lineColor={95,95,95},
                  textString="y"),Polygon(
                  points={{-80,98},{-86,82},{-74,82},{-80,98}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<p>
Icon for a mathematical function, consisting of an y-axis on the left side.
It is expected, that an x-axis is added and a plot of the function.
</p>
</html>"));
    end AxisLeft;

    partial function AxisCenter
    "Basic icon for mathematical function with y-axis in the center"

      annotation (
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{0,-80},{0,68}}, color={192,192,192}),
            Polygon(
              points={{0,90},{-8,68},{8,68},{0,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-150,150},{150,110}},
              textString="%name",
              lineColor={0,0,255})}),
        Diagram(graphics={Line(points={{0,80},{-8,80}}, color={95,95,95}),Line(
              points={{0,-80},{-8,-80}}, color={95,95,95}),Line(points={{0,-90},{
              0,84}}, color={95,95,95}),Text(
                  extent={{5,104},{25,84}},
                  lineColor={95,95,95},
                  textString="y"),Polygon(
                  points={{0,98},{-6,82},{6,82},{0,98}},
                  lineColor={95,95,95},
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<p>
Icon for a mathematical function, consisting of an y-axis in the middle.
It is expected, that an x-axis is added and a plot of the function.
</p>
</html>"));
    end AxisCenter;
  end Icons;

  function sin "Sine"
    extends Modelica.Math.Icons.AxisLeft;
    input Modelica.SIunits.Angle u;
    output Real y;

  external "builtin" y=  sin(u);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,0},{68,0}}, color={192,192,192}),
          Polygon(
            points={{90,0},{68,8},{68,-8},{90,0}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-80,0},{-68.7,34.2},{-61.5,53.1},{-55.1,66.4},{-49.4,74.6},
                {-43.8,79.1},{-38.2,79.8},{-32.6,76.6},{-26.9,69.7},{-21.3,59.4},
                {-14.9,44.1},{-6.83,21.2},{10.1,-30.8},{17.3,-50.2},{23.7,-64.2},
                {29.3,-73.1},{35,-78.4},{40.6,-80},{46.2,-77.6},{51.9,-71.5},{
                57.5,-61.9},{63.9,-47.2},{72,-24.8},{80,0}}, color={0,0,0}),
          Text(
            extent={{12,84},{84,36}},
            lineColor={192,192,192},
            textString="sin")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{84,0}}, color={95,95,95}),
            Polygon(
              points={{100,0},{84,6},{84,-6},{100,0}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{-80,0},{-68.7,34.2},{-61.5,53.1},{-55.1,66.4},{-49.4,74.6},
              {-43.8,79.1},{-38.2,79.8},{-32.6,76.6},{-26.9,69.7},{-21.3,59.4},{-14.9,
              44.1},{-6.83,21.2},{10.1,-30.8},{17.3,-50.2},{23.7,-64.2},{29.3,-73.1},
              {35,-78.4},{40.6,-80},{46.2,-77.6},{51.9,-71.5},{57.5,-61.9},{63.9,
              -47.2},{72,-24.8},{80,0}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{-105,72},{-85,88}},
              textString="1",
              lineColor={0,0,255}),Text(
              extent={{70,25},{90,5}},
              textString="2*pi",
              lineColor={0,0,255}),Text(
              extent={{-103,-72},{-83,-88}},
              textString="-1",
              lineColor={0,0,255}),Text(
              extent={{82,-6},{102,-26}},
              lineColor={95,95,95},
              textString="u"),Line(
              points={{-80,80},{-28,80}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{-80,-80},{50,-80}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<html>
<p>
This function returns y = sin(u), with -&infin; &lt; u &lt; &infin;:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/sin.png\">
</p>
</html>"));
  end sin;

  function asin "Inverse sine (-1 <= u <= 1)"
    extends Modelica.Math.Icons.AxisCenter;
    input Real u;
    output SI.Angle y;

  external "builtin" y=  asin(u);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,0},{68,0}}, color={192,192,192}),
          Polygon(
            points={{90,0},{68,8},{68,-8},{90,0}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-80,-80},{-79.2,-72.8},{-77.6,-67.5},{-73.6,-59.4},{-66.3,
                -49.8},{-53.5,-37.3},{-30.2,-19.7},{37.4,24.8},{57.5,40.8},{68.7,
                52.7},{75.2,62.2},{77.6,67.5},{80,80}}, color={0,0,0}),
          Text(
            extent={{-88,78},{-16,30}},
            lineColor={192,192,192},
            textString="asin")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Text(
              extent={{-40,-72},{-15,-88}},
              textString="-pi/2",
              lineColor={0,0,255}),Text(
              extent={{-38,88},{-13,72}},
              textString=" pi/2",
              lineColor={0,0,255}),Text(
              extent={{68,-9},{88,-29}},
              textString="+1",
              lineColor={0,0,255}),Text(
              extent={{-90,21},{-70,1}},
              textString="-1",
              lineColor={0,0,255}),Line(points={{-100,0},{84,0}}, color={95,95,95}),
            Polygon(
              points={{98,0},{82,6},{82,-6},{98,0}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{-80,-80},{-79.2,-72.8},{-77.6,-67.5},{-73.6,-59.4},{-66.3,
              -49.8},{-53.5,-37.3},{-30.2,-19.7},{37.4,24.8},{57.5,40.8},{68.7,
              52.7},{75.2,62.2},{77.6,67.5},{80,80}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{82,24},{102,4}},
              lineColor={95,95,95},
              textString="u"),Line(
              points={{0,80},{86,80}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{80,86},{80,-10}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<html>
<p>
This function returns y = asin(u), with -1 &le; u &le; +1:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/asin.png\">
</p>
</html>"));
  end asin;

  function atan2 "Four quadrant inverse tangent"
    extends Modelica.Math.Icons.AxisCenter;
    input Real u1;
    input Real u2;
    output SI.Angle y;

  external "builtin" y=  atan2(u1, u2);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,0},{68,0}}, color={192,192,192}),
          Polygon(
            points={{90,0},{68,8},{68,-8},{90,0}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{0,-80},{8.93,-67.2},{17.1,-59.3},{27.3,-53.6},{42.1,-49.4},
                {69.9,-45.8},{80,-45.1}}, color={0,0,0}),
          Line(points={{-80,-34.9},{-46.1,-31.4},{-29.4,-27.1},{-18.3,-21.5},{-10.3,
                -14.5},{-2.03,-3.17},{7.97,11.6},{15.5,19.4},{24.3,25},{39,30},{
                62.1,33.5},{80,34.9}}, color={0,0,0}),
          Line(points={{-80,45.1},{-45.9,48.7},{-29.1,52.9},{-18.1,58.6},{-10.2,
                65.8},{-1.82,77.2},{0,80}}, color={0,0,0}),
          Text(
            extent={{-90,-46},{-18,-94}},
            lineColor={192,192,192},
            textString="atan2")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{84,0}}, color={95,95,95}),
            Polygon(
              points={{96,0},{80,6},{80,-6},{96,0}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{0,-80},{8.93,-67.2},{17.1,-59.3},{27.3,-53.6},{42.1,-49.4},
              {69.9,-45.8},{80,-45.1}},
              color={0,0,255},
              thickness=0.5),Line(
              points={{-80,-34.9},{-46.1,-31.4},{-29.4,-27.1},{-18.3,-21.5},{-10.3,
              -14.5},{-2.03,-3.17},{7.97,11.6},{15.5,19.4},{24.3,25},{39,30},{
              62.1,33.5},{80,34.9}},
              color={0,0,255},
              thickness=0.5),Line(
              points={{-80,45.1},{-45.9,48.7},{-29.1,52.9},{-18.1,58.6},{-10.2,
              65.8},{-1.82,77.2},{0,80}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{-32,89},{-10,74}},
              textString="pi",
              lineColor={0,0,255}),Text(
              extent={{-32,-72},{-4,-88}},
              textString="-pi",
              lineColor={0,0,255}),Text(
              extent={{0,55},{20,42}},
              textString="pi/2",
              lineColor={0,0,255}),Line(points={{0,40},{-8,40}}, color={192,192,
            192}),Line(points={{0,-40},{-8,-40}}, color={192,192,192}),Text(
              extent={{0,-23},{20,-42}},
              textString="-pi/2",
              lineColor={0,0,255}),Text(
              extent={{62,-4},{94,-26}},
              lineColor={95,95,95},
              textString="u1, u2"),Line(
              points={{-88,40},{86,40}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{-86,-40},{86,-40}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<HTML>
<p>
This function returns y = atan2(u1,u2) such that tan(y) = u1/u2 and
y is in the range -pi &lt; y &le; pi. u2 may be zero, provided
u1 is not zero. Usually u1, u2 is provided in such a form that
u1 = sin(y) and u2 = cos(y):
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/atan2.png\">
</p>

</html>"));
  end atan2;

  function exp "Exponential, base e"
    extends Modelica.Math.Icons.AxisCenter;
    input Real u;
    output Real y;

  external "builtin" y=  exp(u);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,-80.3976},{68,-80.3976}}, color={192,192,192}),
          Polygon(
            points={{90,-80.3976},{68,-72.3976},{68,-88.3976},{90,-80.3976}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-80,-80},{-31,-77.9},{-6.03,-74},{10.9,-68.4},{23.7,-61},
                {34.2,-51.6},{43,-40.3},{50.3,-27.8},{56.7,-13.5},{62.3,2.23},{
                67.1,18.6},{72,38.2},{76,57.6},{80,80}}, color={0,0,0}),
          Text(
            extent={{-86,50},{-14,2}},
            lineColor={192,192,192},
            textString="exp")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,-80.3976},{84,-80.3976}},
            color={95,95,95}),Polygon(
              points={{98,-80.3976},{82,-74.3976},{82,-86.3976},{98,-80.3976}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{-80,-80},{-31,-77.9},{-6.03,-74},{10.9,-68.4},{23.7,-61},{
              34.2,-51.6},{43,-40.3},{50.3,-27.8},{56.7,-13.5},{62.3,2.23},{67.1,
              18.6},{72,38.2},{76,57.6},{80,80}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{-31,72},{-11,88}},
              textString="20",
              lineColor={0,0,255}),Text(
              extent={{-92,-81},{-72,-101}},
              textString="-3",
              lineColor={0,0,255}),Text(
              extent={{66,-81},{86,-101}},
              textString="3",
              lineColor={0,0,255}),Text(
              extent={{2,-69},{22,-89}},
              textString="1",
              lineColor={0,0,255}),Text(
              extent={{78,-54},{98,-74}},
              lineColor={95,95,95},
              textString="u"),Line(
              points={{0,80},{88,80}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{80,84},{80,-84}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<html>
<p>
This function returns y = exp(u), with -&infin; &lt; u &lt; &infin;:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/exp.png\">
</p>
</html>"));
  end exp;

  function log "Natural (base e) logarithm (u shall be > 0)"
    extends Modelica.Math.Icons.AxisLeft;
    input Real u;
    output Real y;

  external "builtin" y=  log(u);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,0},{68,0}}, color={192,192,192}),
          Polygon(
            points={{90,0},{68,8},{68,-8},{90,0}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-80,-80},{-79.2,-50.6},{-78.4,-37},{-77.6,-28},{-76.8,-21.3},
                {-75.2,-11.4},{-72.8,-1.31},{-69.5,8.08},{-64.7,17.9},{-57.5,28},
                {-47,38.1},{-31.8,48.1},{-10.1,58},{22.1,68},{68.7,78.1},{80,80}},
              color={0,0,0}),
          Text(
            extent={{-6,-24},{66,-72}},
            lineColor={192,192,192},
            textString="log")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{84,0}}, color={95,95,95}),
            Polygon(
              points={{100,0},{84,6},{84,-6},{100,0}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{-78,-80},{-77.2,-50.6},{-76.4,-37},{-75.6,-28},{-74.8,-21.3},
              {-73.2,-11.4},{-70.8,-1.31},{-67.5,8.08},{-62.7,17.9},{-55.5,28},{-45,
              38.1},{-29.8,48.1},{-8.1,58},{24.1,68},{70.7,78.1},{82,80}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{-105,72},{-85,88}},
              textString="3",
              lineColor={0,0,255}),Text(
              extent={{60,-3},{80,-23}},
              textString="20",
              lineColor={0,0,255}),Text(
              extent={{-78,-7},{-58,-27}},
              textString="1",
              lineColor={0,0,255}),Text(
              extent={{84,26},{104,6}},
              lineColor={95,95,95},
              textString="u"),Text(
              extent={{-100,9},{-80,-11}},
              textString="0",
              lineColor={0,0,255}),Line(
              points={{-80,80},{84,80}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{82,82},{82,-6}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<html>
<p>
This function returns y = log(10) (the natural logarithm of u),
with u &gt; 0:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/log.png\">
</p>
</html>"));
  end log;

  function log10 "Base 10 logarithm (u shall be > 0)"
    extends Modelica.Math.Icons.AxisLeft;
    input Real u;
    output Real y;

  external "builtin" y=  log10(u);
    annotation (
      Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{-90,0},{68,0}}, color={192,192,192}),
          Polygon(
            points={{90,0},{68,8},{68,-8},{90,0}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-79.8,-80},{-79.2,-50.6},{-78.4,-37},{-77.6,-28},{-76.8,-21.3},
                {-75.2,-11.4},{-72.8,-1.31},{-69.5,8.08},{-64.7,17.9},{-57.5,28},
                {-47,38.1},{-31.8,48.1},{-10.1,58},{22.1,68},{68.7,78.1},{80,80}},
              color={0,0,0}),
          Text(
            extent={{-30,-22},{60,-70}},
            lineColor={192,192,192},
            textString="log10")}),
      Diagram(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{84,0}}, color={95,95,95}),
            Polygon(
              points={{98,0},{82,6},{82,-6},{98,0}},
              lineColor={95,95,95},
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),Line(
              points={{-77.8,-80},{-77.2,-50.6},{-76.4,-37},{-75.6,-28},{-74.8,-21.3},
              {-73.2,-11.4},{-70.8,-1.31},{-67.5,8.08},{-62.7,17.9},{-55.5,28},{-45,
              38.1},{-29.8,48.1},{-8.1,58},{24.1,68},{70.7,78.1},{82,80}},
              color={0,0,255},
              thickness=0.5),Text(
              extent={{66,-13},{86,-33}},
              textString="20",
              lineColor={0,0,255}),Text(
              extent={{-78,-1},{-58,-21}},
              textString="1",
              lineColor={0,0,255}),Text(
              extent={{-83,62},{-63,78}},
              textString=" 1.3",
              lineColor={0,0,255}),Text(
              extent={{80,24},{100,4}},
              lineColor={95,95,95},
              textString="u"),Text(
              extent={{-100,9},{-80,-11}},
              textString="0",
              lineColor={0,0,255}),Line(
              points={{-80,80},{86,80}},
              color={175,175,175},
              smooth=Smooth.None),Line(
              points={{80,92},{80,-12}},
              color={175,175,175},
              smooth=Smooth.None)}),
      Documentation(info="<html>
<p>
This function returns y = log10(u),
with u &gt; 0:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/Math/log10.png\">
</p>
</html>"));
  end log10;
  annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
            {100,100}}), graphics={Line(points={{-80,0},{-68.7,34.2},{-61.5,53.1},
              {-55.1,66.4},{-49.4,74.6},{-43.8,79.1},{-38.2,79.8},{-32.6,76.6},{
              -26.9,69.7},{-21.3,59.4},{-14.9,44.1},{-6.83,21.2},{10.1,-30.8},{17.3,
              -50.2},{23.7,-64.2},{29.3,-73.1},{35,-78.4},{40.6,-80},{46.2,-77.6},
              {51.9,-71.5},{57.5,-61.9},{63.9,-47.2},{72,-24.8},{80,0}}, color={
              0,0,0}, smooth=Smooth.Bezier)}), Documentation(info="<HTML>
<p>
This package contains <b>basic mathematical functions</b> (such as sin(..)),
as well as functions operating on
<a href=\"modelica://Modelica.Math.Vectors\">vectors</a>,
<a href=\"modelica://Modelica.Math.Matrices\">matrices</a>,
<a href=\"modelica://Modelica.Math.Nonlinear\">nonlinear functions</a>, and
<a href=\"modelica://Modelica.Math.BooleanVectors\">Boolean vectors</a>.
</p>

<dl>
<dt><b>Main Authors:</b>
<dd><a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a> and
    Marcus Baur<br>
    Deutsches Zentrum f&uuml;r Luft und Raumfahrt e.V. (DLR)<br>
    Institut f&uuml;r Robotik und Mechatronik<br>
    Postfach 1116<br>
    D-82230 Wessling<br>
    Germany<br>
    email: <A HREF=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</A><br>
</dl>

<p>
Copyright &copy; 1998-2013, Modelica Association and DLR.
</p>
<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</html>",   revisions="<html>
<ul>
<li><i>October 21, 2002</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>
       and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       Function tempInterpol2 added.</li>
<li><i>Oct. 24, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Icons for icon and diagram level introduced.</li>
<li><i>June 30, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized.</li>
</ul>

</html>"));
  end Math;

  package Utilities
  "Library of utility functions dedicated to scripting (operating on files, streams, strings, system)"
    extends Modelica.Icons.Package;

    package Files "Functions to work with files and directories"
      extends Modelica.Icons.Package;

    function createDirectory
      "Create directory (if directory already exists, ignore call)"
      extends Modelica.Icons.Function;
      input String directoryName
        "Name of directory to be created (if present, ignore call)";
    //..............................................................
    protected
      function existDirectory
        "Inquire whether directory exists; if present and not a directory, trigger an error"
         extends Modelica.Icons.Function;
         input String directoryName;
         output Boolean exists "true if directory exists";
      protected
         Types.FileType fileType = Modelica.Utilities.Internal.FileSystem.stat(
                                                 directoryName);
      algorithm
         if fileType == Types.FileType.RegularFile or
            fileType == Types.FileType.SpecialFile then
            Streams.error("Directory \"" + directoryName + "\" cannot be created\n" +
                          "because this is an existing file.");
         elseif fileType == Types.FileType.Directory then
            exists :=true;
         else
            exists :=false;
         end if;
      end existDirectory;

      function assertCorrectIndex
        "Print error, if index to last essential character in directory is wrong"
         extends Modelica.Icons.Function;
         input Integer index "Index must be > 0";
         input String directoryName "Directory name for error message";
      algorithm
         if index < 1 then
            Streams.error("It is not possible to create the directory\n" +
                          "\"" + directoryName + "\"\n" +
                          "because this directory name is not valid");
         end if;
      end assertCorrectIndex;

    //..............................................................
      String fullName;
      Integer index;
      Integer oldIndex;
      Integer lastIndex;
      Boolean found;
      Boolean finished;
      Integer nDirectories = 0
        "Number of directories that need to be generated";
    algorithm
      // Ignore call, if directory exists
      if not existDirectory(directoryName) then
         fullName := Files.fullPathName(directoryName);

         // Remove a trailing "/"
            index :=Strings.length(fullName);
            if Strings.substring(fullName,index,index) == "/" then
               index :=index - 1;
               assertCorrectIndex(index,fullName);
            end if;
            lastIndex := index;
            fullName := Strings.substring(fullName,1,index);

         // Search upper directories until a directory is found that exists
         // ??? check the following while loop later, if also cases such as
         //  "c:/", "c:", "//name" are handled correctly ???
            found := false;
            while not found loop
               oldIndex := index;
               index := Strings.findLast(fullName,"/",startIndex=index);
               if index == 0 then
                  index := oldIndex;
                  found := true;
               else
                  index := index - 1;
                  assertCorrectIndex(index, fullName);
                  found := existDirectory(Strings.substring(fullName,1,index));
               end if;
            end while;
            index := oldIndex;

         // Create directories
            finished := false;
            while not finished loop
               Modelica.Utilities.Internal.FileSystem.mkdir(
                              Strings.substring(fullName,1,index));
               if index >= lastIndex then
                  finished := true;
               elseif index < lastIndex then
                  index := Strings.find(fullName, "/", startIndex=index+2);
                  if index == 0 then
                     index :=lastIndex;
                  end if;
               end if;
            end while;
      end if;

      annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
Files.<b>createDirectory</b>(directoryName);
</pre></blockquote>
<h4>Description</h4>
<p>
Creates directory \"directoryName\". If this directory already exists,
the function call is ignored. If several directories in \"directoryName\"
do not exist, all of them are created. For example, assume
that directory \"E:/test1\" exists and that directory
\"E:/test1/test2/test3\" shall be created. In this case
the directories \"test2\" in \"test1\" and \"test3\" in \"test2\"
are created.
</p>
<p>
This function is silent, i.e., it does not print a message.
In case of error (e.g., \"directoryName\" is an existing regular
file), an assert is triggered.
</p>
</html>"));
    end createDirectory;

    function exist "Inquire whether file or directory exists"
      extends Modelica.Icons.Function;
      input String name "Name of file or directory";
      output Boolean result "= true, if file or directory exists";
    algorithm
      result := Modelica.Utilities.Internal.FileSystem.stat(
                              name) > Types.FileType.NoFile;

      annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
result = Files.<b>exist</b>(name);
</pre></blockquote>
<h4>Description</h4>
<p>
Returns true, if \"name\" is an existing file or directory.
If this is not the case, the function returns false.
</p>
</html>"));
    end exist;

    function fullPathName "Get full path name of file or directory name"
      extends Modelica.Icons.Function;
      input String name "Absolute or relative file or directory name";
      output String fullName "Full path of 'name'";
    external "C" fullName = ModelicaInternal_fullPathName(name) annotation(Library="ModelicaExternalC");

      annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
fullName = Files.<b>fullPathName</b>(name);
</pre></blockquote>
<h4>Description</h4>
<p>
Returns the full path name of a file or directory \"name\".
</p>
</html>"));
    end fullPathName;

      function loadResource
      "Return the absolute path name of a URI or local file name"
         extends
        Modelica.Utilities.Internal.PartialModelicaServices.ExternalReferences.PartialLoadResource;
         extends ModelicaServices.ExternalReferences.loadResource;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
fileReference = FileSystem.<b>loadResource</b>(uri);
</pre></blockquote>
<h4>Description</h4>
<p>
The function call \"<code>FileSystem.<b>loadResource</b>(uri)</code>\" returns the
<b>absolute path name</b> of the file that is either defined by an URI or by a local
(e.g. relative) path name. With the returned file name it is possible to
access the file with function calls of the C standard library.
If the data or file is stored in a data-base,
this might require copying the resource to a temporary folder and referencing that.
</p>

<p>
The implementation of this function is tool specific. However, at least Modelica URIs
(see \"chapter 13.2.3 External Resources\" of the Modelica Specification),
as well as absolute and relative local file path names are supported.
</p>

<h4>Example</h4>
<blockquote><pre>
  file1 = loadResource(\"modelica://Modelica/Resources/Data/Utilities/Examples_readRealParameters.txt\")
          // file1 is the absolute path name of the file
  file2 = loadResource(\"C:\\\\data\\\\readParameters.txt\")
          file2 = \"C:/data/readParameters.txt\"
</pre></blockquote>
</html>"));
      end loadResource;
        annotation (
    Documentation(info="<HTML>
<p>
This package contains functions to work with files and directories.
As a general convention of this package, '/' is used as directory
separator both for input and output arguments of all functions.
For example:
</p>
<pre>
   exist(\"Modelica/Mechanics/Rotational.mo\");
</pre>
<p>
The functions provide the mapping to the directory separator of the
underlying operating system. Note, that on Windows system the usage
of '\\' as directory separator would be inconvenient, because this
character is also the escape character in Modelica and C Strings.
</p>
<p>
In the table below an example call to every function is given:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><th><b><i>Function/type</i></b></th><th><b><i>Description</i></b></th></tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.list\">list</a>(name)</td>
      <td valign=\"top\"> List content of file or of directory.</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.copy\">copy</a>(oldName, newName)<br>
          <a href=\"modelica://Modelica.Utilities.Files.copy\">copy</a>(oldName, newName, replace=false)</td>
      <td valign=\"top\"> Generate a copy of a file or of a directory.</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.move\">move</a>(oldName, newName)<br>
          <a href=\"modelica://Modelica.Utilities.Files.move\">move</a>(oldName, newName, replace=false)</td>
      <td valign=\"top\"> Move a file or a directory to another place.</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.remove\">remove</a>(name)</td>
      <td valign=\"top\"> Remove file or directory (ignore call, if it does not exist).</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.removeFile\">removeFile</a>(name)</td>
      <td valign=\"top\"> Remove file (ignore call, if it does not exist)</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.createDirectory\">createDirectory</a>(name)</td>
      <td valign=\"top\"> Create directory (if directory already exists, ignore call).</td>
  </tr>
  <tr><td valign=\"top\">result = <a href=\"modelica://Modelica.Utilities.Files.exist\">exist</a>(name)</td>
      <td valign=\"top\"> Inquire whether file or directory exists.</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Files.assertNew\">assertNew</a>(name,message)</td>
      <td valign=\"top\"> Trigger an assert, if a file or directory exists.</td>
  </tr>
  <tr><td valign=\"top\">fullName = <a href=\"modelica://Modelica.Utilities.Files.fullPathName\">fullPathName</a>(name)</td>
      <td valign=\"top\"> Get full path name of file or directory name.</td>
  </tr>
  <tr><td valign=\"top\">(directory, name, extension) = <a href=\"modelica://Modelica.Utilities.Files.splitPathName\">splitPathName</a>(name)</td>
      <td valign=\"top\"> Split path name in directory, file name kernel, file name extension.</td>
  </tr>
  <tr><td valign=\"top\">fileName = <a href=\"modelica://Modelica.Utilities.Files.temporaryFileName\">temporaryFileName</a>()</td>
      <td valign=\"top\"> Return arbitrary name of a file that does not exist<br>
           and is in a directory where access rights allow to <br>
           write to this file (useful for temporary output of files).</td>
  </tr>
</table>
</HTML>"));
    end Files;

    package Streams "Read from files and write to files"
      extends Modelica.Icons.Package;

      function print "Print string to terminal or file"
        extends Modelica.Icons.Function;
        input String string="" "String to be printed";
        input String fileName=""
        "File where to print (empty string is the terminal)"
                     annotation(Dialog(saveSelector(filter="Text files (*.txt)",
                            caption="Text file to store the output of print(..)")));
      external "C" ModelicaInternal_print(string, fileName) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<HTML>
<h4>Syntax</h4>
<blockquote><pre>
Streams.<b>print</b>(string);
Streams.<b>print</b>(string,fileName);
</pre></blockquote>
<h4>Description</h4>
<p>
Function <b>print</b>(..) opens automatically the given file, if
it is not yet open. If the file does not exist, it is created.
If the file does exist, the given string is appended to the file.
If this is not desired, call \"Files.remove(fileName)\" before calling print
(\"remove(..)\" is silent, if the file does not exist).
The Modelica environment may close the file whenever appropriate.
This can be enforced by calling <b>Streams.close</b>(fileName).
After every call of \"print(..)\" a \"new line\" is printed automatically.
</p>
<h4>Example</h4>
<blockquote><pre>
  Streams.print(\"x = \" + String(x));
  Streams.print(\"y = \" + String(y));
  Streams.print(\"x = \" + String(y), \"mytestfile.txt\");
</pre></blockquote>
<h4>See also</h4>
<p>
<a href=\"modelica://Modelica.Utilities.Streams\">Streams</a>,
<a href=\"modelica://Modelica.Utilities.Streams.error\">Streams.error</a>,
<a href=\"modelica://ModelicaReference.Operators.'String()'\">ModelicaReference.Operators.'String()'</a>
</p>
</HTML>"));
      end print;

      function readLine
      "Reads a line of text from a file and returns it in a string"
        extends Modelica.Icons.Function;
        input String fileName "Name of the file that shall be read"
                            annotation(Dialog(loadSelector(filter="Text files (*.txt)",
                            caption="Open text file for reading")));
        input Integer lineNumber(min=1) "Number of line to read";
        output String string "Line of text";
        output Boolean endOfFile
        "If true, end-of-file was reached when trying to read line";
       external "C" string = ModelicaInternal_readLine(fileName,lineNumber,endOfFile) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
(string, endOfFile) = Streams.<b>readLine</b>(fileName, lineNumber)
</pre></blockquote>
<h4>Description</h4>
<p>
Function <b>readLine</b>(..) opens the given file, reads enough of the
content to get the requested line, and returns the line as a string.
Lines are separated by LF or CR-LF; the returned string does not
contain the line separator. The file might remain open after
the call.
</p>
<p>
If lineNumber > countLines(fileName), an empty string is returned
and endOfFile=true. Otherwise endOfFile=false.
</p>
</html>"));
      end readLine;

      function error "Print error message and cancel all actions"
        extends Modelica.Icons.Function;
        input String string "String to be printed to error message window";
        external "C" ModelicaError(string) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
Streams.<b>error</b>(string);
</pre></blockquote>
<h4>Description</h4>
<p>
Print the string \"string\" as error message and
cancel all actions. Line breaks are characterized
by \"\\n\" in the string.
</p>
<h4>Example</h4>
<blockquote><pre>
  Streams.error(\"x (= \" + String(x) + \")\\nhas to be in the range 0 .. 1\");
</pre></blockquote>
<h4>See also</h4>
<p>
<a href=\"modelica://Modelica.Utilities.Streams\">Streams</a>,
<a href=\"modelica://Modelica.Utilities.Streams.print\">Streams.print</a>,
<a href=\"modelica://ModelicaReference.Operators.'String()'\">ModelicaReference.Operators.'String()'</a>
</p>
</html>"));
      end error;
      annotation (
        Documentation(info="<HTML>
<h4>Library content</h4>
<p>
Package <b>Streams</b> contains functions to input and output strings
to a message window or on files. Note that a string is interpreted
and displayed as html text (e.g., with print(..) or error(..))
if it is enclosed with the Modelica html quotation, e.g.,
</p>
<center>
string = \"&lt;html&gt; first line &lt;br&gt; second line &lt;/html&gt;\".
</center>
<p>
It is a quality of implementation, whether (a) all tags of html are supported
or only a subset, (b) how html tags are interpreted if the output device
does not allow to display formatted text.
</p>
<p>
In the table below an example call to every function is given:
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><th><b><i>Function/type</i></b></th><th><b><i>Description</i></b></th></tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.print\">print</a>(string)<br>
          <a href=\"modelica://Modelica.Utilities.Streams.print\">print</a>(string,fileName)</td>
      <td valign=\"top\"> Print string \"string\" or vector of strings to message window or on
           file \"fileName\".</td>
  </tr>
  <tr><td valign=\"top\">stringVector =
         <a href=\"modelica://Modelica.Utilities.Streams.readFile\">readFile</a>(fileName)</td>
      <td valign=\"top\"> Read complete text file and return it as a vector of strings.</td>
  </tr>
  <tr><td valign=\"top\">(string, endOfFile) =
         <a href=\"modelica://Modelica.Utilities.Streams.readLine\">readLine</a>(fileName, lineNumber)</td>
      <td valign=\"top\">Returns from the file the content of line lineNumber.</td>
  </tr>
  <tr><td valign=\"top\">lines =
         <a href=\"modelica://Modelica.Utilities.Streams.countLines\">countLines</a>(fileName)</td>
      <td valign=\"top\">Returns the number of lines in a file.</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.error\">error</a>(string)</td>
      <td valign=\"top\"> Print error message \"string\" to message window
           and cancel all actions</td>
  </tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.close\">close</a>(fileName)</td>
      <td valign=\"top\"> Close file if it is still open. Ignore call if
           file is already closed or does not exist. </td>
  </tr>
</table>
<p>
Use functions <b>scanXXX</b> from package
<a href=\"modelica://Modelica.Utilities.Strings\">Strings</a>
to parse a string.
</p>
<p>
If Real, Integer or Boolean values shall be printed
or used in an error message, they have to be first converted
to strings with the builtin operator
<a href=\"modelica://ModelicaReference.Operators.'String()'\">ModelicaReference.Operators.'String()'</a>(...).
Example:
</p>
<pre>
  <b>if</b> x &lt; 0 <b>or</b> x &gt; 1 <b>then</b>
     Streams.error(\"x (= \" + String(x) + \") has to be in the range 0 .. 1\");
  <b>end if</b>;
</pre>
</html>"));
    end Streams;

    package Strings "Operations on strings"
      extends Modelica.Icons.Package;

      function length "Returns length of string"
        extends Modelica.Icons.Function;
        input String string;
        output Integer result "Number of characters of string";
      external "C" result = ModelicaStrings_length(string) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
Strings.<b>length</b>(string);
</pre></blockquote>
<h4>Description</h4>
<p>
Returns the number of characters of \"string\".
</p>
</html>"));
      end length;

      function substring "Returns a substring defined by start and end index"

        extends Modelica.Icons.Function;
        input String string "String from which a substring is inquired";
        input Integer startIndex(min=1)
        "Character position of substring begin (index=1 is first character in string)";
        input Integer endIndex(min=1) "Character position of substring end";
        output String result
        "String containing substring string[startIndex:endIndex]";
      external "C" result =
                          ModelicaStrings_substring(string,startIndex,endIndex) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
string2 = Strings.<b>substring</b>(string, startIndex, endIndex);
</pre></blockquote>
<h4>Description</h4>
<p>
This function returns
the substring from position startIndex
up to and including position endIndex of \"string\" .
</p>
<p>
If index, startIndex, or endIndex are not correct, e.g.,
if endIndex &gt; length(string), an assert is triggered.
</p>
<h4>Example</h4>
<blockquote><pre>
  string1 := \"This is line 111\";
  string2 := Strings.substring(string1,9,12); // string2 = \"line\"
</pre></blockquote>
</html>"));
      end substring;

      function repeat "Repeat a string n times"
        extends Modelica.Icons.Function;
        input Integer n(min=0) = 1 "Number of occurrences";
        input String string=" " "String that is repeated";
        output String repeatedString "String containing n concatenated strings";
      algorithm
        repeatedString :="";
        for i in 1:n loop
           repeatedString := repeatedString + string;
        end for;
        annotation (
      Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
string2 = Strings.<b>repeat</b>(n);
string2 = Strings.<b>repeat</b>(n, string=\" \");
</pre></blockquote>
<h4>Description</h4>
<p>
The first form returns a string consisting of n blanks.
</p>
<p>
The second form returns a string consisting of n substrings
defined by the optional argument \"string\".
</p>
</html>"));
      end repeat;

      function compare "Compare two strings lexicographically"
        extends Modelica.Icons.Function;
        input String string1;
        input String string2;
        input Boolean caseSensitive=true
        "= false, if case of letters is ignored";
        output Modelica.Utilities.Types.Compare result "Result of comparison";
      external "C" result = ModelicaStrings_compare(string1, string2, caseSensitive) annotation(Library="ModelicaExternalC");
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
result = Strings.<b>compare</b>(string1, string2);
result = Strings.<b>compare</b>(string1, string2, caseSensitive=true);
</pre></blockquote>
<h4>Description</h4>
<p>
Compares two strings. If the optional argument caseSensitive=false,
upper case letters are treated as if they would be lower case letters.
The result of the comparison is returned as:
</p>
<pre>
  result = Modelica.Utilities.Types.Compare.Less     // string1 &lt; string2
         = Modelica.Utilities.Types.Compare.Equal    // string1 = string2
         = Modelica.Utilities.Types.Compare.Greater  // string1 &gt; string2
</pre>
<p>
Comparison is with regards to lexicographical order,
e.g., \"a\" &lt; \"b\";
</p>
</html>"));
      end compare;

      function isEqual "Determine whether two strings are identical"
        extends Modelica.Icons.Function;
        input String string1;
        input String string2;
        input Boolean caseSensitive=true
        "= false, if lower and upper case are ignored for the comparison";
        output Boolean identical "True, if string1 is identical to string2";
      algorithm
        identical :=compare(string1, string2, caseSensitive) == Types.Compare.Equal;
        annotation (
      Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
Strings.<b>isEqual</b>(string1, string2);
Strings.<b>isEqual</b>(string1, string2, caseSensitive=true);
</pre></blockquote>
<h4>Description</h4>
<p>
Compare whether two strings are identical,
optionally ignoring case.
</p>
</html>"));
      end isEqual;

      function find "Find first occurrence of a string within another string"
        extends Modelica.Icons.Function;
        input String string "String that is analyzed";
        input String searchString "String that is searched for in string";
        input Integer startIndex(min=1)=1 "Start search at index startIndex";
        input Boolean caseSensitive=true
        "= false, if lower and upper case are ignored for the search";
         output Integer index
        "Index of the beginning of the first occurrence of 'searchString' within 'string', or zero if not present";
    protected
        Integer lengthSearchString = length(searchString);
        Integer len = lengthSearchString-1;
        Integer i = startIndex;
        Integer i_max = length(string) - lengthSearchString + 1;
      algorithm
        index := 0;
        while i <= i_max loop
           if isEqual(substring(string,i,i+len),
                      searchString, caseSensitive) then
              index := i;
              i := i_max + 1;
           else
              i := i+1;
           end if;
        end while;
        annotation (
      Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
index = Strings.<b>find</b>(string, searchString);
index = Strings.<b>find</b>(string, searchString, startIndex=1,
                     caseSensitive=true);
</pre></blockquote>
<h4>Description</h4>
<p>
Finds first occurrence of \"searchString\" within \"string\"
and return the corresponding index.
Start search at index \"startIndex\" (default = 1).
If the optional argument \"caseSensitive\" is false, lower
and upper case are ignored for the search.
If \"searchString\" is not found, a value of \"0\" is returned.
</p>
</html>"));
      end find;

      function findLast
      "Find last occurrence of a string within another string"
        extends Modelica.Icons.Function;
        input String string "String that is analyzed";
        input String searchString "String that is searched for in string";
        input Integer startIndex(min=0)=0
        "Start search at index startIndex. If startIndex = 0, start at length(string)";
        input Boolean caseSensitive=true
        "= false, if lower and upper case are ignored for the search";
        output Integer index
        "Index of the beginning of the last occurrence of 'searchString' within 'string', or zero if not present";
    protected
        Integer lenString = length(string);
        Integer lenSearchString = length(searchString);
        Integer iMax=lenString - lenSearchString + 1;
        Integer i;
      algorithm
        i := if startIndex == 0 or startIndex > iMax then iMax else startIndex;
        index := 0;
        while i >= 1 loop
           if isEqual(substring(string,i,i+lenSearchString-1),
                      searchString, caseSensitive) then
              index := i;
              i := 0;
           else
              i := i-1;
           end if;
        end while;
        annotation (
      Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
index = Strings.<b>findLast</b>(string, searchString);
index = Strings.<b>findLast</b>(string, searchString,
                         startIndex=length(string), caseSensitive=true,
</pre></blockquote>
<h4>Description</h4>
<p>
Finds first occurrence of \"searchString\" within \"string\"
when searching from the last character of \"string\"
backwards, and return the corresponding index.
Start search at index \"startIndex\" (default = 0;
if startIndex = 0, search starts at length(string)).
If the optional argument \"caseSensitive\" is false, lower
and upper case are ignored for the search.
If \"searchString\" is not found, a value of \"0\" is returned.
</p>
</html>"));
      end findLast;

      function scanReal
      "Scan for the next Real number and trigger an assert if not present"
        extends Modelica.Icons.Function;
        input String string "String to be scanned";
        input Integer startIndex(min=1)=1
        "Start scanning of string at character startIndex";
        input Boolean unsigned=false
        "= true, if Real token shall not start with a sign";
        input String message=""
        "Message used in error message if scan is not successful";
        output Real number "Value of real number";
        output Integer nextIndex "index of character after the found number";
      algorithm
        (nextIndex, number) :=Advanced.scanReal(string, startIndex, unsigned);
        if nextIndex == startIndex then
           nextIndex :=Advanced.skipWhiteSpace(string, startIndex);
           if unsigned then
              syntaxError(string, nextIndex, "Expected a Real number without a sign " + message);
           else
              syntaxError(string, nextIndex, "Expected a Real number " + message);
           end if;
        end if;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
             number = Strings.<b>scanReal</b>(string);
(number, nextIndex) = Strings.<b>scanReal</b>(string, startIndex=1,
                                            unsigned=false, message=\"\");
</pre></blockquote>
<h4>Description</h4>
<p>
The first form, \"scanReal(string)\", scans \"string\" for a
Real number with leading white space and returns the value.
</p>
<p>
The second form, \"scanReal(string,startIndex,unsigned)\",
scans the string starting at index
\"startIndex\", checks whether the next token is a Real literal
and returns its value as a Real number, as well as the
index directly after the Real number.
If the optional argument \"unsigned\" is <b>true</b>,
the real number shall not have a leading \"+\" or \"-\" sign.
</p>
<p>
If the required Real number with leading white space
is not present in \"string\", an assert is triggered.
</p>
</html>"));
      end scanReal;

      function syntaxError
      "Print an error message, a string and the index at which scanning detected an error"
        extends Modelica.Icons.Function;
        input String string "String that has an error at position index";
        input Integer index
        "Index of string at which scanning detected an error";
        input String message="" "String printed at end of error message";

    protected
        Integer maxIndex = 40;
        Integer maxLenString = 60;
        Integer lenString = length(string);
        String errString;
        Integer index2 = if index < 1 then 1 else if index > lenString then lenString else index;
      algorithm
      // if "string" is too long, skip part of the string when printing it
         if index2 <= maxIndex then
           errString := string;
         else
           errString := "... " + substring(string, index2-maxIndex, lenString);
           index2 := maxIndex + 5; // To mark right position
         end if;

         if length(errString) > maxLenString then
            errString := substring(errString, 1, maxLenString) + " ...";
         end if;

      // Print error message
         Streams.error("Syntax error at character " + String(index) + " of\n" +
                       errString + "\n" +
                       repeat(index2-1, " ") + "*" + "\n" +
                       message);
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
Strings.<b>syntaxError</b>(string, index, message);
</pre></blockquote>
<h4>Description</h4>
<p>
Function <b>syntaxError</b> prints an error message in the
following form:
</p>
<pre>
   Syntax error at column &lt;index&gt; of
   &lt;string&gt;
       ^       // shows character that is wrong
   &lt;message&gt;
</pre>
<p>
where the strings withing &lt;..&gt; are the actual values of the
input arguments of the function.
</p>
<p>
If the given string is too long, only a relevant
part of the string is printed.
</p>
</html>"));
      end syntaxError;

      package Advanced "Advanced scanning functions"
      extends Modelica.Icons.Package;

        function scanReal "Scans a signed real number"
          extends Modelica.Icons.Function;
          input String string;
          input Integer startIndex(min=1)=1 "Index where scanning starts";
          input Boolean unsigned=false
          "= true, if number shall not start with '+' or '-'";
          output Integer nextIndex
          "Index after the found token (success=true) or index at which scanning failed (success=false)";
          output Real number "Value of Real number";
          external "C" ModelicaStrings_scanReal(string, startIndex, unsigned, nextIndex, number) annotation(Library="ModelicaExternalC");
          annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
(nextIndex, realNumber) = <b>scanReal</b>(string, startIndex=1, unsigned=false);
</pre></blockquote>
<h4>Description</h4>
<p>
Starts scanning of \"string\" at position \"startIndex\".
First skips white space and scans afterwards a number
of type Real with an optional sign according to the Modelica grammar:
</p>
<pre>
    real     ::= [sign] unsigned [fraction] [exponent]
    sign     ::= '+' | '-'
    unsigned ::= digit [unsigned]
    fraction ::= '.' [unsigned]
    exponent ::= ('e' | 'E') [sign] unsigned
    digit    ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
</pre>
<p>
If successful, the function returns nextIndex = index of character
directly after the found real number, as well as the value
in the second output argument.
</p>
<p>
If not successful, on return nextIndex = startIndex and
the second output argument is zero.
</p>
<p>
If the optional argument \"unsigned\" is <b>true</b>, the number
shall not start with '+' or '-'. The default of \"unsigned\" is <b>false</b>.
</p>
<h4>See also</h4>
<a href=\"modelica://Modelica.Utilities.Strings.Advanced\">Strings.Advanced</a>.
</html>"));
        end scanReal;

        function skipWhiteSpace "Scans white space"
          extends Modelica.Icons.Function;
          input String string;
          input Integer startIndex(min=1)=1;
          output Integer nextIndex;
          external "C" nextIndex = ModelicaStrings_skipWhiteSpace(string, startIndex) annotation(Library="ModelicaExternalC");
          annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
nextIndex = <b>skipWhiteSpace</b>(string, startIndex);
</pre></blockquote>
<h4>Description</h4>
<p>
Starts scanning of \"string\" at position \"startIndex\" and
skips white space. The function returns nextIndex = index of character
of the first non white space character.
</p>
<h4>See also</h4>
<a href=\"modelica://Modelica.Utilities.Strings.Advanced\">Strings.Advanced</a>.
</html>"));
        end skipWhiteSpace;
        annotation (Documentation(info="<html>
<h4>Library content</h4>
<p>
Package <b>Strings.Advanced</b> contains basic scanning
functions. These functions should be <b>not called</b> directly, because
it is much simpler to utilize the higher level functions \"Strings.scanXXX\".
The functions of the \"Strings.Advanced\" library provide
the basic interface in order to implement the higher level
functions in package \"Strings\".
</p>
<p>
Library \"Advanced\" provides the following functions:
</p>
<pre>
  (nextIndex, realNumber)    = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanReal\">scanReal</a>        (string, startIndex, unsigned=false);
  (nextIndex, integerNumber) = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanInteger\">scanInteger</a>     (string, startIndex, unsigned=false);
  (nextIndex, string2)       = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanString\">scanString</a>      (string, startIndex);
  (nextIndex, identifier)    = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanIdentifier\">scanIdentifier</a>  (string, startIndex);
   nextIndex                 = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.skipWhiteSpace\">skipWhiteSpace</a>  (string, startIndex);
   nextIndex                 = <a href=\"modelica://Modelica.Utilities.Strings.Advanced.skipLineComments\">skipLineComments</a>(string, startIndex);
</pre>
<p>
All functions perform the following actions:
</p>
<ol>
<li> Scanning starts at character position \"startIndex\" of
     \"string\" (startIndex has a default of 1).
<li> First, white space is skipped, such as blanks (\" \"), tabs (\"\\t\"), or newline (\"\\n\")</li>
<li> Afterwards, the required token is scanned.</li>
<li> If successful, on return nextIndex = index of character
     directly after the found token and the token value is returned
     as second output argument.<br>
     If not successful, on return nextIndex = startIndex.
     </li>
</ol>
<p>
The following additional rules apply for the scanning:
</p>
<ul>
<li> Function <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanReal\">scanReal</a>:<br>
     Scans a full number including one optional leading \"+\" or \"-\" (if unsigned=false)
     according to the Modelica grammar. For example, \"+1.23e-5\", \"0.123\" are
     Real numbers, but \".1\" is not.
     Note, an Integer number, such as \"123\" is also treated as a Real number.<br>&nbsp;</li>
<li> Function <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanInteger\">scanInteger</a>:<br>
     Scans an Integer number including one optional leading \"+\"
     or \"-\" (if unsigned=false) according to the Modelica (and C/C++) grammar.
     For example, \"+123\", \"20\" are Integer numbers.
     Note, a Real number, such as \"123.4\" is not an Integer and
     scanInteger returns nextIndex = startIndex.<br>&nbsp;</li>
<li> Function <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanString\">scanString</a>:<br>
     Scans a String according to the Modelica (and C/C++) grammar, e.g.,
     \"This is a \"string\"\" is a valid string token.<br>&nbsp;</li>
<li> Function <a href=\"modelica://Modelica.Utilities.Strings.Advanced.scanIdentifier\">scanIdentifier</a>:<br>
     Scans a Modelica identifier, i.e., the identifier starts either
     with a letter, followed by letters, digits or \"_\".
     For example, \"w_rel\", \"T12\".<br>&nbsp;</li>
<li> Function <a href=\"modelica://Modelica.Utilities.Strings.Advanced.skipLineComments\">skipLineComments</a><br>
     Skips white space and Modelica (C/C++) line comments iteratively.
     A line comment starts with \"//\" and ends either with an
     end-of-line (\"\\n\") or the end of the \"string\". </li>
</ul>
</html>"));
      end Advanced;
      annotation (
        Documentation(info="<HTML>
<h4>Library content</h4>
<p>
Package <b>Strings</b> contains functions to manipulate strings.
</p>
<p>
In the table below an example
call to every function is given using the <b>default</b> options.
</p>
<table border=1 cellspacing=0 cellpadding=2>
  <tr><th><b><i>Function</i></b></th><th><b><i>Description</i></b></th></tr>
  <tr><td valign=\"top\">len = <a href=\"modelica://Modelica.Utilities.Strings.length\">length</a>(string)</td>
      <td valign=\"top\">Returns length of string</td></tr>
  <tr><td valign=\"top\">string2 = <a href=\"modelica://Modelica.Utilities.Strings.substring\">substring</a>(string1,startIndex,endIndex)
       </td>
      <td valign=\"top\">Returns a substring defined by start and end index</td></tr>
  <tr><td valign=\"top\">result = <a href=\"modelica://Modelica.Utilities.Strings.repeat\">repeat</a>(n)<br>
 result = <a href=\"modelica://Modelica.Utilities.Strings.repeat\">repeat</a>(n,string)</td>
      <td valign=\"top\">Repeat a blank or a string n times.</td></tr>
  <tr><td valign=\"top\">result = <a href=\"modelica://Modelica.Utilities.Strings.compare\">compare</a>(string1, string2)</td>
      <td valign=\"top\">Compares two substrings with regards to alphabetical order</td></tr>
  <tr><td valign=\"top\">identical =
<a href=\"modelica://Modelica.Utilities.Strings.isEqual\">isEqual</a>(string1,string2)</td>
      <td valign=\"top\">Determine whether two strings are identical</td></tr>
  <tr><td valign=\"top\">result = <a href=\"modelica://Modelica.Utilities.Strings.count\">count</a>(string,searchString)</td>
      <td valign=\"top\">Count the number of occurrences of a string</td></tr>
  <tr>
<td valign=\"top\">index = <a href=\"modelica://Modelica.Utilities.Strings.find\">find</a>(string,searchString)</td>
      <td valign=\"top\">Find first occurrence of a string in another string</td></tr>
<tr>
<td valign=\"top\">index = <a href=\"modelica://Modelica.Utilities.Strings.findLast\">findLast</a>(string,searchString)</td>
      <td valign=\"top\">Find last occurrence of a string in another string</td></tr>
  <tr><td valign=\"top\">string2 = <a href=\"modelica://Modelica.Utilities.Strings.replace\">replace</a>(string,searchString,replaceString)</td>
      <td valign=\"top\">Replace one or all occurrences of a string</td></tr>
  <tr><td valign=\"top\">stringVector2 = <a href=\"modelica://Modelica.Utilities.Strings.sort\">sort</a>(stringVector1)</td>
      <td valign=\"top\">Sort vector of strings in alphabetic order</td></tr>
  <tr><td valign=\"top\">(token, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanToken\">scanToken</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for a token (Real/Integer/Boolean/String/Identifier/Delimiter/NoToken)</td></tr>
  <tr><td valign=\"top\">(number, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanReal\">scanReal</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for a Real constant</td></tr>
  <tr><td valign=\"top\">(number, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanInteger\">scanInteger</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for an Integer constant</td></tr>
  <tr><td valign=\"top\">(boolean, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanBoolean\">scanBoolean</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for a Boolean constant</td></tr>
  <tr><td valign=\"top\">(string2, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanString\">scanString</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for a String constant</td></tr>
  <tr><td valign=\"top\">(identifier, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanIdentifier\">scanIdentifier</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for an identifier</td></tr>
  <tr><td valign=\"top\">(delimiter, index) = <a href=\"modelica://Modelica.Utilities.Strings.scanDelimiter\">scanDelimiter</a>(string,startIndex)</td>
      <td valign=\"top\">Scan for delimiters</td></tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Strings.scanNoToken\">scanNoToken</a>(string,startIndex)</td>
      <td valign=\"top\">Check that remaining part of string consists solely of <br>
          white space or line comments (\"// ...\\n\").</td></tr>
  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Strings.syntaxError\">syntaxError</a>(string,index,message)</td>
      <td valign=\"top\"> Print a \"syntax error message\" as well as a string and the <br>
           index at which scanning detected an error</td></tr>
</table>
<p>
The functions \"compare\", \"isEqual\", \"count\", \"find\", \"findLast\", \"replace\", \"sort\"
have the optional
input argument <b>caseSensitive</b> with default <b>true</b>.
If <b>false</b>, the operation is carried out without taking
into account whether a character is upper or lower case.
</p>
</HTML>"));
    end Strings;

    package Types "Type definitions used in package Modelica.Utilities"
      extends Modelica.Icons.TypesPackage;

      type Compare = enumeration(
        Less "String 1 is lexicographically less than string 2",
        Equal "String 1 is identical to string 2",
        Greater "String 1 is lexicographically greater than string 2")
      "Enumeration defining comparison of two strings";

      type FileType = enumeration(
        NoFile "No file exists",
        RegularFile "Regular file",
        Directory "Directory",
        SpecialFile "Special file (pipe, FIFO, device, etc.)")
      "Enumeration defining the type of a file";
      annotation (Documentation(info="<html>
<p>
This package contains type definitions used in Modelica.Utilities.
</p>

</html>"));
    end Types;

    package Internal
    "Internal components that a user should usually not directly utilize"
      extends Modelica.Icons.InternalPackage;

    partial package PartialModelicaServices
      "Interfaces of components requiring a tool specific implementation"
        extends Modelica.Icons.InternalPackage;
      package Animation "Models and functions for 3-dim. animation"
        extends Modelica.Icons.Package;
      partial model PartialShape
          "Interface for 3D animation of elementary shapes"

            import SI = Modelica.SIunits;
            import Modelica.Mechanics.MultiBody.Frames;
            import Modelica.Mechanics.MultiBody.Types;

        parameter Types.ShapeType shapeType="box"
            "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring, <external shape>)";
        input Frames.Orientation R=Frames.nullRotation()
            "Orientation object to rotate the world frame into the object frame"
                                                                                annotation(Dialog);
        input SI.Position r[3]={0,0,0}
            "Position vector from origin of world frame to origin of object frame, resolved in world frame"
                                                                                                          annotation(Dialog);
        input SI.Position r_shape[3]={0,0,0}
            "Position vector from origin of object frame to shape origin, resolved in object frame"
                                                                                                  annotation(Dialog);
        input Real lengthDirection[3](each final unit="1")={1,0,0}
            "Vector in length direction, resolved in object frame"
                                                                  annotation(Dialog);
        input Real widthDirection[3](each final unit="1")={0,1,0}
            "Vector in width direction, resolved in object frame"
                                                                 annotation(Dialog);
        input SI.Length length=0 "Length of visual object"  annotation(Dialog);
        input SI.Length width=0 "Width of visual object"  annotation(Dialog);
        input SI.Length height=0 "Height of visual object"  annotation(Dialog);
        input Types.ShapeExtra extra=0.0
            "Additional size data for some of the shape types"                               annotation(Dialog);
        input Real color[3]={255,0,0} "Color of shape"               annotation(Dialog(colorSelector=true));
        input Types.SpecularCoefficient specularCoefficient = 0.7
            "Reflection of ambient light (= 0: light is completely absorbed)"
                                                                            annotation(Dialog);
        annotation (
          Documentation(info="<html>

<p>
This model is documented at
<a href=\"modelica://Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape\">Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape</a>.
</p>

</html>"));

      end PartialShape;

        model PartialSurface "Interface for 3D animation of surfaces"

            import Modelica.Mechanics.MultiBody.Frames;
            import Modelica.Mechanics.MultiBody.Types;

          input Frames.Orientation R=Frames.nullRotation()
            "Orientation object to rotate the world frame into the surface frame"
            annotation(Dialog(group="Surface frame"));
          input Modelica.SIunits.Position r_0[3]={0,0,0}
            "Position vector from origin of world frame to origin of surface frame, resolved in world frame"
            annotation(Dialog(group="Surface frame"));

          parameter Integer nu=2 "Number of points in u-Dimension" annotation(Dialog(group="Surface properties"));
          parameter Integer nv=2 "Number of points in v-Dimension" annotation(Dialog(group="Surface properties"));
          replaceable function surfaceCharacteristic =
             Modelica.Mechanics.MultiBody.Interfaces.partialSurfaceCharacteristic
            "Function defining the surface characteristic"
                  annotation(choicesAllMatching=true,Dialog(group="Surface properties"));

          parameter Boolean wireframe=false
            "= true: 3D model will be displayed without faces"
            annotation (Dialog(group="Material properties"),choices(checkBox=true));
          parameter Boolean multiColoredSurface=false
            "= true: Color is defined for each surface point"
              annotation(Dialog(group="Material properties"),choices(checkBox=true));
          input Real color[3]={255,0,0} "Color of surface" annotation(Dialog(colorSelector=true,group="Material properties", enable=not multiColoredSurface));
          input Types.SpecularCoefficient specularCoefficient = 0.7
            "Reflection of ambient light (= 0: light is completely absorbed)" annotation(Dialog(group="Material properties"));
          input Real transparency=0
            "Transparency of shape: 0 (= opaque) ... 1 (= fully transparent)"
                                       annotation(Dialog(group="Material properties"));
          annotation (Documentation(info="<html>
<p>
This model is documented at
<a href=\"modelica://Modelica.Mechanics.MultiBody.Visualizers.Advanced.Surface\">Modelica.Mechanics.MultiBody.Visualizers.Advanced.Surface</a>.
</p>

</html>"));
        end PartialSurface;
      end Animation;

      package ExternalReferences "Functions to access external resources"
        extends Modelica.Icons.InternalPackage;
        partial function PartialLoadResource
          "Interface for tool specific function to return the absolute path name of a URI or local file name"
          extends Modelica.Icons.Function;
          input String uri "URI or local file name";
          output String fileReference "Absolute path name of file";
          annotation (Documentation(info="<html>
<p>
This partial function defines the function interface of a tool-specific implementation
in package ModelicaServices. The interface is documented at
<a href=\"modelica://Modelica.Utilities.Files.loadResource\">Modelica.Utilities.Internal.FileSystem.loadResource</a>.
</p>

</html>"));
        end PartialLoadResource;
      end ExternalReferences;
        annotation (Documentation(info="<html>

<p>
This package contains interfaces of a set of functions and models used in the
Modelica Standard Library that requires a <b>tool specific implementation</b>.
There is an associated package called <b>ModelicaServices</b>. A tool vendor
should provide a proper implementation of this library for the corresponding
tool. The default implementation is \"do nothing\".
In the Modelica Standard Library, the models and functions of ModelicaServices
are used.
</p>
</html>"));
    end PartialModelicaServices;

    package FileSystem
      "Internal package with external functions as interface to the file system"
     extends Modelica.Icons.InternalPackage;

      function mkdir "Make directory (POSIX: 'mkdir')"
        extends Modelica.Icons.Function;
        input String directoryName "Make a new directory";
      external "C" ModelicaInternal_mkdir(directoryName) annotation(Library="ModelicaExternalC");
      end mkdir;

      function stat "Inquire file information (POSIX function 'stat')"
        extends Modelica.Icons.Function;
        input String name "Name of file, directory, pipe etc.";
        output Types.FileType fileType "Type of file";
      external "C" fileType = ModelicaInternal_stat(name) annotation(Library="ModelicaExternalC");
      end stat;
      annotation (
    Documentation(info="<html>
<p>
Package <b>Internal.FileSystem</b> is an internal package that contains
low level functions as interface to the file system.
These functions should not be called directly in a scripting
environment since more convenient functions are provided
in packages Files and Systems.
</p>
<p>
Note, the functions in this package are direct interfaces to
functions of POSIX and of the standard C library. Errors
occurring in these functions are treated by triggering
a Modelica assert. Therefore, the functions in this package
return only for a successful operation. Furthermore, the
representation of a string is hidden by this interface,
especially if the operating system supports Unicode characters.
</p>
</html>"));
    end FileSystem;
    end Internal;
      annotation (
  Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
      Polygon(
        origin={1.3835,-4.1418},
        rotation=45.0,
        fillColor={64,64,64},
        pattern=LinePattern.None,
        fillPattern=FillPattern.Solid,
        points={{-15.0,93.333},{-15.0,68.333},{0.0,58.333},{15.0,68.333},{15.0,93.333},{20.0,93.333},{25.0,83.333},{25.0,58.333},{10.0,43.333},{10.0,-41.667},{25.0,-56.667},{25.0,-76.667},{10.0,-91.667},{0.0,-91.667},{0.0,-81.667},{5.0,-81.667},{15.0,-71.667},{15.0,-61.667},{5.0,-51.667},{-5.0,-51.667},{-15.0,-61.667},{-15.0,-71.667},{-5.0,-81.667},{0.0,-81.667},{0.0,-91.667},{-10.0,-91.667},{-25.0,-76.667},{-25.0,-56.667},{-10.0,-41.667},{-10.0,43.333},{-25.0,58.333},{-25.0,83.333},{-20.0,93.333}}),
      Polygon(
        origin={10.1018,5.218},
        rotation=-45.0,
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid,
        points={{-15.0,87.273},{15.0,87.273},{20.0,82.273},{20.0,27.273},{10.0,17.273},{10.0,7.273},{20.0,2.273},{20.0,-2.727},{5.0,-2.727},{5.0,-77.727},{10.0,-87.727},{5.0,-112.727},{-5.0,-112.727},{-10.0,-87.727},{-5.0,-77.727},{-5.0,-2.727},{-20.0,-2.727},{-20.0,2.273},{-10.0,7.273},{-10.0,17.273},{-20.0,27.273},{-20.0,82.273}})}),
  Documentation(info="<html>
<p>
This package contains Modelica <b>functions</b> that are
especially suited for <b>scripting</b>. The functions might
be used to work with strings, read data from file, write data
to file or copy, move and remove files.
</p>
<p>
For an introduction, have especially a look at:
</p>
<ul>
<li> <a href=\"modelica://Modelica.Utilities.UsersGuide\">Modelica.Utilities.User's Guide</a>
     discusses the most important aspects of this library.</li>
<li> <a href=\"modelica://Modelica.Utilities.Examples\">Modelica.Utilities.Examples</a>
     contains examples that demonstrate the usage of this library.</li>
</ul>
<p>
The following main sublibraries are available:
</p>
<ul>
<li> <a href=\"modelica://Modelica.Utilities.Files\">Files</a>
     provides functions to operate on files and directories, e.g.,
     to copy, move, remove files.</li>
<li> <a href=\"modelica://Modelica.Utilities.Streams\">Streams</a>
     provides functions to read from files and write to files.</li>
<li> <a href=\"modelica://Modelica.Utilities.Strings\">Strings</a>
     provides functions to operate on strings. E.g.
     substring, find, replace, sort, scanToken.</li>
<li> <a href=\"modelica://Modelica.Utilities.System\">System</a>
     provides functions to interact with the environment.
     E.g., get or set the working directory or environment
     variables and to send a command to the default shell.</li>
</ul>

<p>
Copyright &copy; 1998-2013, Modelica Association, DLR, and Dassault Syst&egrave;mes AB.
</p>

<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>

</html>"));
  end Utilities;

  package Constants
  "Library of mathematical constants and constants of nature (e.g., pi, eps, R, sigma)"
    import SI = Modelica.SIunits;
    import NonSI = Modelica.SIunits.Conversions.NonSIunits;
    extends Modelica.Icons.Package;

    final constant Real pi=2*Modelica.Math.asin(1.0);

    final constant Real eps=ModelicaServices.Machine.eps
    "Biggest number such that 1.0 + eps = 1.0";

    final constant Real small=ModelicaServices.Machine.small
    "Smallest number such that small and -small are representable on the machine";

    final constant Real inf=ModelicaServices.Machine.inf
    "Biggest Real number such that inf and -inf are representable on the machine";

    final constant SI.FaradayConstant F = 9.64853399e4
    "Faraday constant, C/mol";

    final constant Real R(final unit="J/(mol.K)") = 8.314472
    "Molar gas constant";

    final constant Real N_A(final unit="1/mol") = 6.0221415e23
    "Avogadro constant";
    annotation (
      Documentation(info="<html>
<p>
This package provides often needed constants from mathematics, machine
dependent constants and constants from nature. The latter constants
(name, value, description) are from the following source:
</p>

<dl>
<dt>Peter J. Mohr and Barry N. Taylor (1999):</dt>
<dd><b>CODATA Recommended Values of the Fundamental Physical Constants: 1998</b>.
    Journal of Physical and Chemical Reference Data, Vol. 28, No. 6, 1999 and
    Reviews of Modern Physics, Vol. 72, No. 2, 2000. See also <a href=
\"http://physics.nist.gov/cuu/Constants/\">http://physics.nist.gov/cuu/Constants/</a></dd>
</dl>

<p>CODATA is the Committee on Data for Science and Technology.</p>

<dl>
<dt><b>Main Author:</b></dt>
<dd><a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a><br>
    Deutsches Zentrum f&uuml;r Luft und Raumfahrt e. V. (DLR)<br>
    Oberpfaffenhofen<br>
    Postfach 11 16<br>
    D-82230 We&szlig;ling<br>
    email: <a href=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</a></dd>
</dl>

<p>
Copyright &copy; 1998-2013, Modelica Association and DLR.
</p>
<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</html>",   revisions="<html>
<ul>
<li><i>Nov 8, 2004</i>
       by <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br>
       Constants updated according to 2002 CODATA values.</li>
<li><i>Dec 9, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Constants updated according to 1998 CODATA values. Using names, values
       and description text from this source. Included magnetic and
       electric constant.</li>
<li><i>Sep 18, 1999</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Constants eps, inf, small introduced.</li>
<li><i>Nov 15, 1997</i>
       by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
       Realized.</li>
</ul>
</html>"),
      Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
        Polygon(
          origin={-9.2597,25.6673},
          fillColor={102,102,102},
          pattern=LinePattern.None,
          fillPattern=FillPattern.Solid,
          points={{48.017,11.336},{48.017,11.336},{10.766,11.336},{-25.684,10.95},{-34.944,-15.111},{-34.944,-15.111},{-32.298,-15.244},{-32.298,-15.244},{-22.112,0.168},{11.292,0.234},{48.267,-0.097},{48.267,-0.097}},
          smooth=Smooth.Bezier),
        Polygon(
          origin={-19.9923,-8.3993},
          fillColor={102,102,102},
          pattern=LinePattern.None,
          fillPattern=FillPattern.Solid,
          points={{3.239,37.343},{3.305,37.343},{-0.399,2.683},{-16.936,-20.071},{-7.808,-28.604},{6.811,-22.519},{9.986,37.145},{9.986,37.145}},
          smooth=Smooth.Bezier),
        Polygon(
          origin={23.753,-11.5422},
          fillColor={102,102,102},
          pattern=LinePattern.None,
          fillPattern=FillPattern.Solid,
          points={{-10.873,41.478},{-10.873,41.478},{-14.048,-4.162},{-9.352,-24.8},{7.912,-24.469},{16.247,0.27},{16.247,0.27},{13.336,0.071},{13.336,0.071},{7.515,-9.983},{-3.134,-7.271},{-2.671,41.214},{-2.671,41.214}},
          smooth=Smooth.Bezier)}));
  end Constants;

  package Icons "Library of icons"

    partial class Information "Icon for general information packages"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Ellipse(
              lineColor={75,138,73},
              fillColor={75,138,73},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-100.0,-100.0},{100.0,100.0}}),
            Polygon(origin={-4.167,-15.0},
              fillColor={255,255,255},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-15.833,20.0},{-15.833,30.0},{14.167,40.0},{24.167,20.0},{4.167,-30.0},{14.167,-30.0},{24.167,-30.0},{24.167,-40.0},{-5.833,-50.0},{-15.833,-30.0},{4.167,20.0},{-5.833,20.0}},
              smooth=Smooth.Bezier),
            Ellipse(origin={7.5,56.5},
              fillColor={255,255,255},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-12.5,-12.5},{12.5,12.5}})}),
                                Documentation(info="<html>
<p>This icon indicate classes containing only documentation, intended for general description of, e.g., concepts and features of a package.</p>
</html>"));
    end Information;
    extends Icons.Package;

    partial class Contact "Icon for contact information"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,70},{100,-72}},
              lineColor={0,0,0},
              fillColor={235,235,235},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-100,-72},{100,-72},{0,20},{-100,-72}},
              lineColor={0,0,0},
              smooth=Smooth.None,
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{22,0},{100,70},{100,-72},{22,0}},
              lineColor={0,0,0},
              smooth=Smooth.None,
              fillColor={235,235,235},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-100,70},{100,70},{0,-20},{-100,70}},
              lineColor={0,0,0},
              smooth=Smooth.None,
              fillColor={241,241,241},
              fillPattern=FillPattern.Solid)}),
                                Documentation(info="<html>
<p>This icon shall be used for the contact information of the library developers.</p>
</html>"));
    end Contact;

    partial class ReleaseNotes "Icon for release notes in documentation"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Polygon(
              points={{-80,-100},{-80,100},{0,100},{0,20},{80,20},{80,-100},{-80,
                  -100}},
              lineColor={0,0,0},
              fillColor={245,245,245},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{0,100},{80,20},{0,20},{0,100}},
              lineColor={0,0,0},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Line(points={{2,-12},{50,-12}}, color={0,0,0}),
            Ellipse(
              extent={{-56,2},{-28,-26}},
              lineColor={0,0,0},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Line(points={{2,-60},{50,-60}}, color={0,0,0}),
            Ellipse(
              extent={{-56,-46},{-28,-74}},
              lineColor={0,0,0},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid)}), Documentation(info="<html>
<p>This icon indicates release notes and the revision history of a library.</p>
</html>"));

    end ReleaseNotes;

    partial package ExamplesPackage
    "Icon for packages containing runnable examples"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Polygon(
              origin={8.0,14.0},
              lineColor={78,138,73},
              fillColor={78,138,73},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-58.0,46.0},{42.0,-14.0},{-58.0,-74.0},{-58.0,46.0}})}), Documentation(info="<html>
<p>This icon indicates a package that contains executable examples.</p>
</html>"));
    end ExamplesPackage;

    partial model Example "Icon for runnable examples"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Ellipse(lineColor=  {75,138,73},
                    fillColor={255,255,255},
                    fillPattern=  FillPattern.Solid,
                    extent=  {{-100,-100},{100,100}}),
            Polygon(lineColor=  {0,0,255},
                    fillColor=  {75,138,73},
                    pattern=  LinePattern.None,
                    fillPattern=  FillPattern.Solid,
                    points=  {{-36,60},{64,0},{-36,-60},{-36,60}})}), Documentation(info="<html>
<p>This icon indicates an example. The play button suggests that the example can be executed.</p>
</html>"));
    end Example;

    partial package Package "Icon for standard packages"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Rectangle(
              lineColor={200,200,200},
              fillColor={248,248,248},
              fillPattern=FillPattern.HorizontalCylinder,
              extent={{-100.0,-100.0},{100.0,100.0}},
              radius=25.0),
            Rectangle(
              lineColor={128,128,128},
              fillPattern=FillPattern.None,
              extent={{-100.0,-100.0},{100.0,100.0}},
              radius=25.0)}),   Documentation(info="<html>
<p>Standard package icon.</p>
</html>"));
    end Package;

    partial package BasesPackage "Icon for packages containing base classes"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Ellipse(
              extent={{-30.0,-30.0},{30.0,30.0}},
              lineColor={128,128,128},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),
                                Documentation(info="<html>
<p>This icon shall be used for a package/library that contains base models and classes, respectively.</p>
</html>"));
    end BasesPackage;

    partial package VariantsPackage "Icon for package containing variants"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},
                {100,100}}),       graphics={
            Ellipse(
              origin={10.0,10.0},
              fillColor={76,76,76},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-80.0,-80.0},{-20.0,-20.0}}),
            Ellipse(
              origin={10.0,10.0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{0.0,-80.0},{60.0,-20.0}}),
            Ellipse(
              origin={10.0,10.0},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{0.0,0.0},{60.0,60.0}}),
            Ellipse(
              origin={10.0,10.0},
              lineColor={128,128,128},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              extent={{-80.0,0.0},{-20.0,60.0}})}),
                                Documentation(info="<html>
<p>This icon shall be used for a package/library that contains several variants of one components.</p>
</html>"));
    end VariantsPackage;

    partial package InterfacesPackage "Icon for packages containing interfaces"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Polygon(origin={20.0,0.0},
              lineColor={64,64,64},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              points={{-10.0,70.0},{10.0,70.0},{40.0,20.0},{80.0,20.0},{80.0,-20.0},{40.0,-20.0},{10.0,-70.0},{-10.0,-70.0}}),
            Polygon(fillColor={102,102,102},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-100.0,20.0},{-60.0,20.0},{-30.0,70.0},{-10.0,70.0},{-10.0,-70.0},{-30.0,-70.0},{-60.0,-20.0},{-100.0,-20.0}})}),
                                Documentation(info="<html>
<p>This icon indicates packages containing interfaces.</p>
</html>"));
    end InterfacesPackage;

    partial package SourcesPackage "Icon for packages containing sources"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Polygon(origin={23.3333,0.0},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-23.333,30.0},{46.667,0.0},{-23.333,-30.0}}),
            Rectangle(
              fillColor=  {128,128,128},
              pattern=  LinePattern.None,
              fillPattern=  FillPattern.Solid,
              extent=  {{-70,-4.5},{0,4.5}})}),
                                Documentation(info="<html>
<p>This icon indicates a package which contains sources.</p>
</html>"));
    end SourcesPackage;

    partial package SensorsPackage "Icon for packages containing sensors"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Ellipse(origin={0.0,-30.0},
              fillColor={255,255,255},
              extent={{-90.0,-90.0},{90.0,90.0}},
              startAngle=20.0,
              endAngle=160.0),
            Ellipse(origin={0.0,-30.0},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-20.0,-20.0},{20.0,20.0}}),
            Line(origin={0.0,-30.0},
              points={{0.0,60.0},{0.0,90.0}}),
            Ellipse(origin={-0.0,-30.0},
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-10.0,-10.0},{10.0,10.0}}),
            Polygon(
              origin={-0.0,-30.0},
              rotation=-35.0,
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-7.0,0.0},{-3.0,85.0},{0.0,90.0},{3.0,85.0},{7.0,0.0}})}),
                                Documentation(info="<html>
<p>This icon indicates a package containing sensors.</p>
</html>"));
    end SensorsPackage;

    partial package UtilitiesPackage "Icon for utility packages"
      extends Modelica.Icons.Package;
       annotation (Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
      Polygon(
        origin={1.3835,-4.1418},
        rotation=45.0,
        fillColor={64,64,64},
        pattern=LinePattern.None,
        fillPattern=FillPattern.Solid,
        points={{-15.0,93.333},{-15.0,68.333},{0.0,58.333},{15.0,68.333},{15.0,93.333},{20.0,93.333},{25.0,83.333},{25.0,58.333},{10.0,43.333},{10.0,-41.667},{25.0,-56.667},{25.0,-76.667},{10.0,-91.667},{0.0,-91.667},{0.0,-81.667},{5.0,-81.667},{15.0,-71.667},{15.0,-61.667},{5.0,-51.667},{-5.0,-51.667},{-15.0,-61.667},{-15.0,-71.667},{-5.0,-81.667},{0.0,-81.667},{0.0,-91.667},{-10.0,-91.667},{-25.0,-76.667},{-25.0,-56.667},{-10.0,-41.667},{-10.0,43.333},{-25.0,58.333},{-25.0,83.333},{-20.0,93.333}}),
      Polygon(
        origin={10.1018,5.218},
        rotation=-45.0,
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid,
        points={{-15.0,87.273},{15.0,87.273},{20.0,82.273},{20.0,27.273},{10.0,17.273},{10.0,7.273},{20.0,2.273},{20.0,-2.727},{5.0,-2.727},{5.0,-77.727},{10.0,-87.727},{5.0,-112.727},{-5.0,-112.727},{-10.0,-87.727},{-5.0,-77.727},{-5.0,-2.727},{-20.0,-2.727},{-20.0,2.273},{-10.0,7.273},{-10.0,17.273},{-20.0,27.273},{-20.0,82.273}})}),
      Documentation(info="<html>
<p>This icon indicates a package containing utility classes.</p>
</html>"));
    end UtilitiesPackage;

    partial package TypesPackage
    "Icon for packages containing type definitions"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Polygon(
              origin={-12.167,-23},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{12.167,65},{14.167,93},{36.167,89},{24.167,20},{4.167,-30},
                  {14.167,-30},{24.167,-30},{24.167,-40},{-5.833,-50},{-15.833,
                  -30},{4.167,20},{12.167,65}},
              smooth=Smooth.Bezier,
              lineColor={0,0,0}), Polygon(
              origin={2.7403,1.6673},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{49.2597,22.3327},{31.2597,24.3327},{7.2597,18.3327},{-26.7403,
                10.3327},{-46.7403,14.3327},{-48.7403,6.3327},{-32.7403,0.3327},{-6.7403,
                4.3327},{33.2597,14.3327},{49.2597,14.3327},{49.2597,22.3327}},
              smooth=Smooth.Bezier)}));
    end TypesPackage;

    partial package IconsPackage "Icon for packages containing icons"
      extends Modelica.Icons.Package;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Polygon(
              origin={-8.167,-17},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-15.833,20.0},{-15.833,30.0},{14.167,40.0},{24.167,20.0},{
                  4.167,-30.0},{14.167,-30.0},{24.167,-30.0},{24.167,-40.0},{-5.833,
                  -50.0},{-15.833,-30.0},{4.167,20.0},{-5.833,20.0}},
              smooth=Smooth.Bezier,
              lineColor={0,0,0}), Ellipse(
              origin={-0.5,56.5},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-12.5,-12.5},{12.5,12.5}},
              lineColor={0,0,0})}));
    end IconsPackage;

    partial package InternalPackage
    "Icon for an internal package (indicating that the package should not be directly utilized by user)"

    annotation (
      Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
              100}}), graphics={
          Rectangle(
            lineColor={215,215,215},
            fillColor={255,255,255},
            fillPattern=FillPattern.HorizontalCylinder,
            extent={{-100,-100},{100,100}},
            radius=25),
          Rectangle(
            lineColor={215,215,215},
            fillPattern=FillPattern.None,
            extent={{-100,-100},{100,100}},
            radius=25),
          Ellipse(
            extent={{-80,80},{80,-80}},
            lineColor={215,215,215},
            fillColor={215,215,215},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{-55,55},{55,-55}},
            lineColor={255,255,255},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-60,14},{60,-14}},
            lineColor={215,215,215},
            fillColor={215,215,215},
            fillPattern=FillPattern.Solid,
            origin={0,0},
            rotation=45)}),
      Documentation(info="<html>

<p>
This icon shall be used for a package that contains internal classes not to be
directly utilized by a user.
</p>
</html>"));
    end InternalPackage;

    partial class RotationalSensor
    "Icon representing a round measurement device"

      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Ellipse(
              fillColor={245,245,245},
              fillPattern=FillPattern.Solid,
              extent={{-70.0,-70.0},{70.0,70.0}}),
            Line(points={{0.0,70.0},{0.0,40.0}}),
            Line(points={{22.9,32.8},{40.2,57.3}}),
            Line(points={{-22.9,32.8},{-40.2,57.3}}),
            Line(points={{37.6,13.7},{65.8,23.9}}),
            Line(points={{-37.6,13.7},{-65.8,23.9}}),
            Ellipse(
              lineColor={64,64,64},
              fillColor={255,255,255},
              extent={{-12.0,-12.0},{12.0,12.0}}),
            Polygon(
              origin={0,0},
              rotation=-17.5,
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-5.0,0.0},{-2.0,60.0},{0.0,65.0},{2.0,60.0},{5.0,0.0}}),
            Ellipse(
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-7.0,-7.0},{7.0,7.0}})}),
        Documentation(info="<html>
<p>
This icon is designed for a <b>rotational sensor</b> model.
</p>
</html>"));
    end RotationalSensor;

    partial function Function "Icon for functions"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Text(
              lineColor={0,0,255},
              extent={{-150,105},{150,145}},
              textString="%name"),
            Ellipse(
              lineColor=  {108,88,49},
              fillColor=  {255,215,136},
              fillPattern=  FillPattern.Solid,
              extent=  {{-100,-100},{100,100}}),
            Text(
              lineColor={108,88,49},
              extent={{-90.0,-90.0},{90.0,90.0}},
              textString="f")}),
    Documentation(info="<html>
<p>This icon indicates Modelica functions.</p>
</html>"));
    end Function;

    partial record Record "Icon for records"

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={
            Text(
              lineColor={0,0,255},
              extent={{-150,60},{150,100}},
              textString="%name"),
            Rectangle(
              origin={0.0,-25.0},
              lineColor={64,64,64},
              fillColor={255,215,136},
              fillPattern=FillPattern.Solid,
              extent={{-100.0,-75.0},{100.0,75.0}},
              radius=25.0),
            Line(
              points={{-100.0,0.0},{100.0,0.0}},
              color={64,64,64}),
            Line(
              origin={0.0,-50.0},
              points={{-100.0,0.0},{100.0,0.0}},
              color={64,64,64}),
            Line(
              origin={0.0,-25.0},
              points={{0.0,75.0},{0.0,-75.0}},
              color={64,64,64})}),                        Documentation(info="<html>
<p>
This icon is indicates a record.
</p>
</html>"));
    end Record;

    type TypeReal "Icon for Real types"
        extends Real;
        annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                lineColor={160,160,164},
                fillColor={160,160,164},
                fillPattern=FillPattern.Solid,
                extent={{-100.0,-100.0},{100.0,100.0}},
                radius=25.0),
              Text(
                lineColor={255,255,255},
                extent={{-90.0,-50.0},{90.0,50.0}},
                textString="R")}),Documentation(info="<html>
<p>
This icon is designed for a <b>Real</b> type.
</p>
</html>"));
    end TypeReal;

    type TypeString "Icon for String types"
        extends String;
        annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                lineColor={160,160,164},
                fillColor={160,160,164},
                fillPattern=FillPattern.Solid,
                extent={{-100.0,-100.0},{100.0,100.0}},
                radius=25.0),
              Text(
                lineColor={255,255,255},
                extent={{-90.0,-50.0},{90.0,50.0}},
                textString="S")}),Documentation(info="<html>
<p>
This icon is designed for a <b>String</b> type.
</p>
</html>"));
    end TypeString;

    partial class UnderConstruction
    "Icon for classes that are still under construction"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Polygon(points={{-100,-100},{0,80},{100,-100},{-100,-100}},
              lineColor={255,0,0},
              lineThickness=0.5)}), Documentation(info="<html>
<p>Library developers can use this icon to indicate that the respective model is under construction.</p>
</html>"));
    end UnderConstruction;

    partial class ObsoleteModel
    "Icon for classes that are obsolete and will be removed in later versions"

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-102,102},{102,-102}},
              lineColor={255,0,0},
              pattern=LinePattern.Dash,
              lineThickness=0.5)}), Documentation(info="<html>
<p>
This partial class is intended to provide a <u>default icon
for an obsolete model</u> that will be removed from the
corresponding library in a future release.
</p>
</html>"));
    end ObsoleteModel;
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Polygon(
              origin={-8.167,-17},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-15.833,20.0},{-15.833,30.0},{14.167,40.0},{24.167,20.0},{
                  4.167,-30.0},{14.167,-30.0},{24.167,-30.0},{24.167,-40.0},{-5.833,
                  -50.0},{-15.833,-30.0},{4.167,20.0},{-5.833,20.0}},
              smooth=Smooth.Bezier,
              lineColor={0,0,0}), Ellipse(
              origin={-0.5,56.5},
              fillColor={128,128,128},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-12.5,-12.5},{12.5,12.5}},
              lineColor={0,0,0})}), Documentation(info="<html>
<p>This package contains definitions for the graphical layout of components which may be used in different libraries. The icons can be utilized by inheriting them in the desired class using &quot;extends&quot; or by directly copying the &quot;icon&quot; layer. </p>

<h4>Main Authors:</h4>

<dl>
<dt><a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a></dt>
    <dd>Deutsches Zentrum fuer Luft und Raumfahrt e.V. (DLR)</dd>
    <dd>Oberpfaffenhofen</dd>
    <dd>Postfach 1116</dd>
    <dd>D-82230 Wessling</dd>
    <dd>email: <a href=\"mailto:Martin.Otter@dlr.de\">Martin.Otter@dlr.de</a></dd>
<dt>Christian Kral</dt>
    <dd><a href=\"http://www.ait.ac.at/\">Austrian Institute of Technology, AIT</a></dd>
    <dd>Mobility Department</dd><dd>Giefinggasse 2</dd>
    <dd>1210 Vienna, Austria</dd>
    <dd>email: <a href=\"mailto:dr.christian.kral@gmail.com\">dr.christian.kral@gmail.com</a></dd>
<dt>Johan Andreasson</dt>
    <dd><a href=\"http://www.modelon.se/\">Modelon AB</a></dd>
    <dd>Ideon Science Park</dd>
    <dd>22370 Lund, Sweden</dd>
    <dd>email: <a href=\"mailto:johan.andreasson@modelon.se\">johan.andreasson@modelon.se</a></dd>
</dl>

<p>Copyright &copy; 1998-2013, Modelica Association, DLR, AIT, and Modelon AB. </p>
<p><i>This Modelica package is <b>free</b> software; it can be redistributed and/or modified under the terms of the <b>Modelica license</b>, see the license conditions and the accompanying <b>disclaimer</b> in <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a>.</i> </p>
</html>"));
  end Icons;

  package SIunits
  "Library of type and unit definitions based on SI units according to ISO 31-1992"
    extends Modelica.Icons.Package;

    package Conversions
    "Conversion functions to/from non SI units and type definitions of non SI units"
      extends Modelica.Icons.Package;

      package NonSIunits "Type definitions of non SI units"
        extends Modelica.Icons.Package;
        annotation (Documentation(info="<HTML>
<p>
This package provides predefined types, such as <b>Angle_deg</b> (angle in
degree), <b>AngularVelocity_rpm</b> (angular velocity in revolutions per
minute) or <b>Temperature_degF</b> (temperature in degree Fahrenheit),
which are in common use but are not part of the international standard on
units according to ISO 31-1992 \"General principles concerning quantities,
units and symbols\" and ISO 1000-1992 \"SI units and recommendations for
the use of their multiples and of certain other units\".</p>
<p>If possible, the types in this package should not be used. Use instead
types of package Modelica.SIunits. For more information on units, see also
the book of Francois Cardarelli <b>Scientific Unit Conversion - A
Practical Guide to Metrication</b> (Springer 1997).</p>
<p>Some units, such as <b>Temperature_degC/Temp_C</b> are both defined in
Modelica.SIunits and in Modelica.Conversions.NonSIunits. The reason is that these
definitions have been placed erroneously in Modelica.SIunits although they
are not SIunits. For backward compatibility, these type definitions are
still kept in Modelica.SIunits.</p>
</html>"),   Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
        Text(
          origin={15.0,51.8518},
          extent={{-105.0,-86.8518},{75.0,-16.8518}},
          lineColor={0,0,0},
          textString="[km/h]")}));
      end NonSIunits;
      annotation (                              Documentation(info="<HTML>
<p>This package provides conversion functions from the non SI Units
defined in package Modelica.SIunits.Conversions.NonSIunits to the
corresponding SI Units defined in package Modelica.SIunits and vice
versa. It is recommended to use these functions in the following
way (note, that all functions have one Real input and one Real output
argument):</p>
<pre>
  <b>import</b> SI = Modelica.SIunits;
  <b>import</b> Modelica.SIunits.Conversions.*;
     ...
  <b>parameter</b> SI.Temperature     T   = from_degC(25);   // convert 25 degree Celsius to Kelvin
  <b>parameter</b> SI.Angle           phi = from_deg(180);   // convert 180 degree to radian
  <b>parameter</b> SI.AngularVelocity w   = from_rpm(3600);  // convert 3600 revolutions per minutes
                                                      // to radian per seconds
</pre>

</html>"));
    end Conversions;

    type Angle = Real (
        final quantity="Angle",
        final unit="rad",
        displayUnit="deg");

    type Length = Real (final quantity="Length", final unit="m");

    type Position = Length;

    type Height = Length(min=0);

    type Volume = Real (final quantity="Volume", final unit="m3");

    type Time = Real (final quantity="Time", final unit="s");

    type AngularVelocity = Real (
        final quantity="AngularVelocity",
        final unit="rad/s");

    type Velocity = Real (final quantity="Velocity", final unit="m/s");

    type Acceleration = Real (final quantity="Acceleration", final unit="m/s2");

    type Frequency = Real (final quantity="Frequency", final unit="Hz");

    type Mass = Real (
        quantity="Mass",
        final unit="kg",
        min=0);

    type Density = Real (
        final quantity="Density",
        final unit="kg/m3",
        displayUnit="g/cm3",
        min=0.0);

    type Pressure = Real (
        final quantity="Pressure",
        final unit="Pa",
        displayUnit="bar");

    type Energy = Real (final quantity="Energy", final unit="J");

    type Power = Real (final quantity="Power", final unit="W");

    type MassFlowRate = Real (quantity="MassFlowRate", final unit="kg/s");

    type VolumeFlowRate = Real (final quantity="VolumeFlowRate", final unit=
            "m3/s");

    type ThermodynamicTemperature = Real (
        final quantity="ThermodynamicTemperature",
        final unit="K",
        min = 0.0,
        start = 288.15,
        nominal = 300,
        displayUnit="degC")
    "Absolute temperature (use type TemperatureDifference for relative temperatures)"
                                                                                                        annotation(absoluteValue=true);

    type Temperature = ThermodynamicTemperature;

    type TemperatureDifference = Real (
        final quantity="ThermodynamicTemperature",
        final unit="K") annotation(absoluteValue=false);

    type LinearTemperatureCoefficient = Real(final quantity = "LinearTemperatureCoefficient", final unit="1/K");

    type Heat = Real (final quantity="Energy", final unit="J");

    type HeatFlowRate = Real (final quantity="Power", final unit="W");

    type ThermalConductance = Real (final quantity="ThermalConductance", final unit=
               "W/K");

    type SpecificHeatCapacity = Real (final quantity="SpecificHeatCapacity",
          final unit="J/(kg.K)");

    type SpecificEnergy = Real (final quantity="SpecificEnergy",
                                final unit="J/kg");

    type ElectricCurrent = Real (final quantity="ElectricCurrent", final unit="A");

    type ElectricCharge = Real (final quantity="ElectricCharge", final unit="C");

    type VolumeDensityOfCharge = Real (
        final quantity="VolumeDensityOfCharge",
        final unit="C/m3",
        min=0);

    type ElectricPotential = Real (final quantity="ElectricPotential", final unit=
           "V");

    type AmountOfSubstance = Real (
        final quantity="AmountOfSubstance",
        final unit="mol",
        min=0);

    type MolarMass = Real (final quantity="MolarMass", final unit="kg/mol",min=0);

    type MolarEnergy = Real (final quantity="MolarEnergy", final unit="J/mol", nominal=2e4);

    type MolarFlowRate = Real (final quantity="MolarFlowRate", final unit=
            "mol/s");

    type MassConcentration = Real (final quantity="MassConcentration", final unit=
           "kg/m3");

    type Concentration = Real (final quantity="Concentration", final unit=
            "mol/m3");

    type ActivityCoefficient = Real (final quantity="ActivityCoefficient", final unit=
               "1");

    type StoichiometricNumber = Real (final quantity="StoichiometricNumber",
          final unit="1");

    type FaradayConstant = Real (final quantity="FaradayConstant", final unit=
            "C/mol");
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
              -100},{100,100}}), graphics={
          Line(
            points={{-66,78},{-66,-40}},
            color={64,64,64},
            smooth=Smooth.None),
          Ellipse(
            extent={{12,36},{68,-38}},
            lineColor={64,64,64},
            fillColor={175,175,175},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-74,78},{-66,-40}},
            lineColor={64,64,64},
            fillColor={175,175,175},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-66,-4},{-66,6},{-16,56},{-16,46},{-66,-4}},
            lineColor={64,64,64},
            smooth=Smooth.None,
            fillColor={175,175,175},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-46,16},{-40,22},{-2,-40},{-10,-40},{-46,16}},
            lineColor={64,64,64},
            smooth=Smooth.None,
            fillColor={175,175,175},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{22,26},{58,-28}},
            lineColor={64,64,64},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{68,2},{68,-46},{64,-60},{58,-68},{48,-72},{18,-72},{18,-64},
                {46,-64},{54,-60},{58,-54},{60,-46},{60,-26},{64,-20},{68,-6},{68,
                2}},
            lineColor={64,64,64},
            smooth=Smooth.Bezier,
            fillColor={175,175,175},
            fillPattern=FillPattern.Solid)}), Documentation(info="<html>
<p>This package provides predefined types, such as <i>Mass</i>,
<i>Angle</i>, <i>Time</i>, based on the international standard
on units, e.g.,
</p>

<pre>   <b>type</b> Angle = Real(<b>final</b> quantity = \"Angle\",
                     <b>final</b> unit     = \"rad\",
                     displayUnit    = \"deg\");
</pre>

<p>
as well as conversion functions from non SI-units to SI-units
and vice versa in subpackage
<a href=\"modelica://Modelica.SIunits.Conversions\">Conversions</a>.
</p>

<p>
For an introduction how units are used in the Modelica standard library
with package SIunits, have a look at:
<a href=\"modelica://Modelica.SIunits.UsersGuide.HowToUseSIunits\">How to use SIunits</a>.
</p>

<p>
Copyright &copy; 1998-2013, Modelica Association and DLR.
</p>
<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>
</html>",   revisions="<html>
<ul>
<li><i>May 25, 2011</i> by Stefan Wischhusen:<br/>Added molar units for energy and enthalpy.</li>
<li><i>Jan. 27, 2010</i> by Christian Kral:<br/>Added complex units.</li>
<li><i>Dec. 14, 2005</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>Add User&#39;;s Guide and removed &quot;min&quot; values for Resistance and Conductance.</li>
<li><i>October 21, 2002</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a> and <a href=\"http://www.robotic.dlr.de/Christian.Schweiger/\">Christian Schweiger</a>:<br/>Added new package <b>Conversions</b>. Corrected typo <i>Wavelenght</i>.</li>
<li><i>June 6, 2000</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>Introduced the following new types<br/>type Temperature = ThermodynamicTemperature;<br/>types DerDensityByEnthalpy, DerDensityByPressure, DerDensityByTemperature, DerEnthalpyByPressure, DerEnergyByDensity, DerEnergyByPressure<br/>Attribute &quot;final&quot; removed from min and max values in order that these values can still be changed to narrow the allowed range of values.<br/>Quantity=&quot;Stress&quot; removed from type &quot;Stress&quot;, in order that a type &quot;Stress&quot; can be connected to a type &quot;Pressure&quot;.</li>
<li><i>Oct. 27, 1999</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>New types due to electrical library: Transconductance, InversePotential, Damping.</li>
<li><i>Sept. 18, 1999</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>Renamed from SIunit to SIunits. Subpackages expanded, i.e., the SIunits package, does no longer contain subpackages.</li>
<li><i>Aug 12, 1999</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>Type &quot;Pressure&quot; renamed to &quot;AbsolutePressure&quot; and introduced a new type &quot;Pressure&quot; which does not contain a minimum of zero in order to allow convenient handling of relative pressure. Redefined BulkModulus as an alias to AbsolutePressure instead of Stress, since needed in hydraulics.</li>
<li><i>June 29, 1999</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br/>Bug-fix: Double definition of &quot;Compressibility&quot; removed and appropriate &quot;extends Heat&quot; clause introduced in package SolidStatePhysics to incorporate ThermodynamicTemperature.</li>
<li><i>April 8, 1998</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a> and Astrid Jaschinski:<br/>Complete ISO 31 chapters realized.</li>
<li><i>Nov. 15, 1997</i> by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a> and <a href=\"http://www.control.lth.se/~hubertus/\">Hubertus Tummescheit</a>:<br/>Some chapters realized.</li>
</ul>
</html>"));
  end SIunits;
annotation (
preferredView="info",
version="3.2.1",
versionBuild=2,
versionDate="2013-08-14",
dateModified = "2013-08-14 08:44:41Z",
revisionId="$Id:: package.mo 6947 2013-08-23 07:41:37Z #$",
uses(Complex(version="3.2.1"), ModelicaServices(version="3.2.1")),
conversion(
 noneFromVersion="3.2",
 noneFromVersion="3.1",
 noneFromVersion="3.0.1",
 noneFromVersion="3.0",
 from(version="2.1", script="modelica://Modelica/Resources/Scripts/Dymola/ConvertModelica_from_2.2.2_to_3.0.mos"),
 from(version="2.2", script="modelica://Modelica/Resources/Scripts/Dymola/ConvertModelica_from_2.2.2_to_3.0.mos"),
 from(version="2.2.1", script="modelica://Modelica/Resources/Scripts/Dymola/ConvertModelica_from_2.2.2_to_3.0.mos"),
 from(version="2.2.2", script="modelica://Modelica/Resources/Scripts/Dymola/ConvertModelica_from_2.2.2_to_3.0.mos")),
Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
  Polygon(
    origin={-6.9888,20.048},
    fillColor={0,0,0},
    pattern=LinePattern.None,
    fillPattern=FillPattern.Solid,
    points={{-93.0112,10.3188},{-93.0112,10.3188},{-73.011,24.6},{-63.011,31.221},{-51.219,36.777},{-39.842,38.629},{-31.376,36.248},{-25.819,29.369},{-24.232,22.49},{-23.703,17.463},{-15.501,25.135},{-6.24,32.015},{3.02,36.777},{15.191,39.423},{27.097,37.306},{32.653,29.633},{35.035,20.108},{43.501,28.046},{54.085,35.19},{65.991,39.952},{77.897,39.688},{87.422,33.338},{91.126,21.696},{90.068,9.525},{86.099,-1.058},{79.749,-10.054},{71.283,-21.431},{62.816,-33.337},{60.964,-32.808},{70.489,-16.14},{77.368,-2.381},{81.072,10.054},{79.749,19.05},{72.605,24.342},{61.758,23.019},{49.587,14.817},{39.003,4.763},{29.214,-6.085},{21.012,-16.669},{13.339,-26.458},{5.401,-36.777},{-1.213,-46.037},{-6.24,-53.446},{-8.092,-52.387},{-0.684,-40.746},{5.401,-30.692},{12.81,-17.198},{19.424,-3.969},{23.658,7.938},{22.335,18.785},{16.514,23.283},{8.047,23.019},{-1.478,19.05},{-11.267,11.113},{-19.734,2.381},{-29.259,-8.202},{-38.519,-19.579},{-48.044,-31.221},{-56.511,-43.392},{-64.449,-55.298},{-72.386,-66.939},{-77.678,-74.612},{-79.53,-74.083},{-71.857,-61.383},{-62.861,-46.037},{-52.278,-28.046},{-44.869,-15.346},{-38.784,-2.117},{-35.344,8.731},{-36.403,19.844},{-42.488,23.813},{-52.013,22.49},{-60.744,16.933},{-68.947,10.054},{-76.884,2.646},{-93.0112,-12.1707},{-93.0112,-12.1707}},
    smooth=Smooth.Bezier),
  Ellipse(
    origin={40.8208,-37.7602},
    fillColor={161,0,4},
    pattern=LinePattern.None,
    fillPattern=FillPattern.Solid,
    extent={{-17.8562,-17.8563},{17.8563,17.8562}})}),
Documentation(info="<HTML>
<p>
Package <b>Modelica&reg;</b> is a <b>standardized</b> and <b>free</b> package
that is developed together with the Modelica&reg; language from the
Modelica Association, see
<a href=\"https://www.Modelica.org\">https://www.Modelica.org</a>.
It is also called <b>Modelica Standard Library</b>.
It provides model components in many domains that are based on
standardized interface definitions. Some typical examples are shown
in the next figure:
</p>

<p>
<img src=\"modelica://Modelica/Resources/Images/UsersGuide/ModelicaLibraries.png\">
</p>

<p>
For an introduction, have especially a look at:
</p>
<ul>
<li> <a href=\"modelica://Modelica.UsersGuide.Overview\">Overview</a>
  provides an overview of the Modelica Standard Library
  inside the <a href=\"modelica://Modelica.UsersGuide\">User's Guide</a>.</li>
<li><a href=\"modelica://Modelica.UsersGuide.ReleaseNotes\">Release Notes</a>
 summarizes the changes of new versions of this package.</li>
<li> <a href=\"modelica://Modelica.UsersGuide.Contact\">Contact</a>
  lists the contributors of the Modelica Standard Library.</li>
<li> The <b>Examples</b> packages in the various libraries, demonstrate
  how to use the components of the corresponding sublibrary.</li>
</ul>

<p>
This version of the Modelica Standard Library consists of
</p>
<ul>
<li><b>1360</b> models and blocks, and</li>
<li><b>1280</b> functions</li>
</ul>
<p>
that are directly usable (= number of public, non-partial classes). It is fully compliant
to <a href=\"https://www.modelica.org/documents/ModelicaSpec32Revision2.pdf\">Modelica Specification Version 3.2 Revision 2</a>
and it has been tested with Modelica tools from different vendors.
</p>

<p>
<b>Licensed by the Modelica Association under the Modelica License 2</b><br>
Copyright &copy; 1998-2013, ABB, AIT, T.&nbsp;B&ouml;drich, DLR, Dassault Syst&egrave;mes AB, Fraunhofer, A.Haumer, ITI, Modelon,
TU Hamburg-Harburg, Politecnico di Milano, XRG Simulation.
</p>

<p>
<i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"https://www.modelica.org/licenses/ModelicaLicense2\"> https://www.modelica.org/licenses/ModelicaLicense2</a>.</i>
</p>

<p>
<b>Modelica&reg;</b> is a registered trademark of the Modelica Association.
</p>
</html>"));
end Modelica;

package Cardiovascular

  model System

    replaceable Interfaces.Heart heart
      annotation (Placement(transformation(extent={{-10,-8},{6,8}})));
    replaceable Interfaces.Systemic systemicCirculation
      annotation (Placement(transformation(extent={{-10,-36},{10,-16}})));
    replaceable Interfaces.Pulmonary pulmonaryCirculation
      annotation (Placement(transformation(extent={{-10,12},{10,32}})));
  equation
    connect(systemicCirculation.q_out, heart.rightHeartInflow) annotation(Line(points={{-10,-26},
            {-14,-26},{-14,-1.6},{-9.84,-1.6}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(systemicCirculation.q_in, heart.leftHeartOutflow) annotation(Line(points={{10,-26},
            {12,-26},{12,-1.44},{6,-1.44}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.leftHeartInflow, pulmonaryCirculation.q_out) annotation(Line(points={{6,1.6},
            {12,1.6},{12,21.4},{9.8,21.4}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.rightHeartOutflow, pulmonaryCirculation.q_in) annotation(Line(points={{-10,1.6},
            {-10,2},{-14,2},{-14,21.8},{-9.8,21.8}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-20, -40}, {20, 40}}), graphics), Icon(coordinateSystem(extent={{-20,-40},
              {20,40}},                                                                                                    preserveAspectRatio=false),   graphics={  Bitmap(extent = {{-40, 40}, {40, -40}},
              imageSource =                                                                                                    "" + "" + "" + "" + "" + "" + "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" + "", fileName = "modelica://Cardiovascular/Resources/Icons/cvsconcept.png"), Text(
            extent={{-40,-40},{40,-48}},
            lineColor={0,0,255},
            textString="%name")}),                                                                                                    Documentation(info="<html>
<p>Architectural model of cardiovascular subsystems.</p>
</html>"));
  end System;

  package Interfaces
    extends Modelica.Icons.InterfacesPackage;

    partial model Heart "Abstract heart circulation submodel"

      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent={{-110,30},
                {-90,50}}),                                                                                                    iconTransformation(extent={{-108,
                -30},{-88,-10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent={{90,30},
                {110,50}}),                                                                                                    iconTransformation(extent={{-110,10},
                {-90,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent={{90,-30},
                {110,-10}}),                                                                                                    iconTransformation(extent={{90,10},
                {110,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent={{-110,
                -30},{-90,-10}}),                                                                                                    iconTransformation(extent={{90,-28},
                {110,-8}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                        graphics={Bitmap(
                extent={{-86,106},{82,-104}},
              imageSource=
                  "",
              fileName=
                  "modelica://Cardiovascular/Resources/Icons/heartPict.png"),                                         Text(extent={{
                  -98,-78},{102,-112}},                                                                                                    lineColor = {190, 0, 0},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));

    end Heart;

    partial model Systemic "Abstract systemic circulation submodel"
      extends Physiolibrary.Icons.SystemicCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                           graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}}),                                                                                                  graphics={  Text(extent = {{-158, -50}, {160, -82}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}));
    end Systemic;

    partial model Pulmonary "Abstract pulmonary circulation submodel"
      extends Physiolibrary.Icons.PulmonaryCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-108, -12}, {-88, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{88, -16}, {108, 4}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-156, -38}, {156, -64}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end Pulmonary;
  end Interfaces;

  package Controlled
    extends Modelica.Icons.InterfacesPackage;

    partial model System
    "Interface for cardiovascular system controlled by short-term(baroreflex), long-term(blood volume) and pathologies(stenosis)"
      extends Cardiovascular.System(
        redeclare replaceable Pulmonary pulmonaryCirculation constrainedby
        Controlled.Pulmonary,
        redeclare replaceable Heart heart constrainedby Controlled.Heart,
        redeclare replaceable Systemic systemicCirculation constrainedby
        Controlled.Systemic);

      replaceable ShortTermControl shortTermControl
        annotation (Placement(transformation(extent={{-52,16},{-36,32}})));
      replaceable LongTermControl longTermControl
        annotation (Placement(transformation(extent={{-50,-12},{-30,8}})));
      replaceable ScenarioControl scenarioControl
        annotation (Placement(transformation(extent={{-50,-36},{-30,-16}})));
    equation
      connect(pulmonaryCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-8,25.2},{-14,25.2},{-14,26},{-18,26},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-7.6,-29},{-18,-29},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(shortTermControl.busConnector, heart.busConnector) annotation (Line(
          points={{-37.6,31.2},{-18,31.2},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(longTermControl.busConnector, heart.busConnector) annotation (Line(
          points={{-41.8,0.4},{-18,0.4},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(longTermControl.port_a, heart.rightHeartInflow) annotation (Line(
          points={{-30.6,-8},{-14,-8},{-14,-1.6},{-9.84,-1.6}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(scenarioControl.busConnector, heart.busConnector) annotation (Line(
          points={{-32,-17},{-18,-17},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-60,-40},
                {20,40}}), graphics));
    end System;

    model Pulmonary "Abstract controlled pulmonary circulation submodel"
      extends Cardiovascular.Interfaces.Pulmonary;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-100,12},{-60,52}})));
    end Pulmonary;

    partial model Heart "Abstract controlled heart circulation submodel"
      extends Cardiovascular.Interfaces.Heart;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-118,66},{-78,106}}),
                                                       iconTransformation(
              extent={{-100,-90},{-60,-50}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics));
    end Heart;

    model Systemic "Abstract controlled systemic circulation submodel"
      extends Cardiovascular.Interfaces.Systemic;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-96,-50},{-56,-10}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics));
    end Systemic;

    partial model LongTermControl
    "Abstract submodel of long-term volume control"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{0,-8},{40,32}}), iconTransformation(
              extent={{-38,4},{2,44}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a
        annotation (Placement(transformation(extent={{84,-70},{104,-50}}),
            iconTransformation(extent={{84,-70},{104,-50}})));
      Model.Control.BloodVolume.VolumeRefill2 volumeRefill
        annotation (Placement(transformation(extent={{46,-38},{86,6}})));
    equation
      connect(volumeRefill.busConnector, busConnector) annotation (Line(
          points={{63.6,-7.64},{20,-7.64},{20,12}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(volumeRefill.port_b, port_a) annotation (Line(
          points={{84.4,-35.8},{94,-35.8},{94,-60}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-80,80},{82,
                  -80}},
              imageSource=
                  "iVBORw0KGgoAAAANSUhEUgAAAGkAAABpCAYAAAA5gg06AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABSbSURBVHhe7Z35cxRnesfzX6RyVaVSW6mtSlUq+8Omki2HGyQOSUgIzOXFay57sdcG2xgfiXfXV7kSe+1ak8UFa3sxxmCMBFhC98EhiRtsg8E2AgGS5r5Hc8988/2+PSNhexfELolmUv3AM93T0/029X76+7zP+77dzZ/BtqI3G1IJmA2pBMyGVAJmQyoBsyGVgNmQSsBsSCVgRQ8pmUyaZTabRSQSQS6XM9/T6bRZyuLxuFlqWyqVGv0tGo0iHA6bdR0rSyQSZikrbCt2K3pIsVhsFEzBMpkMRkZGTIULotZDoVD+V8sES6Zj9dvw8LD5LtNv8m+XW6xWEuFOMKQkmZaC9PtM+wlYQUkFFRWUJihST0FNf6icYrOSgCS1CI5cIawAzOfzjYasTZs2oa6uDtu3bzfLdevWme0C4nQ6R9dvVpyAloIVPaSb2xhZoY0SoI6ODpw/fx4XL17EyZMn0dPTg87OTnR3d+PgwYNoaGjAmTNnsGvXLgwMDIwqSCZVFUJisVtJQCqY1gshyuv14vDhwzh9+jRaW1uNehobG42S3n//fbP88MMP8eabb2Lbtm24fPnyaBskWKUS6mQlEe5kqthCEiFYCmH9/f3Yu3cvNm/ebFTzxhtv4MUXXzS+Y8cOPPTQQ9iyZQv6+vrgcDgMGIVHlVNKVsSQ1O6MeTKpxt9adzqGcPrUCZz//FOzHvB70bCvHsd7jqLn0GEc7T6E7e+8i2v9V3D168u4/NXXONTVjZFIlMdboc5W0p3YTSxUeXLmb/SU8RySxqkl/kYF5AgrG8fhjib0dLQaP36oC+d6e3D+xHH6SXzadwynDvXgeCeBtXShs7EVh9u7kUvqJDycC3lpJODFAEkXtHwUkgAVIFmAcpCKBIlKICDkRtDT3oTejmYcOngAR5oPoqe1GX3trTjR3o7jrR3oa25Db1M7elo60NVAmK3dzDpER4CUKdqQxm+3gVQAxbSBv1FJWa4TVE9bi4F0tKWRkBpwuOkTAmvA0YON6GkiwGZCI6ieljZCaiakTkJilmiUlDagbEjjtVFIVqgbg1QAZTmQRi7LFDrLdYLqaWtFL5Uj9fS2MfS1HjTAepub0NfSjONtbUZVPS0t6Gps4P7tyt8JSSoSJJbHkkvBiqBN0qVt+VibVPAxYNyB9ctKVoNPUKr03vY2gmn6hgvSza4w2NX4iYGKlEIlAeWoULoNabx2S0hjbv7y6jeQ6BakDhxlWJNaetlXkqqOtbYYJfU0UVkKfaOQWsYg2Uq6Q8tKGXSGOYW6UUhj7IwbSBlWaoYr9AKkvjbLj7V30pk0MMwdEzCCk4+FOyrJhDuWZxIHg74kbIIhsdINJLYzdwRpTEl9bV1UUScV1Y4jTYTCpKHgSh4sSMz+TJtEJRZOqevC+kcUvRUnpDwYeTyRgdiYGpUrd+b+R9j+HGFYE6Axbx9VUMFPdHbjaGsbTnb3Eq51yiTzj7ROqfJKwIoAkrK1myHx602uetRSH5k0w1Xa6sz2tLO9YV/pCBUjBR1tZl/IgGHq3XKQKlIqftC0U4eamnGs45ASRB5LVjydijKQ5EVupQGJnwKUTo2whiP0EA631hvvaqhDd2M9+0oHGNIOoK91P3pb9qGnuR5Hm+qZODSgs3GfUVOOqtQpzWkV+bSuExS5FT0khbq0+Z2XPggpG2KC5kZ3y4c42rEH5/oO4rPjzfjidDsunevA1+fajV863YaLJ9twtlfDRwRI5aVjAsxiBIbl2uFuXHZ7SKlMmpA0DyRXJXu4qwOn++px5VIn/I4TCLpPIOo/g3joLFKhc0gGzyLuP4sR71m4rh/D5S+68fkpJg7pIAvV8BILtv6WhBVZ4qB+kgXHOKtRHdmMARTjNj/bkyGuD+LKl+3IJC4gFjqOeKQXqdhxfj+OXNzyzMhxpCOnmCVcQMh7Cjf6j/A4HwsNshxNVbCvVCKYih5SjpWZzo1wGeJ3N3e7weMGcfWrVmSS5xDytyEcbEIk1IxouIXQWjASbKa3UF3tyKVOIhLsg+NGN48bZofYRWUGuB5jmTyv/g1FbhMMiWwIR4AKXgBlYLEaNW6XZLKQheaCdH+Cm34FFz79Hdyu3UjG9zKl3olk7APj6ZHded+DJD3s/wBe525cu1rH464yAdHkH8OeDWl8Rg4mK9YAjRnpVnIgCZGX6k7AUgx1GX6mcqpM7pn2cvklhq7/Gm7nL+Acfgpez5MIB55BLPJzJEKvIOp7CQHnf8Az9BRcw0/C53kF1668zQIvWO2SLgCeK2OSERvSLU2QdC1rai9r5ozUByIhQZKw8pDSgiRoOialUHUBjsGX4PE8CpdrNdyelQjQg56HEHZtQMj5OAKOdfA61lJFDyDg24jrV19n2Z/zZJqT4l/m3xak4rcShOTn5xgkt3sNXO4H4HGsgHtoJbw3HoZv8FH4h38Kn/NBG9KfancDktf7IDzeVfC5fkIgK+Ef+hkCw+sRdD6MgHs8kPilyK3kIXk8qwmJIEzIW8NQt96EO0Hyu74V7nKfsk0Km4I0VWFDGofdDUhOQnC574efIc+C9CiCjsdMuPMMryKk+wnpCVwfeI0H25Du2O4GJJdrpYHkc69gyFvFUPcI3WqTvI7V34J01oZ0p3Y3IHm9a+D1/QR+D0ERmLI6KSnkYptEZXldPyakDTakP9buBiS3exVTcKrIKMmCJCUFHMzuqKzvQrqpn8SybUi3sT8ZkvcR00eyIN13EySGPMeD34L0nzzYhnTHdtcgeQloXJDO3ARJIxkaaLUh3dLuPqSfmDA3BomdW9dyBPyP2ZD+WLu7kJaNE1LAFGRDGqf9r0FSyLMh3R2zIY3PJhSSTDMTmqpII0mPs8qIjHBM3QmM7hjhirmtS2spzSldxNCQID1MSCvg9RDQaOIgSHTnSm7jbyZxUGe2AMlnIOmWZWV41omK2yYWkqRhbljUwy1ZBHllBxHiJ69w1Z3EFeEKM2VTnwKa0cZ+XHf8Am7/aqpoKTu0S42KfM41RkEB5yoEpCwPtxOU37MRgxq7wzkq1E3pUr8pkeKmErCJhxQnpEzOBB4fP70IIIIor3Ru0EYJR0t1aWi6MUUzrBYkhjrfIkJabFSkqQkLEhXl5jaPtms0YtNNkFwshIWVhoiMFT+kCHdinWbYKJndM6J1ZRSSy7/IAuVW+8N2iGoyYe8PQco6KEeq0VbSOO07kBL0AEYESb9p4wgzCAJK6+ZIXvojGd2UcitIVsIQcDPUKdxx3e95BoNX3mBhBUgjips2pHHZKCQuuBpg0uBjfBuFpI3mrlPmeNkYEabYREWJymqTPL7V34Tk1GyskoZ8m2Qyvt8DiaCzute4RKxoICW5HuSKgt0IJWQgKbKZF20kDLgYP0NZ3TnUj8HBX5oRcCUOJnlwMcyZ1Fuj4A8i6FyBgGuFCX9B93PfghRhtphv5ErAig5SkJCU3QmSldFpIDTKrfqFn5kgIV2G4/rLVAuVo9SbrrQ7OLQeoUH60COIDK9CyLEKweF1CDmfx1D/WyzsUwMpS9DpXJynL43MYeIhJcYghUkmTLXEqRwlDlayEGdbJEQ+foYR0tgbBuBmvyfiWE/VEARdcCLXNyF67RnErj2B2I11xiPaPvwyhi//huf7nJBco5AypodW/DbxkNSA869aCDVBca6p7THZHV0pxQg8/OOEm5+hBHPy1HV4L/0K6cHnCGWdcd+F9eg/vBYXmlbgchf7TJ89hMTAEwhf3ojY4OuIDn3E83zJ8zEF5xk0TWFDGo+phsyDyjle2QVIuhXSAidIsRST8uww/HCZoKfHnJH1IfrFFuDaK7jcvhD93UtxpW0tLh1Yiy/q1uCrT9ZgoO0BXO9aiYHDD8J55gV4Lu7g+a7yWI2CJ9mHjvE8NqRxmCqcGspDUlPOQGdVnSDRcyZh8JlwF+JnKBBGxnkN53ZuxMC+Vbi0ZxG+rrsP/XseRv+uDbj60UZcr3sCV+vX4quPV+D83gdwsXEjLrWzTaICzfR5huk8zyvgNqTbmuIZs4McA08eksKexvPMioEUo7r8/OMxbVIiyDYsHMWlHc8j0vgMXPsegWf/Bng+/jmcO1+gvwjvHiqnbhOG6x6Hs+k5XNz7LPp2vkJZOukR5FLWExW6DmxIt7UCJAYe1pYGAZRwm/ZIkPgllVUqoXEIL2FxX72DMJzFuV89De/2J+H63XoEdj6LyM7/gv/d1+HZ9hp8774K3w52dj98Dr4DL+Pk1idR/+pGIOpjPGXBlngZSu1wNw4TDaXCKcOkAMlsVvrNL1kiSjLQhYiJLYkZesPVCLYumIl9y+7BwGvr4N3yHOLvbkbind8ivnUbols3w7/tZTi2/Tvanl2MLQ/MwotLKwGPxxrFYLmCM5LM2JBubwVIyVFIJtQpDgkSN2ZyEYbBIBH5TBvCFTDRw9tzZmJP1b9gR/kPUFc9Bc2Ll6B92Sp0LVuLtmUrUL9wDrZX34O3Kn+IJ37091h3zz8DDipJT9AwQ9FpSmX4rijCXUFJCnkm1AmSNmjJlTRrNsAszzw7K0is67enz8D+2ZPQXDEdLfPnoKVmEVprV6BjyWq0Lrkf+6or8F75JLxXMxPPT/4hHp86hWGSdKK8JEKWgmxI4zTdpKhHLtU6mArTI+FMy9Wwm/CXtd4tpIfNMhq9zjFWOZ3YXj4HbdPK0D1jFrrKytFWVYXWRYvQtGQJGrg8UDkfe2bPwbZp0/DWnLnYMGUqEGRmF+dFQfglNL5aDJCkJ6XdurrVCFEtWYU/TW5nWZnWk39SVU7vBlK88lzDB7PmoWvKXPRNKUPPjHK0V81Dy+JqNC1dSEi1aKiYj7pZFXh3Sjk2l1cS0nQgxD5SIs5z5ss1/4LitxKGNIeQZtuQ/i/MhnR7syGVgNmQSsBsSCVgNqQSsP83kDrmV7ATW4OW5ffi4OJFaKysxr7yKhvS3TAb0u3NhlQCZkMqAbMhlYDZkErAbEglYEUAKZuHJCyExKVAaXoio8klfuUX80siqwnCCCEN4IOychyaXJaHNBvdlZXouHcBWpdZkD6prMHeOVX4bR7S45MJKUhI8bgpN0HymlcsBVBFASmT0yNkSeimSDNFrjkjPdon4eieBtZmiNXppbYSXIPvKnbPKUff1HL0TqJPn4sjBHJowSJ03rsYTfQDNYvwUeUCbJtZgc1zqrHpnhmAl8dGR8wcVYDlhVm04Be7FQEkBrqcwpsFKcal5mIFBvrPK/V8UkKTsTk4+GtcG/z9+KicKiKknsn0PKQjBNOVh7Sf67uqFmDrLAvS04Lk5rERQUrBT6VSV+Y0xW4TDkmPWxbe4pjMQ9JDLibMSUmCxJrUrLlrVEn92FNWhl6GusNTZ+HQLIa7eRXorq1FO0Odwl39glrsnF+Nt8vmElIVITHceVhKOGqeqAgRkq2k8ZhJCFhNdIHSDcajkFR7uhGPeYKA6arXTV26LxzuK4Q0G0enlqFr+kx0ls9CZ+U8dC6sRvuSWhyk19cuIKQqQpqdhzSVxxFSiAWmUhRpxgiV+UjR28RD0qMt8oylJkESCrVVUhA3GGC66v1GWoTkGsBHM2cbFXVNn05IM9BZVY7uhRXoXFKNJvr+2irsml+JtxkWN8+pzEPyWZCSvBxy1ktrbEi3swKklAVJahIk0y4xA9MNI4YLl1bzJGqsZOc17J41lym4lDQVXeXT0F0xC0dq56J7cRXaF1XjwIIK7J4/D1sZFn89d953ICl54FnNP6HYrQggKc1mdaWTbJ+s5EG3Q7I3Y70WQFzyiV7UfKG0HNfxftk8dExlW0RIPbOmoHfuDByrnovehVVUVBWaqivwMUNgAdLGSYTksSHduamGRELpdl5NSh4EiTmYQWISCP3MRZwQDSTnIN6ZXYmmGXNxeNp0HJsxBSfYLp2qmotTNVU4WlONlqoqQrLC3ZsV6icRko+QmDgYSOzMSqg2pPGY1MIKY60ZSEoeovQw1/R6dfNoK/fRo7Oq1GyCrVM4gF/+aBKa2A9q+7cp6Js8Gcenz8Bn82vQPW0mTixYiK6ahaivrsFWqugFtlvr6XA4GDcJmaE0HFPLZ0Mal5khH91bLEgMeWrO9ayfIOk5cwORAtJuPj9zvGwCmcEBdk4n4Z3p5WiZyX7StDKcnVeNMxU1OFuzGH30lvm1eG9Wubkx8jcrfow1UyYz52DSwUwyTlACHhzRgzbFbxMKSRVkhGJWeF2nlDwkTLtkQcqQCX9kjYb8IwgrVOn6T1MNQ4N4nf2jemZuXQTUWVaBun+dirPLV6KrdikaFi7Bx8tX4K3ahXhs2jQ2aGHEhocRCwbNeS9dvmpA2ZBuY6okZdhW2yNIelZWQ0NjyUM0oHcuUASEpBrVQKxr8AoPDKPyb/4C/102B7sIqb5yIZprl6N7xRo0L1uJ96mmLQsW4dWF96L8e99jmCNgvaeIZQSCUXNut1895eK3CYekoTmBKkAy4YyQRju1eZLpaAbBgJXf6Z0O5om9qA81f/e3eGn2XGxbuhz7f/ozvDVvPloffxrv3L8SGyZNw7zvf58yZJhkKB0avM6cIYNwhLkiYY1EpePitwmFRARmuCdsJJKHlEkw5Fkv1pBqUkFuC5OU6pO7KRXXO1Mcvmvc5icoljB0A/f+0w9Q9ld/jafYRt33D/+ImX/+l/yNMDXynYjB7/PocMM8kcwhFskgHs43dkVuEwpJqtDb6zQibf67SkFKaxxAz6Bb0xWGJHdMeImNy6FYEDeSPmKK4auhCwiP6H+BYZgMMr1OMlR+3U+JsAyHi3AZzpgeZpMxxFm+P2qFuatXhq1y5TakW5vqSFMQUpJ5jQxDkpSkZ5Y0v1SAlPIpvAEup4/peQ56UZQj7jYJhl5ZGElFEAwRlgZrA1RWjGVE1ZaxFP0/fixJ55IYvT6CU78rnEU2RkI2pFub6keVp6vbMuXblo++rUQ7aTVfmdrXeqJpzK19866JQjPdm183263Dv8HjOxuK1yYUkm3jMxtSCZgNqQTMhlQCZkMqAbMhlYDZkErAbEhFb8D/AI/krkgKSOVoAAAAAElFTkSuQmCC",
              fileName=
                  "modelica://Physiolibrary/Resources/Icons/bloodProperties.png"),
              Text(
              extent={{-100,-62},{100,-100}},
              lineColor={0,0,255},
              textString="%name")}));
    end LongTermControl;

    partial model ShortTermControl
    "Abstract submodel of short-term CVS parameters values"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-28,14},{12,54}}), iconTransformation(
              extent={{60,70},{100,110}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent=
               {{-100,-100},{100,100}}), graphics={Bitmap(extent={{-80,80},
                  {80,-80}},
              imageSource="",
              fileName="modelica://Physiolibrary/Resources/Icons/baroreflex.png"),
              Text(
              extent={{-100,-80},{100,-118}},
              lineColor={0,0,255},
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics));

    end ShortTermControl;

    model ScenarioControl "Abstract submodel of possible scenarios"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{60,70},{100,110}}),iconTransformation(
              extent={{60,70},{100,110}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),       graphics={
            Rectangle(
              extent={{-96,80},{98,-60}},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Text(
              extent={{-100,-60},{100,-98}},
              lineColor={0,0,255},
              textString="%name"),
            Line(
              points={{-96,96},{-96,-60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{-96,-60},{98,-60}},
              color={0,0,255},
              smooth=Smooth.None,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-42,-62},{40,-68}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="time")}),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics));
    end ScenarioControl;
  end Controlled;

  package Model
    extends Modelica.Icons.ExamplesPackage;

    package Meurs
        extends Modelica.Icons.ExamplesPackage;

      model HemodynamicsMeurs_shallow

        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = false,                                   useComplianceInput = false,
          volume_start=0.000106,
          ZeroPressureVolume=5e-05,
          Compliance=3.2185142219537e-08,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-94, 84}, {-68, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryArteriesResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 6.818059724437e-08) annotation(Placement(transformation(extent = {{-56, 85}, {-22, 111}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = false,                                                                                          useComplianceInput = false,
          volume_start=0.000518,
          ZeroPressureVolume=0.00035,
          Compliance=1.6486353437088e-07,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-10, 86}, {14, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryVeinResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{26, 86}, {56, 110}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=9.31e-05,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{74, 50}, {102, 78}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000144,
          ZeroPressureVolume=6e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{148, 48}, {178, 78}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-07, _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false) annotation(Placement(transformation(extent = {{184, 76}, {208, 52}})));
        Parts.AtrialElastance atrialElastance(EMIN=15998686.4898,
            EMAX=37330268.4762)
          annotation (Placement(transformation(extent={{80,94},{118,126}})));
        Parts.VentricularElastance ventricularElastance(EMIN=
              11999014.86735, EMAX=533289549.66)
          annotation (Placement(transformation(extent={{164,92},{200,124}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve(_Gon(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06, useLimitationInputs = false, _Goff(displayUnit = "ml/(mmHg.s)") = 0) annotation(Placement(visible = true, transformation(origin = {127, 64}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicArteries(useV0Input = false,                                                                                          useComplianceInput = false,
          useExternalPressureInput=true,
          volume_start=0.000204,
          ZeroPressureVolume=0.00014,
          Compliance=5.2429304151611e-09,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{168, 6}, {190, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicArteries(volume_start(displayUnit = "ml") = 0.000526, useV0Input = false, useExternalPressureInput = false,                               useComplianceInput = false,
          ZeroPressureVolume=0.00037,
          Compliance=1.3493607749463e-08)                                                                                                     annotation(Placement(transformation(extent = {{58, 6}, {84, 32}})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
            volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={134,18})));
        Physiolibrary.Hydraulic.Components.Conductor ArteryResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.2526028316622e-07) annotation(Placement(transformation(extent = {{94, 8}, {114, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor SystemicArterioralConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-09) annotation(Placement(transformation(extent = {{11, -9}, {-11, 9}}, rotation = 0, origin = {23, 17})));
        Physiolibrary.Hydraulic.Components.Conductor SmallVenuleConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-08) annotation(Placement(transformation(extent = {{14, -9}, {-14, 9}}, rotation = 0, origin = {-60, 17})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PeripheralVessels(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false,
          volume_start=0.000283,
          ZeroPressureVolume=0.000185,
          Compliance=2.8652352197304e-08)                                                                                                     annotation(Placement(transformation(extent={{-26,10},
                  {-6,30}})));
        Physiolibrary.Hydraulic.Components.Conductor VeinsResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.3256834918868e-08) annotation(Placement(transformation(extent = {{-120, 6}, {-148, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor CentralVenousResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{-208, 8}, {-232, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicVeins(useV0Input = false,                                   useComplianceInput = false,
          useExternalPressureInput=true,
          volume_start=0.00148,
          ZeroPressureVolume=0.00119,
          Compliance=4.1178380513927e-07,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-192, 4}, {-164, 32}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicVeins(useV0Input = false, useExternalPressureInput = false,                                                     useComplianceInput = false,
          volume_start=0.00153,
          ZeroPressureVolume=0.001,
          Compliance=4.4403645290063e-07)                                                                                                     annotation(Placement(transformation(extent = {{-116, 4}, {-90, 30}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel RightAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=0.000135,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-242, 44}, {-214, 72}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000131,
          ZeroPressureVolume=4e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-168, 42}, {-138, 72}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve1(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
          _Gon(displayUnit="ml/(mmHg.s)") = 2.4999552322936e-06)                                                                                                     annotation(Placement(transformation(extent = {{-132, 70}, {-108, 46}})));
        Parts.AtrialElastance atrialElastance1(EMIN=6666119.37075,
            EMAX=19998358.11225)
          annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
        Parts.VentricularElastance ventricularElastance1(EMIN=
              7599376.082655, EMAX=65327969.83335)
          annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve1(_Gon(displayUnit = "ml/(mmHg.s)") = 2.497705047566e-06, _Goff = 0, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-189, 58}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(
              extent={{-9,-6},{9,6}},
              rotation=0,
              origin={-123,118})));
      equation
        connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation(Line(points = {{-81, 97}, {-68.5, 97}, {-68.5, 98}, {-56, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{-22, 98}, {2, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation(Line(points = {{2, 98}, {26, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftAtrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{88, 64}, {114, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, atrioVentricleValve.q_out) annotation(Line(points = {{163, 63}, {151.5, 63}, {151.5, 64}, {140, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, ventricleArteryValve.q_in) annotation(Line(points = {{163, 63}, {173.5, 63}, {173.5, 64}, {184, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.compliance, ventricularElastance.Ct) annotation(Line(points={{163,75},
                {163,82},{212,82},{212,111.68},{203.42,111.68}},                                                                                                color = {0, 0, 127}, smooth = Smooth.None));
        connect(PulmonaryVeinResistance.q_out, LeftAtrium.q_in) annotation(Line(points = {{56, 98}, {74, 98}, {74, 64}, {88, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{94, 18}, {80, 18}, {80, 19}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_out, inertia.q_out) annotation(Line(points={{114,18},
                {124,18}},                                                                              color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(inertia.q_in, IntraThoracicArteries.q_in) annotation(Line(points={{144,18},
                {162,18},{162,17},{179,17}},                                                                                     color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicArteries.q_in, ventricleArteryValve.q_out) annotation(Line(points = {{179, 17}, {216, 17}, {216, 64}, {208, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_out, PeripheralVessels.q_in) annotation(Line(points={{12,17},
                {-2,17},{-2,20},{-16,20}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PeripheralVessels.q_in, SmallVenuleConductance.q_in) annotation(Line(points={{-16,20},
                {-32,20},{-32,17},{-46,17}},                                                                                                color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{34, 17}, {71, 17}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation(Line(points = {{-208, 18}, {-178, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation(Line(points = {{-178, 18}, {-164, 18}, {-164, 17}, {-148, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation(Line(points = {{-120, 17}, {-103, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ExtrathoracicVeins.q_in, SmallVenuleConductance.q_out) annotation(Line(points = {{-103, 17}, {-74, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.q_in, atrioVentricleValve1.q_in) annotation(Line(points = {{-228, 58}, {-202, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, atrioVentricleValve1.q_out) annotation(Line(points = {{-153, 57}, {-164.5, 57}, {-164.5, 58}, {-176, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation(Line(points = {{-153, 57}, {-142.5, 57}, {-142.5, 58}, {-132, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_out, RightAtrium.q_in) annotation(Line(points = {{-232, 18}, {-250, 18}, {-250, 58}, {-228, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.compliance, atrialElastance1.Ct) annotation(Line(points = {{-228, 69.2}, {-228, 92}, {-202.39, 92}, {-202.39, 101.84}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricleArteryValve1.q_out, PulmonaryArteries.q_in) annotation(Line(points = {{-108, 58}, {-92, 58}, {-92, 97}, {-81, 97}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.compliance, ventricularElastance1.Ct) annotation(Line(points = {{-153, 69}, {-153, 80}, {-126, 80}, {-126, 108.91}, {-147.15, 108.91}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(LeftAtrium.compliance, atrialElastance.Ct) annotation(Line(points={{88,75.2},
                {88,86},{122,86},{122,96},{121.61,96},{121.61,109.84}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(HeartRate.y, atrialElastance1.HR) annotation(Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance1.HR, HeartRate.y) annotation(Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(atrialElastance.HR, HeartRate.y) annotation(Line(points={{99,
                122.8},{99,128.5},{-229.25,128.5}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance.HR, HeartRate.y) annotation(Line(points={{182,
                120.8},{182,128.5},{-229.25,128.5}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryArteries.externalPressure)
          annotation (Line(
            points={{-111.75,118},{-70.6,118},{-70.6,107.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{-111.75,118},{11.6,118},{11.6,107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{76,84},{76,120},{11.6,120},{11.6,
                107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, rightVentricle.externalPressure)
          annotation (Line(
            points={{-111.75,118},{-104,118},{-104,76},{-141,76},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(RightAtrium.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-216.8,69.2},{-216.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicVeins.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-166.8,29.2},{-166.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicArteries.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{187.8,25.8},{187.8,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-280,-140},{280,180}},      preserveAspectRatio=false),   graphics), Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics),
          experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeurs_shallow;

      model HemodynamicsMeurs
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
            Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeurs;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;

        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PulmonaryArteries(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000106,
            ZeroPressureVolume=5e-05,
            ExternalPressure=-533.28954966,
            Elastance=31064116.267695)
            annotation (Placement(transformation(extent={{-82,-12},{-58,12}})));
          Physiolibrary.Hydraulic.Components.Resistor PulmonaryArteriesResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 14665462.61565)
            annotation (Placement(transformation(extent={{-38,-14},{-10,14}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PulmonaryVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000518,
            ZeroPressureVolume=0.00035,
            ExternalPressure=-533.28954966,
            Elastance=6066168.6273825)
            annotation (Placement(transformation(extent={{8,-12},{32,12}})));
          Physiolibrary.Hydraulic.Components.Resistor PulmonaryVeinResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{46,-12},{70,12}})));
        equation
          connect(q_in, PulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-70,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation (
             Line(
              points={{-70,0},{-38,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation (
              Line(
              points={{-10,0},{4,0},{4,2.22045e-16},{20,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation (Line(
              points={{20,0},{46,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeinResistance.q_out, q_out) annotation (Line(
              points={{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance IntraThoracicArteries(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000204,
            ZeroPressureVolume=0.00014,
            ExternalPressure=-533.28954966,
            Elastance=190651014.00345)
            annotation (Placement(transformation(extent={{78,-6},{92,8}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
              volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent={{-6,-5},
                    {6,5}},                                                                                                    rotation = 180, origin={70,1})));
          Physiolibrary.Hydraulic.Components.Resistor  ArteryResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 7999343.2449)
            annotation (Placement(transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={55,1})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance ExtrathoracicArteries(
            volume_start(displayUnit="ml") = 0.000526,
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            ZeroPressureVolume=0.00037,
            Elastance=74127247.40274)
            annotation (Placement(transformation(extent={{38,-22},{54,-6}})));
          Physiolibrary.Hydraulic.Components.Resistor  SystemicArterioralResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 106657909.932)
            annotation (Placement(transformation(
                extent={{9,-8},{-9,8}},
                rotation=0,
                origin={27,-14})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PeripheralVessels(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000283,
            ZeroPressureVolume=0.000185,
            Elastance=34930465.50273)
            annotation (Placement(transformation(extent={{2,-36},{16,-22}})));
          Physiolibrary.Hydraulic.Components.Resistor  SmallVenuleResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 26664477.483)
            annotation (Placement(transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={-7,-29})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance ExtrathoracicVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00153,
            ZeroPressureVolume=0.001,
            Elastance=2253148.3473135)
            annotation (Placement(transformation(extent={{-32,-22},{-14,-6}})));
          Physiolibrary.Hydraulic.Components.Resistor  VeinsResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 11999014.86735)
            annotation (Placement(transformation(extent={{-32,-22},{-48,-6}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance IntraThoracicVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00148,
            ZeroPressureVolume=0.00119,
            ExternalPressure=-533.28954966,
            Elastance=2426467.450953)
            annotation (Placement(transformation(extent={{-66,-8},{-48,8}})));
          Physiolibrary.Hydraulic.Components.Resistor  CentralVenousResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{-74,-8},{-90,8}})));
        equation
          connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation (Line(
              points={{-32,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{76,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ArteryResistance.q_in, inertia.q_out) annotation (Line(
              points={{62,1},{64,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, SystemicArterioralResistance.q_in)
            annotation (Line(
              points={{46,-14},{36,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_out, CentralVenousResistance.q_out) annotation (Line(
              points={{-100,0},{-90,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation (
              Line(
              points={{-74,0},{-57,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation (Line(
              points={{-57,0},{-48,0},{-48,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, q_in) annotation (Line(
              points={{100,0},{95,0},{95,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{100,0},{92,0},{92,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_out, ExtrathoracicVeins.q_in) annotation (
              Line(
              points={{-14,-29},{-14,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, ArteryResistance.q_out) annotation (Line(
              points={{46,-14},{46,1},{48,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_in, PeripheralVessels.q_in) annotation (Line(
              points={{0,-29},{9,-29}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PeripheralVessels.q_in, SystemicArterioralResistance.q_out)
            annotation (Line(
              points={{9,-29},{9,-14},{18,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Systemic;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.ElasticVessel rightAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000135,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-68,8},
                    {-40,36}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance atrioVentricleValve1(
            _Goff=0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
                visible=true, transformation(
                origin={-14,22},
                extent={{-12,12},{12,-12}},
                rotation=0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000131,
            ZeroPressureVolume=4e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{8,8},{
                    36,36}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance ventricleArteryValve1(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{42,34},{66,10}})));
          VentricularElastance ventricularElastance1(EMIN=7599376.082655, EMAX=
                65327969.83335)
            annotation (Placement(transformation(extent={{-20,54},{10,88}})));
          AtrialElastance atrialElastance1(EMIN=6666119.37075, EMAX=
                19998358.11225)
            annotation (Placement(transformation(extent={{-94,54},{-56,86}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin={59,92},         extent={{-7,-6},
                    {7,6}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=9.31e-05,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{50,-86},
                    {78,-58}})));
          AtrialElastance atrialElastance(EMIN=15998686.4898, EMAX=
                37330268.4762)
            annotation (Placement(transformation(extent={{8,-50},{46,-18}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance atrioVentricleValve(
            useLimitationInputs=false,
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
                visible=true, transformation(
                origin={24,-72},
                extent={{-12,12},{12,-12}},
                rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000144,
            ZeroPressureVolume=6e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-30,-86},
                    {-2,-58}})));
          VentricularElastance ventricularElastance(EMIN=11999014.86735, EMAX=
                533289549.66) annotation (Placement(transformation(extent={{-66,
                    -46},{-30,-14}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance ventricleArteryValve(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 1066579.09932) annotation (Placement(
                transformation(
                extent={{-12,12},{12,-12}},
                rotation=180,
                origin={-58,-72})));
        equation
          connect(rightHeartInflow, rightAtrium.q_in) annotation (Line(
              points={{-100,40},{-70,40},{-70,22},{-54,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightAtrium.q_in, atrioVentricleValve1.q_in) annotation (Line(
              points={{-54,22},{-26,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve1.q_out, rightVentricle.q_in) annotation (
              Line(
              points={{-2,22},{22,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation (
              Line(
              points={{22,22},{42,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve1.q_out, rightHeartOutflow) annotation (
              Line(
              points={{66,22},{82,22},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, leftAtrium.q_in) annotation (Line(
              points={{100,-20},{82,-20},{82,-72},{64,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftAtrium.q_in, atrioVentricleValve.q_in) annotation (Line(
              points={{64,-72},{36,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve.q_out, leftVentricle.q_in) annotation (
              Line(
              points={{12,-72},{-16,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, ventricleArteryValve.q_in) annotation (
              Line(
              points={{-16,-72},{-46,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-70,-72},{-84,-72},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, rightAtrium.compliance) annotation (Line(
              points={{-52.39,69.84},{-52.39,48.92},{-54,48.92},{-54,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, rightVentricle.compliance)
            annotation (Line(
              points={{12.85,74.91},{22,74.91},{22,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, HeartRate.y) annotation (Line(
              points={{-75,82.8},{-75,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.HR, HeartRate.y) annotation (Line(
              points={{-5,84.6},{-5,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, HeartRate.y) annotation (Line(
              points={{-48,-17.2},{-48,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.HR, HeartRate.y) annotation (Line(
              points={{27,-21.2},{27,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, leftAtrium.compliance) annotation (Line(
              points={{49.61,-34.16},{64,-34.16},{64,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, leftVentricle.compliance)
            annotation (Line(
              points={{-26.58,-26.32},{-16,-26.32},{-16,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Heart;

        model AtrialElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
          Physiolibrary.Types.HydraulicElastance Et "elasticity";
          parameter Physiolibrary.Types.HydraulicElastance EMIN
          "Diastolic elastance";
        parameter Boolean useEs_extInput = false
          "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
          "Maximum systolic elastance"           annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
      protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          if time - T0 < Tas then
            Et = EMIN + (es_int - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas);
          else
            Et = EMIN;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-100, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent={{
                      -98,82},{98,24}},                                                                                                    lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Atrial elastance"), Line(points=  {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{72, 4}, {102, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;

        model VentricularElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
          "ventricular elasticity"                                                         annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
          Modelica.Blocks.Interfaces.RealOutput Et0
          "normalized ventricular elasticity (0..1)"                                           annotation(Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
          Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation(Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
          Physiolibrary.Types.HydraulicElastance Et;
          parameter Physiolibrary.Types.HydraulicElastance EMIN
          "Diastolic elastance ";
          constant Real Kn = 0.57923032735652;
          //Kn is always = 0.5792303273565197
          //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
          //Equation to calculate normalized elastance ET0 was:
          //Et0=EMIN+(EMAX-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
        parameter Boolean useEs_extInput = false
          "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
          "Maximum systolic elastance"           annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/EMAX)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
      protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          HeartInterval = time - T0;
          Et = EMIN + (es_int - EMIN) * Et0;
          if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
            Et0 = (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn;
          else
            Et0 = 0;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-82, 82}, {80, 24}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ventricular elastance"), Line(points=  {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{96, -32}, {68, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Et0"), Text(extent=  {{42, -72}, {88, -84}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Heart interval"), Text(extent=  {{62, 30}, {96, 8}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time Tas, T0, Tvs;
          parameter Physiolibrary.Types.Time Tav(displayUnit = "s") = 0.01
          "atrioventricular delay";
          discrete Modelica.SIunits.Time HP(start = 0) "heart period";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-12, 68}, {28, 108}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80})));
        equation
          b = time - pre(T0) >= pre(HP) "true if new pulse occurs";
          when {initial(), b} then
            T0 = time "start time of cardiac cycle";
            HP = 1 / HR "update heart period per heart rate";
            Tas = 0.03 + 0.09 * HP "duration of atrial systole";
            Tvs = 0.16 + 0.2 * HP "duration of ventricular systole";
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent={{
                      -64,102},{-6,78}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR")}));
        end HeartIntervals;
      end Parts;

      model HemodynamicsMeursBVControl
        extends Cardiovascular.Controlled.System(
          redeclare replaceable ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl heart,
          redeclare replaceable ControlledParts.SystemicControl
            systemicCirculation,
          redeclare replaceable ControlledParts.Baroreflex
            shortTermControl,
          redeclare replaceable Cardiovascular.Model.Control.BloodVolumeControl
            longTermControl);
      /*    redeclare CardiovascularDevel.Model.Meurs.Variants.Parts.Stenosis
      stenosisControl(aorticstenosis(InitialResistance(displayUnit="(mmHg.s)/ml")=
             1066579.09932, FinalResistance(displayUnit="(mmHg.s)/ml") = 1066579.09932),
        AVBackFlowConductance(k=1.2501026264094e-15)),*/

        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
            Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeursBVControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;

        model PulmonaryControl
          extends Parts.Pulmonary;
          extends Controlled.Pulmonary;
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,26})));
        equation
          connect(PulmonaryArteries.volume, add.u1) annotation (Line(
              points={{-62.8,-12},{-62,-12},{-62,-26},{-6,-26},{-6,20},{-14,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PulmonaryVeins.volume, add.u2) annotation (Line(
              points={{27.2,-12},{28,-12},{28,-24},{34,-24},{34,32},{-14,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{-37,26},{-58,26},{-58,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Parts.Systemic(
            SmallVenuleResistance(useConductanceInput=true),
            IntraThoracicArteries(
              useV0Input=false,
              useExternalPressureInput=false,
              useComplianceInput=false),
            IntraThoracicVeins(useComplianceInput=true));
          extends Controlled.Systemic;
          Modelica.Blocks.Math.Sum sum1(nin=5) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=180,
                origin={-61,-39})));
          Cardiovascular.Model.Control.MeanAortaPressureMeasurement aortaPressureMeasurement
            annotation (Placement(transformation(extent={{70,10},{90,30}})));
        equation
          connect(IntraThoracicVeins.volume, sum1.u[1]) annotation (Line(
              points={{-51.6,-8},{-55,-8},{-55,-38.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.systemicBloodVolume) annotation (Line(
              points={{-66.5,-39},{-68,-39},{-68,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aortaPressureMeasurement.q_in, inertia.q_in) annotation (Line(
              points={{76,14},{76,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicVeins.volume, sum1.u[2]) annotation (Line(
              points={{-17.6,-22},{-16,-22},{-16,-38.6},{-55,-38.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PeripheralVessels.volume, sum1.u[3]) annotation (Line(
              points={{13.2,-36},{14,-36},{14,-39},{-55,-39}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.volume, sum1.u[4]) annotation (Line(
              points={{50.8,-22},{52,-22},{52,-39.4},{-55,-39.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(IntraThoracicArteries.volume, sum1.u[5]) annotation (Line(
              points={{89.2,-6},{88,-6},{88,-40},{-55,-40},{-55,-39.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(SmallVenuleResistance.cond, busConnector.peripheralconductance)
            annotation (Line(
              points={{-7,-24.8},{-7,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(IntraThoracicVeins.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-57,6.4},{-57,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{87,23},{96,23},{96,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl
          extends Parts.Heart(
            ventricularElastance1(useEs_extInput=true),
            ventricularElastance(useEs_extInput=true),
            redeclare Types.Constants.FrequencyControl HeartRate,
            ventricleArteryValve(useLimitationInputs=false));
          extends Controlled.Heart;
          Modelica.Blocks.Math.Sum sum1(nin=4)
            annotation (Placement(transformation(extent={{-80,-8},{-94,6}})));
        equation
          connect(rightAtrium.volume, sum1.u[1]) annotation (Line(
              points={{-45.6,8},{-64,8},{-64,-2.05},{-78.6,-2.05}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.volume, sum1.u[2]) annotation (Line(
              points={{30.4,8},{32,8},{32,-1.35},{-78.6,-1.35}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, sum1.u[3]) annotation (Line(
              points={{-7.6,-86},{-6,-86},{-6,-0.65},{-78.6,-0.65}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftAtrium.volume, sum1.u[4]) annotation (Line(
              points={{72.4,-86},{72,-86},{72,0.05},{-78.6,0.05}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
              points={{-94.7,-1},{-98,-1},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance1.Es_ext, busConnector.rvcompliance)
            annotation (Line(
              points={{-17,84.6},{-68,84.6},{-68,88},{-98,88},{-98,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance.Es_ext, busConnector.lvcompliance)
            annotation (Line(
              points={{-62.4,-17.2},{-62.4,-14},{-62,-14},{-62,-10},{-98,-10},{
                  -98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(HeartRate.c, busConnector.heartrate) annotation (Line(
              points={{62.5,92},{74,92},{74,102},{-98,102},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartControl;

        model Baroreflex
          extends Model.Control.Baroreflex(baroreceptor(
              activationDelay=1,
              PAOmedia=12974.201470097,
              HR0Param=1.2,
              EV0right=65327969.83335,
              EV0left=533289549.66,
              EV0venacava=4.1215883592719e-07,
              RS0=26664477.483));
        end Baroreflex;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=2426467.450953, FinalElastance=2426467.450953),
            aorticstenosis(InitialResistance(displayUnit="(mmHg.s)/ml")=
                1066579.09932, FinalResistance(displayUnit="(mmHg.s)/ml")=
                1066579.09932),
            mitralvalvestenosis(InitialResistance=399967.162245,
                FinalResistance=399967.162245));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(ventricleArteryValve(useLimitationInputs=true));
        equation
          connect(ventricleArteryValve.Gon, busConnector.avoutflowresistance)
            annotation (Line(
              points={{-50.8,-60},{-50.8,-54},{-98,-54},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricleArteryValve.Goff, busConnector.avbackflowconductance)
            annotation (Line(
              points={{-65.2,-60},{-65.2,-54},{-98,-54},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsMeursBVControl(redeclare
          ControlledParts.AorticValveStenosisScenario   scenarioControl(
              aorticstenosis(FinalResistance(displayUnit="(mmHg.s)/ml")=
                10665790.9932)), redeclare
          ControlledParts.AorticValveHeartControl   heart);
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model Bleeding
        extends HemodynamicsMeursBVControl(redeclare
          Scenario.BleedingTransfusionScenario   scenarioControl(
            BloodTrans=0,
            Tbd=300,
            BloodLoss=0.0005,
            Tts=1200,
            Ttd=600), longTermControl(redeclare
            Control.BloodVolume.PlasmaBleeding   plasma(hemorrhage(
                  useSolutionFlowInput=true)), redeclare
            Control.BloodVolume.RBCBleeding   redBloodCells));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Meurs;

    package Burkhoff
        extends Modelica.Icons.ExamplesPackage;

      model HemodynamicsBurkhoff_shallow
        //Cardiovascular.Hydraulic.Components.Resistor
        //Cardiovascular.Hydraulic.Components.IdealValveNorm
        import Physiolibrary.Hydraulic.Components.*;
        ElasticVessel Cvs(
          volume_start=0.002701,
          ZeroPressureVolume=0.00223,
          Compliance=5.2504310309196e-07)                                                                                                     annotation(Placement(transformation(extent = {{-72, 12}, {-52, 32}})));
      Resistor Ras(Resistance=
              99991790.56125)
          annotation (Placement(transformation(extent={{-28,12},{-48,32}})));
        ElasticVessel Cas(
          volume_start=0.000834,
          ZeroPressureVolume=0.0007,
          Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent = {{-24, 12}, {-4, 32}})));
        Resistor Rcs(Resistance=
              3199737.29796)
          annotation (Placement(transformation(extent={{18,12},{-2,32}})));
        ElasticVessel Caprox(
          volume_start=3.8e-05,
          ZeroPressureVolume=3e-05,
          Compliance=7.5006157584566e-10,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{20, 12}, {40, 32}})));
        Resistor Rcprox(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{62,12},{42,32}})));
        IdealValveResistance AOV(_Ron=
              266644.77483) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-4})));
        Parts.ElasticVesselWithSVandP LV(
          useComplianceInput=true,
          volume_start=0.000125,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{92,-14},{112,6}})));
        IdealValveResistance MV(_Ron=
              333305.9685375) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={122,-4})));
        Parts.ElasticVesselWithSVandP LA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=8.1e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{158,-14},{178,6}})));
        Resistor Rvp(Resistance=
              1999835.811225)
          annotation (Placement(transformation(extent={{206,-2},{186,18}})));
        Resistor Rvs(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{-84,-50},{-64,-30}})));
        Parts.ElasticVesselWithSVandP RA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=7.3e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
        IdealValveResistance TV(_Ron(
              displayUnit="(mmHg.s)/ml") = 333305.9685375) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={4,-40})));
        Parts.ElasticVesselWithSVandP RV(
          useComplianceInput=true,
          ExternalPressure=0,
          volume_start=0.000112,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{16,-50},{36,-30}})));
        IdealValveResistance PV(_Ron=
              266644.77483) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={50,-40})));
        Resistor Rcsp(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
        ElasticVessel Cap(
          volume_start=0.000802,
          ZeroPressureVolume=0.0006,
          Compliance=1.5001231516913e-07,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{144, -48}, {164, -28}})));
        Resistor Rcp(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{122,-48},{142,-28}})));
        ElasticVessel Cvp(
          volume_start=0.000154,
          ZeroPressureVolume=0.0001,
          Compliance=5.2504310309196e-08,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{184, -48}, {204, -28}})));
        ElasticVessel Capprox(
          volume_start=3e-05,
          ZeroPressureVolume=2e-05,
          Compliance=7.5006157584566e-09,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{98, -48}, {118, -28}})));
        Resistor Rap(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{164,-48},{184,-28}})));
        Parts.AtrialElastance RAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=26664477.483)
          annotation (Placement(transformation(extent={{-56,-18},{-32,2}})));
        Parts.VentricularElastance RVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=50662507.2177)
          annotation (Placement(transformation(extent={{14,-14},{36,6}})));
        Parts.AtrialElastance LAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=33330596.85375) annotation (Placement(transformation(
              extent={{-9,-8},{9,8}},
              rotation=0,
              origin={167,32})));
        Parts.VentricularElastance LVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          AVDelay(displayUnit="s"),
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=205316476.6191)
          annotation (Placement(transformation(extent={{88,16},{112,36}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
              1.3333333333333)                                                      annotation(Placement(transformation(extent={{-86,34},
                  {-78,42}})));
        Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=180,
              origin={-13,-55})));
        Modelica.Blocks.Math.Add3 add
                                     annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-30,-32})));
        Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=0,
              origin={139,-19})));
        Modelica.Blocks.Math.Add3 add1
                                      annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={176,14})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
          annotation (Placement(transformation(extent={{100,-22},{112,-12}})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
          annotation (Placement(transformation(
              extent={{7,-5},{-7,5}},
              rotation=0,
              origin={19,-53})));
        Modelica.Blocks.Math.Add add2 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={35,-25})));
        Modelica.Blocks.Math.Add add3 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={109,11})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=0)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={50,-4})));
      equation
        connect(AOV.q_in, LV.q_in) annotation(Line(points={{90,-4},{102,-4}},    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LV.q_in, MV.q_out) annotation(Line(points={{102,-4},{112,-4}},                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TV.q_out, RV.q_in) annotation(Line(points = {{14, -40}, {26, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RV.q_in, PV.q_in) annotation(Line(points = {{26, -40}, {40, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PV.q_out, Rcsp.q_in) annotation(Line(points = {{60, -40}, {70, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcsp.q_out, Capprox.q_in) annotation(Line(points = {{90, -40}, {98, -40}, {98, -38}, {108, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Capprox.q_in, Rcp.q_in) annotation(Line(points = {{108, -38}, {122, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcp.q_out, Cap.q_in) annotation(Line(points = {{142, -38}, {154, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cap.q_in, Rap.q_in) annotation(Line(points = {{154, -38}, {164, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rap.q_out, Cvp.q_in) annotation(Line(points = {{184, -38}, {194, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(heartRate.y, RAElastance.HR) annotation (Line(
            points={{-77,38},{-74,38},{-74,6},{-66,6},{-66,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.HR, RAElastance.HR) annotation (Line(
            points={{15.21,4.3},{-2,4.3},{-2,6},{-58,6},{-58,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.HR, heartRate.y) annotation (Line(
            points={{158.99,38.64},{128,38.64},{128,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.HR, heartRate.y) annotation (Line(
            points={{89.32,34.3},{62,34.3},{62,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.StressedVolume, RAElastance.Vs) annotation (Line(
            points={{-54.4,-29.8},{-54.4,-19.9},{-54.32,-19.9},{-54.32,-16.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.StressedVolume, LVElastance.Vs) annotation (Line(
            points={{97.6,6.2},{97.6,16},{89.68,16},{89.68,17.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LA.StressedVolume, LAElastance.Vs) annotation (Line(
            points={{163.6,6.2},{159.26,6.2},{159.26,24.96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.q_in, TV.q_in) annotation(Line(points = {{-50, -40}, {-6, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LA.q_in, MV.q_in) annotation(Line(points={{168,-4},{132,-4}},                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cvp.q_in, Rvp.q_in) annotation (Line(
            points={{194,-38},{206,-38},{206,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvp.q_out, LA.q_in) annotation (Line(
            points={{186,8},{186,-4},{168,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(AOV.q_out, Rcprox.q_in) annotation (Line(
            points={{70,-4},{70,22},{62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
            points={{42,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_in, Caprox.q_in) annotation (Line(
            points={{18,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_out, Cas.q_in) annotation (Line(
            points={{-2,22},{-14,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cas.q_in, Ras.q_in) annotation (Line(
            points={{-14,22},{-28,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ras.q_out, Cvs.q_in) annotation (Line(
            points={{-48,22},{-62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cvs.q_in, Rvs.q_in) annotation (Line(
            points={{-62,22},{-84,22},{-84,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvs.q_out, RA.q_in) annotation (Line(
            points={{-64,-40},{-50,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RAVGain.y, add.u1) annotation (Line(
            points={{-18.5,-55},{-18.5,-35.2},{-25.2,-35.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.Ct, LV.compliance) annotation (Line(
            points={{103.6,17.4},{103.6,17.21},{102,17.21},{102,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.Ct, LA.compliance) annotation (Line(
            points={{169.7,25.12},{169.7,18},{168,18},{168,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Ct, RV.compliance) annotation (Line(
            points={{28.3,-12.6},{28.3,-25.79},{26,-25.79},{26,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Ct, RA.compliance) annotation (Line(
            points={{-40.4,-16.6},{-40.4,-26},{-50,-26},{-50,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.StressedVolume, RVElastance.Vs) annotation (Line(
            points={{21.6,-29.8},{21.6,-24.9},{15.54,-24.9},{15.54,-12.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.q_in, pressureMeasure.q_in) annotation (Line(
            points={{102,-4},{103.6,-4},{103.6,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.q_in, RV.q_in) annotation (Line(
            points={{21.8,-56},{24,-56},{24,-40},{26,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.pressure, RAVGain.u) annotation (Line(
            points={{14.8,-55},{-7,-55}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.u3, add1.u3) annotation (Line(
            points={{172.8,18.8},{172.8,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Pt, add2.u2) annotation (Line(
            points={{34.02,-12.6},{34.02,-18.9},{33.2,-18.9},{33.2,-21.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.externalPressure, add2.y) annotation (Line(
            points={{34,-32},{34,-28.3},{35,-28.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, RA.externalPressure) annotation (Line(
            points={{-34.4,-32},{-42,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Pt, add.u3) annotation (Line(
            points={{-34.16,-16.6},{-34.16,-26},{-20,-26},{-20,-28.8},{-25.2,
                -28.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LV.externalPressure, add3.y) annotation (Line(
            points={{110,4},{110,7.7},{109,7.7}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LA.externalPressure, add1.y) annotation (Line(
            points={{176,4},{176,9.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pressureMeasure.pressure, LAVGain.u) annotation (Line(
            points={{109.6,-19},{120.8,-19},{120.8,-19},{133,-19}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LAVGain.y, add1.u1) annotation (Line(
            points={{144.5,-19},{184,-19},{184,18.8},{179.2,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Caprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,30},{38,30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add3.u2) annotation (Line(
            points={{55,-4},{66,-4},{66,14.6},{107.2,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LVElastance.Pt, add3.u1) annotation (Line(
            points={{109.84,17.4},{109.84,16.7},{110.8,16.7},{110.8,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add1.u2, LAElastance.Pt) annotation (Line(
            points={{176,18.8},{176,25.12},{174.38,25.12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add1.u3) annotation (Line(
            points={{55,-4},{66,-4},{66,24},{172.8,24},{172.8,18.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Capprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cap.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{162,-30},{162,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cvp.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{202,-30},{202,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add2.u1) annotation (Line(
            points={{55,-4},{66,-4},{66,-21.4},{36.8,-21.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add.u2, Capprox.externalPressure) annotation (Line(
            points={{-25.2,-32},{-16,-32},{-16,-18},{66,-18},{66,-26},{116,-26},
                {116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                  -100},{220,100}}),                                                                           graphics), Icon(coordinateSystem(extent = {{-100, -100}, {220, 100}})),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoff_shallow;

      model HemodynamicsBurkhoff
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare replaceable Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001), Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoff;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;

        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
          import Physiolibrary.Hydraulic.Components.*;
        Resistor Rcsp(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-84,-10},{-64,10}})));
        ElasticVessel      Capprox(
            volume_start=3e-05,
            ZeroPressureVolume=2e-05,
            Compliance=7.5006157584566e-09)                                                                                               annotation(Placement(transformation(extent={{-56,-10},
                    {-36,10}})));
        Resistor Rcp(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));
        ElasticVessel      Cap(
            volume_start=0.000802,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07)                                                                                                annotation(Placement(transformation(extent={{-8,-10},
                    {12,10}})));
        Resistor Rap(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{12,-10},{32,10}})));
        ElasticVessel      Cvp(
            volume_start=0.000154,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08)                                                                                                annotation(Placement(transformation(extent={{34,-10},
                    {54,10}})));
        Resistor Rvp(Resistance(
                displayUnit="(mmHg.s)/ml") = 1999835.811225)
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        equation
          connect(q_in, Rcsp.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcsp.q_out, Capprox.q_in) annotation (Line(
              points={{-64,2.22045e-16},{-46,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Capprox.q_in, Rcp.q_in) annotation (Line(
              points={{-46,2.22045e-16},{-32,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcp.q_out, Cap.q_in) annotation (Line(
              points={{-12,2.22045e-16},{2,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cap.q_in, Rap.q_in) annotation (Line(
              points={{2,2.22045e-16},{12,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rap.q_out, Cvp.q_in) annotation (Line(
              points={{32,2.22045e-16},{44,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvp.q_in, Rvp.q_in) annotation (Line(
              points={{44,2.22045e-16},{60,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvp.q_out, q_out) annotation (Line(
              points={{80,2.22045e-16},{88,2.22045e-16},{88,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
            import Physiolibrary.Hydraulic.Components.*;
        Resistor Rcprox(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{86,-10},{66,10}})));
        ElasticVessel Caprox(
            volume_start=3.8e-05,
            ZeroPressureVolume=3e-05,
            Compliance=7.5006157584566e-10)                                                                                                     annotation(Placement(transformation(extent={{44,-10},
                    {64,10}})));
        Resistor Rcs(Resistance(
                displayUnit="(mmHg.s)/ml") = 3199737.29796)
            annotation (Placement(transformation(extent={{42,-10},{22,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cas(
            volume_start=0.000834,
            ZeroPressureVolume=0.0007,
            Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent={{0,-10},
                    {20,10}})));
        Resistor Ras(Resistance(
                displayUnit="(mmHg.s)/ml") = 99991790.56125)
            annotation (Placement(transformation(extent={{-2,-10},{-22,10}})));
        ElasticVessel Cvs(
            volume_start=0.002701,
            ZeroPressureVolume=0.00223,
            useComplianceInput=false,
            Compliance=5.2504310309196e-07)
            annotation (Placement(transformation(extent={{-48,-10},{-28,10}})));
        Resistor Rvs(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-56,-10},{-76,10}})));
        equation
          connect(Rcprox.q_in, q_in) annotation (Line(
              points={{86,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
              points={{66,0},{54,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Caprox.q_in, Rcs.q_in) annotation (Line(
              points={{54,0},{42,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcs.q_out, Cas.q_in) annotation (Line(
              points={{22,0},{10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cas.q_in, Ras.q_in) annotation (Line(
              points={{10,0},{-2,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ras.q_out, Cvs.q_in) annotation (Line(
              points={{-22,0},{-38,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvs.q_in, Rvs.q_in) annotation (Line(
              points={{-38,0},{-56,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvs.q_out, q_out) annotation (Line(
              points={{-76,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Systemic;

        model Heart "heart with modified elastance"
          extends Cardiovascular.Interfaces.Heart;
        Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
        Parts.AtrialElastance atrialElastance1(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={31,3})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
        Parts.VentricularElastance ventricularElastance1(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-52,-20},{-18,6}})));
        Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
        Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            useExternalPressureInput=true,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
        Parts.VentricularElastance ventricularElastance(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{16,64},{50,92}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
        Parts.AtrialElastance atrialElastance(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-48,92}})));
        Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=
                1.3333333333333)                                                      annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Control.BloodFlowMeasurement bloodFlowMeasurement annotation (
              Placement(transformation(extent={{-76,-50},{-96,-30}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={51,-21})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={-41,59})));
          Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={-22,66})));
          Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={62,-8})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{18,52},{4,64}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
            annotation (Placement(transformation(extent={{-14,-58},{0,-48}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-29.9,-18.18},{-28,-18.18},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{38.1,65.96},{38.1,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,89.45},{-78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-77.76,56},{-77.76,63.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{18.38,54},{18.38,65.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-49.62,-24},{-49.62,-18.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation (Line(
              points={{35.6,-29.8},{35.6,-26},{16.38,-26},{16.38,-8.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-50.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{17.87,89.62},{-46,89.62},{-46,96},{-82,96},{-82,89.45},{
                  -78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_in, AOV.q_out) annotation (Line(
              points={{-76,-40},{-62,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-96,-40},{-100,-40},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.HR, heartRate.y) annotation (Line(
              points={{-80,-30},{-82,-30},{-82,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Pt, LV.externalPressure) annotation (
              Line(
              points={{-21.06,-18.18},{-20,-18.18},{-20,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.externalPressure, add.y) annotation (Line(
              points={{48,-32},{50,-32},{50,-26.5},{51,-26.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, heartRate.y) annotation (Line(
              points={{15.87,13.79},{15.87,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Pt, add1.u2) annotation (Line(
              points={{-50.88,64.1},{-44,64.1},{-44,65}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, RA.externalPressure) annotation (Line(
              points={{-41,53.5},{-41,53.75},{-42,53.75},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u1, RAVGain.y) annotation (Line(
              points={{-38,65},{-38,66},{-28.6,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u1, LAVGain.y) annotation (Line(
              points={{54,-15},{54,-12},{54,-8},{55.4,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure1.q_in, LV.q_in) annotation (Line(
              points={{-9.8,-56},{-24,-56},{-24,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.pressure, LAVGain.u) annotation (Line(
              points={{-2.8,-55},{69.2,-55},{69.2,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.q_in, RV.q_in) annotation (Line(
              points={{13.8,54.4},{14,54.4},{14,46},{26,46},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, RAVGain.u) annotation (Line(
              points={{6.8,55.6},{6.8,66},{-14.8,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.compliance, atrialElastance.Ct) annotation (Line(
              points={{-50,50},{-50,58},{-59.2,58},{-59.2,64.1}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Pt, add.u2) annotation (Line(
              points={{44.94,-8.18},{44.94,-11.09},{48,-11.09},{48,-15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.compliance, atrialElastance1.Ct) annotation (Line(
              points={{40,-32},{38,-32},{38,-8.18},{36.1,-8.18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.externalPressure, ventricularElastance.Pt) annotation (
              Line(
              points={{34,50},{34,56},{46.94,56},{46.94,65.96}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Heart;

        model ElasticVesselWithSVandP
        "elastic vessel computes aditionally stressed volume and pressure"
          extends Physiolibrary.Hydraulic.Components.ElasticVessel;
          Physiolibrary.Types.RealIO.VolumeOutput StressedVolume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-88, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-44, 102})));
        equation
          StressedVolume = volume - zpv;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end ElasticVesselWithSVandP;

        partial model HeartElastance
        "Elastance of heart atria and ventricules by Burkhoff"
          import Physiolibrary.Types.*;
          RealIO.VolumeInput Vs "Stressed volume" annotation(Placement(visible = true, transformation(origin = {-163.397, -51.3719}, extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = 0), iconTransformation(origin={-86,-88},    extent = {{-9.999980000000001, -10}, {10, 9.99995}}, rotation=90)));
          parameter Real Alpha( final unit="1/m3")
          "coefficient of end diastolic pressure-volume curve";
          parameter Pressure Beta
          "coefficient of end diastolic pressure-volume curve";
          parameter Boolean useEs_extInput = false
          "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter HydraulicElastance Ees
          "coefficient of end-systolic elastance"
                annotation (Dialog(enable=not useEs_extInput));
          HydraulicElastance Et "Elastance";
          Time Tsyst;
          //need to define in extended model
          parameter Time Tmax "duration of systole ";
          parameter Time Tau "time constant of myocardial relaxation ";
          Real Et0
          "Relative elastance value (Elastance/End-Systolic Elastance)";
          RealIO.PressureOutput Pt "peak isovolumic pressure" annotation (Placement(
                transformation(extent={{64,-78},{84,-58}}),iconTransformation(
                  extent={{-10,-10},{10,10}},
                rotation=270,
                origin={82,-86})));
          RealIO.HydraulicComplianceOutput Ct annotation (Placement(
                transformation(extent={{52,-76},{72,-56}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-86})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/mes if useEs_extInput annotation (
              Placement(transformation(extent={{64,56},{104,96}}), iconTransformation(
                extent={{-13,-13},{13,13}},
                rotation=180,
                origin={87,67})));
      protected
         HydraulicElastance mes;
        equation
          if not useEs_extInput then
            mes = Ees;
          end if;
          if Tsyst <= 3 / 2 * Tmax then
            Et0 = 0.5 * (sin(Modelica.Constants.pi / Tmax * Tsyst - Modelica.Constants.pi / 2) + 1);
          else
            Et0 = 0.5 * exp(-(Tsyst - 3 * Tmax / 2) / Tau);
          end if;
          //1e+6 and 133.322368 are recalculation in SI units - as the original equation comes in torr and ml.
          //  Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 1e+6) * 133.322368 * 1e+6 + Et0 * Ees;
          Et = Modelica.Constants.eps + Et0 * mes;
          Pt = (1 - Et0) * Beta * (exp(Alpha * Vs) - 1);
          Ct = 1 / Et;
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={  Rectangle(extent={{
                      -100,100},{100,-76}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points={{
                      -38,94},{-38,-36},{86,-36}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-34},{30,-32},{54,-30},{70,-28},{76,-26},{82,-24},{86,-22},{90,
                      -20}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-36},{4,94}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-36},{88,80}},                                                                                                    color=  {255, 0, 0}, smooth=  Smooth.None), Polygon(points={{
                      76,72},{72,80},{80,76},{76,72}},                                                                                                    lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{0, -4}, {-4, 4}, {4, 0}, {0, -4}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, origin={84,
                      69},                                                                                                    rotation=  180), Text(extent={{
                      -110,-52},{-64,-76}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Vs"), Text(extent={{6,
                      -50},{52,-76}},                                                                                                    lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ct"),                                                                                                    Text(extent={{
                      -100,120},{100,104}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {170, 213, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"),
                                                                                                    Text(extent={{
                      58,-50},{100,-78}},                                                                                                  lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ped")}));
        end HeartElastance;

        model VentricularElastance
          extends HeartIntervals;
          //produces tvsyst and tasyst
          extends HeartElastance;
          //consumes tsyst from above
        equation
          Tsyst = Tvsyst;
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time HP(start = 0)
          "heart period - duration of cardiac cycle";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-134.0, 8.0}, {-94.0, 48.0}}, origin = {1.3363, -48.0}, rotation = 0), iconTransformation(extent = {{-73.7009, 4.4}, {-51.7009, 26.4}}, origin = {-26.2991, 67.6}, rotation = 0), visible = true));
          Physiolibrary.Types.Time Tasyst
          "time elapsed from the beginning of atrial systole";
          Physiolibrary.Types.Time Tvsyst
          "time elapsed from the beginning of ventricular systole";
          parameter Physiolibrary.Types.Time AVDelay(displayUnit = "s")= 0.160
          "AV interval";
          Physiolibrary.Types.Time T0 "start time of cardiac cycle";
          Physiolibrary.Types.Time EDTV "Ventricular end Diastolic Time";
        equation
          b = time - pre(T0) >= pre(HP);
          when {initial(), b} then
            T0 = time;
            HP = 1 / HR;
            EDTV = T0 + AVDelay;
          end when;
          Tasyst = time - T0;
          if time - T0 < AVDelay then
            Tvsyst = 0;
          else
            Tvsyst = time - (T0 + AVDelay);
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(visible=  true, origin=  {-18.5625, 68}, lineColor=  {0, 0, 255}, extent=  {{-73.4375, 6.00004}, {-23.4375, 24}}, textString=  "HR", fontName=  "Arial")}));
        end HeartIntervals;

        model AtrialElastance
          extends HeartIntervals;
          extends HeartElastance;
        equation
          Tsyst = Tasyst;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;
      end Parts;

      model HemodynamicsBurkhoffBVControl
        extends Controlled.System(
          redeclare replaceable ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl
            heart(MV(useLimitationInputs=false), AOV(useLimitationInputs=false)),
          redeclare replaceable ControlledParts.SystemicControl
            systemicCirculation(Ras(useConductanceInput=false)),
          redeclare Model.Control.Baroreflex shortTermControl(
              baroreceptor(
              PAOmedia=11585.715466364,
              EV0right=50662507.2177,
              EV0left=205316476.6191,
              EV0venacava=5.2504310309196e-07,
              activationDelay=10)),
          redeclare replaceable Model.Control.BloodVolumeControl
            longTermControl);
      /*    redeclare Control.StenosisControl simulationControl(venacavastenosis(
          InitialElastance=1906510.1400345, FinalElastance=
            1906510.1400345),                                aorticstenosis(
          InitialResistance(displayUnit="(mmHg.s)/ml") = 266644.77483,
          FinalResistance(displayUnit="(mmHg.s)/ml") = 266644.77483),
      mitralvalvestenosis(InitialResistance=333305.9685375, FinalResistance=333305.9685375)));*/
        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001), Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoffBVControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;

        model PulmonaryControl
          extends Controlled.Pulmonary;
          extends Parts.Pulmonary;
          Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                transformation(extent={{-36,22},{-56,42}})));
        equation
          connect(Capprox.volume, add3_1.u3) annotation (Line(
              points={{-40,-10},{-40,-16},{-34,-16},{-34,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Cap.volume, add3_1.u2) annotation (Line(
              points={{8,-10},{10,-10},{10,-16},{16,-16},{16,32},{-34,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Cvp.volume, add3_1.u1) annotation (Line(
              points={{50,-10},{52,-10},{52,-16},{56,-16},{56,40},{-34,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.y, busConnector.pulmonaryBloodVolume) annotation (
              Line(
              points={{-57,32},{-68,32},{-68,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Controlled.Systemic;
          extends Parts.Systemic(Cvs(
                useComplianceInput=true), Caprox(useComplianceInput=false));
          Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                transformation(
                extent={{-7,-7},{7,7}},
                rotation=180,
                origin={-65,-23})));
          Cardiovascular.Model.Control.MeanAortaPressureMeasurement aortaPressureMeasurement
            annotation (Placement(transformation(extent={{32,12},{52,32}})));
        equation
          connect(add3_1.u3, Cvs.volume) annotation (Line(
              points={{-56.6,-17.4},{-32,-17.4},{-32,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.u2, Cas.volume) annotation (Line(
              points={{-56.6,-23},{16,-23},{16,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.u1, Caprox.volume) annotation (Line(
              points={{-56.6,-28.6},{60,-28.6},{60,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.y, busConnector.systemicBloodVolume) annotation (
              Line(
              points={{-72.7,-23},{-80,-23},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Rcs.q_in, aortaPressureMeasurement.q_in) annotation (Line(
              points={{42,0},{42,16},{38,16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{49,25},{62,25},{62,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Cvs.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-38,8},{-38,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl
          extends Controlled.Heart;
          extends Parts.Heart(
            redeclare Types.Constants.FrequencyControl heartRate,
            ventricularElastance(useEs_extInput=true),
            atrialElastance1(useEs_extInput=false),
            ventricularElastance1(useEs_extInput=true),
            AOV(_Goff(displayUnit="ml/(mmHg.s)"), useLimitationInputs=false),
            MV(useLimitationInputs=false));

          Modelica.Blocks.Math.Sum sum1(nin=4)
            annotation (Placement(transformation(extent={{58,6},{78,26}})));
        equation
          connect(heartRate.c, busConnector.heartrate) annotation (Line(
              points={{-94.5,15},{-94.5,49.5},{-98,49.5},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance.Es_ext, busConnector.rvcompliance) annotation (
              Line(
              points={{47.79,87.38},{28,87.38},{28,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance1.Es_ext, busConnector.lvcompliance) annotation (
              Line(
              points={{-20.21,1.71},{82,1.71},{82,86},{-98,86}},
              color={128,255,0},
              smooth=Smooth.None,
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(RV.volume, sum1.u[1]) annotation (Line(
              points={{32,32},{32,14.5},{56,14.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.volume, sum1.u[2]) annotation (Line(
              points={{-44,32},{-46,32},{-46,15.5},{56,15.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.volume, sum1.u[3]) annotation (Line(
              points={{-22,-50},{-22,-72},{56,-72},{56,16.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.volume, sum1.u[4]) annotation (Line(
              points={{46,-50},{46,-58},{56,-58},{56,17.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
              points={{79,16},{82,16},{82,86},{-98,86}},
              color={127,255,0},
              smooth=Smooth.None,
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end HeartControl;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=1906510.1400345, FinalElastance=
                  1906510.1400345),
            aorticstenosis(
              InitialResistance(displayUnit="(mmHg.s)/ml") = 266644.77483,
              FinalResistance(displayUnit="(mmHg.s)/ml") = 10665790.9932,
              duration=60),
            mitralvalvestenosis(InitialResistance=333305.9685375,
                FinalResistance=333305.9685375));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(AOV(useLimitationInputs=true));
        equation
          connect(AOV.Goff, busConnector.avbackflowconductance) annotation (
              Line(
              points={{-58,-50},{-58,-60},{-98,-60},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(AOV.Gon, busConnector.avoutflowresistance) annotation (Line(
              points={{-46,-50},{-46,-60},{-98,-60},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsBurkhoffBVControl(redeclare
          ControlledParts.AorticValveStenosisScenario   scenarioControl(
              aorticstenosis(duration=60)), redeclare
          ControlledParts.AorticValveHeartControl   heart);
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model Bleeding
        extends HemodynamicsBurkhoffBVControl(redeclare
          Scenario.BleedingTransfusionScenario   scenarioControl(
            BloodTrans=0,
            Tbs=600,
            Tbd=300,
            BloodLoss=0.0005,
            Tts=1200,
            Ttd=600), longTermControl(redeclare
            Control.BloodVolume.PlasmaBleeding   plasma, redeclare
            Control.BloodVolume.RBCBleeding   redBloodCells));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Burkhoff;

    package Smith2004
        extends Modelica.Icons.ExamplesPackage;

      model HemodynamicsSmith_shallow
        import Physiolibrary.Hydraulic.Components.*;
      ElasticVesselElastance aorta(
          ZeroPressureVolume=0,
          volume_start=0.0001241,
          Elastance=92165766.41999)
          annotation (Placement(transformation(extent={{-130,-30},{-110,-10}})));
      ElasticVesselElastance venaCava(
          ZeroPressureVolume=0,
          volume_start=0.0002952,
          Elastance(displayUnit="Pa/m3") = 786602.0857485)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
      IdealValveResistance aorticValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2399802.97347)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-10}})));
      Resistor Rsys(Resistance(displayUnit=
               "(mmHg.s)/ml") = 145054757.50752) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-120,6})));
      IdealValveResistance tricuspidValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-62,24},{-42,44}})));
      Inertia Lav(
            I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
              displayUnit="m3/s") = -1.4e-8)                           annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-44,-20})));
      Inertia Lpv(
            I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
              displayUnit="m3/s") = -1.9e-9)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
      IdealValveResistance pulmonaryValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{62,24},{82,44}})));
          ElasticVesselElastance pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=3.904e-05,
          Elastance(displayUnit="Pa/m3") = 49195960.956135)
          annotation (Placement(transformation(extent={{102,24},{122,44}})));
      Resistor Rpul(Resistance(displayUnit=
               "(mmHg.s)/ml") = 20691634.526808) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={114,4})));
      ElasticVesselElastance pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=0.0008269,
          Elastance(displayUnit="Pa/m3") = 973253.4281295)
          annotation (Placement(transformation(extent={{104,-30},{124,-10}})));
      IdealValveResistance mitralValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{56,-30},{36,-10}})));
      Inertia Ltc(
            I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
              displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-106,24},{-86,44}})));
      Inertia Lmt(
            I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
              displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,-20})));
        Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
          annotation (Placement(transformation(extent={{-44,0},{-28,14}})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(extent={{38,12},{50,20}})));
      Parts.VentricularInteraction_flat ventricularInteraction_flat(
          lambdalv=33000,
          lambdaperi=30000,
          lambdas(displayUnit="1/m3") = 435000,
          lambdarv(displayUnit="1/m3") = 23000,
          Essept(displayUnit="mmHg/ml") = 6499999676.0309,
          V0peri=0.0002,
          Pi0sept=148.00118226939,
          Pi0rv=28.757638965416,
          Pi0lv=16.038683206025,
          Pi0peri=66.701190423724,
          Esrv=77993596.637775,
          Eslv=383941811.27772)
          annotation (Placement(transformation(extent={{-18,-12},{20,28}})));
      equation
        connect(aorta.q_in, Rsys.q_in) annotation (Line(
            points={{-120,-20},{-120,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rsys.q_out, venaCava.q_in) annotation (Line(
            points={{-120,16},{-120,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{82,34},{112,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
            points={{112,34},{114,34},{114,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
            points={{114,-6},{114,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation (Line(
            points={{-82,-20},{-120,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venaCava.q_in, Ltc.q_in) annotation (Line(
            points={{-120,34},{-106,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
            points={{114,-20},{88,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_out, aorticValve.q_in) annotation (Line(
            points={{-54,-20},{-62,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
            points={{-86,34},{-62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{52,34},{62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
            points={{56,-20},{68,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(tricuspidValve.q_out, ventricularInteraction_flat.rvflow)
          annotation (Line(
            points={{-42,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_in, ventricularInteraction_flat.rvflow) annotation (Line(
            points={{32,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(ventricularInteraction_flat.lvflow, Lav.q_in) annotation (Line(
            points={{1,-12},{2,-12},{2,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, Lav.q_in) annotation (Line(
            points={{36,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(HR.y, ventricularInteraction_flat.HR) annotation (Line(
            points={{-26,7},{-22,7},{-22,8},{-14.2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, ventricularInteraction_flat.Pth)
          annotation (Line(
            points={{51.5,16},{58,16},{58,8},{16.58,8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryArteries.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{120,42},{120,46},{86,46},{86,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryVeins.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{122,-12},{122,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                  -100},{160,100}}),      graphics), Icon(coordinateSystem(extent={{-160,
                  -100},{160,100}})),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Smith et al.</p>
<p>[12] B. W. Smith, J. G. Chase, R. I. Nokes, G. M. Shaw, G. Wake, Minimal Haemodynamic System Model Including Ventricular Interaction and Valve Dynamics., Medical Engineering &AMP; Physics 26 (2) (2004) 131&ndash;139. doi:10.1016/j.medengphy.2003.10.001.</p>
<p>[13] CellML implementation at URL:  http://models.cellml.org/exposure/9d046663ba5cac5c8a61ac146183614b/smith_chase_nokes_shaw_wake_2004.cellml/view</p>
</html>"));
      end HemodynamicsSmith_shallow;

      model HemodynamicsSmith
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000));
      end HemodynamicsSmith;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;

        model VentricularInteraction_flat
            import Physiolibrary.Types.*;
            Volume Vsept(start=0.000002),Vrv(start=0.0001042),Vlv(start=0.0001042),Vperi;
            parameter Volume V0sept=0.000002,V0peri;
            Pressure Psept,Pperi;
            parameter Pressure Pi0sept,Pi0rv,Pi0lv,Pi0peri
          "peak isovolumic pressure";
            parameter HydraulicElastance Essept,Esrv,Eslv
          "elastance of systole";
            parameter Real A=1,B=80,CC=0.375;
            Time tm;
            discrete Time HP "heart period";
            discrete Time t0 "time of beginning of the cardiac cycle";
            discrete Time ts "duration of systole";
            parameter HydraulicLambda lambdas;
            parameter HydraulicLambda lambdarv;
            parameter HydraulicLambda lambdalv;
            parameter HydraulicLambda lambdaperi;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-12,90},{8,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          RealIO.FrequencyInput HR annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={82,0})));
        equation
          //timing
          tm = time - pre(t0);
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          //  septum
          Psept = lvflow.pressure-rvflow.pressure;
          Psept = (Vsept-V0sept)*A*exp(-B*(tm-CC)^2)*Essept
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0sept*(exp(lambdas*Vsept)-1);
          // rightventricle
          rvflow.pressure - Pperi = (Vrv+Vsept)*A*exp(-B*(tm-CC)^2)*Esrv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0rv*(exp(lambdarv*(Vrv+Vsept))-1);
          der(Vrv) = rvflow.q;
          //leftventricle
          lvflow.pressure - Pperi = (Vlv-Vsept)*A*exp(-B*(tm-CC)^2)*Eslv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0lv*(exp(lambdalv*(Vlv-Vsept))-1);
          der(Vlv) = lvflow.q;
          //pericardium
          Vperi = Vrv+Vlv;
          Pperi=Pth+ Pi0peri*(exp(lambdaperi*(Vperi-V0peri))-1);
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{102,-32},{76,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-100,-22},{-74,-34}},
                  lineColor={0,0,255},
                  textString="HR"),
                Rectangle(extent={{-20,80},{20,-60}}, lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255}),
                Text(
                  extent={{-100,-60},{100,-80}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end VentricularInteraction_flat;

        model Septum

          Physiolibrary.Hydraulic.Sensors.PressureMeasure rvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-12,40})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-23,23})));
        TimeVaryingElastance septumdrv(
            lambda=435000,
            Es=6499999676.0309,
            Pi0=148.00118226939) annotation (Placement(transformation(
                extent={{-10,-12},{10,12}},
                rotation=0,
                origin={-58,12})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure lvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-14})));
        ElasticWall elasticWall(volume(
                start=2e-06), V0=2e-06)
            annotation (Placement(transformation(extent={{-28,-8},{18,22}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume(start=2e-06)
            annotation (Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-84,-10}), iconTransformation(extent={{80,-10},{100,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,-28},{16,-8}}),
                iconTransformation(extent={{-10,-40},{10,-20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,32},{16,52}}),
                iconTransformation(extent={{-10,6},{10,26}})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-94,10},{-74,30}}),
                iconTransformation(extent={{-100,-10},{-80,10}})));
        equation
          connect(elasticWall.compliance, septumdrv.C) annotation (Line(
              points={{-27.08,7.9},{-32,7.9},{-32,13.68},{-47.25,13.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.Pi, add1.u2) annotation (Line(
              points={{-47.25,19.92},{-33.625,19.92},{-33.625,20},{-29,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, elasticWall.prv) annotation (Line(
              points={{-17.5,23},{-13.74,23},{-13.74,7.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, septumdrv.V) annotation (Line(
              points={{-27.08,-1.4},{-44,-1.4},{-44,7.2},{-48,7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume, elasticWall.volume) annotation (Line(points={{-84,-10},
                  {-27.08,-10},{-27.08,-1.4}}, color={0,0,127}));
          connect(HR, septumdrv.HR) annotation (Line(points={{-84,20},{-68,20},
                  {-68,19.2}}, color={0,0,127}));
          connect(lvpressure.pressure, elasticWall.plv) annotation (Line(
              points={{-16,-8},{-16,-0.5},{-16.96,-0.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvpressure.q_in, rvflow) annotation (Line(
              points={{-18,44},{-6,44},{-6,42},{6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rvpressure.pressure, add1.u1) annotation (Line(
              points={{-16,34},{-34,34},{-34,26},{-29,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvflow, lvpressure.q_in) annotation (Line(
              points={{6,-18},{-14,-18}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Polygon(
                  points={{-100,-20},{-40,0},{-6,6},{8,6},{40,0},{100,-20},{98,
                      -20},{-100,-20}},
                  lineColor={167,167,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-100,-20},{-78,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{80,-20},{100,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="V"),
                Text(
                  extent={{-80,-20},{76,0}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Septum;

        model Ventricle

          TimeVaryingElastance drive(
            lambda=23000,
            useEs_extInput=false,
            Es=77993596.637775,
            Pi0=28.757638965416)
            annotation (Placement(transformation(extent={{-32,-4},{-12,22}})));
        ElasticVesselWithSVandP ventricle(
            useComplianceInput=true,
            useExternalPressureInput=true,
            useV0Input=true,
            volume_start=0.0001042,
            Elastance=133322387.415)
            annotation (Placement(transformation(extent={{16,-22},{36,-2}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={34,6})));
          Modelica.Blocks.Interfaces.RealInput Pext annotation (Placement(
                transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={50,12}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={30,30})));
          Modelica.Blocks.Interfaces.RealInput V0 annotation (Placement(
                transformation(
                rotation=0,
                extent={{-10,-10},{10,10}},
                origin={0,-4}),iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-10})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation (
              Placement(transformation(rotation=0, extent={{36,-22},{56,-2}}),
                iconTransformation(extent={{-50,-20},{-30,0}})));
          Physiolibrary.Types.RealIO.VolumeOutput stressedVolume annotation (
              Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-26,-10}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-10})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-56,6},{-36,26}}),
                iconTransformation(extent={{-40,20},{-20,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,-28}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={6,-10})));
        equation
          connect(drive.C, ventricle.compliance) annotation (Line(
              points={{-11.25,10.82},{26,10.82},{26,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.externalPressure, add.y) annotation (Line(
              points={{34,-4},{34,1.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.Pi, add.u2) annotation (Line(
              points={{-11.25,17.58},{10,17.58},{10,18},{32,18},{32,10.8},{31.6,
                  10.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HR, drive.HR) annotation (Line(points={{-46,16},{-42,16},{-42,
                  16.8},{-32,16.8}}, color={0,0,127}));
          connect(add.u1, Pext) annotation (Line(
              points={{36.4,10.8},{47.2,10.8},{47.2,12},{50,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(V0, ventricle.zeroPressureVolume) annotation (Line(
              points={{0,-4},{18,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.V, stressedVolume) annotation (Line(
              points={{-12,3.8},{-8,3.8},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.q_in, q_in) annotation (Line(
              points={{26,-12},{46,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricle.volume, volume) annotation (Line(
              points={{32,-22},{32,-28},{-26,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.StressedVolume, stressedVolume) annotation (Line(
              points={{21.6,-1.8},{21.6,6},{-6,6},{-6,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-60,-60},{60,40}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics={
                Bitmap(extent={{-34,44},{28,-24}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/heartVentricle.png"),
                Text(
                  extent={{-40,18},{-20,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{20,20},{42,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pext"),
                Text(
                  extent={{-16,0},{6,-20}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="V0"),
                Rectangle(extent={{-40,40},{40,-20}}, lineColor={0,0,127}),
                Text(
                  extent={{-60,60},{60,42}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Ventricle;

        model VentricularInteraction
        //  Physiolibrary.Types.Pressure Plv,Plvf,Pperi,Prv,Prvf,Ppcd,Pth,Pspt;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-10,90},{10,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          Physiolibrary.Types.RealIO.FrequencyInput frequency annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-12},{-60,28}})));
        Pericardium pericardium(
            lambda(displayUnit="1/m3") = 30000,
            V0=0.0002,
            P0=66.701190423724) annotation (Placement(transformation(
                extent={{13,26},{-13,-26}},
                rotation=180,
                origin={25,12})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,8})));
        replaceable Ventricle
                  rightVentricle(drive(
              lambda=23000,
              Es=77993596.637775,
              Pi0=28.757638965416)) annotation (Placement(transformation(rotation=0,
                  extent={{-20,26},{0,46}})));
        replaceable Ventricle
                  leftVentricle(drive(
              lambda=33000,
              useEs_extInput=false,
              Es=383941811.27772,
              Pi0=16.038683206025)) annotation (Placement(transformation(
                rotation=180,
                extent={{10,-10},{-10,10}},
                origin={-10,-16})));
        Septum septum annotation (
              Placement(transformation(rotation=0, extent={{-54,-6},{-14,26}})));
          Modelica.Blocks.Math.Gain gain(k=-1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=90,
                origin={-14,22})));
        equation
          /*Plv = Plvf+Pperi;
  Plvf=e*Peslvf+(1-e)*Pedlvf;

  Prv=Prvf+Pperi;
  Prvf=e*Pesrvf+(1-e)*Pedrvf;

  Pperi=Ppcd+Pth;

  Pspt=Plv-Prv;

Pspt=e*Pesspt+(1-e)*Pedspt;
*/
          //Pspt = leftVentricle.q_in.pressure - rightVentricle.q_in.pressure;
          connect(frequency,leftVentricle. HR) annotation (Line(
              points={{-58,-20},{-15,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.HR, frequency) annotation (Line(
              points={{-15,44},{-58,44},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.HR,    frequency) annotation (Line(
              points={{-52,10},{-58,10},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.stressedVolume, pericardium.Vrvfw) annotation (
             Line(
              points={{-5,36},{-5,19.54},{20.06,19.54}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(lvflow,leftVentricle. q_in) annotation (Line(
              points={{-36,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pericardium.pressure,leftVentricle. Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,-20},{-5,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth, pericardium.Pth) annotation (Line(
              points={{4,34},{20.06,34},{20.06,35.14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.pressure, rightVentricle.Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,44},{-5,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.stressedVolume, pericardium.Vlvfw) annotation (
              Line(
              points={{-5,-12},{-4,-12},{-4,3.94},{20.06,3.94}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(septum.volume,leftVentricle. V0) annotation (Line(
              points={{-16,10},{-13.3333,10},{-13.3333,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.volume, gain.u) annotation (Line(
              points={{-16,10},{-14,10},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.Vsept, gain.u) annotation (Line(
              points={{20.06,12.26},{-14,12.26},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, rightVentricle.V0) annotation (Line(
              points={{-14,28.6},{-14,28},{-13.3333,28},{-13.3333,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, rvflow) annotation (Line(
              points={{-16.6667,36},{-28,36},{-28,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.rvflow, rvflow) annotation (Line(
              points={{-34,12.56},{-34,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.lvflow,leftVentricle. q_in) annotation (Line(
              points={{-34,5.2},{-34,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-102,-20},{-76,-32}},
                  lineColor={0,0,255},
                  textString="HR"),
                Text(
                  extent={{100,-32},{74,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Bitmap(extent={{-92,84},{-4,-74}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceprava.png"),
                Bitmap(extent={{-18,102},{94,-72}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceLeva.png"),
                Polygon(
                  points={{-18,48},{4,48},{6,30},{14,2},{16,-28},{16,-62},{18,
                      -64},{10,-72},{-6,-70},{-8,-52},{-10,-4},{-14,28},{-18,44},
                      {-18,46},{-18,48}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,205,205}),
                Polygon(
                  points={{-58,0},{-64,0},{-66,0},{-62,-12},{-56,-38},{-38,-60},
                      {-6,-76},{24,-72},{44,-50},{62,-18},{68,2},{60,4},{56,-10},
                      {46,-32},{34,-52},{20,-66},{4,-68},{-12,-64},{-44,-42},{
                      -42,-42},{-58,0}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{-98,-68},{98,-92}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                          extent={{-100,-100},{100,100}}), graphics));
        end VentricularInteraction;

        model TimeVaryingElastance
          //parameter Physiolibrary.Types.HydraulicElastance Ed "elastance of diastole";
          parameter Boolean useEs_extInput = false
          "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Es
          "elastance of systole"                                                     annotation (Dialog(enable=not useEs_extInput));
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          parameter HydraulicLambda lambda;
          Physiolibrary.Types.Time tm
          "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
          "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real et;
          parameter Real A=1,B=80,CC=0.375;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,14})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,66})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent={{76,58},
                    {116,98}}),                                                                                                    iconTransformation(extent={{-20,-20},
                    {20,20}},
                rotation=0,
                origin={-100,60})));
          Physiolibrary.Types.RealIO.VolumeInput V annotation (Placement(
                transformation(extent={{82,54},{122,94}}),     iconTransformation(
                  extent={{-20,-20},{20,20}},
                rotation=180,
                origin={60,-40})));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Es)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-100,20})));
      protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=Es;
          end if;
          tm = time - pre(t0);
        /*  if tm < pre(ts) then
    a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
  else
    a = 0;
  end if;
  E = Ed + Es * a;
  C = 1 / E;
  //  Pi = Pi0 * a;
  */
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          et = A*exp(-B*(tm-CC)^2);//(5)
          E = et*es_int;//(derived (4)
          C = 1/E;
          Pi = (1-et)*Pi0*(exp(lambda*V)-1);//derived(4)
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{60,100}}),                                                                         graphics={  Rectangle(extent={{
                      -42,80},{50,-76}},                                                                                                    lineColor = {0, 0, 255}, fillColor = {170, 255, 255},
                    fillPattern =                                                                                                   FillPattern.Solid),                                                                                                    Text(extent={{
                      -96,82},{-32,58}},                                                                                                    lineColor = {0, 0, 255}, textString = "HR"), Text(extent={{
                      -16,28},{84,-2}},                                                                                                    lineColor = {0, 0, 255}, textString = "Et"), Text(extent={{8,
                      86},{58,56}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="P"),                                                                                                    Text(extent={{
                      -288,134},{260,78}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="%name"),
                Text(
                  extent={{44,-52},{76,-80}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="V"),
                Line(
                  points={{-40,0},{-32,0},{-32,4},{-30,26},{-26,40},{-22,42},{-20,
                      38},{-18,22},{-16,0},{6,0},{8,24},{12,40},{16,42},{18,38},{
                      22,0},{44,0}},
                  color={0,0,255},
                  smooth=Smooth.None)}), Diagram(coordinateSystem(extent={{-100,
                    -100},{60,100}})));
        end TimeVaryingElastance;

        type HydraulicLambda = Real(final quantity="HydraulicLambda",final unit="1/m3", displayUnit="1/ml", nominal=(1e-5), min=0);

        model Pericardium
          parameter Physiolibrary.Types.Volume V0;
          parameter Physiolibrary.Types.Pressure P0;
          parameter HydraulicLambda lambda;
          Physiolibrary.Types.RealIO.VolumeInput Vsept annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,1})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-40,-10},{-20,10}}),iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=0,
                origin={50,90})));
          Physiolibrary.Types.RealIO.VolumeInput Vrvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,29})));
          Physiolibrary.Types.RealIO.VolumeInput Vlvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,-31})));
                Physiolibrary.Types.Volume Vperi;
                Physiolibrary.Types.Pressure Pperi;
          Physiolibrary.Types.RealIO.VolumeOutput Vrv annotation (Placement(
                transformation(extent={{40,20},{60,40}}), iconTransformation(extent={{40,
                    20},{60,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput Vlv annotation (Placement(
                transformation(extent={{36,20},{56,40}}), iconTransformation(extent={{40,
                    -40},{60,-20}})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-50,60},{-10,100}}), iconTransformation(extent={
                    {-40,78},{-18,100}})));
        equation
          Vperi = Vrvfw+Vlvfw;
          Vrv = Vrvfw+Vsept;
          Vlv= Vlvfw-Vsept;
          Pperi=P0*(exp(lambda*(Vperi-V0))-1); //orig equation in mmHg and ml
           pressure = Pth + Pperi;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-40,
                    -100},{60,100}}),
                                 graphics={
                Polygon(
                  points={{-18,90},{-18,-90},{-6,-80},{24,-44},{32,-16},{30,10},
                      {24,32},{0,68},{-18,92},{-18,90}},
                  smooth=Smooth.None,
                  lineColor={167,167,255},
                  fillPattern=FillPattern.Forward,
                  fillColor={227,227,255}),
                Polygon(
                  points={{30,4},{22,6},{-6,8},{-18,6},{-18,4},{-18,0},{-18,-4},
                      {-16,-4},{-8,-6},{24,-4},{30,-4},{30,4}},
                  lineColor={167,167,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Polygon(
                  points={{-18,102},{20,50},{36,14},{36,-30},{16,-62},{-18,-98},{-20,-88},
                      {12,-54},{28,-30},{28,14},{12,48},{-18,90},{-18,102}},
                  lineColor={0,0,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{22,98},{40,80}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="p"),
                Text(
                  extent={{-16,14},{12,-10}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vsept"),
                Text(
                  extent={{-16,40},{10,14}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrvfw"),
                Text(
                  extent={{-18,-18},{8,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlvfw"),
                Text(
                  extent={{22,40},{38,22}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrv"),
                Text(
                  extent={{20,-22},{40,-36}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlv"),
                Text(
                  extent={{-10,98},{12,76}},
                  lineColor={0,0,255},
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-40,120},{64,100}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}),
                                     Diagram(coordinateSystem(extent={{-40,-100},{60,100}}),
                graphics));
        end Pericardium;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.Inertia Ltc(
              I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
                displayUnit="m3/s") = 0.0001372)
            annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance tricuspidValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
            annotation (Placement(transformation(extent={{-48,30},{-28,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lpv(
              I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
                displayUnit="m3/s") = -1.9e-9)
            annotation (Placement(transformation(extent={{42,30},{62,50}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance pulmonaryValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 733273.1307825)
            annotation (Placement(transformation(extent={{66,30},{86,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lmt(
              I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
                displayUnit="m3/s") = 0.0001141)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={78,-14})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance mitralValve(
            Pknee=0,
           _Ron(displayUnit="(mmHg.s)/ml") = 2106493.721157)
            annotation (Placement(transformation(extent={{60,-24},{40,-4}})));
          Physiolibrary.Hydraulic.Components.Inertia Lav(
              I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
                displayUnit="m3/s") = -1.4e-8)                           annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-40,-14})));
            Physiolibrary.Hydraulic.Components.IdealValveResistance  aorticValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2399802.97347)
            annotation (Placement(transformation(extent={{-58,-24},{-78,-4}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       HR(k=1.2)
            annotation (Placement(transformation(extent={{-52,8},{-36,22}})));
          replaceable VentricularInteraction
                                   ventricularInteraction
            annotation (Placement(transformation(extent={{-24,-14},{36,40}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{42,20},{52,30}})));
        equation
          connect(rightHeartInflow, Ltc.q_in) annotation (Line(
              points={{-100,40},{-90,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ltc.q_out, tricuspidValve.q_in) annotation (Line(
              points={{-70,40},{-48,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, ventricularInteraction.rvflow)
            annotation (Line(
              points={{-28,40},{6,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularInteraction.rvflow, Lpv.q_in) annotation (Line(
              points={{6,40},{42,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{62,40},{66,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation (Line(
              points={{86,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, ventricularInteraction.Pth) annotation (Line(
              points={{53.25,25},{56,25},{56,15.16},{30,15.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularInteraction.frequency, HR.y) annotation (Line(
              points={{-18,15.16},{-26,15.16},{-26,15},{-34,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Lmt.q_in, leftHeartInflow) annotation (Line(
              points={{88,-14},{94,-14},{94,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lmt.q_out, mitralValve.q_in) annotation (Line(
              points={{68,-14},{60,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, ventricularInteraction.lvflow) annotation (
             Line(
              points={{40,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_in, ventricularInteraction.lvflow) annotation (Line(
              points={{-30,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_in, Lav.q_out) annotation (Line(
              points={{-58,-14},{-50,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, leftHeartOutflow) annotation (Line(
              points={{-78,-14},{-84,-14},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Heart;

        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
        Physiolibrary.Hydraulic.Components.ElasticVesselElastance pulmonaryArteries(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=3.904e-05,
            Elastance=49195960.956135)
            annotation (Placement(transformation(extent={{-72,-18},{-34,18}})));
          Physiolibrary.Hydraulic.Components.Resistor Rpul(Resistance(displayUnit="(mmHg.s)/ml")=
                 20691634.526808) annotation (Placement(transformation(
                extent={{-15,-16},{15,16}},
                rotation=0,
                origin={-5,0})));
                  Physiolibrary.Hydraulic.Components.ElasticVesselElastance pulmonaryVeins(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=0.0008269,
            Elastance=973253.4281295)
            annotation (Placement(transformation(extent={{36,-18},{72,18}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{-92,8},{-80,20}})));
        equation
          connect(q_in, pulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-53,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
              points={{-53,2.22045e-16},{-42,2.22045e-16},{-42,4.44089e-16},{
                  -20,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{10,4.44089e-16},{36,4.44089e-16},{36,2.22045e-16},{54,
                  2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, q_out) annotation (Line(
              points={{54,2.22045e-16},{80,2.22045e-16},{80,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, pulmonaryArteries.externalPressure) annotation (Line(
              points={{-78.5,14},{-58,14},{-58,14.4},{-37.8,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmonaryArteries.externalPressure, pulmonaryVeins.externalPressure)
            annotation (Line(
              points={{-37.8,14.4},{16.1,14.4},{16.1,14.4},{68.4,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance aorta(
            ZeroPressureVolume=0,
            volume_start=0.0001241,
            Elastance=92165766.41999)
            annotation (Placement(transformation(extent={{36,-14},{68,18}})));
          Physiolibrary.Hydraulic.Components.Resistor Rsys(Resistance(displayUnit=
                 "(mmHg.s)/ml") = 145054757.50752) annotation (Placement(transformation(
                extent={{-16,-16},{16,16}},
                rotation=180,
                origin={-8,0})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance venaCava(
            ZeroPressureVolume=0,
            volume_start=0.0002952,
            Elastance=786602.0857485)
            annotation (Placement(transformation(extent={{-72,-16},{-40,16}})));
        equation
          connect(aorta.q_in, q_in) annotation (Line(
              points={{52,2},{70,2},{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, Rsys.q_in) annotation (Line(
              points={{52,2},{20,2},{20,-2.22045e-15},{8,-2.22045e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsys.q_out, venaCava.q_in) annotation (Line(
              points={{-24,1.77636e-15},{-40,1.77636e-15},{-40,2.22045e-16},{
                  -56,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venaCava.q_in, q_out) annotation (Line(
              points={{-56,2.22045e-16},{-80,2.22045e-16},{-80,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Systemic;

        model ElasticWall
          Physiolibrary.Types.RealIO.PressureInput prv annotation (Placement(
                transformation(extent={{-26,32},{14,72}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-38,6})));
          Physiolibrary.Types.RealIO.PressureInput plv annotation (Placement(
                transformation(extent={{-26,-54},{14,-14}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-52,-50})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-2,-94},{18,-74}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,-46})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(extent={{-112,-66},{-92,-46}}),
                                                           iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={-96,-56})));
                    parameter Physiolibrary.Types.Volume V0=0;
          Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance
            annotation (Placement(transformation(extent={{-24,42},{16,82}}),
                iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-96,6})));
        equation
          pressure = plv -prv;
          pressure = (volume-V0) /compliance;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-30,26},{22,-4}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="prv"),
                Text(
                  extent={{-42,-38},{10,-68}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="plv"),
                Text(
                  extent={{26,-32},{102,-56}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="pressure"),
                Text(
                  extent={{-150,-26},{-70,-46}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="Volume"),
                Polygon(
                  points={{-100,-14},{-40,-34},{-6,-40},{8,-40},{40,-34},{100,
                      -14},{98,-14},{-100,-14}},
                  lineColor={0,0,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-128,-10},{-60,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="compliance
"),             Text(
                  extent={{20,40},{166,-18}},
                  lineColor={0,0,255},
                  horizontalAlignment=TextAlignment.Left,
                  textString="  pressure = plv -prv;
  pressure = (volume-V0) /compliance;")}), Diagram(coordinateSystem(preserveAspectRatio=
                   false, extent={{-100,-100},{100,100}}), graphics));
        end ElasticWall;

        model ElasticVesselWithSVandP
        "elastic vessel computes aditionally stressed volume and pressure"
          extends Physiolibrary.Hydraulic.Components.ElasticVesselElastance;
          Physiolibrary.Types.RealIO.VolumeOutput StressedVolume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-88, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-44, 102})));
        equation
          StressedVolume = volume - zpv;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end ElasticVesselWithSVandP;
      end Parts;

      model HemodynamicsSmithControl
        extends Controlled.System(
          redeclare ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl
            heart,
          redeclare ControlledParts.SystemicControl
            systemicCirculation(venaCava(volume_start=0.0022952,
                ZeroPressureVolume=0.002), aorta(volume_start=0.0008841,
                ZeroPressureVolume=0.00076)),
          redeclare replaceable Model.Control.BloodVolumeControl
            longTermControl,
          redeclare ControlledParts.Baroreflex
            shortTermControl);
      /*    redeclare CardiovascularDevel.Model.Control.StenosisControl stenosisControl(
      venacavastenosis(InitialElastance=786602.0857485, FinalElastance=786602.0857485),
      AVBackFlowConductance(k(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-14),
      aorticstenosis(InitialResistance=2399802.97347, FinalResistance=2399802.97347)),*/

        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001));
      end HemodynamicsSmithControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;

        model PulmonaryControl
          extends Parts.Pulmonary(pulmonaryArteries(volume_start=5.904e-05,
                ZeroPressureVolume=2e-05), pulmonaryVeins(volume_start=
                  0.0015269, ZeroPressureVolume=0.0007));
          extends Controlled.Pulmonary;
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{72,-42},{92,-22}})));
        equation
          connect(pulmonaryArteries.volume, add.u2) annotation (Line(
              points={{-41.6,-18},{-40,-18},{-40,-38},{70,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmonaryVeins.volume, add.u1) annotation (Line(
              points={{64.8,-18},{66,-18},{66,-26},{70,-26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{93,-32},{92,-32},{92,24},{-80,24},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-25,58},{-25,58}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Parts.Systemic(venaCava(
                useComplianceInput=true), Rsys(useConductanceInput=true));
          extends Controlled.Systemic;
          Model.Control.AortaPressureMeasurement
            aortaPressureMeasurement
            annotation (Placement(transformation(extent={{4,10},{24,30}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                  extent={{72,-34},{92,-14}})));
        equation
          connect(venaCava.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-56,12.8},{-56,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Rsys.cond, busConnector.peripheralconductance) annotation (
              Line(
              points={{-8,-9.6},{-4,-9.6},{-4,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{5,1},{5,1}}));
          connect(Rsys.q_in, aortaPressureMeasurement.q_in) annotation (Line(
              points={{8,0},{8,8},{10,8},{10,14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{21,23},{26,23},{26,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aorta.volume, add.u1) annotation (Line(
              points={{61.6,-14},{64,-14},{64,-20},{70,-20},{70,-18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u2, venaCava.volume) annotation (Line(
              points={{70,-30},{-46.4,-30},{-46.4,-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.systemicBloodVolume) annotation (Line(
              points={{93,-24},{92,-24},{92,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-25,60},{-25,60}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl

          extends Controlled.Heart;
          extends Parts.Heart(redeclare Types.Constants.FrequencyControl
                                               HR,
            redeclare VIVolume
              ventricularInteraction(rightVentricle(drive(useEs_extInput=true))),
            aorticValve(useLimitationInputs=false));
        equation
        //  connect(volume, busConnector.heartvolume);
          connect(HR.c, busConnector.heartrate) annotation (Line(
              points={{-48,15},{-54,15},{-54,18},{-66,18},{-66,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularInteraction.busConnector, busConnector) annotation (Line(
              points={{-9.6,27.04},{-9.6,86},{-98,86}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularInteraction.volume, busConnector.heartBloodVolume)
            annotation (Line(
              points={{17.4,26.5},{17.4,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end HeartControl;

        model VIVolume
          extends Parts.VentricularInteraction(redeclare VentricleControlled
              rightVentricle(drive(useEs_extInput=true)), redeclare
            VentricleControlled   leftVentricle(                        drive(
                  useEs_extInput=true)));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(extent={{34,-44},{54,-24}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={38,50})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{2,-40},{16,-26}})));
          Physiolibrary.Types.BusConnector busConnector annotation (Placement(
                transformation(extent={{-72,32},{-32,72}}), iconTransformation(extent={{
                    -72,32},{-32,72}})));
        equation
          connect(rightVentricle.volume, add.u2) annotation (Line(
              points={{-9,36},{-10,36},{-10,-37.2},{0.6,-37.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, add.u1) annotation (Line(
              points={{-9,-12},{-9,-28.8},{0.6,-28.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, volume) annotation (Line(
              points={{16.7,-33},{26.35,-33},{26.35,-34},{44,-34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.hydrauliccompliance, busConnector.lvcompliance)
            annotation (Line(
              points={{-15.5,-23.8},{-15.5,-40},{-52,-40},{-52,52}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(rightVentricle.hydrauliccompliance, busConnector.rvcompliance)
            annotation (Line(
              points={{-15.5,47.8},{-15.5,52},{-52,52}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={Text(
                  extent={{46,60},{98,42}},
                  lineColor={0,0,255},
                  textString="volume")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{-40,56},{24,52}},
                  lineColor={0,0,255},
                  textString="rvcompliance ->rightVentricle.drive.Es_ext"),
                Text(
                  extent={{-62,-42},{2,-46}},
                  lineColor={0,0,255},
                  textString="lvcompliance ->leftVentricle.drive.Es_ext")}));
        end VIVolume;

        model Baroreflex
          extends Model.Control.Baroreflex(baroreceptor(
              PAOmedia=12486.574838127,
              HR0Param=1.2,
              EV0right=77993596.637775,
              EV0left=383835153.36779,
              EV0venacava=1.2713543710584e-06,
              RS0=145054757.50752));
        end Baroreflex;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=786602.0857485, FinalElastance=786602.0857485),
            aorticstenosis(
              duration=60,
              InitialResistance(displayUnit="(mmHg.s)/ml") = 2399802.97347,
              FinalResistance(displayUnit="(mmHg.s)/ml") = 10665790.9932),
            mitralvalvestenosis(InitialResistance=2106493.721157,
                FinalResistance=2106493.721157),
            AVgon(k(displayUnit="ml/(mmHg.s)") = 1.2000985213531e-12),
            mvgoff(k(displayUnit="ml/(mmHg.s)") = 1.2000985213531e-12));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(aorticValve(useLimitationInputs=true));
        equation
          connect(aorticValve.Goff, busConnector.avbackflowconductance)
            annotation (Line(
              points={{-74,-4},{-74,2},{-98,2},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aorticValve.Gon, busConnector.avoutflowresistance)
            annotation (Line(
              points={{-62,-4},{-62,6},{-98,6},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;

        model VentricleControlled
          extends Parts.Ventricle(drive(useEs_extInput=true));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput
            hydrauliccompliance annotation (Placement(transformation(extent={{
                    -12,18},{28,58}}), iconTransformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-33,49})));
        equation
          connect(drive.Es_ext, hydrauliccompliance) annotation (Line(
              points={{-32,11.6},{-56,11.6},{-56,38},{8,38}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                    {-60,-60},{60,40}}), graphics), Diagram(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics));
        end VentricleControlled;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsSmithControl(redeclare
          ControlledParts.AorticValveHeartControl   heart, redeclare
          ControlledParts.AorticValveStenosisScenario   scenarioControl(AVgon(k(
                  displayUnit="ml/(mmHg.s)"))));
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model Bleeding
        extends HemodynamicsSmithControl(redeclare
          Scenario.BleedingTransfusionScenario   scenarioControl(
            Tbd=300,
            BloodLoss=0.0005,
            Tts=600,
            Ttd=600,
            BloodTrans=0), longTermControl(redeclare
            Control.BloodVolume.RBCBleeding   redBloodCells, redeclare
            Control.BloodVolume.PlasmaBleeding   plasma));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Smith2004;

    package Control "models of control mechanism and additional components"
      extends Modelica.Icons.VariantsPackage;

      package EPO_Physiolibrary = Physiolibrary(Types(
        redeclare type Concentration = Real(quantity="EPO Concentration",unit="1/m3",displayUnit="iu/l"),
        redeclare type AmountOfSubstance = Real(quantity="EPO AmountOfSubstance",unit="1",displayUnit="iu"),
        redeclare type MolarFlowRate = Real(quantity="EPO Flow Rate",unit="1/s",displayUnit="iu/min"),
        redeclare type MolarEnergy = Real(quantity="EPO Internal Energy",unit="J",displayUnit="cal/iu")));

      model Baroreflex
        extends Cardiovascular.Controlled.ShortTermControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{60,70},{100,110}})));*/
        Baroreceptor baroreceptor(activationDelay(displayUnit="s"))
          annotation (Placement(transformation(extent={{18,-54},{80,18}})));
      equation
        connect(baroreceptor.RS, busConnector.peripheralconductance)
          annotation (Line(
            points={{25.44,-26.64},{-8,-26.64},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evright, busConnector.rvcompliance)
          annotation (Line(
            points={{25.44,-14.4},{-8,-14.4},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evleft, busConnector.lvcompliance) annotation (
           Line(
            points={{24.2,-2.88},{-8,-2.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.HR, busConnector.heartrate) annotation (Line(
            points={{23.89,9},{-8,9},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.PAo, busConnector.aortameanpressure)
          annotation (Line(
            points={{25.44,-47.52},{-8,-47.52},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evenacava, busConnector.venacavacompliance)
          annotation (Line(
            points={{24.82,-38.88},{-8,-38.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics),
                                       Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics));
      end Baroreflex;

      model Baroreceptor
        Modelica.Blocks.Continuous.TransferFunction H1(a = {15, 1}, b = {1});
        Modelica.Blocks.Continuous.TransferFunction H2(a = {15, 1}, b = {0.048});
        Modelica.Blocks.Continuous.TransferFunction H3(a = {15, 1}, b = {0.154});
        // from orign.mo(a={30,1}, b={0.194});
        Modelica.Blocks.Continuous.TransferFunction H4(a = {2, 1}, b = {0.1});
        Modelica.Blocks.Nonlinear.DeadZone deadZone(uMax = 0.1, uMin = -0.1);
        parameter Physiolibrary.Types.Pressure PAOmedia = 13465.561128915;
        parameter Physiolibrary.Types.Frequency HR0Param = 1.3333333333333 annotation(Dialog(enable = not useConductanceInput));
        parameter Boolean useHRInput = false
        "=true, if external HR value is used"                                      annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
        Physiolibrary.Types.RealIO.FrequencyInput cond(start = HR0Param) = HR0 if useHRInput annotation(Placement(transformation(extent = {{-62, 36}, {-22, 76}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {26, 76})));
        Physiolibrary.Types.RealIO.PressureInput PAo "pressure in aorta" annotation(Placement(transformation(extent = {{2, -58}, {42, -18}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 0, origin = {-76, -82})));
        Physiolibrary.Types.RealIO.FrequencyOutput HR
        "heart rate - compatible with Const block"                                               annotation(Placement(transformation(extent = {{-76, 60}, {-56, 80}}), iconTransformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-81, 75})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evright annotation(Placement(transformation(extent = {{80, 22}, {100, 42}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, 10})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evleft annotation(Placement(transformation(extent = {{78, -18}, {98, 2}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-80, 42})));
        Physiolibrary.Types.HydraulicElastance evrightref;
        Physiolibrary.Types.HydraulicElastance evleftref;
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evenacava annotation(Placement(transformation(extent = {{78, -54}, {98, -34}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-78, -58})));
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput RS annotation(Placement(transformation(extent = {{80, -90}, {100, -70}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, -24})));
        parameter Physiolibrary.Types.HydraulicElastance EV0right = 103991462.1837, EV0left = 106657909.932;
        parameter Physiolibrary.Types.HydraulicCompliance EV0venacava = 1.8751539396141e-006;
        parameter Physiolibrary.Types.HydraulicResistance RS0(displayUnit = "(mmHg.s)/ml") = 81793284.67910001;
        parameter Physiolibrary.Types.Time activationDelay = 15;
        //  parameter Physiolibrary.Types.HydraulicConductance Conductance=0
    protected
        Physiolibrary.Types.Frequency HR0;
      //  parameter Physiolibrary.Types.HydraulicCompliance ECV0;
      equation
        if not useHRInput then
          HR0 = HR0Param;
        end if;
        if time > activationDelay then
          deadZone.u = (PAOmedia - PAo) / 133.322387415 / 2;
        else
          deadZone.u = 0;
        end if;
        H1.u = deadZone.y;
        HR = (HR0 * 60 + H1.y) / 60;
        //recount to SI Hz
        H2.u = deadZone.y;
        evright = 1 / (EV0right + H2.y * 1000000.0 * 133.322387415);
        evrightref = 1 / evright;
        //recount to SI
        evleft = 1 / (EV0left + H2.y * 1000000.0 * 133.322387415);
        evleftref = 1 / evleft;
        //recount to SI
        H3.u = deadZone.y;
        evenacava = EV0venacava+H3.y * 1e-006 / 133.322387415;
        H4.u = deadZone.y;
        RS = 1 / (RS0 + H4.y * 1000000.0 * 133.322387415);
        //recount to conductance
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent=  {{28, 102}, {-68, -110}}, lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent={{
                    -66,74},{18,58}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Text(extent={{
                    -58,12},{22,-2}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "EVright"), Text(extent={{
                    -62,44},{26,30}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "EVleft"), Text(extent={{
                    -80,-60},{34,-72}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "ECV"), Text(extent={{
                    -62,-20},{16,-34}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "RPS"), Text(extent={{
                    -60,-84},{-16,-94}},                                                                                                    lineColor=  {0, 0, 127}, textString=  "PAo"), Text(extent=  {{-98, -104}, {116, -120}}, lineColor=  {0, 0, 0},
                  lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end Baroreceptor;

      package BloodVolume
        extends Modelica.Icons.UtilitiesPackage;

        model KidneyPO2Estimate
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{82,-10},
                    {102,10}})));
        parameter Real MaxPo2 = 60;
          Physiolibrary.Types.RealIO.FractionInput hematocrit annotation (
              Placement(transformation(extent={{-100,-20},{-60,20}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          Physiolibrary.Blocks.Factors.Spline spline(
                       Yscale=101325/760, data=[0,0,0; 0.4,35,1; 0.6,60,0])
            annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
          Physiolibrary.Types.Constants.OneConst one
            annotation (Placement(transformation(extent={{-26,8},{-18,16}})));
        equation
          connect(hematocrit, spline.u) annotation (Line(
              points={{-80,0},{-12,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(spline.y, pressure) annotation (Line(
              points={{-4,-4},{-4,-6},{72,-6},{72,0},{92,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(one.y, spline.yBase) annotation (Line(
              points={{-17,12},{-4,12},{-4,2}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-80,80},{82,-60}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,255,167}),                                   Text(
                  extent={{-184,-58},{214,-94}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end KidneyPO2Estimate;

        model Erythropoetin
          EPO_Physiolibrary.Chemical.Components.Substance erythropoetin(useNormalizedVolume = false,
              solute_start(displayUnit="mol") = 79.5)                                                                                               annotation(Placement(transformation(extent = {{-30, 6}, {2, 40}})));
          EPO_Physiolibrary.Chemical.Sources.UnlimitedSolutePump secretion(useSoluteFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {144, 62})));
          EPO_Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure annotation(Placement(transformation(extent={{-21,-21},
                    {21,21}},
                rotation=90,
                origin={-15,81})));
          EPO_Physiolibrary.Types.RealIO.ConcentrationOutput concentration annotation(Placement(transformation(extent={{42,72},
                    {62,92}}),                                                                                                   iconTransformation(extent = {{-21, -21}, {21, 21}}, rotation = 0, origin = {121, 3})));
          Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {138, -2}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-60, -80})));
          Physiolibrary.Blocks.Factors.Spline PO2Effect(data = {{0.0, 4.0, 0}, {35.0, 0.0, -0.14}, {60.0, -1.0, 0}}, Xscale = 101325 / 760) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {102, -2})));
          Physiolibrary.Blocks.Math.Power pow annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {98, 16})));
          Physiolibrary.Blocks.Factors.Normalization CounEffect annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 90, origin={58,46})));
          Physiolibrary.Blocks.Factors.Normalization FunctionEffect annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {78, 46})));
          Physiolibrary.Blocks.Factors.Normalization PO2Effect1 annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {98, 46})));
          Physiolibrary.Types.Constants.FractionConst Kidney_Nefron_Count_TotalxNormal(k=1)   annotation(Placement(transformation(extent={{26,16},
                    {42,26}})));
          Physiolibrary.Types.Constants.FractionConst KidneyFunctionEffect(k=1)   annotation(Placement(transformation(extent={{60,10},
                    {76,20}})));
          Physiolibrary.Types.RealIO.VolumeInput ecf_volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 0, origin = {-58, 70}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {0, -80})));
          Modelica.Blocks.Math.Gain VODIST(k = 0.4) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-58, 46})));
          Physiolibrary.Types.Constants.FractionConst hormoneFlowFraction(k=1)   annotation(Placement(transformation(extent={{72,-28},
                    {88,-20}})));
          Cardiovascular.Model.Control.EPO_Physiolibrary.Types.Constants.MolarFlowRateConst
            molarFlowRate(k(displayUnit="mol/min") = 0.011166666666667)
            annotation (Placement(transformation(extent={{30,40},{44,50}})));
          EPO_Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                      clearance(
              useSoluteFlowInput=true)   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={2,-30})));
          Modelica.Blocks.Math.Gain K(k(unit="1/s")=0.00555/60) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={-4,-8})));
        equation
          connect(secretion.q_out, erythropoetin.q_out) annotation(Line(points = {{134, 62}, {8, 62}, {8, 23}, {-14, 23}}, color = {107, 45, 134}, thickness = 1, smooth = Smooth.None));
          connect(pow.y, PO2Effect1.u) annotation(Line(points = {{98, 22.6}, {98, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CounEffect.y, FunctionEffect.yBase) annotation(Line(points = {{62, 46}, {76, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(FunctionEffect.y, PO2Effect1.yBase) annotation(Line(points = {{82, 46}, {96, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Kidney_Nefron_Count_TotalxNormal.y, CounEffect.u) annotation(Line(points={{44,21},
                  {58,21},{58,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(KidneyFunctionEffect.y, FunctionEffect.u) annotation(Line(points={{78,15},
                  {78,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.y, pow.exponent) annotation(Line(points = {{102, 2}, {102, 10}, {101.6, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(kidney_po2, PO2Effect.u) annotation(Line(points = {{138, -2}, {110, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.yBase, hormoneFlowFraction.y) annotation(Line(points={{102,-4},
                  {102,-24},{90,-24}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
          connect(molarFlowRate.y, CounEffect.yBase) annotation(Line(points = {{45.75, 45}, {50.875, 45}, {50.875, 46}, {56, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(erythropoetin.solutionVolume, VODIST.y) annotation(Line(points = {{-20.4, 29.8}, {-20.4, 46}, {-51.4, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect1.y, secretion.soluteFlow) annotation(Line(points = {{102, 46}, {140, 46}, {140, 58}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ecf_volume, VODIST.u) annotation(Line(points = {{-58, 70}, {-68, 70}, {-68, 46}, {-65.2, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(concentrationMeasure.concentration, concentration) annotation (
              Line(
              points={{1.8,81},{4,81},{4,82},{52,82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.q_out, concentrationMeasure.q_in) annotation (Line(
              points={{-14,23},{-14,81},{-15,81}},
              color={107,45,134},
              thickness=1,
              smooth=Smooth.None));
          connect(clearance.q_in, erythropoetin.q_out) annotation (Line(
              points={{-8,-30},{-34,-30},{-34,23},{-14,23}},
              color={107,45,134},
              thickness=1,
              smooth=Smooth.None));
          connect(erythropoetin.solute, K.u) annotation (Line(
              points={{-4.4,6},{-4,6},{-4,-0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(K.y, clearance.soluteFlow) annotation (Line(
              points={{-4,-14.6},{6,-14.6},{6,-26}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                        graphics={  Text(extent=  {{-180, 98}, {200, 60}}, lineColor=  {0, 0, 255}, textString=  "%name"), Bitmap(
                  extent={{-88,62},{102,-80}},
                  imageSource=
                      ""
                       +
                      ""
                       +
                      ""
                       +
                      "0HZQZUEVZVIxnsewM/n6j+UwhecR3G7CNzuwE0tlN8iFEJuuDDxAqr+TFD6bwG6yJN+pscuPxASBpDTErijdjLPghKEzpNLKBLAX0u8c57A7r4+/NQHWeKMwTkWLcsfYWXmB7AIPEyG2i1jE0Z6NrirKrJDjYm7S284jeHgKr0df/7HkFfxiKn3AP+zLNkjqC6FNCxPPqWBWwqSEs0w+fpW0pmZHeJzJ+20PGgW4FhpNUVYUjlnjyCqZ/k5y2Qt+PK5/H2oCrPHGVYA7Y3h71WjsKukLrjfhYAovBstd26iQzYpL588Ung3gL58Kkf4mMC3h+wOp/u40hAwrLUfd3UQqwvLvKdPiUmzurzfE7Tkw4mltCDZQRgeopTKc5nAYw4fHcFivdNQEWOPNw+5EAknu9mUSXBpD05tdyQR5fC5T3jUjMtYIGR5N4a9eiATmN4lUwZO5HIc9W/py5RVh9j+EvbnIWlqekB1mNS52hRAdy/QQS+kZ/q9j+JvDr+691agJsMYbgnkOnxxJVXSzK4amWLI58faq5H3sT2Q67JipaT+UY/LPT/7xiENpCXf/dY7SD0eiJYxNP3Ajl1W3wFke4S9S+Ok5/NW+vF+jJsAabyguYiHBfkNS35qeHHttWyzxVxsieHZs6Rd2AvjPX8gQ5LcRSQmfX8DBHN5dkbzh1cCkzGlZfftiJC4xae1bVRNgjRqjVPqB39qE2yvi9uk7y/Rv15Z/Kw2PzsTo4Ld5dUxpyQ++SOHhULZCbEuGH7NcqsAaNQHWqAFIr+3RuQQh+Y7EXm74y0Dx0ljK7E1k8PHk4nfjeSktk95J/V9coybAGn8fZhl8tCdDg3kOt7qyIeLaIhQ+nML3d5b3qVHjdxT11mONX47AkWPwnZ746FnI0OP5UIYhdcZjjZoAa7wRvyXWFYuqGjVqAqxRo0aN323Y9UtQo0aNmgBr1KhRoybAGjVq1KgJsEaNGjVqAqxRo0aNmgBr1KhRoybAGjVq1KgJsEaNGjVqAqxRo0aNmgBr1KhRoybAGjVq1Pjtxv8BS93cFi44VmQAAABKelRYdHNvZnR3YXJlAAB42vPMTUxP9U1Mz0zOVjDTM9YzVzCw1Dcw0TewUAi0UMgoKSmw0tcvLy/Xy8xNTE/NTUzPTM7Wyy9KBwDYmhGYfnuzVgAAACF6VFh0VGh1bWI6OkRvY3VtZW50OjpQYWdlcwAAeNozBAAAMgAyDBLihAAAACF6VFh0VGh1bWI6OkltYWdlOjpoZWlnaHQAAHjaMzezAAABTACmAmIHcgAAACF6VFh0VGh1bWI6OkltYWdlOjpXaWR0aAAAeNozNDAyAQAB8ADI6yd/qAAAACJ6VFh0VGh1bWI6Ok1pbWV0eXBlAAB42svMTUxP1S/ISwcAEXsDeF85R+IAAAAgelRYdFRodW1iOjpNVGltZQAAeNozNDQ3M7QwMzKyBAALKAIMn+/EFwAAAB56VFh0VGh1bWI6OlNpemUAAHjaMzEy0rOwNMxOAgAJpgI2toGxfgAAAE96VFh0VGh1bWI6OlVSSQAAeNoFwTkOgDAMBMAfsaKgoechVmJgRXwoBCF+z8zOpisAmA882ULqgpcXUysFJczCbwhkxta/cfbIoA76lH78td4WuK/dBm4AAAAASUVORK5CYII=",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/320px-Erythropoietin.png")}),                                                            Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                                                    graphics));
        end Erythropoetin;

        model KidneyFluidBalance
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput urineoutflowrate annotation(Placement(transformation(extent = {{40, -80}, {60, -60}}), iconTransformation(extent = {{40, -80}, {60, -60}})));
          Physiolibrary.Types.RealIO.VolumeInput plasmaticVolume annotation(Placement(transformation(extent = {{46, -12}, {86, 28}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 180, origin = {47, -7})));
          parameter Physiolibrary.Types.VolumeFlowRate Kud = 4.6666666666667e-08; //dehydratation
          parameter Physiolibrary.Types.VolumeFlowRate Kuo = 3.4666666666667e-07; //overhydratation
          parameter Physiolibrary.Types.VolumeFlowRate Jun = 1.6666666666667e-08;
          discrete Physiolibrary.Types.Volume Vpn;
        equation
          when {initial()} then
              Vpn = plasmaticVolume;
          end when;
          if plasmaticVolume < Vpn then
            urineoutflowrate = Kud * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          else
            urineoutflowrate = Kuo * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-82, 82}, {80, -80}},
                  imageSource=
                      "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",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/kidney.png")}));
        end KidneyFluidBalance;

        model RedBloodCells2
          Erythropoetin erythropoetin annotation (Placement(transformation(
                extent={{-11,-10},{11,10}},
                rotation=0,
                origin={-77,-4})));
          Physiolibrary.Population.Components.Population RBC
            annotation (Placement(transformation(extent={{-18,-26},{2,-6}})));
          Physiolibrary.Population.Sources.Growth erythropoiesis(useChangeInput=
               true) annotation (Placement(transformation(extent={{-46,-30},{
                    -26,-10}})));
          Physiolibrary.Population.Sources.Growth transfusion
            annotation (Placement(transformation(extent={{-38,14},{-18,34}})));
          Physiolibrary.Population.Components.Mortality degradation(LifeTime(
                displayUnit="d") = 10368000)
            annotation (Placement(transformation(extent={{6,-30},{26,-10}})));
          Physiolibrary.Population.Sources.Loss hemorrhage
            annotation (Placement(transformation(extent={{6,16},{26,36}})));
        Physiolibrary.Types.Constants.PopulationChangeConst RBCBaseSecretionRate(
            k=1.16e6) "13.7 ml/day (12e12 cells == 2.4 L)"
          annotation (Placement(transformation(extent={{-54,4},{-38,16}})));
          Physiolibrary.Blocks.Factors.SplineLag      EPOEffect(
            HalfTime=3*86400*Modelica.Math.log(2),
            data={{0.0,0.0,0},{1.3,1.0,1.0},{4.0,4.0,0}},
            stateName="[EPO]Delay.Effect",
          UsePositiveLog10=true,
          Xscale=1e3) "20 miu/ml = 20e3 iu/m3"
            annotation (Placement(transformation(extent={{-46,-14},{-26,6}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-118,10},{-78,50}})));
          Modelica.Blocks.Math.Gain RBCVol(k(unit="m3")=2.4e-3/12e12)
          "12e12 cells == 2.4 L"
          annotation (Placement(transformation(
              extent={{5,-5},{-5,5}},
              rotation=0,
              origin={-35,-41})));
          Modelica.Blocks.Math.Gain InitialPopulation(k=12e12/2.4e-3)
          "12e12 cells == 2.4 L"   annotation (Placement(transformation(
                extent={{5,-5},{-5,5}},
                rotation=90,
                origin={-7,7})));
        initial algorithm
        equation
          connect(erythropoiesis.port_b, RBC.port) annotation (Line(
              points={{-26,-20},{-16,-20},{-16,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(transfusion.port_b, RBC.port) annotation (Line(
              points={{-18,24},{-18,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(degradation.port_a, RBC.port) annotation (Line(
              points={{6.2,-20},{4,-20},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.port_a, RBC.port) annotation (Line(
              points={{6,26},{4,26},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(erythropoiesis.populationChange, EPOEffect.y) annotation (
              Line(
              points={{-36,-16},{-36,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCBaseSecretionRate.y, EPOEffect.yBase) annotation (Line(
              points={{-36,10},{-36,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(EPOEffect.u, erythropoetin.concentration) annotation (Line(
              points={{-44,-4},{-64,-4},{-64,-3.7},{-69.3,-3.7}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.kidney_po2, busConnector.Kidney_PO2)
            annotation (Line(
              points={{-84.6154,-12},{-96,-12},{-96,-20},{-98,-20},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-9,-3},{-9,-3}}));
          connect(erythropoetin.ecf_volume, busConnector.ecfvolume) annotation (
             Line(
              points={{-79.5385,-12},{-79.5385,-24},{-98,-24},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{2,-6},{2,-6}}));
          connect(RBC.population, RBCVol.u) annotation (Line(
              points={{-2,-26},{-2,-41},{-29,-41}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCVol.y, busConnector.RBCVolume) annotation (Line(
              points={{-40.5,-41},{-98,-41},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialPopulation.u, busConnector.initialrbcvolume)
            annotation (Line(
              points={{-7,13},{-7,30},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                        graphics={  Bitmap(extent=  {{-78, 102}, {80, -56}},
                  imageSource=
                      "",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"),                                                                                                    Text(extent={{
                      -162,-36},{66,-66}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                                                    graphics));
        end RedBloodCells2;

        model Plasma2
          Physiolibrary.Osmotic.Sources.SolventInflux transfusion(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-44,-38},
                    {-24,-18}})));
          Physiolibrary.Osmotic.Sources.SolventOutflux hemorrhage(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 180, origin={-34,-54})));
          Physiolibrary.Osmotic.Sources.SolventInflux IVDrip(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-44,-48},
                    {-24,-28}})));
          Physiolibrary.Osmotic.Sources.SolventInflux FoodAndDrink(useSolutionFlowInput = false,
              SolutionFlow(displayUnit="l/day") = 2.4305555555556e-08)                                                                                       annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation=0,     origin={-34,-10})));
          Physiolibrary.Osmotic.Sources.SolventInflux Metabolism(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 3.4722222222222e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={26,-28})));
          Physiolibrary.Osmotic.Sources.SolventOutflux SkinAndLungsLoss(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.0416666666667e-08) annotation(Placement(transformation(extent={{-11,-11},
                    {11,11}},                                                                                                    rotation = 0, origin={53,-27})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Urine(SolutionFlow(displayUnit = "ml/day") = 1.7361111111111e-08, useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={0,-28})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Feces(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.1574074074074e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={0,-8})));
          Physiolibrary.Osmotic.Components.Membrane capillaryMembrane(
            HydraulicPressureIn(displayUnit="mmHg") = 2359.8062572455,
            cond(displayUnit="m3/(Pa.s)") = 3.7265559293265e-11,
            HydraulicPressureOut=-549.2882361498,
            T(displayUnit="K"))                                                                                                     annotation(Placement(transformation(extent={{4,-70},
                    {24,-50}})));
          Physiolibrary.Osmotic.Components.OsmoticCell interstitialFluid(
            NumberOfMembraneTypes=2,
            volume_start=0.01175,
            ImpermeableSolutes={0.0061,3.1})                                                                                  annotation(Placement(transformation(extent={{26,-68},
                    {46,-48}})));
          Modelica.Blocks.Math.Add add1          annotation(Placement(transformation(extent={{46,-76},
                    {56,-66}})));
          KidneyFluidBalance kidneyFluidBalance(
            Kud(displayUnit="ml/min"),
            Kuo(displayUnit="m3/s"),
            Jun(displayUnit="m3/s"))
            annotation (Placement(transformation(extent={{-10,-28},{48,24}})));
          Physiolibrary.Osmotic.Components.SolventFlux lymphatic(SolutionFlow(
                displayUnit="l/day") = 3.45e-08)                                                     annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin={11,-39})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{44,-24},{84,16}})));
          Physiolibrary.Osmotic.Components.OsmoticCell
                                                plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit,
            NumberOfMembraneTypes=2,
            ImpermeableSolutes(displayUnit="mmol") = {0.00356,0.82})
            annotation (Placement(transformation(extent={{-26,-70},{-6,-50}})));
        equation
          connect(capillaryMembrane.q_out, interstitialFluid.q_in[1]) annotation(Line(points={{24,-60},
                  {28,-60},{28,-58.5},{36,-58.5}},                                                                     color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(interstitialFluid.volume, add1.u1) annotation(Line(points={{42,-68},
                  {45,-68}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(interstitialFluid.q_in[1], lymphatic.q_in) annotation(Line(points={{36,
                  -58.5},{36,-39},{18,-39}},                                                                             color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(kidneyFluidBalance.urineoutflowrate, Urine.solutionFlow)
            annotation (Line(
              points={{33.5,-20.2},{33.5,-21},{0,-21}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(plasma.q_in[1], capillaryMembrane.q_in) annotation (Line(
              points={{-16,-60.5},{-8,-60.5},{-8,-60},{4,-60}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(plasma.q_in[1], transfusion.q_out) annotation (Line(
              points={{-16,-60.5},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(lymphatic.q_out, transfusion.q_out) annotation (Line(
              points={{4,-39},{-16,-39},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IVDrip.q_out, transfusion.q_out) annotation (Line(
              points={{-28,-38},{-16,-38},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.q_in, transfusion.q_out) annotation (Line(
              points={{-28,-54},{-16,-54},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(FoodAndDrink.q_out, transfusion.q_out) annotation (Line(
              points={{-28,-10},{-16,-10},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Feces.q_in, transfusion.q_out) annotation (Line(
              points={{-6,-8},{-16,-8},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Urine.q_in, transfusion.q_out) annotation (Line(
              points={{-6,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(kidneyFluidBalance.plasmaticVolume, busConnector.plasmaVolume)
            annotation (Line(
              points={{32.63,-3.82},{62.315,-3.82},{62.315,-4},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(plasma.volume, busConnector.plasmaVolume) annotation (Line(
              points={{-10,-70},{-10,-78},{64,-78},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(add1.u2, plasma.volume) annotation (Line(
              points={{45,-74},{-10,-74},{-10,-70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, busConnector.ecfvolume) annotation (Line(
              points={{56.5,-71},{56.5,-70},{64,-70},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Metabolism.q_out, lymphatic.q_in) annotation (Line(
              points={{32,-28},{36,-28},{36,-38},{34,-38},{34,-39},{18,-39}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SkinAndLungsLoss.q_in, lymphatic.q_in) annotation (Line(
              points={{46.4,-27},{36,-27},{36,-38},{34,-38},{34,-39},{18,-39}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-72, 72}, {80, -78}},
                  imageSource=
                      "iVBORw0KGgoAAAANSUhEUgAAAFcAAACWCAYAAACrfBR9AAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAACXBIWXMAABJ0AAASdAHeZh94AAAU0klEQVR4Xu2dCVQUx7rHkRjjEtdojDE3i8YsJpqX58oiCrKpCKIgoCa8qHmJz3iNNyfPXKMgKBBA2XfZBAFxQwUElEVEUNz3q7hdxagRY9wQFKb/96ueGhhWQRM5M9N/znd6urq7+pxff/y7qqe6RkuSJEmSJEmSJEmSJEkvRgBeFgShA1vyIknPotLS0qFXr16dc/ny5YCSkpI0iuKzZ89eOHPmzOVTp05dOinXjtOnT8ecP3/+hxs3bowl6F344ZLqi6B1uXLlyk+XLl06RsBw/fp1EGRcvHgRBBXHjh3D4cOHcfDgQRw4cACHDh0S148cOYLi4mIWVy5cuBD8+++/f8KrlMR07dq1DwjMyZs3b4KyVIS2b98+FBQUIC8vD7t27UJmZibS09ORmpqKrVu3IiUlBZs3b8bGjRuxYcMGbNmyBbm5uaBsLqeL9CWvWtK5c+fS6V8be/fuRX5+PnJycpCVlYW0tDQR5KZNm5CcnIzExETEx8cjNjYW0dHRiIyMREREBMLDw8Xw9fVFRkYGy/aKsrKyfrx6zRb9qx8jjxWzlMFkGcmykcGMi4sTQTKIoaGhCAoKgr+/P3x8fLBq1Sp4enrCzc0NTk5O4mdmEXSx2MX5jFev2YqKijrIPJRBKSoqEv/FqQyBgYFYvXo1vLy8RIAuLi4ixCVLluDHH3/EDz/8IC5dXV3Fi8B8mfkzuygEfzCvXrNF2XiAZSXzT+a1J06cEH139+7d2L59OxISEkTYbJ+QkBCEhYVh7dq1ou+yfRhUFswS2D4ss8k+PubVa7YIWDEDxrKU+SbzT+axDBbzYJbN7N+dtRJYsM+FhYWiNzMbiYmJQUBAgGgTDGxwcLAEVyEGlwFlgBgcPz8/0VMZbAVwVqbYxtYVnqvYzrax45mVSHCVpAy3uWAAFRCbCgluPbUUbktCgltPEty/UBLcv1DKcANrQCl7K/ssX/cX1wN5OYU/HeNfux4kwa2runDloPz8QrHaLwKrfNfAyzcS3j7RtIyCJ332pDJvitW+EfDxD6GbXLB4jH+gH2VukARXWQRjP4Pr4xcGT79IrCZYEUHuWB/xD6RFf428tbYoXDcZhQkTaWmJPXFTkRnjiI1r/o7o0OUEN4DgR9HFCBPh0sVivTSphwZAKyw8/LB/cDyiQlyQH2eDK1sGo3xHD2AXbWaRXS9yKPi2qowuuLn9bziQaIr14YvhE7AGvgHh5evWrXubn0JzJcKNiDlcnGyLiswucngM3E6KrPrRjodSGduPXwDZTm1cTBlNWe9xc57HlR78FJqtC9uMCrGXg6oDsSWhBSHzZVpq0/G0nq+F26nv3kuMTJQeOVLualXs6HUcBZR5WS9BaBRg0yEQVHnIPzPLeJyh9Tg/oO+7/ARP1Smnj15+uGnubL6qToLWym/fO4n89hB2UNZmEjQKIVMOrDGgLBTblJdCBh1PF2nzyt4yrU5GQ/gJnqoK7/fnVa96DRUpju/wIvVQ+DZ0mmk/6jLOvw2hqDNlbzvICLIImsHKrAUuglVaCrSNARXSKetpWZ3XASh9A74rh2DAx3834qdoVnczF/V8srLbb/CmjHft5s6L1UPFl9F3wdfGD4SrAyFcHwCBIFcfew2yfa+iancHVGe/JIfJMpPBVHze9RLBfBmyvZ0gHOoB2dk3IaM6UD4IoV7/BVOLpVb8FM2qwvMtH3jSOVy0Ue2kffuee79efJPqq/CY0Oe7r43uCVcGANfeo3gf+HUQxfsQrhLsy+8AF/4GoeQtyM71F5fC+b8Bl96BcOU9CNcIKO0rHldKn+8PwJpVwzDN3s2Wn6JJPQgyHFy1ouNjLKf/Die6aJ70H+CktZJvVn01gEtAa4NgMWAMYE0wkLycRZ39Ke4NROTqEXCc7TODn6JJPfbolwc3AruMwDrR0oXgLte+/yTgsxF8F9VW83CfITjcWbNXNQv3fpT5t/AmS1nGslYpXNuhctVbZfdLdvTmu6qu2gLuH0fzuj/x6PsbswMZswMluAJbkgdXBA334LurrtoCbqX3gJ8ZQIHsQGgAl9aXt0PViq73y7bOV+2OyIuGey/wg15VLh1uw4WafE7Ulm4Al8qWUWfkl3Z44trtJ36YaupFw320omckPJQylnkuBVsX/Zfd3FisoHazk3YpnLU68UNVTy8S7sPVg83g1V7MSri/Qt7aGYJHNwjOZBFLKZwpY7060XbqjLjTfn7Ulv5Z61t+uOrpRcGtvFY8qDJ+0uVKzz5ZT5ZpL7qz+rOZD1PmzX5SFPAjfN8EllCmBn76qDLbZeHtkPFf3XYf9GWl3xtO1T4Dv2NP7lRSLwqucLukf+W1XYP4ao2EwpA+shWdHzCLqAobcV8QhM58k+qr8ILQZ8H/jv9T4Ub5UCdi7tM7EUxC/Mz+MpeOD5nvysKGPyS46vOo8hjBXfityZ8IdwCi/UZh9jdBLYOb88tgwa2HDEvJFsJGPCK4b/JNqq82h5vn/YkIlzK3Omjo7wRX9XtmCrU1XOQ5fyis7F6FlQR3ZffDvFg91NZwH2csHSys6C5j7VqZ+2vHebF6qM3hZjl/BveegCvB9eh9kherh9ocbp4SXPfuEtxmo9VwV0pwWxythZvjOhRuPSS4LYpWwhWynYfUwHXrJcFtNloJ98lul+H4pZcEt0XRWrhF/gbw7qOwhRO8WD3U5nD3++jDu7f8y0mP3v8CoM03qb7a/IaW/c8hght1ItiDm6BPH0gPbpqLVsKtSJv3nsylcwV75CgLGio9FWs2Wgs3xfEdmUvHcjncIRLcZqOVcB8l2b1VvbyD+LBcgvu0aCXcB3HWfWTO7cvgLMF9erQSbnmifT/Z8g5/SHBbEq2Ee2/rtx9Uu3Z+LLeFTyS4zUYr4T7MXDxUtrKrvCkWOFiC22y0Eu6TnUuGCe7dxIEhEtynRSvhPspZMQaePSW4LYrWZu6O/x8Fjx4S3BZFK+E+3jz/cyhsIXhIBcHtzzepvtocbuLcwdWur8rEBzeer18muOoz4qat4VYk2Q2odulYyYbvy5ZpHeTF6qE2v6EFj2Hd33IO9wgvVg+1eeYW+prKvHrJxy04aR/jxeqhNvfco2vnIuAN8ZsIQcrcp0RrMzd7mTG8e4kjySW4T4sm4GLp0nZlgvAqX61RedrCkTKPbjI2Vgw/Sze05qMpuAcPtv9j6/+tE7bbHS9PWxTzMH2h+e8nk966vie5N7UW7rOnYtX+A25dFYQ3b3j37VyVMd/0btKsr59EfP5zZXHIJJUcXf4ibeHxGqMhMrcu4ntm8OyKSrfXyqo8+h4TlneQCUvbAb/0xCPPd0qrlrX/N7y60npHIEEXFVcLTXkVqqUX7bmPIk0WwauD2CNj2Sp+pb5MW3xtSraU1tl7wK4Emn326YqKfDdnfqjq6UXDTQa0KwM+OcI8lr1vJob42hR7fYqVyZcM+qNY00O5wEv8UNXTi4bLVF7oPbzKu0+l+O2D4qVqHgq41av6VZUfiR/OD1FNnbgovP79PLMHwr8JzAuCy1QROnI+e9+swRuU7O1Jr1dQkWDtzXdVXZWUCF2/cdS7JlwbxOG+J59noT60JkKxb83+LYTLVOnWM5a9TcnemBStgGUx2UFVwODzv6nDTyMcuyF0njNzxEWhlOCWEtjSgeIEFcK19yH8+gEtB0HG1hXzK5RSOa3L2GQX19k+bJ3iKpWVcri+LYNbsuDtDtXO7Q/CnW5mDDC7yXl2x8Nti8z4LqqtQ7+i01cOw0qE64Mg3KQMZOAuvA3Z6b6oPtID1fu7yqda2dMRQv4r8uWeTqgq6orqQz0gnOgDWUl/VLMLw2YMuT9QhPvlXF97fopmVe7ccZjgol0lLKesdW+H8pBRCXyT6gv0N9Xqg8O4+TGEk31QXdBRnHxNnEAonUIxkRAL9rlesP2EzHaQ5XWA7HBP4M67WOMzGnYzvGz4KZ4q2bIObmwKliqvfnfKzyWrz3toeZfR/fu5+jdkhZ3lU1cxaGxGJj5RUIuDHcsuRnF7xLp/BDM7D0t+iqcKTh+9XOXW88LjZHv1mp0pr1Tof37zyAo2G57Q6tnwGolsLdza1AVh7vYj+SlapDs5rkOFW2fe4KvqIerLd3yc+ekFNk2gjE0X2Biw1kQutVEzOz4ojZ+iPt+FPY+uRPjlCPk6NRNkCuKcjnT3VgoFPHGdzZYnTt5GSxZsfxbs+Ly+uJX48/X4Gbe78uo1W8U2c7bcDE7CnW2LUZnx35BlvVILSxHNrRPgJ5kD8Sh9NsrWJWCb45JTVK36jBB/Hu3VGbn+pLEpjs5fgfO+CShdtwa3Uv6Ju9sd8TDNHJXpw/E4fTAe7/iQ4mP6PBSVaYZ4mDod91L+gd+SAnA+NAEFiwORPMkGv3zy0VZetaQiQ6Ok42MNUDByOPaOM8K+6XNweJ4rji8NwWmPGJzzTcS5gGSUBG/EucANOOu/Hie84nFoeRh2f++FbbO+w1oTCwTT8VGjRyFg5IgwXrWkfWamRcfGjsNegzEUY7GHQOcZjkWesQlyJ1kge5oNsu0dkDPrf5A54wuk2kzHFksrJJmZIo72izEwQCQdE07Hx44ZQ3CHB/OqJe2fMOHwUQ63cNw4FIw3QYHZBORPmoQ8S0vkTrVGtq0Ndjk4IIMgp06bhpQpU7Bh8mQkTpiAeBMTRBsa1sD1HzE8llctab+5+SEGt5BlLsHdO94Y+eZm2C3CtULO1GnInj4du2bOQIbDDKTa2mKLNYNrgaQJ5ojjcCPo+BgGd+SIJF61JGW48swdjz3m5pS5FsizsqLM5XBnzKyBm2JtjY2UuUk8c2OU4AaOHJ7Mq5bUKFwzM7ktWHFb4HAzZzQH1wDRY/TJc4fl8aolNQVXtIVWwl2jr8dsoWSDzUfS7wMzKeCyG1oRWzbI3KnIUcAlW0izscXW+nCN5De0cD1d+I8eVZbgYPEar16z1STciYrWAsG1rYWbTk2xhnCNEMGaYwQ3UGf03VAbG/V5dPg8UoZbqAR3D8HdXQPXluDOqAvXsm7myuHqIUBn1J0YW9u+vHrNVgO4Rk3DzaLsTaMsVs7cdQQ3lmduBMH11xlVFjVtmvrMD/Y8agous4VauNSJqA+3TubWwg3QGXk7xNq6D69es1UX7tg6nlsHLvXQauFOJbiWWD9xItaZmtZkrui5ejrlSY5q9oMaz6qGNzRj7DGlToQId3KNLWRzuOkc7qYGcMciVFcHoeMMsMvFRbUHdPxZaghXOXMnU/fXWszclsAN0dFBpLER9vr7j+PVa7bq2IIB2YLouaYEdyLPXAa3JZlrQHBHI8bMBIfj4ix49ZqtBplLoBRw86hFoJy5OzncbWQVDeCOY5k7CgkWE3Fq2zZHXr1mq27mPi/c0YibYIajiclTePWarebg7laGay+Hu8PWriFc8uk1BDeMbmgRRuOQ4eIymlev2WroufXgUps2x0YJ7vRm4OrpIIxaC+lLlgzj1Wu26sI1kMMlYE+Fa2WJ5EmTkEAti1q4ugijG9v2H5d8zqvXbDUNd4IIN7dRuNPEzBXhmpphrRLccMOxyHR2Vo9fhnpeNQmXurbNwd1sZVWTubVwyXMNxyHLxaVVw5nUVspwixqBmyfCpXauvX0L4OoS3LEEd5kEl6k5uHmTLShzp7QQ7jhqLegimnpoBb7eY3n1mq1G4ZqYKMG14k0xgjuTwbVvMnMj9PURrK/7aMuCBQN49ZqtBnANleEyW5Bnbg7B3cXhbp/WEG4kZe4a9u2v7qjb4RbS1zyiGsI1rANXYQstg6uPIN3Rd9ZYWLzOq9dsKcMtpMwrpB7WHlMluFM4XDuCS56bQUsF3A0WFnXgRhDcQD2d+/FTpPG5ohrApcwtMDHFHnNqLVgwuFbIpaZYA7hUroAbx+BSE4zBDdLXrYy1s5M8l6kxuHuMKXMJbn4DuDMaZG6iuTnijI1r4Abr6VbEzbJp8W+tq7XqwjWogcsyN5/g5ZEt5NpMI7h28vFiIlwbytwpdeBGEdxIqoM899ZaKyv1+eXp51GjcOmGJrcFPl6Mw92pBHeLVeNwg/V07kZaWqrP5GvPo8bgFihl7m6WuWQDcrjkudQNTm0EbjRvioXo61Umz5o1kFev2WoOrpi5HG623XR5U4zgbicP3lLPFmLGGYpNsdAxetWbHB0/5NVrthrc0AhSU3DFHppDc3BZ5upWJTg4vM+r12w1Dde81nNFW2DjxchzWeYyW6gPlzKewSXPrUqaMkVqijE9C9xUnrlsSFN9WwgfZ4CshQs/49VrturDZUP3nxVuuL4eYs1NcCAkZDyvXrOlgMsGPxcpwzVTDN1nQ5qoEzGd2rnUQ8u0l4/RTaHWwkZmC9RNjue2wEY5JlhMxImNG1v81rpaq2VwKXNr4DrI4U5RGqNLcMU3evR0kWRpgZMpKbN49Zqt/aamBxuDW1AH7lRkT2fDSOVwUxlc67oDoEW4ZAvxE8xQHBU1iVevuQLwyiEH+0uH9OVgxXYugS6gTJS/0VM7dF8OVz4AujG4YmtBXx8RRoayHFfXofwUmis2jV+htVXMSZa5IlwKEe74Z4IbTXBDTUxunykulp4tMBWNNbc5TmAUtsDG6Ipwzeq+dKKAm9UkXCOsNdBHnLXNSZX9Zf8/Wwe9VgwoJn8tJr9ktrBXhEu2IHquElw2dJ/Aim/00GcGd9NkS4I7sSZz1483RPLXcxbwqiUxHZw7N+7seCPs0+eeywZA14FrzYeRcriKzOVD99cZmyGBsj3GfOJxylrVnSLwr9Cv27Z1KjI22X52/HhxGKkcLhsAPRG59eBmkTXIx+gqbGESEoyMkGQxCVsXLx7Dq5SkrCyTmZ0LjYwy/2ViiiKyhQI+XizXanINXGYLtXCnEVwLbDQxxo6ZM5Hv7f0Tr0pSY1q6FO32m5l4HKSWwtEJFtRiMEMOdQp2k+eyF/1Y5u6k2E6dihTaJ8NmKjK+mXd7f2hEiyZpk0TaN+ebsQccHTMOzPwCR6njsN/ejsIBRV98gT1ffYX9383HPpflOLk2bvP9svvSs9tn0a38/M9PRUYsKlkXl3o6KCjjXGxs1oWdO3fePXNmsSAIOnw3SZIkSZIkSZIkSZIktZm0tP4DGAqTHQq290QAAAAASUVORK5CYII=",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/plazma.png"),                                                                                                    Text(extent=  {{-100, -62}, {96, -98}}, lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end Plasma2;

        model VolumeRefill2
        "injects/removes volume if the pressure on connector is > 0"
          DesiredFlowrate                             desiredFlowrate(flowtime(
                displayUnit="s") = 1)
            annotation (Placement(transformation(extent={{-4,6},{16,26}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent={{56,-26},
                    {76,-6}}),                                                                                                    iconTransformation(extent = {{82, -100}, {102, -80}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeRefill(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-14,-26},
                    {6,-6}})));
          Modelica.Blocks.Logical.Switch switch1
            annotation (Placement(transformation(extent={{14,-4},{0,10}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst zeroRefill(k(
                displayUnit="l/min") = 0) annotation (Placement(
                transformation(
                extent={{-8,-6},{8,6}},
                rotation=180,
                origin={38,-4})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{70,10},{50,30}})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=
               0)
            annotation (Placement(transformation(extent={{46,8},{30,24}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08) annotation (
             Placement(transformation(extent={{28,-26},{48,-6}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-32,18},{8,58}})));
        equation
        /*  if desiredFlowrate.volumeflowrate < 0 then
    volumeRefill.solutionFlow = -max(0, min(-desiredFlowrate.volumeflowrate, -maxflowrate));
  else
    volumeRefill.solutionFlow = desiredFlowrate.volumeflowrate;
  end if;*/
          connect(switch1.y, volumeRefill.solutionFlow) annotation (Line(
              points={{-0.7,3},{-4,3},{-4,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(desiredFlowrate.volumeflowrate, switch1.u1) annotation (Line(
              points={{15.9,18.5},{15.4,18.5},{15.4,8.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(zeroRefill.y, switch1.u3) annotation (Line(
              points={{28,-4},{28,-2.6},{15.4,-2.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, greaterThreshold.u) annotation (Line(
              points={{54,16},{47.6,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterThreshold.y, switch1.u2) annotation (Line(
              points={{29.2,16},{26,16},{26,3},{15.4,3}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(port_b, conductor.q_out) annotation (Line(
              points={{66,-16},{48,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(volumeRefill.q_out, conductor.q_in) annotation (Line(
              points={{6,-16},{28,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(desiredFlowrate.volume, busConnector.bloodVolume) annotation (
             Line(
              points={{7.4,23.2},{7.4,38},{-12,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{3,6},{3,6}}));
          connect(desiredFlowrate.desiredVolume, busConnector.desiredBloodVolume)
            annotation (Line(
              points={{-0.8,23.2},{-0.8,38},{-12,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{1,3},{1,3}}));
          connect(pressureMeasure.q_in, conductor.q_out) annotation (Line(
              points={{64,14},{64,0},{48,0},{48,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-28, 36}, {34, -30}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Rectangle(extent=  {{-24, -28}, {-20, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{30, -26}, {34, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{6, -30}, {6, -38}, {8, -40}, {12, -46}, {10, -48}, {12, -52}, {14, -54}, {16, -56}, {14, -58}, {12, -62}, {14, -64}, {18, -66}, {20, -68}, {22, -74}, {24, -76}, {28, -80}, {34, -82}, {40, -86}, {48, -90}, {54, -92}, {60, -94}, {64, -94}, {80, -96}, {88, -96}, {88, -96}, {86, -94}, {80, -92}, {74, -92}, {64, -90}, {62, -90}, {56, -86}, {46, -84}, {40, -80}, {36, -78}, {30, -76}, {26, -70}, {24, -68}, {22, -64}, {18, -60}, {22, -54}, {16, -50}, {16, -46}, {18, -44}, {12, -38}, {10, -34}, {10, -30}, {6, -30}}, lineColor=  {127, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.None, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-28, 62}, {34, 56}}, lineColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-28, 56}, {34, 32}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                    lineThickness=                                                                                                    1),
                Text(
                  extent={{-100,100},{100,62}},
                  lineColor={0,0,255},
                  textString="%name")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={Text(
                  extent={{10,38},{64,28}},
                  lineColor={0,0,255},
                  textString="Allow change only
if the pressure is 
above 0 mmHg.")}));
        end VolumeRefill2;

        model BloodProperties
          Modelica.Blocks.Math.Add DesiredBloodVolume
            annotation (Placement(transformation(extent={{8,-32},{28,-12}})));
          KidneyPO2Estimate kidneyPO2Estimate(spline(data=[0.3,0,0; 0.4,36.3,1;
                  0.5,60,0]))
            annotation (Placement(transformation(extent={{10,-96},{30,-76}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-20,-8},{20,32}})));
          Modelica.Blocks.Math.Division hematocrit
            annotation (Placement(transformation(extent={{8,-64},{28,-44}})));
          Modelica.Blocks.Math.Add3 BloodVolume
            annotation (Placement(transformation(extent={{12,34},{26,48}})));
          Physiolibrary.Types.Constants.FractionConst initialHematocrit(k=0.4)
            annotation (Placement(transformation(extent={{-2,68},{6,76}})));
          Modelica.Blocks.Math.Product InitialRBCVolume
            annotation (Placement(transformation(extent={{14,64},{24,74}})));
          Modelica.Blocks.Math.Add InitialPlasmaVolume(k2=-1)
            annotation (Placement(transformation(extent={{16,82},{26,92}})));
        equation
          connect(DesiredBloodVolume.u2, busConnector.RBCVolume) annotation (Line(
              points={{6,-28},{0,-28},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.u1, busConnector.plasmaVolume) annotation (Line(
              points={{6,-16},{0,-16},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.y, busConnector.desiredBloodVolume) annotation (
              Line(
              points={{29,-22},{34,-22},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.u2, DesiredBloodVolume.y) annotation (Line(
              points={{6,-60},{0,-60},{0,-38},{32,-38},{32,-22},{29,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.u1, DesiredBloodVolume.u2) annotation (Line(
              points={{6,-48},{6,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.y, busConnector.hematocrit) annotation (Line(
              points={{29,-54},{34,-54},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.y, kidneyPO2Estimate.hematocrit) annotation (Line(
              points={{29,-54},{32,-54},{32,-76},{0,-76},{0,-86},{12,-86}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(kidneyPO2Estimate.pressure, busConnector.Kidney_PO2) annotation (Line(
              points={{29.2,-86},{34,-86},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u3, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{10.6,35.4},{0,35.4},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u2, busConnector.systemicBloodVolume) annotation (Line(
              points={{10.6,41},{0,41},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u1, busConnector.heartBloodVolume) annotation (Line(
              points={{10.6,46.6},{0,46.6},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.y, busConnector.bloodVolume) annotation (Line(
              points={{26.7,41},{34,41},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{8,0},{8,0}}));
          connect(initialHematocrit.y, InitialRBCVolume.u1) annotation (Line(
              points={{7,72},{13,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialRBCVolume.u2) annotation (Line(
              points={{26.7,41},{26.7,62},{13,62},{13,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialRBCVolume.y, busConnector.initialrbcvolume)
            annotation (Line(
              points={{24.5,69},{34,69},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialRBCVolume.y, InitialPlasmaVolume.u2) annotation (Line(
              points={{24.5,69},{24.5,78},{15,78},{15,84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialPlasmaVolume.u1) annotation (Line(
              points={{26.7,41},{26.7,60},{-8,60},{-8,90},{15,90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialPlasmaVolume.y, busConnector.initialPlasmaVolume)
            annotation (Line(
              points={{26.5,87},{34,87},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-40,40},{40,-20}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,127,127}), Text(
                  extent={{-100,-20},{100,-60}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end BloodProperties;

        model DesiredFlowrate "control total blood volume"
          parameter Physiolibrary.Types.Time flowtime = 0.1;
          parameter Boolean enabled = true;
          Physiolibrary.Types.RealIO.VolumeInput volume annotation(Placement(transformation(extent = {{16, 60}, {56, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {14, 72})));
          Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-72, 56}, {-32, 96}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-68, 72})));
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeflowrate annotation(Placement(transformation(extent = {{88, 18}, {108, 38}}), iconTransformation(extent = {{82, 8}, {116, 42}})));
        equation
          volumeflowrate = if enabled then (desiredVolume - volume) / flowtime else 0;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 56}, {98, -8}}, lineColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 213, 255}), Ellipse(extent=  {{-10, 52}, {46, 0}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{-92, 46}, {-38, 8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{-32, 30}, {-14, 24}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{56, 36}, {74, 30}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{56, 24}, {74, 18}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid)}));
        end DesiredFlowrate;

        model PlasmaBleeding
          extends Plasma2(
            hemorrhage(useSolutionFlowInput=true),
            transfusion(useSolutionFlowInput=true),
            plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit));
        equation
          connect(hemorrhage.solutionFlow, busConnector.plasmableed)
            annotation (Line(
              points={{-34,-61},{-34,-78},{64,-78},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(transfusion.solutionFlow, busConnector.plasmatransfusion)
            annotation (Line(
              points={{-34,-21},{-38,-21},{-38,-18},{-44,-18},{-44,18},{64,18},
                  {64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PlasmaBleeding;

        model RBCBleeding
          extends RedBloodCells2(
            transfusion(useChangeInput=true),
            hemorrhage(useChangeInput=true),
            RBC(Simulation=Physiolibrary.Types.SimulationType.NoInit));
        equation
          connect(transfusion.populationChange, busConnector.RBCtransfusion)
            annotation (Line(
              points={{-28,28},{-28,30},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hemorrhage.populationChange, busConnector.RBCbleed)
            annotation (Line(
              points={{16,30},{16,46},{-98,46},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-120,-100},{100,100}}), graphics));
        end RBCBleeding;
      end BloodVolume;

      model BloodVolumeControl
        extends Cardiovascular.Controlled.LongTermControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-40,2},{0,42}}), iconTransformation(
          extent={{-38,4},{2,44}})));*/
        replaceable BloodVolume.Plasma2
                            plasma(plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit))
          constrainedby BloodVolume.Plasma2
          annotation (Placement(transformation(extent={{-28,26},{4,58}})));
                                   //(plasma(volume_start=bloodProperties.BloodVolume.y))
        replaceable BloodVolume.RedBloodCells2
                                   redBloodCells(RBC(population_start=2, Simulation=
                Physiolibrary.Types.SimulationType.NoInit)) constrainedby
        BloodVolume.RedBloodCells2
          annotation (Placement(transformation(extent={{-20,-18},{14,14}})));
        BloodVolume.BloodProperties bloodProperties annotation (Placement(
              transformation(rotation=0, extent={{-18,-40},{10,-12}})));
      initial algorithm
        plasma.plasma.state:=bloodProperties.InitialPlasmaVolume.y;
        redBloodCells.RBC.state:=redBloodCells.InitialPopulation.y;

      equation
        connect(plasma.busConnector, busConnector) annotation (Line(
            points={{-1.76,41.36},{20,41.36},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.busConnector, busConnector) annotation (Line(
            points={{-16.6,2.8},{-16.6,12},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bloodProperties.busConnector, busConnector) annotation (Line(
            points={{-4,-24.32},{-4,-22},{20,-22},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={Text(
                extent={{-24,-36},{80,-58}},
                lineColor={0,0,255},
                horizontalAlignment=TextAlignment.Left,
                fontSize=10,
                textString="initial algorithm 
  plasma.plasma.state:=bloodProperties.InitialPlasmaVolume.y;
  redBloodCells.RBC.state:=redBloodCells.InitialPopulation.y;")}),
                                                            Icon(
              coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end BloodVolumeControl;

      model MeanAortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Pmean(start=11300)
        "Mean pressure during heart cycle"                                            annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 6300) "sum of pressure of cardiac cycle";
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 0.75) "length of cardiac cycle";
      //protected
      equation
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 0.75;
          Pmean =  SumPressure / HP "mean pressure";
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}),
                         graphics={                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pmean")}));
      end MeanAortaPressureMeasurement;

      model BloodFlowMeasurement
      "measures flow, diastolic, systolic and mean pressure"
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-82, -102})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-62, -102})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-42, -102})));
        Physiolibrary.Types.RealIO.VolumeOutput SV "systolic volume" annotation(Placement(transformation(extent = {{22, -42}, {42, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {32, -100})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput CO "Cardiac output" annotation(Placement(transformation(extent = {{50, -40}, {70, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {52, -100})));
        Physiolibrary.Types.Volume Volume(start = 0)
        "sum of volume through cyrdiac cycle";
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 133000);
        Pressure Pmax(start = 0);
        discrete Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP "length of cardiac cycle";
        Boolean b;
        Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-14, 58}, {26, 98}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 100})));
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
        Pmean := q_in.pressure;
        HP := 1 / HR;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
        when {b} then
          T0 = time "initial time of current cardiac cycle";
          HP = 1 / HR;
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean = if pre(HP) > 0 then SumPressure / pre(HP) else pre(Pd) * 2 / 3 + pre(Ps) * 1 / 3
          "mean pressure";
          SV = Volume
          "systolic volume is equal of total volume passed through this block";
          CO = SV / HP
          "cardiac output calculation from systolic volume and heart period";
          reinit(Volume, 0) "reinitialisation of volume";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(Volume) = q_in.q;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-83, -76}, rotation=  90, textStyle=  {TextStyle.Bold}, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-62, -75}, rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-40, -55}, rotation=  90, textString=  "Pmean"), Text(extent=  {{-84, 78}, {-34, 62}}, lineColor=  {0, 0, 0}, pattern=  LinePattern.Dash,
                  lineThickness=                                                                                                    1, textString=  "HR"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {54, -73}, rotation=  90, textString=  "CO"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {32, -73}, rotation=  90, textString=  "SV")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end BloodFlowMeasurement;

      model AortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,70})));
        discrete PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,50})));
        discrete PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmax,Pmin;
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
      //protected
        Pressure PmeanA "approximation of mean pressure";
        Pressure Pmean2 "approximation of mean pressure";
      /*initial algorithm

  Ps := q_in.pressure;
  Pd := q_in.pressure;
  Pmean:=q_in.pressure;*/
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        PmeanA =  (2/3)*Pmin+(1/3)*Pmax;
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {initial(),edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 1;
          Ps =   pre(Pmax)
          "systolic pressure = maximum pressure during cardiac cycle";
          Pd =   pre(Pmin)
          "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean2 =  pre(SumPressure) / pre(HP) "mean pressure";
          Pmean = if (Pmean2<Pd) then max(Pd,PmeanA) else Pmean2;
      //    Pmean =  max(Pd,(SumPressure / pre(HP))) "mean pressure";
                   //if ((SumPressure / pre(HP))<Pd) then PmeanA else
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
          reinit(Pmax,  q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin,  q_in.pressure) "reinitialisation minimal pressure";
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                         graphics={                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pmean"),
                                                                                                    Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={48,
                    49},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pd"),
                                                                                                    Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={47,
                    70},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Ps")}));
      end AortaPressureMeasurement;
    end Control;

    package Scenario "models of various scenarios"
        extends Modelica.Icons.VariantsPackage;

      partial model StenosisControl
        extends Controlled.ScenarioControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{-28,14},{12,54}})));*/
        Stenosis.StenosisElastance venacavastenosis
          annotation (Placement(transformation(extent={{-80,-52},{-28,-2}})));
        Stenosis.StenosisResistance aorticstenosis
        "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{-30,-54},{22,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst AVgon(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={14,-9})));
        Stenosis.StenosisResistance mitralvalvestenosis(InitialResistance(displayUnit=
               "(mmHg.s)/ml"), FinalResistance(displayUnit="(mmHg.s)/ml"))
        "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{22,-54},{74,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst mvgoff(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={66,-9})));
      equation
        connect(venacavastenosis.hydrauliccompliance, busConnector.venacavacompliance0)
          annotation (Line(
            points={{-51.92,-21},{-51.92,17.5},{80,17.5},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(aorticstenosis.conductance, busConnector.avoutflowresistance)
          annotation (Line(
            points={{-1.92,-23},{-1.92,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mitralvalvestenosis.conductance, busConnector.mv_gon)
          annotation (Line(
            points={{50.08,-23},{50.08,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mvgoff.y, busConnector.mv_goff) annotation (Line(
            points={{53.5,-9},{54,-9},{54,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(AVgon.y, busConnector.avbackflowconductance) annotation (Line(
            points={{1.5,-9},{1.5,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics={                                                                                                    Rectangle(extent={{
                    -80,50},{64,22}},
                  lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None),
              Text(
                extent={{-72,76},{82,54}},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="stenosis",
                lineColor={0,0,0}),
              Line(
                points={{-86,-2},{-32,-2},{-2,32},{74,32},{78,32}},
                pattern=LinePattern.None,
                smooth=Smooth.None,
                arrow={Arrow.None,Arrow.Filled}),
              Text(
                extent={{-72,40},{62,32}},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Resistance",
                lineColor={0,0,0})}),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics));
      end StenosisControl;

      package Stenosis
          extends Modelica.Icons.UtilitiesPackage;

        model StenosisElastance
          parameter Physiolibrary.Types.HydraulicElastance InitialElastance;
          parameter Physiolibrary.Types.HydraulicElastance FinalElastance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput hydrauliccompliance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          hydrauliccompliance = 1 / (InitialElastance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalElastance - InitialElastance) / duration else FinalElastance - InitialElastance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisElastance;

        model StenosisResistance
          parameter Physiolibrary.Types.HydraulicResistance InitialResistance;
          parameter Physiolibrary.Types.HydraulicResistance FinalResistance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicConductanceOutput conductance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          conductance = 1 / (InitialResistance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalResistance - InitialResistance) / duration else FinalResistance - InitialResistance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisResistance;
      end Stenosis;

      model BleedingTransfusionScenario
        extends Cardiovascular.Controlled.ScenarioControl;
        import Physiolibrary.Types.*;
        //after 1 minute, 5minutes bleeding
        parameter Time Tbs=60,Tbd=5*60;
        parameter Volume BloodLoss=0.001;
        //after 20 minutes, transfussion for 10 minutes
        parameter Time Tts=20*60,Ttd=10*60;
        parameter Volume BloodTrans=0.001;

        BleedingTransfusionBurkhoffInterface bleedingTransfusionBurkhoffInterface
          annotation (Placement(transformation(extent={{-8,-36},{22,46}})));
        BleedingTransfusionRate bleedingTransfusionRate(
          Tbs=Tbs,
          Tbd=Tbd,
          BloodLoss=BloodLoss,
          Tts=Tts,
          Ttd=Ttd,
          BloodTrans=BloodTrans)
          annotation (Placement(transformation(extent={{-96,-2},{-52,40}})));
      equation

        connect(bleedingTransfusionBurkhoffInterface.hematocrit, busConnector.hematocrit)
          annotation (Line(
            points={{-0.5,17.3},{-40,17.3},{-40,90},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.RBCbleed, busConnector.RBCbleed)
          annotation (Line(
            points={{18.25,33.7},{80,33.7},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.RBCtransfusion, busConnector.RBCtransfusion)
          annotation (Line(
            points={{18.25,17.3},{80,17.3},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.plasmableed, busConnector.plasmableed)
          annotation (Line(
            points={{18.25,0.9},{80,0.9},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.plasmatransfusion, busConnector.plasmatransfusion)
          annotation (Line(
            points={{18.25,-15.5},{80,-15.5},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionRate.bleedrate,
          bleedingTransfusionBurkhoffInterface.bleedrate) annotation (Line(
            points={{-54.2,37.9},{-31.5,37.9},{-31.5,37.8},{-0.5,37.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(bleedingTransfusionRate.transrate,
          bleedingTransfusionBurkhoffInterface.transrate) annotation (Line(
            points={{-54.2,25.72},{-54.2,-30.26},{-0.5,-30.26}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Line(
                points={{-76,58},{-46,58},{-28,50},{-28,26},{-8,12},{4,14},{28,14},{50,
                    8},{54,20},{62,60},{80,60}},
                color={0,0,255},
                smooth=Smooth.Bezier)}),
                                       Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics));
      end BleedingTransfusionScenario;

      model BleedingTransfusionBurkhoffInterface
        //Real RBCbleed,plasmableed,RBCtransfusion,plasmatransfusion,hematocrit;

        Physiolibrary.Types.RealIO.VolumeFlowRateInput bleedrate annotation (
            Placement(transformation(extent={{-40,60},{0,100}}), iconTransformation(
                extent={{-40,60},{0,100}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput transrate annotation (
            Placement(transformation(extent={{-40,-106},{0,-66}}), iconTransformation(
                extent={{-40,-106},{0,-66}})));

        Modelica.Blocks.Interfaces.RealInput hematocrit
          annotation (Placement(transformation(extent={{-40,10},{0,50}})));
        Modelica.Blocks.Interfaces.RealOutput RBCbleed annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,0}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,70})));
        Modelica.Blocks.Interfaces.RealOutput RBCtransfusion annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-18}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,30})));
        Modelica.Blocks.Interfaces.RealOutput plasmableed annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-38}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,-10})));
        Modelica.Blocks.Interfaces.RealOutput plasmatransfusion annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-54}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,-50})));
      equation
       RBCbleed=bleedrate*hematocrit*12e12/2.4e-3;
       plasmableed=bleedrate*(1-hematocrit);
       RBCtransfusion=transrate*0.4*12e12/2.4e-3;
       plasmatransfusion=transrate*(1-0.4);
      /* connect(busConnector.hematocrit,hematocrit);
 connect(busConnector.RBCbleed,RBCbleed);
 connect(busConnector.plasmableed,plasmableed);
 connect(busConnector.RBCtransfusion,RBCtransfusion);
 connect(busConnector.plasmatransfusion,plasmatransfusion);
*/
        annotation (Diagram(coordinateSystem(extent={{-40,-100},{40,100}},
                preserveAspectRatio=false), graphics),                       Icon(
              coordinateSystem(extent={{-40,-100},{40,100}}, preserveAspectRatio=false),
              graphics={Rectangle(
                extent={{-20,100},{20,-100}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255})}));
      end BleedingTransfusionBurkhoffInterface;

      model BleedingTransfusionRate
        import Physiolibrary.Types.*;
        //after 1 minute, 5minutes bleeding
        parameter Time Tbs=60,Tbd=5*60;
        parameter Volume BloodLoss=0.001;
        //after 20 minutes, transfussion for 10 minutes
        parameter Time Tts=20*60,Ttd=10*60;
        parameter Volume BloodTrans=0.001;

        Physiolibrary.Types.RealIO.VolumeFlowRateOutput bleedrate annotation (
            Placement(transformation(extent={{80,80},{100,100}}), iconTransformation(
                extent={{80,80},{100,100}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput transrate annotation (
            Placement(transformation(extent={{80,22},{100,42}}), iconTransformation(
                extent={{80,22},{100,42}})));
      equation
        if time>Tbs and time<Tbs+Tbd then
          bleedrate=BloodLoss/Tbd;
        else
          bleedrate=0;
        end if;
        if time>Tts and time<Tts+Ttd then
            transrate=BloodTrans/Ttd;
        else
            transrate=0;
        end if;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Line(
                points={{-80,80},{-80,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{80,-80},{-80,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-76,58},{-46,58},{-28,50},{-28,26},{-8,12},{4,14},{28,14},{50,
                    8},{54,20},{62,60},{80,60}},
                color={0,0,255},
                smooth=Smooth.Bezier),
              Text(
                extent={{-100,-80},{100,-100}},
                lineColor={0,0,255},
                textString="%name"),
              Line(
                points={{-28,38},{80,90}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{56,32},{82,32},{80,32}},
                color={0,0,255},
                smooth=Smooth.None)}));
      end BleedingTransfusionRate;
    end Scenario;
  end Model;

  package Types

    package Constants

      block FrequencyControl "External signal of type Frequency"
        Physiolibrary.Types.RealIO.FrequencyOutput y
        "HydraulicCompliance constant"                                              annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Physiolibrary.Types.RealIO.FrequencyInput c annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.Frequency k;
        //ignored for this component
        //TODO add switch between constant default signal and input control signal
      equation
        y = c;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
      end FrequencyControl;
    end Constants;
  end Types;

  package Test

    model AllModels
      Model.Meurs.HemodynamicsMeurs_shallow hemodynamicsMeurs_shallow
        annotation (Placement(transformation(extent={{-96,62},{-40,94}})));
      Model.Meurs.HemodynamicsMeurs hemodynamicsMeurs
        annotation (Placement(transformation(extent={{-6,72},{-2,80}})));
      Model.Meurs.HemodynamicsMeursBVControl hemodynamicsMeursBVControl
        annotation (Placement(transformation(extent={{30,72},{34,80}})));
      Model.Meurs.StenosisAorticValve stenosisAorticValve
        annotation (Placement(transformation(extent={{62,72},{66,80}})));
      Model.Meurs.Bleeding bleeding
        annotation (Placement(transformation(extent={{90,72},{94,80}})));
      Model.Burkhoff.HemodynamicsBurkhoff_shallow hemodynamicsBurkhoff_shallow
        annotation (Placement(transformation(extent={{-94,24},{-62,44}})));
      Model.Burkhoff.HemodynamicsBurkhoff hemodynamicsBurkhoff
        annotation (Placement(transformation(extent={{-6,32},{-2,40}})));
      Model.Burkhoff.HemodynamicsBurkhoffBVControl
        hemodynamicsBurkhoffBVControl
        annotation (Placement(transformation(extent={{30,32},{34,40}})));
      Model.Burkhoff.StenosisAorticValve stenosisAorticValve1
        annotation (Placement(transformation(extent={{58,32},{62,40}})));
      Model.Burkhoff.Bleeding bleeding1
        annotation (Placement(transformation(extent={{90,30},{94,38}})));
      Model.Smith2004.HemodynamicsSmith_shallow hemodynamicsSmith_shallow
        annotation (Placement(transformation(extent={{-94,-28},{-62,-8}})));
      Model.Smith2004.HemodynamicsSmith hemodynamicsSmith
        annotation (Placement(transformation(extent={{-2,-20},{2,-12}})));
      Model.Smith2004.HemodynamicsSmithControl hemodynamicsSmithControl
        annotation (Placement(transformation(extent={{34,-22},{38,-14}})));
      Model.Smith2004.StenosisAorticValve stenosisAorticValve2
        annotation (Placement(transformation(extent={{62,-22},{66,-14}})));
      Model.Smith2004.Bleeding bleeding2
        annotation (Placement(transformation(extent={{90,-22},{94,-14}})));
    end AllModels;
  end Test;
  annotation (uses(
      Modelica(version="3.2.1"),
      Physiolibrary(version="2.3.1")));
end Cardiovascular;
model Cardiovascular_Test_AllModels
 extends Cardiovascular.Test.AllModels;
  annotation(experiment(
    StopTime=1,
    __Dymola_NumberOfIntervals=500,
    Tolerance=0.0001,
    __Dymola_Algorithm="dassl"));
end Cardiovascular_Test_AllModels;
