within ;
package Cardiovascular "Extension library of Physiolibrary"
  package UsersGuide "User's Guide"
    extends Modelica.Icons.Information;

  class Overview "Overview of Physiolibrary"
    extends Modelica.Icons.Information;

   annotation (Documentation(info="<html>
<p>ThePhysiolibrary consists of the following main sub-libraries: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td><p align=\"center\"><h4>Library Components</h4></p></td>
<td><p align=\"center\"><h4>Description</h4></p></td>
</tr>
<tr>
<td valign=\"top\"><p>Interfaces</p></td>
<td valign=\"middle\"><p>Contains abstract representation (partial models) of pure cardiovascular system which should be implemented by the concrete instances of cardiovascular system.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>ControlInterfaces</p></td>
<td valign=\"middle\"><p>Contains controlled extension to the Interfaces. </p></td>
</tr>
<tr>
<td valign=\"top\"><p>Model</p></td>
<td valign=\"middle\"><p>Contains exemplar parametric model implementation of cardiovascular system based on published work.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Examples</p></td>
<td valign=\"middle\"><p>Contains examples which are already part of other packages and libraries (Physiolibrary)</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Hydraulic</p></td>
<td valign=\"middle\"><p>Contains extension components of Physiolibrary.Hydraulic domain</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Osmotic</p></td>
<td valign=\"middle\"><p>Contains extension components of Physiolibrary.Osmotic domain</p></td>
</tr>
</table>
</html>"));
  end Overview;

    class ModelicaLicense2 "Modelica License 2"

      annotation (Documentation(info="<html>
<p>All files in this directory (Cardiovascular) and in all subdirectories, especially all files that build package &QUOT;Cardiovascular&QUOT; are licensed by <u><b>Tomas Kulhanek</b></u> under the <u><b>Modelica License 2 </b></u>(with exception of files &QUOT;Resources/*&QUOT;). </p>
<h4>Licensor:</h4>
<p>Tom&aacute;&scaron; Kulh&aacute;nek, Mol&aacute;kova 596, 18600 Praha 8 Karl&iacute;n</p>
<p>Charles University in Prague, Czech Republic</p>
<p><br>email: tomas.kulhanek@matfyz.cz</p>
<h4>Copyright notices of the files:</h4>
<p>Copyright &copy; 2008-2015, Tomas Kulhanek, Charles University in Prague, First Faculty of Medicine, Institute of Pathological Physiology</p>
<p><br>This package with all of its subpackages is released under the &ldquo;Modelica License 2&rdquo; (if not explicitly noted otherwise). </p>
<p><br><a href=\"#The_Modelica_License_2-outline\">The Modelica License 2</a></p>
<p><br><a href=\"#How_to_Apply_the_Modelica_License_2-outline\">How to Apply the Modelica License 2</a></p>
<p><br><a href=\"#Frequently_Asked_Questions-outline\">Frequently Asked Questions</a></p>
<p><br><b><font style=\"color: #008000; \">The Modelica License 2</font></b> </p>
<p><b><font style=\"font-size: 10pt; \">Preamble.</b> The goal of this license is that Modelica related model libraries, software, images, documents, data files etc. can be used freely in the original or a modified form, in open source and in commercial environments (as long as the license conditions below are fulfilled, in particular sections 2c) and 2d). The Original Work is provided free of charge and the use is completely at your own risk. Developers of free Modelica packages are encouraged to utilize this license for their work. </p>
<p>The Modelica License applies to any Original Work that contains the following licensing notice adjacent to the copyright notice(s) for this Original Work: </p>
<p><b>Licensed by Marek Matejak under the Modelica License 2</b> </p>
<h4>1. Definitions.</h4>
<p>&ldquo;License&rdquo; is this Modelica License. </p>
<p>&ldquo;Original Work&rdquo; is any work of authorship, including software, images, documents, data files, that contains the above licensing notice or that is packed together with a licensing notice referencing it. </p>
<p>&ldquo;Licensor&rdquo; is the provider of the Original Work who has placed this licensing notice adjacent to the copyright notice(s) for the Original Work. The Original Work is either directly provided by the owner of the Original Work, or by a licensee of the owner. </p>
<p>&ldquo;Derivative Work&rdquo; is any modification of the Original Work which represents, as a whole, an original work of authorship. For the matter of clarity and as examples: </p>
<p>Derivative Work shall not include work that remains separable from the Original Work, as well as merely extracting a part of the Original Work without modifying it. </p>
<p>Derivative Work shall not include (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. </p>
<p>Derivative Work shall include classes that are copied from the Original Work where declarations, equations or the documentation are modified. </p>
<p>Derivative Work shall include executables to simulate the models that are generated by a Modelica translator based on the Original Work (of a Modelica package). </p>
<p>&ldquo;Modified Work&rdquo; is any modification of the Original Work with the following exceptions: (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. </p>
<p>&QUOT;Source Code&QUOT; means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. </p>
<p>&ldquo;You&rdquo; means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. </p>
<p>&ldquo;Modelica package&rdquo; means any Modelica library that is defined with the &ldquo;<b>package</b>&nbsp;&LT;Name&GT;&nbsp;...&nbsp;end&nbsp;&LT;Name&GT;;&rdquo; Modelica language element. </p>
<p><b>2. Grant of Copyright License.</b> Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following: </p>
<p>To reproduce the Original Work in copies, either alone or as part of a collection. </p>
<p>To create Derivative Works according to Section 1d) of this License. </p>
<p>To distribute or communicate to the public copies of the <u>Original Work</u> or a <u>Derivative Work</u> under <u>this License</u>. No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged under this License. Furthermore, a verbatim copy of this License must be included in any copy of the Original Work or a Derivative Work under this License.</p>
<p>For the matter of clarity, it is permitted A) to distribute or communicate such copies as part of a (possible commercial) collection where other parts are provided under different licenses and a license fee is charged for the other parts only and B) to charge for mere printing and shipping costs. </p>
<p>To distribute or communicate to the public copies of a <u>Derivative Work</u>, alternatively to Section 2c), under <u>any other license</u> of your choice, especially also under a license for commercial/proprietary software, as long as You comply with Sections 3, 4 and 8 below. </p>
<p>For the matter of clarity, no restrictions regarding fees, either as to a copyright-license fee or as to a selling fee for the copy as such apply. </p>
<p>To perform the Original Work publicly. </p>
<p>To display the Original Work publicly. </p>
<p><b>3. Acceptance.</b> Any use of the Original Work or a Derivative Work, or any action according to either Section 2a) to 2f) above constitutes Your acceptance of this License. </p>
<p><b>4. Designation of Derivative Works and of Modified Works. </b>The identifying designation of Derivative Work and of Modified Work must be different to the corresponding identifying designation of the Original Work. This means especially that the (root-level) name of a Modelica package under this license must be changed if the package is modified (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g. a binary representation). </p>
<p><b>5. Grant of Patent License.</b> Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, under patent claims owned by the Licensor or licensed to the Licensor by the owners of the Original Work that are embodied in the Original Work as furnished by the Licensor, for the duration of the patents, to make, use, sell, offer for sale, have made, and import the Original Work and Derivative Works under the conditions as given in Section 2. For the matter of clarity, the license regarding Derivative Works covers patent claims to the extent as they are embodied in the Original Work only. </p>
<p><b>6. Provision of Source Code.</b> Licensor agrees to provide You with a copy of the Source Code of the Original Work but reserves the right to decide freely on the manner of how the Original Work is provided.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For the matter of clarity, Licensor might provide only a binary representation of the Original Work. In that case, You may (a) either reproduce the Source Code from the binary representation if this is possible (e.g., by performing a copy of an encrypted Modelica package, if encryption allows the copy operation) or (b) request the Source Code from the Licensor who will provide it to You. </p>
<p><b>7. Exclusions from License Grant.</b> Neither the names of Licensor, nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as otherwise expressly stated in this License and in particular in Sections 2 and 5, nothing in this License grants any license to Licensor&rsquo;s trademarks, copyrights, patents, trade secrets or any other intellectual property, and no patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No license is granted to the trademarks of Licensor even if such trademarks are included in the Original Work, except as expressly stated in this License. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license. </p>
<p><b>8. Attribution Rights.</b> You must retain in the Source Code of the Original Work and of any Derivative Works that You create, all author, copyright, patent, or trademark notices, as well as any descriptive text identified therein as an &QUOT;Attribution Notice&QUOT;. The same applies to the licensing notice of this License in the Original Work. For the matter of clarity, &ldquo;author notice&rdquo; means the notice that identifies the original author(s). </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work. </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In case the Original Work or Derivative Work is not provided in Source Code, the Attribution Notices shall be appropriately displayed, e.g., in the documentation of the Derivative Work. </p>
<h4>9. Disclaimer of Warranty. </h4>
<p><u>The Original Work is provided under this License on an &QUOT;as is&QUOT; basis and without warranty, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. The entire risk as to the quality of the Original Work is with You.</u> This disclaimer of warranty constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer. </p>
<p><b>10. Limitation of Liability.</b> Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor, the owner or a licensee of the Original Work be liable to anyone for any direct, indirect, general, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation. </p>
<p><b>11. Termination.</b> This License conditions your rights to undertake the activities listed in Section 2 and 5, including your right to create Derivative Works based upon the Original Work, and doing so without observing these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations. This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to observe the conditions of this license. </p>
<p><b>12. Termination for Patent Action.</b> This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor, any owners of the Original Work or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement through combinations of the Original Work under combination with other software or hardware. </p>
<p><b>13. Jurisdiction.</b> Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License. </p>
<p><b>14. Attorneys&rsquo; Fees.</b> In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys&apos; fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License. </p>
<p><b>15. Miscellaneous.</b> </p>
<p>If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. </p>
<p>No verbal ancillary agreements have been made. Changes and additions to this License must appear in writing to be valid. This also applies to changing the clause pertaining to written form. </p>
<p>You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You. </p>
<p><br><b></font><font style=\"color: #008000; \">How to Apply the Modelica License 2</font></b> </p>
<p><font style=\"font-size: 10pt; \">At the top level of your Modelica package and at every important subpackage, add the following notices in the info layer of the package: </p>
<p>Licensed by &LT;Licensor&GT; under the Modelica License 2</p>
<p>Copyright &copy; &LT;year1&GT;-&LT;year2&GT;, &LT;name of copyright holder(s)&GT;. </p>
<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i> </p>
<p>Include a copy of the Modelica License 2 under <b>&LT;library&GT;.UsersGuide.ModelicaLicense2</b> (use <a href=\"http://www.modelica.org/licenses/ModelicaLicense2.mo\">http://www.modelica.org/licenses/ModelicaLicense2.mo</a>). Furthermore, add the list of authors and contributors under <b>&LT;library&GT;.UsersGuide.Contributors</b> or <b>&LT;library&GT;.UsersGuide.Contact</b>. </p>
<p>For example, sublibrary Modelica.Blocks of the Modelica Standard Library may have the following notices: </p>
<p>Licensed by Modelica Association under the Modelica License 2</p>
<p>Copyright &copy; 1998-2008, Modelica Association. </p>
<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i> </p>
<p>For C-source code and documents, add similar notices in the corresponding file. </p>
<p>For images, add a &ldquo;readme.txt&rdquo; file to the directories where the images are stored and include a similar notice in this file. </p>
<p>In these cases, save a copy of the Modelica License 2 in one directory of the distribution, e.g., <a href=\"http://www.modelica.org/licenses/ModelicaLicense2.html\">http://www.modelica.org/licenses/ModelicaLicense2.html</a> in directory <b>&LT;library&GT;/Resources/Documentation/ModelicaLicense2.html</b>. </p>
<p><br><b><font style=\"font-size: 6pt; color: #008000; \">Frequently Asked Questions</font></b></p>
<p><font style=\"font-size: 10pt; \">This section contains questions/answer to users and/or distributors of Modelica packages and/or documents under Modelica License 2. Note, the answers to the questions below are not a legal interpretation of the Modelica License 2. In case of a conflict, the language of the license shall prevail. </p>
<p><b></font><font style=\"color: #008000; \">Using or Distributing a Modelica <u>Package</u> under the Modelica License 2</font></b> </p>
<p><b><font style=\"font-size: 10pt; \">What are the main differences to the previous version of the Modelica License?</b></p>
<ol>
<li>Modelica License 1 is unclear whether the licensed Modelica package can be distributed under a different license. Version 2 explicitly allows that &ldquo;Derivative Work&rdquo; can be distributed under any license of Your choice, see examples in Section 1d) as to what qualifies as Derivative Work (so, version 2 is clearer). </li>
<li>If You modify a Modelica package under Modelica License 2 (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g., a binary representation), you must rename the root-level name of the package for your distribution. In version 1 you could keep the name (so, version 2 is more restrictive). The reason of this restriction is to reduce the risk that Modelica packages are available that have identical names, but different functionality. </li>
<li>Modelica License 1 states that &ldquo;It is not allowed to charge a fee for the original version or a modified version of the software, besides a reasonable fee for distribution and support&rdquo;. Version 2 has a similar intention for all Original Work under <u>Modelica License 2</u> (to remain free of charge and open source) but states this more clearly as &ldquo;No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged&rdquo;. Contrary to version 1, Modelica License 2 has no restrictions on fees for Derivative Work that is provided under a different license (so, version 2 is clearer and has fewer restrictions). </li>
<li>Modelica License 2 introduces several useful provisions for the licensee (articles 5, 6, 12), and for the licensor (articles 7, 12, 13, 14) that have no counter part in version 1. </li>
<li>Modelica License 2 can be applied to all type of work, including documents, images and data files, contrary to version 1 that was dedicated for software only (so, version 2 is more general). </li>
</ol>
<h4>Can I distribute a Modelica package (under Modelica License 2) as part of my commercial Modelica modeling and simulation environment?</h4>
<p>Yes, according to Section 2c). However, you are not allowed to charge a fee for this part of your environment. Of course, you can charge for your part of the environment. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license?</h4>
<p>No. The license of an unmodified Modelica package cannot be changed according to Sections 2c) and 2d). This means that you cannot <u>sell</u> copies of it, any distribution has to be free of charge. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license when I first encrypt the package?</h4>
<p>No. Merely encrypting a package does not qualify for Derivative Work and therefore the encrypted package has to stay under Modelica License 2. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license when I first add classes to the package?</h4>
<p>No. The package itself remains unmodified, i.e., it is Original Work, and therefore the license for this part must remain under Modelica License 2. The newly added classes can be, however, under a different license. </p>
<p><b>Can I copy a class out of a Modelica package (under Modelica License 2) and include it <u>unmodified</u> in a Modelica package under a <u>commercial/proprietary license</u>?</b></p>
<p>No, according to article 2c). However, you can include model, block, function, package, record and connector classes in your Modelica package under <u>Modelica License 2</u>. This means that your Modelica package could be under a commercial/proprietary license, but one or more classes of it are under Modelica License 2.</p>
<p>Note, a &ldquo;type&rdquo; class (e.g., type Angle = Real(unit=&rdquo;rad&rdquo;)) can be copied and included unmodified under a commercial/proprietary license (for details, see the next question). </p>
<p><b>Can I copy a type class or <u>part</u> of a model, block, function, record, connector class, out of a Modelica package (under Modelica License 2) and include it modified or unmodified in a Modelica package under a <u>commercial/proprietary</u> license</b></p>
<p>Yes, according to article 2d), since this will in the end usually qualify as Derivative Work. The reasoning is the following: A type class or part of another class (e.g., an equation, a declaration, part of a class description) cannot be utilized &ldquo;by its own&rdquo;. In order to make this &ldquo;usable&rdquo;, you have to add additional code in order that the class can be utilized. This is therefore usually Derivative Work and Derivative Work can be provided under a different license. Note, this only holds, if the additional code introduced is sufficient to qualify for Derivative Work. Merely, just copying a class and changing, say, one character in the documentation of this class would be no Derivative Work and therefore the copied code would have to stay under Modelica License 2. </p>
<p><b>Can I copy a class out of a Modelica package (under Modelica License 2) and include it in <u>modified </u>form in a <u>commercial/proprietary</u> Modelica package?</b></p>
<p>Yes. If the modification can be seen as a &ldquo;Derivative Work&rdquo;, you can place it under your commercial/proprietary license. If the modification does not qualify as &ldquo;Derivative Work&rdquo; (e.g., bug fixes, vendor specific annotations), it must remain under Modelica License 2. This means that your Modelica package could be under a commercial/proprietary license, but one or more parts of it are under Modelica License 2. </p>
<h4>Can I distribute a &ldquo;save total model&rdquo; under my commercial/proprietary license, even if classes under Modelica License 2 are included?</h4>
<p>Your classes of the &ldquo;save total model&rdquo; can be distributed under your commercial/proprietary license, but the classes under Modelica License 2 must remain under Modelica License 2. This means you can distribute a &ldquo;save total model&rdquo;, but some parts might be under Modelica License 2. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) in encrypted form?</h4>
<p>Yes. Note, if the encryption does not allow &ldquo;copying&rdquo; of classes (in to unencrypted Modelica source code), you have to send the Modelica source code of this package to your customer, if he/she wishes it, according to article&nbsp;6. </p>
<h4>Can I distribute an executable under my commercial/proprietary license, if the model from which the executable is generated uses models from a Modelica package under Modelica License 2?</h4>
<p>Yes, according to article 2d), since this is seen as Derivative Work. The reasoning is the following: An executable allows the simulation of a concrete model, whereas models from a Modelica package (without pre-processing, translation, tool run-time library) are not able to be simulated without tool support. By the processing of the tool and by its run-time libraries, significant new functionality is added (a model can be simulated whereas previously it could not be simulated) and functionality available in the package is removed (e.g., to build up a new model by dragging components of the package is no longer possible with the executable). </p>
<h4>Is my modification to a Modelica package (under Modelica License 2) a Derivative Work?</h4>
<p>It is not possible to give a general answer to it. To be regarded as &QUOT;an original work of authorship&QUOT;, a derivative work must be different enough from the original or must contain a substantial amount of new material. Making minor changes or additions of little substance to a preexisting work will not qualify the work as a new version for such purposes. </p>
<p><b></font><font style=\"color: #008000; \">Using or Distributing a Modelica <u>Document</u> under the Modelica License 2</font></b> </p>
<p><font style=\"font-size: 10pt; \">This section is devoted especially for the following applications:</p>
<p>A Modelica tool extracts information out of a Modelica package and presents the result in form of a &ldquo;manual&rdquo; for this package in, e.g., html, doc, or pdf format. </p>
<p>The Modelica language specification is a document defining the Modelica language. It will be licensed under Modelica License 2. </p>
<p>Someone writes a book about the Modelica language and/or Modelica packages and uses information which is available in the Modelica language specification and/or the corresponding Modelica package. </p>
<h4>Can I sell a manual that was basically derived by extracting information automatically from a Modelica package under Modelica License 2 (e.g., a &ldquo;reference guide&rdquo; of the Modelica Standard Library):</h4>
<p>Yes. Extracting information from a Modelica package, and providing it in a human readable, suitable format, like html, doc or pdf format, where the content is significantly modified (e.g. tables with interface information are constructed from the declarations of the public variables) qualifies as Derivative Work and there are no restrictions to charge a fee for Derivative Work under alternative 2d). </p>
<p><b>Can I copy a text passage out of a Modelica document (under Modelica License 2) and use it <u>unmodified</u> in my document (e.g. the Modelica syntax description in the Modelica Specification)?</b></p>
<p>Yes. In case you distribute your document, the copied parts are still under Modelica License 2 and you are not allowed to charge a license fee for this part. You can, of course, charge a fee for the rest of your document. </p>
<p><b>Can I copy a text passage out of a Modelica document (under Modelica License 2) and use it in <u>modified</u> form in my document?</b></p>
<p>Yes, the creation of Derivative Works is allowed. In case the content is significantly modified this qualifies as Derivative Work and there are no restrictions to charge a fee for Derivative Work under alternative 2d). </p>
<h4>Can I sell a printed version of a Modelica document (under Modelica License 2), e.g., the Modelica Language Specification?</h4>
<p>No, if you are not the copyright-holder, since article 2c) does not allow a selling fee for a (in this case physical) copy. However, mere printing and shipping costs may be recovered.</p>
</html>"));
    end ModelicaLicense2;

  package ReleaseNotes "Release notes"
    extends Modelica.Icons.ReleaseNotes;

  class Version_1_0 "Version 1.0.0 (Jul 01, 2015)"
    extends Modelica.Icons.ReleaseNotes;

  annotation (Documentation(info="<html>
<p><ul>
<li>migration to GITHub https://github.com/TomasKulhanek/Physiolibrary.models/Cardiovascular</li>
<li><font style=\"color: #333333; \">The library uses the Modelica Standard Library (MSL) version 3.2. and Physiolibrary version 3.2</font></li>
<li><font style=\"color: #333333; \">Contains nice cardiovascular icons.</font></li>
</ul></p>
</html>"));
  end Version_1_0;
   annotation (Documentation(info="<html>
<p>This section summarizes the changes that have been performed on the Physiolibrary. </p>
</html>"));
  end ReleaseNotes;

  class NewRealease "Publishing new release"
    extends Modelica.Icons.Information;

   annotation (Documentation(info="<html>
<p><br>New release must be numbered by Semantic Versioning 2.0, see <a href=\"http://semver.org/\">semver.org</a>. </p>
<p><br>If minor version, then the conversion script must be written and connected with package Physiolibrary using &QUOT;annotation(conversion(from(version=..)))&QUOT;! </p>
<p><br>To clean the code from dummy annotations try to use script <a href=\"https://github.com/dietmarw/trimtrailingwhitespaces\">ttws</a>. </p>
<p><br>Update version number to &QUOT;X.Y.Z&QUOT;: </p>
<ul>
<li>At package Physiolibrary annotation: (version=&QUOT;X.Y.Z&QUOT;) together with &QUOT;versionBuild&QUOT;, &QUOT;versionDate&QUOT; and &QUOT;dateModified&QUOT; attribute </li>
<li>At head of package Physiolibrary &QUOT;Physiological domains library (version X.Y.Z)&QUOT; </li>
<li>At file &QUOT;./Physiolibrary/libraryinfo.mos&QUOT; </li>
</ul>
<p><br>Update release notes: </p>
<ul>
<li>At UsersGuide.ReleaseNotes</li>
<li>At file &QUOT;./README.md&QUOT;, together with update of &QUOT;Current release&QUOT; section.</li>
</ul>
<p><br>Publish release in GitHub: </p>
<ul>
<li>Prepare release in &QUOT;master&QUOT; branch</li>
<li>Install, Check, Test, Test, Test (stop-time of examples).. </li>
<li>Delete branch &QUOT;release&QUOT; </li>
<li>Create new branch &QUOT;release&QUOT; from &QUOT;master&QUOT; branch </li>
<li>Rename directory &QUOT;Physiolibrary&QUOT; in release branch to directory &QUOT;Physiolibrary X.Y.Z&QUOT; </li>
<li>Commint and Push </li>
<li>Draft a new release from &QUOT;release&QUOT; branch with number &QUOT;vX.Y.Z&QUOT; and with release notes. </li>
</ul>
</html>"));
  end NewRealease;

  class Contact "Contact"
    extends Modelica.Icons.Contact;

   annotation (Documentation(info="<html>
<p>Tomas Kulhanek</p>
<p>email: tomas.kulhanek@matfyz.cz</p>
</html>"));

  end Contact;

  annotation (__Dymola_DocumentationClass=true, Documentation(info="<html>
<p>Package Cardiovascular is a modelica package for <b>Human Physiology</b> that provides constants, types, connectors, partial models and model components fitted for physiological models of cardiovascular system and some control mechanism. </p>
<p>It contains complementar models to the cardiovascular system in complex parametric model of human physiology Physiomodel.</p>
</html>"));
  end UsersGuide;

  model System
    replaceable Interfaces.Heart heart annotation(Placement(transformation(extent={{-10,-8},
              {6,8}})));
    replaceable Interfaces.SystemicCirculation systemicCirculation annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}})));
    replaceable Interfaces.PulmonaryCirculation pulmonaryCirculation annotation(Placement(transformation(extent = {{-10, 12}, {10, 32}})));
  equation
    connect(systemicCirculation.q_out, heart.rightHeartInflow) annotation(Line(points={{-10,-26},
            {-14,-26},{-14,-1.6},{-9.84,-1.6}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(systemicCirculation.q_in, heart.leftHeartOutflow) annotation(Line(points={{10,-26},
            {12,-26},{12,-1.44},{6,-1.44}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.leftHeartInflow, pulmonaryCirculation.q_out) annotation(Line(points={{6,1.6},
            {12,1.6},{12,21.4},{9.8,21.4}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.rightHeartOutflow, pulmonaryCirculation.q_in) annotation(Line(points={{-10,1.6},
            {-10,2},{-14,2},{-14,21.8},{-9.8,21.8}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-20, -40}, {20, 40}}), graphics), Icon(coordinateSystem(extent={{-20,-40},
              {20,40}},                                                                                                    preserveAspectRatio=false),   graphics={  Bitmap(extent = {{-40, 40}, {40, -40}},
              imageSource =                                                                                                    "" + "" + "" + "" + "" + "" + "" + "", fileName = "modelica://Cardiovascular/Resources/Icons/cvsconcept.png"), Text(
            extent={{-40,-40},{40,-48}},
            lineColor={0,0,255},
            textString="%name")}),                                                                                                    Documentation(info="<html>
<p>Cardiovascular subsystems</p>
</html>"));
  end System;

  package Interfaces
    extends Modelica.Icons.InterfacesPackage;
    partial model Heart
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent={{-110,30},
                {-90,50}}),                                                                                                    iconTransformation(extent={{-108,
                -30},{-88,-10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent={{90,30},
                {110,50}}),                                                                                                    iconTransformation(extent={{-110,10},
                {-90,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent={{90,-30},
                {110,-10}}),                                                                                                    iconTransformation(extent={{90,10},
                {110,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent={{-110,
                -30},{-90,-10}}),                                                                                                    iconTransformation(extent={{90,-28},
                {110,-8}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                        graphics={Bitmap(
                extent={{-86,106},{82,-104}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/heartPict.png"),                                          Text(extent={{
                  -98,-78},{102,-112}},                                                                                                    lineColor = {190, 0, 0},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end Heart;

    partial model SystemicCirculation
      extends Physiolibrary.Icons.SystemicCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                           graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}}),                                                                                                  graphics={  Text(extent = {{-158, -50}, {160, -82}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}));
    end SystemicCirculation;

    partial model PulmonaryCirculation
      extends Physiolibrary.Icons.PulmonaryCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-108, -12}, {-88, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{88, -16}, {108, 4}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-156, -38}, {156, -64}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end PulmonaryCirculation;
  end Interfaces;

  package ControlInterfaces
    partial model SystemBVControl
      "Interface for cardiovascular system controlled by short-term(baroreflex), long-term(blood volume) and pathologies(stenosis)"
      extends System(
        redeclare replaceable PulmonaryControl pulmonaryCirculation
          constrainedby Cardiovascular.ControlInterfaces.PulmonaryControl,
        redeclare replaceable HeartControl heart constrainedby
          Cardiovascular.ControlInterfaces.HeartControl,
        redeclare replaceable SystemicControl systemicCirculation
          constrainedby Cardiovascular.ControlInterfaces.SystemicControl);
      replaceable BaroreflexControl
        baroreflex
        annotation (Placement(transformation(extent={{-52,16},{-36,32}})));
      replaceable BloodVolumeControl bloodVolumeControl
        annotation (Placement(transformation(extent={{-50,-12},{-30,8}})));
    equation
      connect(pulmonaryCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-8,25.2},{-14,25.2},{-14,26},{-18,26},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-7.6,-29},{-18,-29},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(baroreflex.busConnector, heart.busConnector) annotation (Line(
          points={{-37.6,31.2},{-18,31.2},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeControl.busConnector, heart.busConnector) annotation (
          Line(
          points={{-41.8,0.4},{-18,0.4},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeControl.port_a, heart.rightHeartInflow) annotation (
          Line(
          points={{-30.6,-8},{-14,-8},{-14,-1.6},{-9.84,-1.6}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-60,-40},
                {20,40}}), graphics));
    end SystemBVControl;

    model PulmonaryControl
      extends Interfaces.PulmonaryCirculation;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-100,12},{-60,52}})));
    end PulmonaryControl;

    partial model HeartControl
      extends Interfaces.Heart;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-118,66},{-78,106}}),
                                                       iconTransformation(
              extent={{-100,-90},{-60,-50}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics));
    end HeartControl;

    model SystemicControl
      extends Interfaces.SystemicCirculation;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-96,-50},{-56,-10}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics));
    end SystemicControl;
    extends Modelica.Icons.InterfacesPackage;
    partial model BaroreflexControl
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-28,14},{12,54}}), iconTransformation(
              extent={{60,70},{100,110}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent=
               {{-100,-100},{100,100}}), graphics={Bitmap(extent={{-80,80},
                  {80,-80}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/baroreflex.png"),
              Text(
              extent={{-100,-80},{100,-118}},
              lineColor={0,0,255},
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics));
    end BaroreflexControl;

    partial model StenosisControl
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-28,14},{12,54}}), iconTransformation(
              extent={{-28,14},{12,54}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent=
               {{-100,-100},{100,100}}), graphics={                                                                   Rectangle(extent={{
                  -80,22},{64,-24}},
                lineThickness =                                                                                                   1, fillColor = {190, 0, 0},
                fillPattern =                                                                                                   FillPattern.Solid, pattern = LinePattern.None, lineColor = {0, 0, 0}), Ellipse(extent={{
                  -52,44},{36,6}},
                lineThickness =                                                                                                   1, fillColor = {255, 128, 0},
                fillPattern =                                                                                                   FillPattern.Solid, lineColor = {0, 0, 0}), Ellipse(extent={{
                  -52,-2},{36,-40}},
                lineThickness =                                                                                                   1, fillColor = {255, 128, 0},
                fillPattern =                                                                                                   FillPattern.Solid, lineColor = {0, 0, 0}), Rectangle(extent={{
                  -80,50},{64,22}},
                lineThickness =                                                                                                   1, fillColor = {255, 255, 255},
                fillPattern =                                                                                                   FillPattern.Solid, pattern = LinePattern.None), Rectangle(extent={{
                  -80,-24},{64,-52}},
                lineThickness =                                                                                                   1, fillColor = {255, 255, 255},
                fillPattern =                                                                                                   FillPattern.Solid, pattern = LinePattern.None), Text(extent={{
                  -140,-20},{120,-54}},                                                                                                  lineColor = {0, 0, 0},
                lineThickness =                                                                                                   1, fillColor = {255, 128, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "%name")}),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics));
    end StenosisControl;

    partial model BloodVolumeControl
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{0,-8},{40,32}}), iconTransformation(
              extent={{-38,4},{2,44}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a
        annotation (Placement(transformation(extent={{84,-70},{104,-50}}),
            iconTransformation(extent={{84,-70},{104,-50}})));
      Model.Control.BloodVolume.VolumeRefill2 volumeRefill
        annotation (Placement(transformation(extent={{46,-38},{86,6}})));
    equation
      connect(volumeRefill.busConnector, busConnector) annotation (Line(
          points={{59.6,-7.64},{20,-7.64},{20,12}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(volumeRefill.port_b, port_a) annotation (Line(
          points={{84.4,-35.8},{94,-35.8},{94,-60}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-80,80},{82,
                  -80}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/bloodProperties.png"),
              Text(
              extent={{-100,-62},{100,-100}},
              lineColor={0,0,255},
              textString="%name")}));
    end BloodVolumeControl;

    model SystemVenousReturn
      replaceable Interfaces.Heart heart annotation(Placement(transformation(extent={{-8,-8},
                {8,8}})));
      replaceable Interfaces.SystemicCirculation systemicCirculation annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}})));
      replaceable Interfaces.PulmonaryCirculation pulmonaryCirculation annotation(Placement(transformation(extent = {{-10, 12}, {10, 32}})));
      Physiolibrary.Hydraulic.Components.Pump pump annotation (Placement(
            transformation(
            extent={{-6,-6},{6,6}},
            rotation=90,
            origin={-16,0})));
    equation
      connect(systemicCirculation.q_in, heart.leftHeartOutflow) annotation(Line(points={{10,-26},
              {12,-26},{12,-1.44},{8,-1.44}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(heart.leftHeartInflow, pulmonaryCirculation.q_out) annotation(Line(points={{8,1.6},
              {12,1.6},{12,21.4},{9.8,21.4}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicCirculation.q_out, pump.q_in) annotation (Line(
          points={{-10,-26},{-16,-26},{-16,-6}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(pump.q_out, pulmonaryCirculation.q_in) annotation (Line(
          points={{-16,6},{-16,21.8},{-9.8,21.8}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-20,-40},
                {20,40}}),                                                                               graphics), Icon(coordinateSystem(extent = {{-20, -40}, {20, 40}}, preserveAspectRatio = false), graphics={  Bitmap(extent = {{-40, 40}, {40, -40}},
                imageSource =                                                                                                   "" + "" + "" + "" + "" + "" + "" + "", fileName = "modelica://Cardiovascular/Resources/Icons/cvsconcept.png")}), Documentation(info="<html>
<p>Cardiovascular subsystems</p>
</html>"));
    end SystemVenousReturn;

    partial model SystemBVControlDeprecated
      "Interface for cardiovascular system controlled by short-term(baroreflex), long-term(blood volume) and pathologies(stenosis)"
      extends System(
        redeclare replaceable PulmonaryControl pulmonaryCirculation
          constrainedby Cardiovascular.ControlInterfaces.PulmonaryControl,
        redeclare replaceable HeartControl heart constrainedby
          Cardiovascular.ControlInterfaces.HeartControl,
        redeclare replaceable SystemicControl systemicCirculation
          constrainedby Cardiovascular.ControlInterfaces.SystemicControl);
      replaceable BaroreflexControl
        baroreflex
        annotation (Placement(transformation(extent={{-52,16},{-36,32}})));
      replaceable BloodVolumeControl bloodVolumeControl
        annotation (Placement(transformation(extent={{-50,-12},{-30,8}})));
      replaceable StenosisControl stenosisControl
        annotation (Placement(transformation(extent={{-48,-34},{-30,-18}})));
    equation
      connect(pulmonaryCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-8,25.2},{-14,25.2},{-14,26},{-18,26},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-7.6,-29},{-18,-29},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(baroreflex.busConnector, heart.busConnector) annotation (Line(
          points={{-37.6,31.2},{-18,31.2},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(stenosisControl.busConnector, heart.busConnector) annotation (
          Line(
          points={{-39.72,-23.28},{-18,-23.28},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeControl.busConnector, heart.busConnector) annotation (
          Line(
          points={{-41.8,0.4},{-18,0.4},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeControl.port_a, heart.rightHeartInflow) annotation (
          Line(
          points={{-30.6,-8},{-14,-8},{-14,-1.6},{-9.84,-1.6}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-60,-40},
                {20,40}}), graphics));
    end SystemBVControlDeprecated;
  end ControlInterfaces;

  package InterfacesVolume
    extends Modelica.Icons.InterfacesPackage;
    partial model Heart
      extends Physiolibrary.Icons.Heart;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent = {{-110, -30}, {-90, -10}}), iconTransformation(extent = {{-110, -36}, {-90, -16}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent = {{-110, 10}, {-90, 30}}), iconTransformation(extent = {{-110, 42}, {-90, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent = {{90, -30}, {110, -10}}), iconTransformation(extent = {{90, 42}, {110, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent = {{90, 10}, {110, 30}}), iconTransformation(extent = {{90, -34}, {110, -14}})));
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-100, -100}, {-80, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-4, -94})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-162, -44}, {156, -82}}, lineColor=  {190, 0, 0},
                lineThickness=                                                                                                    1, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end Heart;

    partial model SystemicCirculation
      extends Physiolibrary.Icons.SystemicCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-100, -100}, {-80, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {0, 74})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-158, -50}, {160, -82}}, lineColor=  {0, 0, 255},
                lineThickness=                                                                                                    1, textString=  "%name")}));
    end SystemicCirculation;

    partial model PulmonaryCirculation
      extends Physiolibrary.Icons.PulmonaryCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-108, -12}, {-88, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{88, -16}, {108, 4}})));
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-100, -100}, {-80, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {2, -90})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-156, -38}, {156, -64}}, lineColor=  {0, 0, 255},
                lineThickness=                                                                                                    1, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end PulmonaryCirculation;

    partial model SystemicCirculation_ER_Control
      "interface to control elasticity and resistance"
      extends SystemicCirculation;
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ECVin annotation(Placement(transformation(extent = {{-132, 26}, {-92, 66}}), iconTransformation(extent = {{-12, -12}, {12, 12}}, rotation = 270, origin = {-54, 60})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput RPSin annotation(Placement(transformation(extent = {{-58, 30}, {-18, 70}}), iconTransformation(extent = {{-11, -11}, {11, 11}}, rotation = 270, origin = {1, 63})));
      annotation(Documentation(info = "<html>
<p>Interface to control elastance(compliance) of vena cava and resistance(conductance) of peripheral vessels.</p>
</html>"));
    end SystemicCirculation_ER_Control;

    model System_ER_Control
      "interface to control elasticity,resistance and volume"
      extends .Cardiovascular.System(redeclare replaceable Heart_EHR_Control heart, redeclare replaceable
          SystemicCirculation_ER_Control                                                                                                 systemicCirculation);
      Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{12, -6}, {22, 4}}), iconTransformation(extent = {{20, -44}, {40, -24}})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput EVC annotation(Placement(transformation(extent = {{-10, -16}, {-4, -10}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 5})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMAX annotation(Placement(transformation(extent = {{-10, 10}, {-4, 16}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 19})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMAX annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 180, origin = {7, 15}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 33})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 180, origin = {17, 11}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, -9})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput RSP annotation(Placement(transformation(extent = {{-4, -16}, {4, -8}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, -23})));
    equation
      connect(heart.ERMaxIn, ERMAX) annotation(Line(points = {{-3.52, 5.12}, {-3.52, 9.06}, {-7, 9.06}, {-7, 13}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(ELMAX, heart.ELMaxIn) annotation(Line(points = {{7, 15}, {-0.58, 15}, {-0.58, 5.92}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(systemicCirculation.ECVin, EVC) annotation(Line(points = {{-5.4, -20}, {-5.4, -16.5}, {-7, -16.5}, {-7, -13}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.HRin, HR) annotation(Line(points = {{2.01, 5.2}, {2.01, 11}, {17, 11}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.Pmean, Pmean) annotation(Line(points = {{6.7, 1.12}, {9.35, 1.12}, {9.35, -1}, {17, -1}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(systemicCirculation.RPSin, RSP) annotation(Line(points = {{0.1, -19.7}, {0.1, -15.85}, {0, -15.85}, {0, -12}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Placement(transformation(extent = {{-38, -36}, {-18, -16}})), Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end System_ER_Control;

    model Heart_EHR_Control "interface to control elastance and heart rate"
      extends Heart;
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMaxIn annotation(Placement(transformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-40, 80}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-36, 64})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMaxIn annotation(Placement(transformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {40, 80}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {6, 74})));
      Physiolibrary.Types.RealIO.FrequencyInput HRin annotation(Placement(transformation(extent = {{-132, 42}, {-92, 82}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {43, 65})));
      Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{46, -52}, {66, -32}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 14})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{50, 0}, {122, -16}}, lineColor=  {0, 0, 255}, textString=  "Pmean")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end Heart_EHR_Control;

    model System_V_Control
      "interface to control elasticity,resistance and volume"
      extends .Cardiovascular.System;
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30})));
      Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-32, 6}), iconTransformation(extent = {{-40, -2}, {-20, 18}})));
      Test.Control1.VolumeControl.VolumeRefill volumeRefill
        annotation (Placement(transformation(extent={{-40,-24},{-20,-4}})));
    equation
      //  desiredFlowrate =  (desiredVolume - volume)/flowtime;
      /*if ( (-desiredFlowrate) > systemicCirculation.q_out.q) then
                                  catheter.q = - systemicCirculation.q_out.q;
                                else*/
      //    catheter.q = - desiredFlowrate;
      //then: only what flows from systemicCirculation can be pumped out
      //else: desired flow can be pumped in/out
      //  end if;
      //  catheter.pressure = systemicCirculation.q_out.pressure;
      connect(desiredVolume, volumeRefill.desiredVolume) annotation(Line(points = {{-32, 6}, {-32, -6}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(flowMeasure.volumeFlow, volumeRefill.maxflowrate) annotation(Line(points = {{-16.4, -6}, {-24, -6}, {-24, -17.4}, {-25.4, -17.4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeRefill.currentVolume, volume) annotation(Line(points = {{-28, -6}, {-30, -6}, {-30, 30}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(flowMeasure.q_out, volumeRefill.port_b) annotation(Line(points = {{-14, -4}, {-20.8, -4}, {-20.8, -23}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end System_V_Control;

    model System_VER_Control
      extends System_V_Control;
      extends System_ER_Control;
    end System_VER_Control;

    partial model V_Control
      "interface to control elasticity,resistance and volume"
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {-34, 12}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-28, 18})));
      Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin = {-37, -1}), iconTransformation(extent = {{-40, -2}, {-20, 18}})));
      Test.Control1.VolumeControl.VolumeRefill volumeRefill
        annotation (Placement(transformation(extent={{-40,-24},{-20,-4}})));
    equation
      //  desiredFlowrate =  (desiredVolume - volume)/flowtime;
      /*if ( (-desiredFlowrate) > systemicCirculation.q_out.q) then
                                  catheter.q = - systemicCirculation.q_out.q;
                                else*/
      //    catheter.q = - desiredFlowrate;
      //then: only what flows from systemicCirculation can be pumped out
      //else: desired flow can be pumped in/out
      //  end if;
      //  catheter.pressure = systemicCirculation.q_out.pressure;
      connect(desiredVolume, volumeRefill.desiredVolume) annotation(Line(points = {{-37, -1}, {-32, -1}, {-32, -6}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeRefill.currentVolume, volume) annotation(Line(points = {{-28, -6}, {-28, 12}, {-34, 12}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end V_Control;

    partial model HeartWith2Sides
      extends Physiolibrary.Icons.Heart;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent = {{-110, -30}, {-90, -10}}), iconTransformation(extent = {{-110, -36}, {-90, -16}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent = {{-110, 10}, {-90, 30}}), iconTransformation(extent = {{-110, 42}, {-90, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent = {{90, -30}, {110, -10}}), iconTransformation(extent = {{90, 42}, {110, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent = {{90, 10}, {110, 30}}), iconTransformation(extent = {{90, -34}, {110, -14}})));
      replaceable SideOfHeart leftHeart annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-26, 0})));
      replaceable SideOfHeart rightHeart annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-2, 0})));
      replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-50, 34}, extent = {{-6, -5}, {6, 5}}, rotation = 0)));
      replaceable Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-46, -30})));
    equation
      connect(rightHeartInflow, sideOfHeart.inflow) annotation(Line(points = {{-100, -20}, {-64, -20}, {-64, -0.2}, {-26, -0.2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart.outflow, rightHeartOutflow) annotation(Line(points = {{-26, 8}, {-62, 8}, {-62, 20}, {-100, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart1.outflow, leftHeartOutflow) annotation(Line(points = {{-2, 8}, {48, 8}, {48, 20}, {100, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart1.inflow, leftHeartInflow) annotation(Line(points = {{-2, -0.2}, {48, -0.2}, {48, -20}, {100, -20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(HeartRate.y, sideOfHeart.HR) annotation(Line(points = {{-42.5, 34}, {-26, 34}, {-26, 11.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(HeartRate.y, sideOfHeart1.HR) annotation(Line(points = {{-42.5, 34}, {-2, 34}, {-2, 11.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(Pth.y, sideOfHeart.PTH) annotation(Line(points = {{-38.5, -30}, {-25.8, -30}, {-25.8, -8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(Pth.y, sideOfHeart1.PTH) annotation(Line(points = {{-38.5, -30}, {-1.8, -30}, {-1.8, -8}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-162, -44}, {156, -82}}, lineColor=  {190, 0, 0},
                lineThickness=                                                                                                    1, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end HeartWith2Sides;

    partial model SideOfHeart
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-10, -12}, {10, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{-10, 70}, {10, 90}})));
      Physiolibrary.Types.RealIO.PressureInput PTH "intrathoracic pressure" annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {100, 54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {2, -80})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 118})));
      annotation(Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics={  Text(lineColor=  {0, 0, 255}, extent=  {{-26, -62}, {-8, -76}}, textString=  "PTH"), Text(extent=  {{-14, 98}, {14, 88}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Ellipse(extent=  {{-20, 90}, {22, -20}}, lineColor=  {0, 0, 255})}), Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics));
    end SideOfHeart;

    model System
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {-38, -30}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-70, 88})));
      Modelica.Blocks.Math.Add3 add3 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin = {-21, -29})));
      replaceable Heart heart annotation(Placement(transformation(extent = {{-16, -10}, {28, 32}})));
      replaceable SystemicCirculation systemicCirculation annotation(Placement(transformation(extent = {{-28, -96}, {28, -44}})));
      replaceable PulmonaryCirculation pulmonaryCirculation annotation(Placement(transformation(extent = {{-24, 46}, {28, 98}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure pulmonaryVeinsMeasure annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {44, 34})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure systemicArteriesMeasure annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {46, -40})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure systemicVeinsMeasure annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-48, -54})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure systemicVeinsMeasure1 annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-50, 42})));
    equation
      connect(pulmonaryCirculation.q_out, pulmonaryVeinsMeasure.q_in) annotation(Line(points = {{27.48, 70.44}, {44, 70.44}, {44, 44}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulmonaryVeinsMeasure.q_out, heart.leftHeartInflow) annotation(Line(points = {{44, 24}, {46, 24}, {46, 21.92}, {28, 21.92}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(heart.leftHeartOutflow, systemicArteriesMeasure.q_in) annotation(Line(points = {{28, 5.96}, {46, 5.96}, {46, -30}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicArteriesMeasure.q_out, systemicCirculation.q_in) annotation(Line(points = {{46, -50}, {46, -70}, {28, -70}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicCirculation.q_out, systemicVeinsMeasure.q_in) annotation(Line(points = {{-28, -70}, {-48, -70}, {-48, -64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicVeinsMeasure.q_out, heart.rightHeartInflow) annotation(Line(points = {{-48, -44}, {-48, 5.54}, {-16, 5.54}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(heart.rightHeartOutflow, systemicVeinsMeasure1.q_in) annotation(Line(points = {{-16, 21.92}, {-50, 21.92}, {-50, 32}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicVeinsMeasure1.q_out, pulmonaryCirculation.q_in) annotation(Line(points = {{-50, 52}, {-50, 71.48}, {-23.48, 71.48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(systemicCirculation.volume, add3.u1) annotation(Line(points = {{0, -50.76}, {0, -33}, {-15, -33}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.volume, add3.u2) annotation(Line(points = {{5.12, -8.74}, {5.12, -29}, {-15, -29}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(add3.u3, pulmonaryCirculation.volume) annotation(Line(points = {{-15, -25}, {-10, -25}, {-10, 48}, {-4, 48}, {-4, 48.6}, {2.52, 48.6}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(add3.y, volume) annotation(Line(points = {{-26.5, -29}, {-29.25, -29}, {-29.25, -30}, {-38, -30}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false), graphics={  Bitmap(extent=  {{-126, 98}, {128, -100}},
                imageSource=                                                                                                    "" + "" + "" + "" + "" + "" + "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", fileName=  "modelica://Cardiovascular/Resources/Icons/cvsconcept.png")}), Documentation(info = "<html>
  <p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
  <p><br>Model, all parameters and all initial values are from article: </p>
  <p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &QUOT;Circulation: overall regulation.&QUOT; Annual review of physiology 34(1): 13-44.</p>
  </html>"));
    end System;
  end InterfacesVolume;

  package Model
    extends Modelica.Icons.ExamplesPackage;
    package Guyton
      model HemodynamicsGuyton
        import Cardiovascular;
        extends Cardiovascular.System(
          redeclare Cardiovascular.Model.Guyton.Parts.PulmonaryCirculation
            pulmonaryCirculation,
          redeclare Cardiovascular.Model.Guyton.Parts.SystemicCirculation
            systemicCirculation,
          redeclare Cardiovascular.Model.Guyton.Parts.Heart heart);
      end HemodynamicsGuyton;
      extends Physiolibrary.Icons.Library;
      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model PulmonaryCirculation
          extends Cardiovascular.Interfaces.PulmonaryCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeinsAndLeftAtrium(volume_start(displayUnit = "l") = 0.0004, ZeroPressureVolume(displayUnit = "l") = 0.0004, Compliance(displayUnit = "l/mmHg") = 7.5006157584566e-008) annotation(Placement(transformation(extent={{14,-10},
                    {34,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArteries(ZeroPressureVolume(displayUnit = "l") = 0.00030625, Compliance(displayUnit = "l/mmHg") = 3.6002955640592e-008, volume_start(displayUnit = "l") = 0.00038) annotation(Placement(transformation(extent={{-52,-10},
                    {-32,10}})));
          Physiolibrary.Hydraulic.Components.Conductor pulmonary(Conductance(displayUnit = "l/(mmHg.min)") = 4.1665920538226e-008) annotation(Placement(transformation(extent={{-20,-10},
                    {0,10}})));
        equation
          connect(pulmonaryArteries.q_in, pulmonary.q_in) annotation(Line(points={{-42,0},
                  {-20,0}},                                                                                color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulmonary.q_out, pulmonaryVeinsAndLeftAtrium.q_in) annotation(Line(points={{0,0},{
                  24,0}},                                                                                           color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(q_in, pulmonaryArteries.q_in) annotation(Line(points={{-100,0},
                  {-42,0}},                                                                                           color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(q_out, pulmonaryVeinsAndLeftAtrium.q_in) annotation(Line(points={{100,0},
                  {24,0}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end PulmonaryCirculation;

        model SystemicCirculation
          extends Cardiovascular.Interfaces.SystemicCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel arteries(volume_start(displayUnit = "l") = 0.00085, ZeroPressureVolume(displayUnit = "l") = 0.000495, Compliance(displayUnit = "l/mmHg") = 2.6627185942521e-008) annotation(Placement(transformation(extent = {{24, -36}, {44, -16}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(Compliance(displayUnit = "l/mmHg") = 6.1880080007267e-007, volume_start(displayUnit = "l") = 0.00325, ZeroPressureVolume(displayUnit = "l") = 0.00295) annotation(Placement(transformation(extent = {{-54, -36}, {-34, -16}})));
          Physiolibrary.Hydraulic.Components.Conductor nonMuscle(Conductance(displayUnit = "l/(mmHg.min)") = 3.5627924852669e-009) annotation(Placement(transformation(extent = {{-14, -36}, {6, -16}})));
          Physiolibrary.Hydraulic.Components.Conductor kidney(Conductance(displayUnit = "l/(mmHg.min)") = 1.4126159678427e-009) annotation(Placement(transformation(extent = {{-14, -54}, {6, -34}})));
          Physiolibrary.Hydraulic.Components.Conductor muscle(Conductance(displayUnit = "l/(mmHg.min)") = 1.3001067314658e-009) annotation(Placement(transformation(extent = {{-14, -18}, {6, 2}})));
          Physiolibrary.Hydraulic.Components.Conductor largeVeins(Conductance(displayUnit = "l/(mmHg.min)") = 1.6888886482791e-007) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-74, 2})));
        equation
          connect(veins.q_in, nonMuscle.q_in) annotation(Line(points = {{-44, -26}, {-14, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(nonMuscle.q_out, arteries.q_in) annotation(Line(points = {{6, -26}, {34, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(muscle.q_out, arteries.q_in) annotation(Line(points = {{6, -8}, {20, -8}, {20, -26}, {34, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(kidney.q_out, arteries.q_in) annotation(Line(points = {{6, -44}, {20, -44}, {20, -26}, {34, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(kidney.q_in, nonMuscle.q_in) annotation(Line(points = {{-14, -44}, {-24, -44}, {-24, -26}, {-14, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(muscle.q_in, nonMuscle.q_in) annotation(Line(points = {{-14, -8}, {-24, -8}, {-24, -26}, {-14, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(veins.q_in, largeVeins.q_out) annotation(Line(points = {{-44, -26}, {-74, -26}, {-74, -8}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(arteries.q_in, q_in) annotation(Line(points = {{34, -26}, {68, -26}, {68, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(largeVeins.q_in, q_out) annotation(Line(points = {{-74, 12}, {-88, 12}, {-88, 0}, {-100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end SystemicCirculation;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure annotation(Placement(transformation(extent={{-44,52},
                    {-24,72}})));
          Physiolibrary.Hydraulic.Components.Pump rightHeart(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-10,30},
                    {10,50}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit = "l/min") = 8.333333333333301e-005) annotation(Placement(transformation(extent={{-26,62},
                    {-12,74}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1 annotation(Placement(transformation(extent={{-6,-20},
                    {14,0}})));
          Physiolibrary.Hydraulic.Components.Pump leftHeart(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-16,-30},
                    {-36,-10}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit = "l/min") = 8.333333333333301e-005) annotation(Placement(transformation(extent={{-58,0},
                    {-44,12}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightAtrium(volume_start(displayUnit = "l") = 0.0001, ZeroPressureVolume(displayUnit = "l") = 0.0001, Compliance(displayUnit = "l/mmHg") = 3.7503078792283e-008) annotation(Placement(transformation(extent={{-78,30},
                    {-58,50}})));
          Physiolibrary.Blocks.Factors.Spline rightStarling(data = {{-6, 0, 0}, {-3, 0.15, 0.104}, {-1, 0.52, 0.48}, {2, 1.96, 0.48}, {4, 2.42, 0.123}, {8, 2.7, 0}}, Xscale=
               101325/760)
            "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
                                                                                                                annotation(Placement(transformation(extent={{-10,48},
                    {10,68}})));
          Physiolibrary.Blocks.Factors.Spline leftStarling(data = {{-4, 0, 0}, {-1, 0.72, 0.29}, {0, 1.01, 0.29}, {3, 1.88, 0.218333}, {10, 2.7, 0}}, Xscale=
               101325/760)
            "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
                                                                                                                annotation(Placement(transformation(extent={{-10,10},
                    {10,-10}},
                rotation=180,
                origin={-24,0})));
        equation
          connect(rightAtrium.q_in, rightHeart.q_in) annotation(Line(points={{-68,40},
                  {-10,40}},                                                                          color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RNormalCO.y, rightStarling.yBase) annotation(Line(points={{-10.25,
                  68},{0,68},{0,60}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
          connect(pressureMeasure.pressure, rightStarling.u) annotation(Line(points={{-28,58},
                  {-8,58}},                                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(LNormalCO.y, leftStarling.yBase) annotation(Line(points={{-42.25,
                  6},{-24,6},{-24,2},{-24,2}},                                                              color = {0, 0, 127}, smooth = Smooth.None));
          connect(pressureMeasure1.pressure, leftStarling.u) annotation(Line(points={{10,-14},
                  {16,-14},{16,-8.88178e-16},{-16,-8.88178e-16}},                                           color = {0, 0, 127}, smooth = Smooth.None));
          connect(rightHeart.solutionFlow, rightStarling.y) annotation(Line(points={{0,47},{
                  0,54}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftStarling.y, leftHeart.solutionFlow) annotation(Line(points={{-24,-4},
                  {-24,-13},{-26,-13}},                                                                  color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeart.q_in, pressureMeasure1.q_in) annotation(Line(points={{-16,-20},
                  {0,-20},{0,-16}},                                                                                                 color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(leftHeart.q_out, leftHeartOutflow) annotation (Line(
              points={{-36,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.q_in, leftHeartInflow) annotation (Line(
              points={{0,-16},{0,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightHeart.q_out, rightHeartOutflow) annotation (Line(
              points={{10,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightAtrium.q_in, rightHeartInflow) annotation (Line(
              points={{-68,40},{-100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure.q_in, rightHeart.q_in) annotation (Line(
              points={{-38,56},{-38,40},{-10,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),                                          Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end Heart;
      end Parts;
    end Guyton;

    package Meurs
      model HemodynamicsMeurs_flat
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = false,                                   useComplianceInput = false,
          volume_start=0.000106,
          ZeroPressureVolume=5e-05,
          Compliance=3.2185142219537e-08,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-94, 84}, {-68, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryArteriesResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 6.818059724437e-08) annotation(Placement(transformation(extent = {{-56, 85}, {-22, 111}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = false,                                                                                          useComplianceInput = false,
          volume_start=0.000518,
          ZeroPressureVolume=0.00035,
          Compliance=1.6486353437088e-07,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-10, 86}, {14, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryVeinResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{26, 86}, {56, 110}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=9.31e-05,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{74, 50}, {102, 78}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000144,
          ZeroPressureVolume=6e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{148, 48}, {178, 78}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-07, _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false) annotation(Placement(transformation(extent = {{184, 76}, {208, 52}})));
        Parts.AtrialElastance atrialElastance(EMIN=15998686.4898, EMAX=37330268.4762)
          annotation (Placement(transformation(extent={{80,94},{118,126}})));
        Parts.VentricularElastance ventricularElastance(EMIN=11999014.86735, EMAX=533289549.66)
          annotation (Placement(transformation(extent={{164,92},{200,124}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve(_Gon(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06, useLimitationInputs = false, _Goff(displayUnit = "ml/(mmHg.s)") = 0) annotation(Placement(visible = true, transformation(origin = {127, 64}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicArteries(useV0Input = false,                                                                                          useComplianceInput = false,
          volume_start=0.000204,
          ZeroPressureVolume=0.00014,
          Compliance=5.2429304151611e-09,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{168, 6}, {190, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicArteries(volume_start(displayUnit = "ml") = 0.000526, useV0Input = false, useExternalPressureInput = false, ZeroPressureVolume = 0.00037, useComplianceInput = false, Compliance = 1.3493607749463e-08) annotation(Placement(transformation(extent = {{58, 6}, {84, 32}})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905, volumeFlow_start(displayUnit = "ml/min") = 2.1666666666667e-005) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {136, 18})));
        Physiolibrary.Hydraulic.Components.Conductor ArteryResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.2526028316622e-07) annotation(Placement(transformation(extent = {{94, 8}, {114, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor SystemicArterioralConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-09) annotation(Placement(transformation(extent = {{11, -9}, {-11, 9}}, rotation = 0, origin = {23, 17})));
        Physiolibrary.Hydraulic.Components.Conductor SmallVenuleConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-08) annotation(Placement(transformation(extent = {{14, -9}, {-14, 9}}, rotation = 0, origin = {-60, 17})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PeripheralVessels(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false, volume_start = 0.000283, ZeroPressureVolume = 0.000185, Compliance = 2.8652352197304e-08) annotation(Placement(transformation(extent={{-26,8},
                  {-6,28}})));
        Physiolibrary.Hydraulic.Components.Conductor VeinsResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.3256834918868e-08) annotation(Placement(transformation(extent = {{-120, 6}, {-148, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor CentralVenousResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{-208, 8}, {-232, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicVeins(useV0Input = false,                                   useComplianceInput = false,
          volume_start=0.00148,
          ZeroPressureVolume=0.00119,
          Compliance=4.1178380513927e-07,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-192, 4}, {-164, 32}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicVeins(useV0Input = false, useExternalPressureInput = false, volume_start = 0.00153, ZeroPressureVolume = 0.001, useComplianceInput = false, Compliance = 4.4403645290063e-07) annotation(Placement(transformation(extent = {{-116, 4}, {-90, 30}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel RightAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=0.000135,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-242, 44}, {-214, 72}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000131,
          ZeroPressureVolume=4e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-168, 42}, {-138, 72}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve1(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
          _Gon(displayUnit="ml/(mmHg.s)") = 2.4999552322936e-06)                                                                                                     annotation(Placement(transformation(extent = {{-132, 70}, {-108, 46}})));
        Parts.AtrialElastance atrialElastance1(EMIN=6666119.37075, EMAX=19998358.11225)
          annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
        Parts.VentricularElastance ventricularElastance1(EMIN=7599376.082655, EMAX=65327969.83335)
          annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve1(_Gon(displayUnit = "ml/(mmHg.s)") = 2.497705047566e-06, _Goff = 0, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-189, 58}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=0)
          annotation (Placement(transformation(
              extent={{-9,-6},{9,6}},
              rotation=0,
              origin={-125,120})));
      equation
        connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation(Line(points = {{-81, 97}, {-68.5, 97}, {-68.5, 98}, {-56, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{-22, 98}, {2, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation(Line(points = {{2, 98}, {26, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftAtrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{88, 64}, {114, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, atrioVentricleValve.q_out) annotation(Line(points = {{163, 63}, {151.5, 63}, {151.5, 64}, {140, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, ventricleArteryValve.q_in) annotation(Line(points = {{163, 63}, {173.5, 63}, {173.5, 64}, {184, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.compliance, ventricularElastance.Ct) annotation(Line(points={{163,75},
                {163,82},{212,82},{212,111.68},{203.42,111.68}},                                                                                                color = {0, 0, 127}, smooth = Smooth.None));
        connect(PulmonaryVeinResistance.q_out, LeftAtrium.q_in) annotation(Line(points = {{56, 98}, {74, 98}, {74, 64}, {88, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{94, 18}, {80, 18}, {80, 19}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_out, inertia.q_out) annotation(Line(points = {{114, 18}, {126, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(inertia.q_in, IntraThoracicArteries.q_in) annotation(Line(points = {{146, 18}, {162, 18}, {162, 17}, {179, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicArteries.q_in, ventricleArteryValve.q_out) annotation(Line(points = {{179, 17}, {216, 17}, {216, 64}, {208, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_out, PeripheralVessels.q_in) annotation(Line(points={{12,17},
                {-2,17},{-2,18},{-16,18}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PeripheralVessels.q_in, SmallVenuleConductance.q_in) annotation(Line(points={{-16,18},
                {-32,18},{-32,17},{-46,17}},                                                                                                color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{34, 17}, {71, 17}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation(Line(points = {{-208, 18}, {-178, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation(Line(points = {{-178, 18}, {-164, 18}, {-164, 17}, {-148, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation(Line(points = {{-120, 17}, {-103, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ExtrathoracicVeins.q_in, SmallVenuleConductance.q_out) annotation(Line(points = {{-103, 17}, {-74, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.q_in, atrioVentricleValve1.q_in) annotation(Line(points = {{-228, 58}, {-202, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, atrioVentricleValve1.q_out) annotation(Line(points = {{-153, 57}, {-164.5, 57}, {-164.5, 58}, {-176, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation(Line(points = {{-153, 57}, {-142.5, 57}, {-142.5, 58}, {-132, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_out, RightAtrium.q_in) annotation(Line(points = {{-232, 18}, {-250, 18}, {-250, 58}, {-228, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.compliance, atrialElastance1.Ct) annotation(Line(points = {{-228, 69.2}, {-228, 92}, {-202.39, 92}, {-202.39, 101.84}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricleArteryValve1.q_out, PulmonaryArteries.q_in) annotation(Line(points = {{-108, 58}, {-92, 58}, {-92, 97}, {-81, 97}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.compliance, ventricularElastance1.Ct) annotation(Line(points = {{-153, 69}, {-153, 80}, {-126, 80}, {-126, 108.91}, {-147.15, 108.91}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(LeftAtrium.compliance, atrialElastance.Ct) annotation(Line(points={{88,75.2},
                {88,86},{122,86},{122,96},{121.61,96},{121.61,109.84}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(HeartRate.y, atrialElastance1.HR) annotation(Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance1.HR, HeartRate.y) annotation(Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(atrialElastance.HR, HeartRate.y) annotation(Line(points={{99,
                122.8},{99,128.5},{-229.25,128.5}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance.HR, HeartRate.y) annotation(Line(points={{182,
                120.8},{182,128.5},{-229.25,128.5}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryArteries.externalPressure)
          annotation (Line(
            points={{-113.75,120},{-70.6,120},{-70.6,107.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{-113.75,120},{12,120},{11.6,107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{76,84},{76,120},{11.6,120},{11.6,
                107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, rightVentricle.externalPressure)
          annotation (Line(
            points={{-113.75,120},{-104,120},{-104,76},{-141,76},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(RightAtrium.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-216.8,69.2},{-216.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicVeins.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-166.8,29.2},{-166.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicArteries.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{187.8,25.8},{187.8,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-280,-140},{280,180}},      preserveAspectRatio=false),   graphics), Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics));
      end HemodynamicsMeurs_flat;

      model HemodynamicsMeurs
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
      end HemodynamicsMeurs;

      model HemodynamicsMeursBVControl
        extends ControlInterfaces.SystemBVControl(
          redeclare Variants.Parts.PulmonaryControl pulmonaryCirculation,
          redeclare Variants.Parts.HeartControl heart,
          redeclare Variants.Parts.SystemicControl systemicCirculation,
          redeclare Variants.Parts.Stenosis stenosisControl(aorticstenosis(
                InitialResistance(displayUnit="(mmHg.s)/ml") = 1066579.09932,
                FinalResistance(displayUnit="(mmHg.s)/ml") = 1066579.09932),
              AVBackFlowConductance(k=1.2501026264094e-15)),
          redeclare Variants.Parts.Baroreflex baroreflex,
          redeclare replaceable Control.BloodVolumeControl
                                               bloodVolumeControl);

      end HemodynamicsMeursBVControl;

      package Parts2
        model PulmonaryCirculation
          extends Cardiovascular.Interfaces.PulmonaryCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000106) annotation(Placement(transformation(extent = {{-72, -12}, {-48, 12}})));
          Physiolibrary.Hydraulic.Components.Conductor PulmonaryArteriesResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-36, -13}, {-2, 13}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000518) annotation(Placement(transformation(extent = {{10, -12}, {34, 12}})));
          Physiolibrary.Hydraulic.Components.Conductor PulmonaryVeinResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{46, -12}, {76, 12}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin = {-63, 39})));
          Physiolibrary.Types.Constants.VolumeConst VPAU(k = 5e-005) annotation(Placement(transformation(origin = {-77, 18}, extent = {{-5, -4}, {5, 4}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           EPA(k = 31064116.267695) annotation(Placement(transformation(origin = {-76, 29}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst
                                                                                          RPP(k(displayUnit = "(mmHg.s)/ml") = 14665462.61565) annotation(Placement(transformation(origin = {-25, 17}, extent = {{-5, -3}, {5, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EPV(k = 6066168.6273825) annotation(Placement(transformation(origin = {16, 28}, extent = {{-6, -4}, {6, 4}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VPVU(k = 0.00035) annotation(Placement(transformation(origin = {4, 18}, extent = {{-6, -4}, {6, 4}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst
                                                                                          RLAIN(k(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation(Placement(transformation(origin = {52, 24}, extent = {{-6, -4}, {6, 4}}, rotation = 0)));
        equation
          connect(Pth.y, PulmonaryArteries.externalPressure) annotation(Line(points = {{-56.75, 39}, {-50, 39}, {-50, 9.6}, {-50.4, 9.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Pth.y, PulmonaryVeins.externalPressure) annotation(Line(points = {{-56.75, 39}, {31.6, 39}, {31.6, 9.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(q_in, PulmonaryArteries.q_in) annotation(Line(points = {{-100, 0}, {-80, 0}, {-80, 2.22045e-016}, {-60, 2.22045e-016}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation(Line(points = {{-60, 2.22045e-016}, {-48.5, 2.22045e-016}, {-48.5, 0}, {-36, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{-2, 0}, {22, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation(Line(points = {{22, 0}, {46, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PulmonaryVeinResistance.q_out, q_out) annotation(Line(points = {{76, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(VPAU.y, PulmonaryArteries.zeroPressureVolume) annotation(Line(points = {{-70.75, 18}, {-70.75, 9.6}, {-69.6, 9.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(EPA.y, PulmonaryArteries.compliance) annotation(Line(points = {{-71, 29}, {-60, 29}, {-60, 9.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PulmonaryArteriesResistance.cond, RPP.y) annotation(Line(points = {{-19, 7.8}, {-19, 17.9}, {-18.75, 17.9}, {-18.75, 17}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PulmonaryVeins.zeroPressureVolume, VPVU.y) annotation(Line(points = {{12.4, 9.6}, {12.4, 16.8}, {11.5, 16.8}, {11.5, 18}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PulmonaryVeins.compliance, EPV.y) annotation(Line(points = {{22, 9.6}, {22, 28}, {23.5, 28}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RLAIN.y, PulmonaryVeinResistance.cond) annotation(Line(points = {{59.5, 24}, {59.5, 14.5}, {61, 14.5}, {61, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(extent = {{-100, -100}, {110, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics), Icon(coordinateSystem(extent = {{-100, -100}, {110, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics));
        end PulmonaryCirculation;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          replaceable LeftHeart leftHeart annotation(Placement(transformation(extent = {{-20, -42}, {34, 18}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-54, -46})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-58, 36}, extent = {{-6, -5}, {6, 5}}, rotation = 0)));
          replaceable RightHeart rightHeart annotation(Placement(visible = true, transformation(origin = {-36, -10}, extent = {{-30, -32}, {30, 32}}, rotation = 0)));
          Cardiovascular.Hydraulic.Components.BloodFlowMeasurement aortaFlowMeasurement annotation(Placement(visible = true, transformation(origin = {40, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(leftHeart.outflow, aortaFlowMeasurement.q_in) annotation(Line(points = {{7, 12}, {7, 12}, {30, 12}}, thickness = 1));
          connect(rightHeart.outflow, rightHeartOutflow) annotation(Line(points={{-36,
                  15.6},{-68.5,15.6},{-68.5,40},{100,40}},                                                                               thickness = 1));
          connect(rightHeartInflow, rightHeart.inflow) annotation(Line(points={{-100,40},
                  {-50,40},{-50,-10.64},{-36,-10.64}},                                                                                   thickness = 1));
          connect(Pth.y, leftHeart.PTH) annotation(Line(points = {{-46.5, -46}, {5.38, -46}, {5.38, -37.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HeartRate.y, rightHeart.HR) annotation(Line(points = {{-50.5, 36}, {-36, 36}, {-36, 27.76}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HeartRate.y, leftHeart.HR) annotation(Line(points = {{-50.5, 36}, {7, 36}, {7, 23.4}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeartOutflow, aortaFlowMeasurement.q_out) annotation(Line(points={{-100,
                  -20},{76,-20},{76,12},{50,12}},                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(HeartRate.y, aortaFlowMeasurement.HR) annotation(Line(points={{-50.5,
                  36},{34,36},{34,22}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeartInflow, leftHeart.inflow) annotation(Line(points = {{100, -20}, {7, -20}, {7, -12.6}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(rightHeart.PTH, leftHeart.PTH) annotation(Line(points = {{-37.8, -36.88}, {-38, -46}, {5.38, -46}, {5.38, -37.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics));
        end Heart;

        model SystemicCirculation
          extends Cardiovascular.Interfaces.SystemicCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicArteries(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000204) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {84, -2})));
          Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicArteries(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start(displayUnit = "ml") = 0.000526) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {40, -2})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905, volumeFlow_start(displayUnit = "ml/min") = 2.1666666666667e-005) annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin = {69, -1})));
          Physiolibrary.Hydraulic.Components.Conductor ArteriesConductance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {54, -2})));
          Physiolibrary.Types.Constants.VolumeConst VETHAU(k = 0.00037)
            "unstressed volume of extrathoracic arteries"                                                             annotation(Placement(transformation(origin = {33, 12.5}, extent = {{-3, -2.5}, {3, 2.5}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EETHA(k(displayUnit = "mmHg/ml") = 74127247.40274) annotation(Placement(transformation(origin = {33, 21}, extent = {{-3, -3}, {3, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RETHA(k(displayUnit = "(mmHg.s)/ml") = 7999343.2449) annotation(Placement(transformation(origin = {49, 13}, extent = {{-3, -3}, {3, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VITHAU(k = 0.00014)
            "unstressed volume of intrathoracic arteries"                                                             annotation(Placement(transformation(origin = {74, 11}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           EITHA(k(displayUnit = "mmHg/ml") = 190651014.00345) annotation(Placement(transformation(origin = {78, 23}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor ArterioralConductance(useConductanceInput = true) annotation(Placement(transformation(extent = {{7, -6}, {-7, 6}}, rotation = 0, origin = {27, -20})));
          Physiolibrary.Hydraulic.Components.Conductor SmallVenuleConductance(useConductanceInput = true) annotation(Placement(transformation(extent = {{7, -6}, {-7, 6}}, rotation = 0, origin = {-9, -20})));
          Physiolibrary.Hydraulic.Components.ElasticVessel PeripheralVessels(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000283) annotation(Placement(transformation(extent = {{2, -26}, {14, -14}})));
          Physiolibrary.Types.Constants.VolumeConst UVST(k = 0.000185) annotation(Placement(transformation(origin = {-1, -9}, extent = {{-3, -3}, {3, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RTA(k(displayUnit = "(mmHg.s)/ml") = 26664477.483) annotation(Placement(transformation(origin = {-13, -11}, extent = {{-3, -3}, {3, 3}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst
                                                                                          RSP(k(displayUnit = "(mmHg.s)/ml") = 106657909.932) annotation(Placement(transformation(origin = {21, -9}, extent = {{-3, -3}, {3, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EST(k = 34930465.50273) annotation(Placement(transformation(origin = {-2.5, -1}, extent = {{-3.5, -3}, {3.5, 3}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor VeinsConductance(useConductanceInput = true) annotation(Placement(transformation(extent = {{9, -6}, {-9, 6}}, rotation = 0, origin = {-39, 0})));
          Physiolibrary.Hydraulic.Components.Conductor CentralVenousResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{6, -6}, {-6, 6}}, rotation = 0, origin = {-76, 0})));
          Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicVeins(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.00148) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-58, 0})));
          Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicVeins(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.00153) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-22, 0})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RETHV(k(displayUnit = "(Pa.s)/m3") = 11999014.86735) annotation(Placement(transformation(origin = {-44, 11}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VETHVU(k(displayUnit = "m3") = 0.001) annotation(Placement(transformation(origin = {-32, 11}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EETHV(k(displayUnit = "Pa/m3") = 2253148.3473135) annotation(Placement(transformation(origin = {-28, 19}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           EITHV(k(displayUnit = "Pa/m3") = 2426467.450953) annotation(Placement(transformation(origin = {-64, 23}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VITHVU(k(displayUnit = "m3") = 0.00119) annotation(Placement(transformation(origin = {-68, 15}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RRAIN(k(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation(Placement(transformation(origin = {-84, 9}, extent = {{-4, -3}, {4, 3}}, rotation = 0)));
          Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 0, origin = {-57, 33})));
          Physiolibrary.Types.Constants.PressureConst Pext(k = 0) annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 0, origin = {-45, 27})));
        equation
          connect(EITHA.y, IntraThoracicArteries.compliance) annotation(Line(points = {{83, 23}, {84, 23}, {84, 2.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RETHA.y, ArteriesConductance.cond) annotation(Line(points = {{52.75, 13}, {54, 13}, {54, 1.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inertia.q_out, ArteriesConductance.q_out) annotation(Line(points = {{64, -1}, {64, -2}, {60, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ArteriesConductance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{48, -2}, {40, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(VETHAU.y, ExtrathoracicArteries.zeroPressureVolume) annotation(Line(points = {{36.75, 12.5}, {36.75, 2.8}, {35.2, 2.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RTA.y, SmallVenuleConductance.cond) annotation(Line(points = {{-9.25, -11}, {-9, -11}, {-9, -16.4}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ArterioralConductance.q_out, PeripheralVessels.q_in) annotation(Line(points = {{20, -20}, {8, -20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PeripheralVessels.q_in, SmallVenuleConductance.q_in) annotation(Line(points = {{8, -20}, {-2, -20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ArterioralConductance.cond, RSP.y) annotation(Line(points = {{27, -16.4}, {27, -15.8}, {24.75, -15.8}, {24.75, -9}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(EST.y, PeripheralVessels.compliance) annotation(Line(points = {{1.875, -1}, {8, -1}, {8, -15.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RRAIN.y, CentralVenousResistance.cond) annotation(Line(points = {{-79, 9}, {-79, 8}, {-76, 8}, {-76, 3.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RETHV.y, VeinsConductance.cond) annotation(Line(points = {{-39, 11}, {-39, 3.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(IntraThoracicVeins.q_in, VeinsConductance.q_out) annotation(Line(points = {{-58, 0}, {-48, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(VETHVU.y, ExtrathoracicVeins.zeroPressureVolume) annotation(Line(points = {{-27, 11}, {-27, 4.8}, {-26.8, 4.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VITHVU.y, IntraThoracicVeins.zeroPressureVolume) annotation(Line(points = {{-63, 15}, {-63, 4.8}, {-62.8, 4.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ArterioralConductance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{34, -20}, {34, -2}, {40, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(q_in, IntraThoracicArteries.q_in) annotation(Line(points = {{100, 0}, {92, 0}, {92, -2}, {84, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(IntraThoracicArteries.q_in, inertia.q_in) annotation(Line(points = {{84, -2}, {80, -2}, {80, -1}, {74, -1}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(VITHAU.y, IntraThoracicArteries.zeroPressureVolume) annotation(Line(points = {{79, 11}, {80, 11}, {80, 2.8}, {79.2, 2.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ExtrathoracicArteries.compliance, EETHA.y) annotation(Line(points = {{40, 2.8}, {40, 21}, {36.75, 21}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PeripheralVessels.zeroPressureVolume, UVST.y) annotation(Line(points = {{3.2, -15.2}, {3.2, -14}, {2.75, -14}, {2.75, -9}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VeinsConductance.q_in, ExtrathoracicVeins.q_in) annotation(Line(points = {{-30, 0}, {-22, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(EITHV.y, IntraThoracicVeins.compliance) annotation(Line(points = {{-59, 23}, {-59, 4.8}, {-58, 4.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CentralVenousResistance.q_out, q_out) annotation(Line(points = {{-82, 1.11022e-016}, {-92, 1.11022e-016}, {-92, 0}, {-100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Pth.y, IntraThoracicVeins.externalPressure) annotation(Line(points = {{-53.25, 33}, {-53.2, 33}, {-53.2, 4.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(IntraThoracicArteries.externalPressure, Pth.y) annotation(Line(points = {{88.8, 2.8}, {88.8, 33}, {-53.25, 33}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Pext.y, ExtrathoracicVeins.externalPressure) annotation(Line(points = {{-41.25, 27}, {-17.2, 27}, {-17.2, 4.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PeripheralVessels.externalPressure, Pext.y) annotation(Line(points = {{12.8, -15.2}, {12.8, 27}, {-41.25, 27}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ExtrathoracicArteries.externalPressure, Pext.y) annotation(Line(points = {{44.8, 2.8}, {44.8, 27}, {-41.25, 27}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation(Line(points = {{-70, 1.11022e-016}, {-64, 1.11022e-016}, {-64, 0}, {-58, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ExtrathoracicVeins.compliance, EETHV.y) annotation(Line(points = {{-22, 4.8}, {-22, 19}, {-23, 19}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(SmallVenuleConductance.q_out, ExtrathoracicVeins.q_in) annotation(Line(points = {{-16, -20}, {-18, -20}, {-18, 0}, {-22, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end SystemicCirculation;

        partial model SideOfHeart
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-106, -10}, {-86, 10}}), iconTransformation(extent = {{-10, -12}, {10, 8}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{84, -10}, {104, 10}}), iconTransformation(extent = {{-10, 70}, {10, 90}})));
          Physiolibrary.Types.RealIO.PressureInput PTH "intrathoracic pressure"
                                                                                annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-18, 2}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-6, -84})));
          Physiolibrary.Hydraulic.Components.ElasticVessel atrium(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 4e-005) annotation(Placement(transformation(extent = {{-50, -60}, {-18, -28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel ventricle(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.00013) annotation(Placement(transformation(extent = {{28, -58}, {58, -28}})));
          Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve(useLimitationInputs = true) annotation(Placement(transformation(extent = {{64, -30}, {88, -54}})));
          replaceable Parts.AtrialElastance atrialElastance
            annotation (Placement(transformation(extent={{-76,4},{-38,36}})));
          replaceable Parts.VentricularElastance ventricularElastance
            annotation (Placement(transformation(extent={{-8,12},{34,42}})));
          Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve(useLimitationInputs = true) annotation(Placement(transformation(origin = {7, -42}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VxAU(k = 3e-005) annotation(Placement(transformation(origin = {-64, -15}, extent = {{-8, -5}, {8, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxVBackflow(k = 0) annotation(Placement(transformation(origin = {79, -86}, extent = {{-7, -6}, {7, 6}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RxVOutflow(k(displayUnit = "(mmHg.s)/ml") = 1066579.09932)
            "resistance of pulmonic valve"                                                                                                     annotation(Placement(transformation(origin = {55, -77}, extent = {{-7, -5}, {7, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VxVU(k = 6e-005) annotation(Placement(transformation(origin = {21, -13}, extent = {{-7, -5}, {7, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxABackflow(k = 0)
            "conductance of tricupsid valve backflow"                                                                          annotation(Placement(transformation(origin = {6.5, -81}, extent = {{-6.5, -7}, {6.5, 7}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RxAOutflow(k(displayUnit = "(mmHg.s)/ml") = 399967.162245)
            "resistance of tricupsid valve"                                                                                                     annotation(Placement(transformation(origin = {-21, -77.5}, extent = {{-7, -6.5}, {7, 6.5}}, rotation = 0)));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 118})));
        equation
          connect(RxAOutflow.y, atrioVentricleValve.Gon) annotation(Line(points = {{-12.25, -77.5}, {-0.8, -77.5}, {-0.8, -68.5}, {-0.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CxABackflow.y, atrioVentricleValve.Goff) annotation(Line(points = {{14.625, -81}, {14.8, -81}, {14.8, -69.5}, {14.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VxVU.y, ventricle.zeroPressureVolume) annotation(Line(points = {{29.75, -13}, {29.75, -31}, {31, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VxAU.y, atrium.zeroPressureVolume) annotation(Line(points = {{-54, -15}, {-50, -15}, {-50, -31.2}, {-46.8, -31.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH, atrium.externalPressure) annotation(Line(points = {{-18, 2}, {-18, -31.2}, {-21.2, -31.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH, ventricle.externalPressure) annotation(Line(points = {{-18, 2}, {55, 2}, {55, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inflow, atrium.q_in) annotation(Line(points = {{-96, 0}, {-86, 0}, {-86, -48}, {-34, -48}, {-34, -44}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(atrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{-34, -44}, {-20, -44}, {-20, -42}, {-6, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricle.q_in, atrioVentricleValve.q_out) annotation(Line(points = {{43, -43}, {31.5, -43}, {31.5, -42}, {20, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricle.q_in, ventricleArteryValve.q_in) annotation(Line(points = {{43, -43}, {53.5, -43}, {53.5, -42}, {64, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricleArteryValve.q_out, outflow) annotation(Line(points = {{88, -42}, {92, -42}, {92, -32}, {94, -32}, {94, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RxVOutflow.y, ventricleArteryValve.Gon) annotation(Line(points = {{63.75, -77}, {63.75, -54}, {68.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CxVBackflow.y, ventricleArteryValve.Goff) annotation(Line(points = {{87.75, -86}, {90, -86}, {90, -54}, {83.2, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.Ct, atrium.compliance) annotation(Line(points = {{-34.39, 19.84}, {-34, 19.84}, {-34, -31.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance.Ct, ventricle.compliance) annotation(Line(points = {{37.99, 30.45}, {43, 30.45}, {43, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HR, ventricularElastance.HR) annotation(Line(points = {{-104, 52}, {13, 52}, {13, 39}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.HR, ventricularElastance.HR) annotation(Line(points = {{-57, 32.8}, {-58, 52}, {13, 52}, {13, 39}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics), Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics));
        end SideOfHeart;

        model LeftHeart
          extends Physiolibrary.Icons.LeftHeart;
          extends SideOfHeart(VxAU(k = 3e-005), VxVU(k = 6e-005), RxAOutflow(k = 399967.162245), RxVOutflow(k = 1066579.09932), ventricularElastance(EMIN = 11999014.86735, EMAX = 533289549.66), atrialElastance(EMIN = 15998686.4898, EMAX = 37330268.4762), atrium(volume_start = 9.31e-005), ventricle(volume_start = 0.000144), atrioVentricleValve(Pknee = 0), ventricleArteryValve(Pknee = 0));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end LeftHeart;

        model RightHeart
          extends Physiolibrary.Icons.RightHeart;
          extends SideOfHeart(atrialElastance(EMIN = 6666119.37075, EMAX = 19998358.11225), ventricularElastance(EMIN = 7599376.082655, EMAX = 65327969.83335), VxAU(k = 3e-005), RxAOutflow(k = 399967.162245), VxVU(k = 4e-005), RxVOutflow(k = 399967.162245), atrium(volume_start = 0.000135), ventricle(volume_start = 0.000131), atrioVentricleValve(Pknee = 0), ventricleArteryValve(Pknee = 0));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{32, 60}, {18, 64}, {6, 64}, {6, 76}, {18, 76}, {30, 72}, {44, 64}, {36, 58}, {32, 60}}, smooth=  Smooth.None,
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {58, 117, 175}, pattern=  LinePattern.None, lineColor=  {0, 0, 0})}));
        end RightHeart;

        model AtrialElastance_new
          extends Parts.HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
          Physiolibrary.Types.HydraulicElastance Et "elasticity";
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance";
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"                                                     annotation(Dialog(enable = not usevemaxInput));
          parameter Boolean usevemaxInput = false
            "=true, if vemax input is used"                                       annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
          Physiolibrary.Types.HydraulicElastance vemax;
          Physiolibrary.Types.RealIO.HydraulicComplianceInput cmax(start = 1 / EMAX) = 1 / vemax if usevemaxInput annotation(Placement(transformation(extent = {{-100, 60}, {-60, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 80})));
        equation
          if not usevemaxInput then
            vemax = EMAX;
          end if;
          if time - T0 < Tas then
            Et = EMIN + (vemax - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas);
          else
            Et = EMIN;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-100, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-98, 82}, {98, 24}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Atrial elastance"), Line(points=  {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{72, 4}, {102, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance_new;

        model VentricularElastance_new
          extends Parts.HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
            "ventricular elasticity"                                                       annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
          Modelica.Blocks.Interfaces.RealOutput Et0
            "normalized ventricular elasticity (0..1)"                                         annotation(Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
          Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation(Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
          Physiolibrary.Types.HydraulicElastance Et;
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance ";
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"                                                     annotation(Dialog(enable = not usevemaxInput));
          constant Real Kn = 0.57923032735652;
          //Kn is always = 0.5792303273565197
          //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
          //Equation to calculate normalized elastance ET0 was:
          //Et0=EMIN+(vemax-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
          parameter Boolean usevemaxInput = false
            "=true, if vemax input is used"                                       annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
          Physiolibrary.Types.HydraulicElastance vemax;
          Physiolibrary.Types.RealIO.HydraulicComplianceInput cmax(start = 1 / EMAX) = 1 / vemax if usevemaxInput annotation(Placement(transformation(extent = {{-100, 60}, {-60, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 80})));
        equation
          if not usevemaxInput then
            vemax = EMAX;
          end if;
          HeartInterval = time - T0;
          Et = EMIN + (vemax - EMIN) * Et0;
          if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
            Et0 = (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn;
          else
            Et0 = 0;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-82, 82}, {80, 24}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ventricular elastance"), Line(points=  {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{96, -32}, {68, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Et0"), Text(extent=  {{42, -72}, {88, -84}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Heart interval"), Text(extent=  {{62, 30}, {96, 8}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VentricularElastance_new;

        model SideOfHeart2
          extends Physiolibrary.Icons.RightHeart;
          extends Cardiovascular.ObsoleteInterfaces.SideOfHeart;
          Physiolibrary.Hydraulic.Components.ElasticVessel atrium(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 4e-005) annotation(Placement(transformation(extent = {{-50, -60}, {-18, -28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel ventricle(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.00013) annotation(Placement(transformation(extent = {{28, -58}, {58, -28}})));
          Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve(useLimitationInputs = true) annotation(Placement(transformation(extent = {{64, -30}, {88, -54}})));
          replaceable Parts.AtrialElastance atrialElastance(EMIN=15998686.4898,
              EMAX=37330268.4762)
            annotation (Placement(transformation(extent={{-78,0},{-40,32}})));
          replaceable Parts.VentricularElastance ventricularElastance(EMIN=
                11999014.86735, EMAX=533289549.66)
            annotation (Placement(transformation(extent={{-8,12},{34,42}})));
          Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve(useLimitationInputs = true) annotation(Placement(transformation(origin = {7, -42}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VxAU(k = 3e-005) annotation(Placement(transformation(origin = {-64, -15}, extent = {{-8, -5}, {8, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxVBackflow(k = 0) annotation(Placement(transformation(origin = {79, -86}, extent = {{-7, -6}, {7, 6}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RxVOutflow(k(displayUnit = "(mmHg.s)/ml") = 1066579.09932)
            "resistance of pulmonic valve"                                                                                                     annotation(Placement(transformation(origin = {55, -77}, extent = {{-7, -5}, {7, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.VolumeConst VxVU(k = 6e-005) annotation(Placement(transformation(origin = {21, -13}, extent = {{-7, -5}, {7, 5}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxABackflow(k = 0)
            "conductance of tricupsid valve backflow"                                                                          annotation(Placement(transformation(origin = {6.5, -81}, extent = {{-6.5, -7}, {6.5, 7}}, rotation = 0)));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RxAOutflow(k(displayUnit = "(mmHg.s)/ml") = 399967.162245)
            "resistance of tricupsid valve"                                                                                                     annotation(Placement(transformation(origin = {-21, -77.5}, extent = {{-7, -6.5}, {7, 6.5}}, rotation = 0)));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 118})));
        equation
          connect(RxAOutflow.y, atrioVentricleValve.Gon) annotation(Line(points = {{-12.25, -77.5}, {-0.8, -77.5}, {-0.8, -68.5}, {-0.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CxABackflow.y, atrioVentricleValve.Goff) annotation(Line(points = {{14.625, -81}, {14.8, -81}, {14.8, -69.5}, {14.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VxVU.y, ventricle.zeroPressureVolume) annotation(Line(points = {{29.75, -13}, {29.75, -31}, {31, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VxAU.y, atrium.zeroPressureVolume) annotation(Line(points = {{-54, -15}, {-50, -15}, {-50, -31.2}, {-46.8, -31.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH, ventricle.externalPressure) annotation(Line(points = {{100, 54}, {55, 54}, {55, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inflow, atrium.q_in) annotation(Line(points = {{-100, 0}, {-86, 0}, {-86, -48}, {-34, -48}, {-34, -44}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(atrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{-34, -44}, {-20, -44}, {-20, -42}, {-6, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricle.q_in, atrioVentricleValve.q_out) annotation(Line(points = {{43, -43}, {31.5, -43}, {31.5, -42}, {20, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricle.q_in, ventricleArteryValve.q_in) annotation(Line(points = {{43, -43}, {53.5, -43}, {53.5, -42}, {64, -42}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventricleArteryValve.q_out, outflow) annotation(Line(points = {{88, -42}, {92, -42}, {92, -32}, {100, -32}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RxVOutflow.y, ventricleArteryValve.Gon) annotation(Line(points = {{63.75, -77}, {63.75, -54}, {68.8, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CxVBackflow.y, ventricleArteryValve.Goff) annotation(Line(points = {{87.75, -86}, {90, -86}, {90, -54}, {83.2, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.Ct, atrium.compliance) annotation(Line(points = {{-36.39, 15.84}, {-34, 15.84}, {-34, -31.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance.Ct, ventricle.compliance) annotation(Line(points = {{37.99, 30.45}, {43, 30.45}, {43, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HR, ventricularElastance.HR) annotation(Line(points = {{-104, 52}, {13, 52}, {13, 39}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.HR, ventricularElastance.HR) annotation(Line(points = {{-59, 28.8}, {-59, 52}, {13, 52}, {13, 39}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrium.externalPressure, ventricle.externalPressure) annotation(Line(points = {{-21.2, -31.2}, {-21.2, 0}, {52, 0}, {52, 54}, {55, 54}, {55, -31}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end SideOfHeart2;

        model Heart2
          extends Cardiovascular.Interfaces.Heart;
          replaceable SideOfHeart2 leftHeart(VxAU(k = 3e-005), VxVU(k = 6e-005), RxAOutflow(k = 399967.162245), RxVOutflow(k = 1066579.09932), ventricularElastance(EMIN = 11999014.86735, EMAX = 533289549.66), atrialElastance(EMIN = 15998686.4898, EMAX = 37330268.4762), atrium(volume_start = 9.31e-005), ventricle(volume_start = 0.000144), atrioVentricleValve(Pknee = 0), ventricleArteryValve(Pknee = 0)) annotation(Placement(transformation(extent = {{36, -38}, {-14, 14}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-54, -46})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-58, 36}, extent = {{-6, -5}, {6, 5}}, rotation = 0)));
          replaceable SideOfHeart2 rightHeart(atrialElastance(EMIN = 6666119.37075, EMAX = 19998358.11225), ventricularElastance(EMIN = 7599376.082655, EMAX = 65327969.83335), VxAU(k = 3e-005), RxAOutflow(k = 399967.162245), VxVU(k = 4e-005), RxVOutflow(k = 399967.162245), atrium(volume_start = 0.000135), ventricle(volume_start = 0.000131), atrioVentricleValve(Pknee = 0), ventricleArteryValve(Pknee = 0)) annotation(Placement(visible = true, transformation(origin = {-28, -13}, extent = {{-24, -25}, {24, 25}}, rotation = 0)));
        equation
          connect(rightHeart.outflow, rightHeartOutflow) annotation(Line(points={{-28,7},
                  {-68.5,7},{-68.5,40},{100,40}},                                                                                  thickness = 1));
          connect(rightHeartInflow, rightHeart.inflow) annotation(Line(points={{-100,40},
                  {-50,40},{-50,-13.5},{-28,-13.5}},                                                                                   thickness = 1));
          connect(Pth.y, leftHeart.PTH) annotation(Line(points = {{-46.5, -46}, {10.5, -46}, {10.5, -32.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HeartRate.y, rightHeart.HR) annotation(Line(points = {{-50.5, 36}, {-28, 36}, {-28, 16.5}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(HeartRate.y, leftHeart.HR) annotation(Line(points = {{-50.5, 36}, {11, 36}, {11, 18.68}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeartInflow, leftHeart.inflow) annotation(Line(points = {{100, -20}, {11, -20}, {11, -12.52}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(rightHeart.PTH, leftHeart.PTH) annotation(Line(points = {{-27.52, -33}, {-27.52, -46}, {10.5, -46}, {10.5, -32.8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeart.outflow, leftHeartOutflow) annotation(Line(points={{11,8.8},
                  {52,8.8},{52,-20},{-100,-20}},                                                                             color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics));
        end Heart2;
      end Parts2;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model Pulmonary
          extends Interfaces.PulmonaryCirculation;
          Hydraulic.Components.ElasticVesselNorm           PulmonaryArteries(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false,
            volume_start=0.000106,
            ZeroPressureVolume=5e-05,
            ExternalPressure=-533.28954966,
            E=31064116.267695)                                                                                                     annotation(Placement(transformation(extent={{-82,-12},
                    {-58,12}})));
          Hydraulic.Components.Resistor                PulmonaryArteriesResistance(useConductanceInput = false,
            R(displayUnit="(mmHg.s)/ml") = 14665462.61565)                                                                                                     annotation(Placement(transformation(extent={{-40,-14},
                    {-12,14}})));
          Hydraulic.Components.ElasticVesselNorm           PulmonaryVeins(useV0Input = false, useExternalPressureInput = false,                                                        useComplianceInput = false,
            volume_start=0.000518,
            ZeroPressureVolume=0.00035,
            ExternalPressure=-533.28954966,
            E=6066168.6273825)                                                                                                    annotation(Placement(transformation(extent={{8,-12},
                    {32,12}})));
          Hydraulic.Components.Resistor                PulmonaryVeinResistance(useConductanceInput = false, R(
                displayUnit="(mmHg.s)/ml") = 399967.162245)                                                                      annotation(Placement(transformation(extent={{46,-12},
                    {70,12}})));
        equation
          connect(q_in, PulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-70,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation (
             Line(
              points={{-70,0},{-40,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation (
              Line(
              points={{-12,0},{4,0},{4,2.22045e-16},{20,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation (Line(
              points={{20,0},{46,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeinResistance.q_out, q_out) annotation (Line(
              points={{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Pulmonary;

        model Systemic
          extends Interfaces.SystemicCirculation;
          Hydraulic.Components.ElasticVesselNorm           IntraThoracicArteries(useV0Input = false, useExternalPressureInput = false,                                                        useComplianceInput = false,
            volume_start=0.000204,
            ZeroPressureVolume=0.00014,
            ExternalPressure=-533.28954966,
            E=190651014.00345)                                                                                                     annotation(Placement(transformation(extent={{78,-6},
                    {92,8}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
              volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent={{-6,-5},
                    {6,5}},                                                                                                    rotation = 180, origin={70,1})));
          Hydraulic.Components.Resistor                ArteryResistance(useConductanceInput = false,
            R(displayUnit="(mmHg.s)/ml") = 7999343.2449)                                                                                                     annotation(Placement(transformation(extent={{7,-7},{
                    -7,7}},
                rotation=0,
                origin={55,1})));
          Hydraulic.Components.ElasticVesselNorm           ExtrathoracicArteries(volume_start(displayUnit = "ml") = 0.000526, useV0Input = false, useExternalPressureInput = false,                               useComplianceInput = false,
            ZeroPressureVolume=0.00037,
            E=74127247.40274)                                                                                                     annotation(Placement(transformation(extent={{38,-22},
                    {54,-6}})));
          Hydraulic.Components.Resistor                SystemicArterioralResistance(
              useConductanceInput=false,
            R(displayUnit="(mmHg.s)/ml") = 106657909.932)
            annotation (Placement(transformation(
                extent={{9,-8},{-9,8}},
                rotation=0,
                origin={27,-14})));
          Hydraulic.Components.ElasticVesselNorm           PeripheralVessels(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false,
            volume_start=0.000283,
            ZeroPressureVolume=0.000185,
            E=34930465.50273)                                                                                                    annotation(Placement(transformation(extent={{2,-36},
                    {16,-22}})));
          Hydraulic.Components.Resistor SmallVenuleResistance(
            useConductanceInput=false,
            R(displayUnit="(mmHg.s)/ml") = 26664477.483) annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={-7,-29})));
          Hydraulic.Components.ElasticVesselNorm           ExtrathoracicVeins(useV0Input = false, useExternalPressureInput = false,                                                     useComplianceInput = false,
            volume_start=0.00153,
            ZeroPressureVolume=0.001,
            E=2253148.3473135)                                                                                                    annotation(Placement(transformation(extent={{-32,-22},
                    {-14,-6}})));
          Hydraulic.Components.Resistor                VeinsResistance(useConductanceInput = false,
            R(displayUnit="(mmHg.s)/ml") = 11999014.86735)                                                                                                     annotation(Placement(transformation(extent={{-32,-22},
                    {-48,-6}})));
          Hydraulic.Components.ElasticVesselNorm           IntraThoracicVeins(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false,
            volume_start=0.00148,
            ZeroPressureVolume=0.00119,
            ExternalPressure=-533.28954966,
            E=2426467.450953)                                                                                                    annotation(Placement(transformation(extent={{-66,-8},
                    {-48,8}})));
          Hydraulic.Components.Resistor                CentralVenousResistance(useConductanceInput = false, R(
                displayUnit="(mmHg.s)/ml") = 399967.162245)                                                                      annotation(Placement(transformation(extent={{-74,-8},
                    {-90,8}})));
        equation
          connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation (Line(
              points={{-32,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{76,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ArteryResistance.q_in, inertia.q_out) annotation (Line(
              points={{62,1},{64,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, SystemicArterioralResistance.q_in)
            annotation (Line(
              points={{46,-14},{36,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_out, CentralVenousResistance.q_out) annotation (Line(
              points={{-100,0},{-90,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation (
              Line(
              points={{-74,0},{-57,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation (Line(
              points={{-57,0},{-48,0},{-48,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, q_in) annotation (Line(
              points={{100,0},{95,0},{95,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{100,0},{92,0},{92,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_out, ExtrathoracicVeins.q_in) annotation (
              Line(
              points={{-14,-29},{-14,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, ArteryResistance.q_out) annotation (Line(
              points={{46,-14},{46,1},{48,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_in, PeripheralVessels.q_in) annotation (Line(
              points={{0,-29},{9,-29}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PeripheralVessels.q_in, SystemicArterioralResistance.q_out)
            annotation (Line(
              points={{9,-29},{9,-14},{18,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Systemic;

        model Heart
          extends Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.ElasticVessel rightAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000135,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-68,8},
                    {-40,36}})));
          Hydraulic.Components.IdealValveNorm           atrioVentricleValve1(                                                        _Goff = 0, useLimitationInputs = false,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 399967.162245)                                                                                                     annotation(Placement(visible = true, transformation(origin={-14,22},     extent={{-12,12},
                    {12,-12}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000131,
            ZeroPressureVolume=4e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{8,8},{
                    36,36}})));
          Hydraulic.Components.IdealValveNorm           ventricleArteryValve1(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 399967.162245)                                                                                                     annotation(Placement(transformation(extent={{42,34},
                    {66,10}})));
          VentricularElastance ventricularElastance1(EMIN=7599376.082655, EMAX=
                65327969.83335)
            annotation (Placement(transformation(extent={{-20,54},{10,88}})));
          AtrialElastance atrialElastance1(EMIN=6666119.37075, EMAX=
                19998358.11225)
            annotation (Placement(transformation(extent={{-94,54},{-56,86}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin={59,92},         extent={{-7,-6},
                    {7,6}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=9.31e-05,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{50,-86},
                    {78,-58}})));
          AtrialElastance atrialElastance(EMIN=15998686.4898, EMAX=
                37330268.4762)
            annotation (Placement(transformation(extent={{8,-50},{46,-18}})));
          Hydraulic.Components.IdealValveNorm           atrioVentricleValve(                                                         useLimitationInputs = false, _Goff(displayUnit = "ml/(mmHg.s)") = 0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 399967.162245)                                                                                                     annotation(Placement(visible = true, transformation(origin={24,-72},    extent={{-12,12},
                    {12,-12}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000144,
            ZeroPressureVolume=6e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-30,-86},
                    {-2,-58}})));
          VentricularElastance ventricularElastance(EMIN=11999014.86735, EMAX=
                533289549.66) annotation (Placement(transformation(extent={{-66,
                    -46},{-30,-14}})));
          Hydraulic.Components.IdealValveNorm           ventricleArteryValve(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 1066579.09932)                                                                                                     annotation(Placement(transformation(extent={{-12,12},
                    {12,-12}},
                rotation=180,
                origin={-56,-72})));
        equation
          connect(rightHeartInflow, rightAtrium.q_in) annotation (Line(
              points={{-100,40},{-70,40},{-70,22},{-54,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightAtrium.q_in, atrioVentricleValve1.q_in) annotation (Line(
              points={{-54,22},{-26,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve1.q_out, rightVentricle.q_in) annotation (
              Line(
              points={{-2,22},{22,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation (
              Line(
              points={{22,22},{42,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve1.q_out, rightHeartOutflow) annotation (
              Line(
              points={{66,22},{82,22},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, leftAtrium.q_in) annotation (Line(
              points={{100,-20},{82,-20},{82,-72},{64,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftAtrium.q_in, atrioVentricleValve.q_in) annotation (Line(
              points={{64,-72},{36,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve.q_out, leftVentricle.q_in) annotation (
              Line(
              points={{12,-72},{-16,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, ventricleArteryValve.q_in) annotation (
              Line(
              points={{-16,-72},{-44,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-68,-72},{-84,-72},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, rightAtrium.compliance) annotation (Line(
              points={{-52.39,69.84},{-52.39,48.92},{-54,48.92},{-54,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, rightVentricle.compliance)
            annotation (Line(
              points={{12.85,74.91},{22,74.91},{22,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, HeartRate.y) annotation (Line(
              points={{-75,82.8},{-75,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.HR, HeartRate.y) annotation (Line(
              points={{-5,84.6},{-5,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, HeartRate.y) annotation (Line(
              points={{-48,-17.2},{-48,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.HR, HeartRate.y) annotation (Line(
              points={{27,-21.2},{27,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, leftAtrium.compliance) annotation (Line(
              points={{49.61,-34.16},{64,-34.16},{64,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, leftVentricle.compliance)
            annotation (Line(
              points={{-26.58,-26.32},{-16,-26.32},{-16,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Heart;

        model AtrialElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
          Physiolibrary.Types.HydraulicElastance Et "elasticity";
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance";
        parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          if time - T0 < Tas then
            Et = EMIN + (es_int - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas);
          else
            Et = EMIN;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-100, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent={{
                      -98,82},{98,24}},                                                                                                    lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Atrial elastance"), Line(points=  {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{72, 4}, {102, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;

        model VentricularElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
            "ventricular elasticity"                                                       annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
          Modelica.Blocks.Interfaces.RealOutput Et0
            "normalized ventricular elasticity (0..1)"                                         annotation(Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
          Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation(Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
          Physiolibrary.Types.HydraulicElastance Et;
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance ";
          constant Real Kn = 0.57923032735652;
          //Kn is always = 0.5792303273565197
          //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
          //Equation to calculate normalized elastance ET0 was:
          //Et0=EMIN+(EMAX-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
        parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/EMAX)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          HeartInterval = time - T0;
          Et = EMIN + (es_int - EMIN) * Et0;
          if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
            Et0 = (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn;
          else
            Et0 = 0;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-82, 82}, {80, 24}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ventricular elastance"), Line(points=  {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{96, -32}, {68, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Et0"), Text(extent=  {{42, -72}, {88, -84}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Heart interval"), Text(extent=  {{62, 30}, {96, 8}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time Tas, T0, Tvs;
          parameter Physiolibrary.Types.Time Tav(displayUnit = "s") = 0.01
            "atrioventricular delay";
          discrete Modelica.SIunits.Time HP(start = 0) "heart period";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-12, 68}, {28, 108}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80})));
        equation
          b = time - pre(T0) >= pre(HP) "true if new pulse occurs";
          when {initial(), b} then
            T0 = time "start time of cardiac cycle";
            HP = 1 / HR "update heart period per heart rate";
            Tas = 0.03 + 0.09 * HP "duration of atrial systole";
            Tvs = 0.16 + 0.2 * HP "duration of ventricular systole";
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent={{
                      -64,102},{-6,78}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR")}));
        end HeartIntervals;
      end Parts;

      package Test
        model HemodynamicsMeurs_System2
          extends Cardiovascular.System(
            redeclare Parts2.PulmonaryCirculation pulmonaryCirculation,
            redeclare Parts2.SystemicCirculation systemicCirculation,
            redeclare Parts2.Heart2 heart);
          annotation(__Dymola_experimentSetupOutput, experiment(StartTime = 0, StopTime = 60, Tolerance = 0.0001, Interval = 0.012));
        end HemodynamicsMeurs_System2;

        model HemodynamicsMeursVolume
          extends Cardiovascular.Model.Meurs.Test.HemodynamicsMeurs_System2;
          extends Cardiovascular.ObsoleteInterfaces.V_Control;
        equation
          volume = pulmonaryCirculation.PulmonaryArteries.volume + pulmonaryCirculation.PulmonaryVeins.volume + heart.leftHeart.atrium.volume + heart.leftHeart.ventricle.volume + heart.rightHeart.atrium.volume + heart.rightHeart.ventricle.volume + systemicCirculation.IntraThoracicArteries.volume + systemicCirculation.ExtrathoracicArteries.volume + systemicCirculation.PeripheralVessels.volume + systemicCirculation.ExtrathoracicVeins.volume + systemicCirculation.IntraThoracicVeins.volume;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-60, -40}, {20, 40}}), graphics));
        end HemodynamicsMeursVolume;
      end Test;

      package Variants
        extends Modelica.Icons.VariantsPackage;
        package Parts
          extends Modelica.Icons.UtilitiesPackage;
          model PulmonaryControl
            extends .Cardiovascular.Model.Meurs.Parts.Pulmonary;
            extends Cardiovascular.ControlInterfaces.PulmonaryControl;
            Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={-26,26})));
          equation
            connect(PulmonaryArteries.volume, add.u1) annotation (Line(
                points={{-62.8,-12},{-62,-12},{-62,-26},{-6,-26},{-6,20},{-14,20}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(PulmonaryVeins.volume, add.u2) annotation (Line(
                points={{27.2,-12},{28,-12},{28,-24},{34,-24},{34,32},{-14,32}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
                points={{-37,26},{-58,26},{-58,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end PulmonaryControl;

          model SystemicControl
            extends .Cardiovascular.Model.Meurs.Parts.Systemic(
              SmallVenuleResistance(useConductanceInput=true),
              IntraThoracicArteries(
                useV0Input=false,
                useExternalPressureInput=false,
                useComplianceInput=false),
              IntraThoracicVeins(useComplianceInput=true));
            extends Cardiovascular.ControlInterfaces.SystemicControl;
            Modelica.Blocks.Math.Sum sum1(nin=5) annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=180,
                  origin={-61,-39})));
            Hydraulic.Components.MeanAortaPressureMeasurement
              aortaPressureMeasurement
              annotation (Placement(transformation(extent={{70,10},{90,30}})));
          equation
            connect(IntraThoracicVeins.volume, sum1.u[1]) annotation (Line(
                points={{-51.6,-8},{-55,-8},{-55,-38.2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sum1.y, busConnector.systemicBloodVolume) annotation (Line(
                points={{-66.5,-39},{-68,-39},{-68,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aortaPressureMeasurement.q_in, inertia.q_in) annotation (Line(
                points={{76,14},{76,1}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(ExtrathoracicVeins.volume, sum1.u[2]) annotation (Line(
                points={{-17.6,-22},{-16,-22},{-16,-38.6},{-55,-38.6}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(PeripheralVessels.volume, sum1.u[3]) annotation (Line(
                points={{13.2,-36},{14,-36},{14,-39},{-55,-39}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(ExtrathoracicArteries.volume, sum1.u[4]) annotation (Line(
                points={{50.8,-22},{52,-22},{52,-39.4},{-55,-39.4}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(IntraThoracicArteries.volume, sum1.u[5]) annotation (Line(
                points={{89.2,-6},{88,-6},{88,-40},{-55,-40},{-55,-39.8}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(SmallVenuleResistance.cond, busConnector.peripheralconductance)
              annotation (Line(
                points={{-7,-24.8},{-7,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(IntraThoracicVeins.compliance, busConnector.venacavacompliance)
              annotation (Line(
                points={{-57,6.4},{-57,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
              annotation (Line(
                points={{87,23},{96,23},{96,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end SystemicControl;

          model HeartControl
            extends .Cardiovascular.Model.Meurs.Parts.Heart(
              redeclare Types.Constants.FrequencyControl HeartRate,
              ventricularElastance1(useEs_extInput=true),
              ventricularElastance(useEs_extInput=true),
              ventricleArteryValve(useLimitationInputs=true));
            extends Cardiovascular.ControlInterfaces.HeartControl;
            Modelica.Blocks.Math.Sum sum1(nin=4)
              annotation (Placement(transformation(extent={{-80,-8},{-94,6}})));
          equation
            connect(rightAtrium.volume, sum1.u[1]) annotation (Line(
                points={{-45.6,8},{-64,8},{-64,-2.05},{-78.6,-2.05}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(rightVentricle.volume, sum1.u[2]) annotation (Line(
                points={{30.4,8},{32,8},{32,-1.35},{-78.6,-1.35}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(leftVentricle.volume, sum1.u[3]) annotation (Line(
                points={{-7.6,-86},{-6,-86},{-6,-0.65},{-78.6,-0.65}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(leftAtrium.volume, sum1.u[4]) annotation (Line(
                points={{72.4,-86},{72,-86},{72,0.05},{-78.6,0.05}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
                points={{-94.7,-1},{-98,-1},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(HeartRate.c, busConnector.heartrate) annotation (Line(
                points={{62.5,92},{74,92},{74,100},{-98,100},{-98,90},{-98,90},{
                    -98,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularElastance1.Es_ext, busConnector.rvcompliance)
              annotation (Line(
                points={{-17,84.6},{-68,84.6},{-68,88},{-98,88},{-98,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularElastance.Es_ext, busConnector.lvcompliance)
              annotation (Line(
                points={{-62.4,-17.2},{-62.4,-14},{-62,-14},{-62,-10},{-98,-10},{
                    -98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricleArteryValve.Gon, busConnector.avoutflowresistance)
              annotation (Line(
                points={{-48.8,-60},{-50,-60},{-50,-52},{-98,-52},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricleArteryValve.Goff, busConnector.avbackflowconductance)
              annotation (Line(
                points={{-63.2,-60},{-63.2,-52},{-98,-52},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end HeartControl;

          model Baroreflex
            extends Cardiovascular.Model.Control.Baroreflex(baroreceptor(
                  activationDelay=60,
                PAOmedia=12974.201470097,
                HR0Param=1.2,
                EV0right=65327969.83335,
                EV0left=533289549.66,
                EV0venacava=4.1215883592719e-07,
                RS0=26664477.483));
          end Baroreflex;

          model Stenosis
            extends Cardiovascular.Model.Control.StenosisControl(venacavastenosis(
                    InitialElastance=2426467.450953, FinalElastance=2426467.450953));
          end Stenosis;
        end Parts;

      end Variants;

      model HemodynamicsMeurs_flatNorm
        //Cardiovascular.Hydraulic.Components.Resistor
        //Cardiovascular.Hydraulic.Components.IdealValveNorm
        //Cardiovascular.Hydraulic.Components.ElasticVesselNorm

        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Epa(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.000106,
          ZeroPressureVolume=5e-05,
          ExternalPressure=-533.28954966,
          Elastance=31064116.267695)
          annotation (Placement(transformation(extent={{-94,84},{-66,112}})));
        Cardiovascular.Hydraulic.Components.Resistor Rpp(useConductanceInput=
              false, Resistance=14665462.61565)
          annotation (Placement(transformation(extent={{-56,85},{-22,111}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Epv(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.000518,
          ZeroPressureVolume=0.00035,
          ExternalPressure=-533.28954966,
          Elastance=6066168.6273825)
          annotation (Placement(transformation(extent={{-10,84},{24,112}})));
        Cardiovascular.Hydraulic.Components.Resistor Rlain(useConductanceInput=
              false, Resistance=399967.162245)
          annotation (Placement(transformation(extent={{26,86},{56,110}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm LeftAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
          volume_start=9.31e-05,
          ZeroPressureVolume=3e-05,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{74, 50}, {102, 78}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm LeftVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false, volume_start = 0.000144, ZeroPressureVolume = 6e-05, ExternalPressure = -533.28954966) annotation(Placement(transformation(extent={{150,50},
                  {178,78}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm ventricleArteryValve(_Ron = 9.3757696980707e-07, _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false) annotation(Placement(transformation(extent = {{184, 76}, {208, 52}})));
        Parts.AtrialElastance LAtrialElastance(
          Tav(displayUnit="s"),
          EMIN=15998686.4898,
          EMAX=37330268.4762)
          annotation (Placement(transformation(extent={{80,92},{118,124}})));
        Parts.VentricularElastance LVentricularElastance(EMIN=11999014.86735,
            EMAX=533289549.66)
          annotation (Placement(transformation(extent={{164,88},{200,120}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm atrioVentricleValve(_Ron = 2.4999552322936e-06, useLimitationInputs = false, _Goff(displayUnit = "ml/(mmHg.s)") = 0) annotation(Placement(visible = true, transformation(origin = {127, 64}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Eitha(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.000204,
          ZeroPressureVolume=0.00014,
          ExternalPressure=-533.28954966,
          Elastance=190651014.00345)
          annotation (Placement(transformation(extent={{168,6},{190,28}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Eetha(
          volume_start(displayUnit="ml") = 0.000526,
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          ZeroPressureVolume=0.00037,
          Elastance=74127247.40274)
          annotation (Placement(transformation(extent={{56,4},{82,30}})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905, volumeFlow_start(displayUnit = "ml/min") = 2.1666666666667e-005) annotation(Placement(transformation(extent={{-11,-11},
                  {11,11}},                                                                                                    rotation = 180, origin={141,17})));
        Cardiovascular.Hydraulic.Components.Resistor Retha(useConductanceInput=
              false, Resistance(displayUnit="(mmHg.s)/ml") = 7999343.2449)
          annotation (Placement(transformation(extent={{90,6},{112,28}})));
        Cardiovascular.Hydraulic.Components.Resistor Rsart(useConductanceInput=
              false, Resistance(displayUnit="(mmHg.s)/ml") = 106657909.932)
          annotation (Placement(transformation(
              extent={{14,-13},{-14,13}},
              rotation=0,
              origin={24,17})));
        Cardiovascular.Hydraulic.Components.Resistor Rsven(useConductanceInput=
              false, Resistance(displayUnit="(mmHg.s)/ml") = 26664477.483)
          annotation (Placement(transformation(
              extent={{14,-13},{-14,13}},
              rotation=0,
              origin={-60,17})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Est(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.000283,
          ZeroPressureVolume=0.000185,
          Elastance=34930465.50273)
          annotation (Placement(transformation(extent={{-28,6},{-4,28}})));
        Cardiovascular.Hydraulic.Components.Resistor Rethv(useConductanceInput=
              false, Resistance(displayUnit="(mmHg.s)/ml") = 11999014.86735)
          annotation (Placement(transformation(extent={{-120,4},{-146,30}})));
        Cardiovascular.Hydraulic.Components.Resistor Rrain(useConductanceInput=
              false, Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
          annotation (Placement(transformation(extent={{-208,4},{-236,30}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Eithv(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.00148,
          ZeroPressureVolume=0.00119,
          ExternalPressure=-533.28954966,
          Elastance=2426467.450953)
          annotation (Placement(transformation(extent={{-194,4},{-166,30}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm Eethv(
          useV0Input=false,
          useExternalPressureInput=false,
          useComplianceInput=false,
          volume_start=0.00153,
          ZeroPressureVolume=0.001,
          Elastance=2253148.3473135)
          annotation (Placement(transformation(extent={{-108,4},{-82,30}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm RightAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
          volume_start=0.000135,
          ZeroPressureVolume=3e-05,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-242, 44}, {-214, 72}})));
        Cardiovascular.Hydraulic.Components.ElasticVesselNorm RightVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
          volume_start=0.000131,
          ZeroPressureVolume=4e-05,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-170,42},
                  {-140,72}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm ventricleArteryValve1(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
          _Ron = 2.4999552322936e-06)                                                                                                     annotation(Placement(transformation(extent={{-132,70},
                  {-106,44}})));
        Parts.AtrialElastance RAtrialElastance(EMIN=6666119.37075, EMAX=
              19998358.11225)
          annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
        Parts.VentricularElastance RVentricularElastance(EMIN=7599376.082655,
            EMAX=65327969.83335)
          annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm atrioVentricleValve1(_Ron = 2.497705047566e-06, _Goff = 0, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-189, 58}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
      equation
        connect(Epa.q_in, Rpp.q_in) annotation (Line(
            points={{-80,98},{-56,98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rpp.q_out, Epv.q_in) annotation (Line(
            points={{-22,98},{7,98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Epv.q_in, Rlain.q_in) annotation (Line(
            points={{7,98},{26,98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(LeftAtrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{88, 64}, {114, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, atrioVentricleValve.q_out) annotation(Line(points={{164,64},
                {140,64}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, ventricleArteryValve.q_in) annotation(Line(points={{164,64},
                {184,64}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.compliance, LVentricularElastance.Ct) annotation (
           Line(
            points={{164,75.2},{164,74},{212,74},{212,107.68},{203.42,107.68}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(Rlain.q_out, LeftAtrium.q_in) annotation (Line(
            points={{56,98},{74,98},{74,64},{88,64}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Retha.q_in, Eetha.q_in) annotation (Line(
            points={{90,17},{69,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Retha.q_out, inertia.q_out) annotation (Line(
            points={{112,17},{130,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(inertia.q_in, Eitha.q_in) annotation (Line(
            points={{152,17},{179,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Eitha.q_in, ventricleArteryValve.q_out) annotation (Line(
            points={{179,17},{216,17},{216,64},{208,64}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Est.q_in, SmallVenuleConductance.q_in) annotation (Line(
            points={{-16,17},{-46,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rrain.q_in, Eithv.q_in) annotation (Line(
            points={{-208,17},{-180,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Eithv.q_in, Rethv.q_out) annotation (Line(
            points={{-180,17},{-146,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rethv.q_in, Eethv.q_in) annotation (Line(
            points={{-120,17},{-95,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Eethv.q_in, SmallVenuleConductance.q_out) annotation (Line(
            points={{-95,17},{-74,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RightAtrium.q_in, atrioVentricleValve1.q_in) annotation(Line(points = {{-228, 58}, {-202, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightVentricle.q_in, atrioVentricleValve1.q_out) annotation(Line(points={{-155,57},
                {-164.5,57},{-164.5,58},{-176,58}},                                                                                             color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightVentricle.q_in, ventricleArteryValve1.q_in) annotation(Line(points={{-155,57},
                {-132,57}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rrain.q_out, RightAtrium.q_in) annotation (Line(
            points={{-236,17},{-250,17},{-250,58},{-228,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RightAtrium.compliance,RAtrialElastance. Ct) annotation(Line(points = {{-228, 69.2}, {-228, 92}, {-202.39, 92}, {-202.39, 101.84}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricleArteryValve1.q_out, Epa.q_in) annotation (Line(
            points={{-106,57},{-92,57},{-92,98},{-80,98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RightVentricle.compliance,RVentricularElastance. Ct) annotation(Line(points={{-155,69},
                {-155,80},{-126,80},{-126,108.91},{-147.15,108.91}},                                                                                                   color = {0, 0, 127}, smooth = Smooth.None));
        connect(LeftAtrium.compliance, LAtrialElastance.Ct) annotation (Line(
            points={{88,75.2},{88,74},{121.61,74},{121.61,107.84}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HeartRate.y,RAtrialElastance. HR) annotation(Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RVentricularElastance.HR, HeartRate.y) annotation(Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(LAtrialElastance.HR, HeartRate.y) annotation (Line(
            points={{99,120.8},{99,128.5},{-229.25,128.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVentricularElastance.HR, HeartRate.y) annotation (Line(
            points={{182,116.8},{182,128.5},{-229.25,128.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Est.q_in, Rsart.q_out) annotation (Line(
            points={{-16,17},{-4,17},{-4,17},{10,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rsart.q_in, Eetha.q_in) annotation (Line(
            points={{38,17},{53,17},{53,17},{69,17}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-280,-140},{280,180}},      preserveAspectRatio=false),   graphics), Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics));
      end HemodynamicsMeurs_flatNorm;

      model test
        Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(
            volume_start=1e-05, Compliance=7.5006157584566e-09)
          annotation (Placement(transformation(extent={{-10,20},{10,40}})));
        Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance=
              1.2501026264094e-10)
          annotation (Placement(transformation(extent={{24,20},{44,40}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-48,20},{-28,40}})));
        Physiolibrary.Hydraulic.Examples.Utilities.Pulses pulses
          annotation (Placement(transformation(extent={{-58,52},{-38,72}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume
          annotation (Placement(transformation(extent={{20,-12},{40,8}})));
      equation
        connect(unlimitedPump.solutionFlow, pulses.volumeflowrate) annotation (
            Line(
            points={{-38,37},{-38,50},{-38,62},{-39,62}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(unlimitedPump.q_out, elasticVessel.q_in) annotation (Line(
            points={{-28,30},{2.22045e-16,30}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(elasticVessel.q_in, conductor.q_in) annotation (Line(
            points={{0,30},{24,30}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(unlimitedVolume.y, conductor.q_out) annotation (Line(
            points={{40,-2},{46,-2},{46,30},{44,30}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end test;
    end Meurs;

    package Burkhoff
      model HemodynamicsBurkhoff_flatNorm
        //Cardiovascular.Hydraulic.Components.Resistor
        //Cardiovascular.Hydraulic.Components.IdealValveNorm
        Physiolibrary.Hydraulic.Components.ElasticVessel Cvs(
          volume_start=0.002701,
          ZeroPressureVolume=0.00223,
          Compliance=5.2504310309196e-07)                                                                                                     annotation(Placement(transformation(extent = {{-72, 12}, {-52, 32}})));
        Cardiovascular.Hydraulic.Components.Resistor Ras(Resistance=
              99991790.56125)
        annotation(Placement(transformation(extent={{-28,12},{-48,32}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel Cas(
          volume_start=0.000834,
          ZeroPressureVolume=0.0007,
          Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent = {{-24, 12}, {-4, 32}})));
        Cardiovascular.Hydraulic.Components.Resistor Rcs(Resistance=
              3199737.29796)
        annotation(Placement(transformation(extent={{18,12},{-2,32}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel Caprox(
          volume_start=3.8e-05,
          ZeroPressureVolume=3e-05,
          Compliance=7.5006157584566e-10,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{20, 12}, {40, 32}})));
        Cardiovascular.Hydraulic.Components.Resistor Rcprox(Resistance=
              2666447.7483)
        annotation(Placement(transformation(extent={{62,12},{42,32}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm AOV(R_on=
              266644.77483)                                    annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={80,-4})));
        Parts.ElasticVesselWithSVandP LV(
          useComplianceInput=true,
          volume_start=0.000125,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{92,-14},{112,6}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm MV(R_on=
              333305.9685375)                                                                                             annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={122,-4})));
        Parts.ElasticVesselWithSVandP LA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=8.1e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{158,-14},{178,6}})));
        Cardiovascular.Hydraulic.Components.Resistor Rvp(Resistance=
              1999835.811225)
        annotation(Placement(transformation(extent={{206,-2},{186,18}})));
        Cardiovascular.Hydraulic.Components.Resistor Rvs(Resistance=
              2666447.7483)
        annotation(Placement(transformation(extent={{-84,-50},{-64,-30}})));
        Parts.ElasticVesselWithSVandP RA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=7.3e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm TV(R_on(displayUnit=
                "(mmHg.s)/ml") = 333305.9685375)              annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {4, -40})));
        Parts.ElasticVesselWithSVandP RV(
          useComplianceInput=true,
          ExternalPressure=0,
          volume_start=0.000112,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{16,-50},{36,-30}})));
        Cardiovascular.Hydraulic.Components.IdealValveNorm PV(R_on=266644.77483)
                                                              annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {50, -40})));
        Cardiovascular.Hydraulic.Components.Resistor Rcsp(Resistance=
              2666447.7483)
        annotation(Placement(transformation(extent = {{70, -50}, {90, -30}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel Cap(
          volume_start=0.000802,
          ZeroPressureVolume=0.0006,
          Compliance=1.5001231516913e-07,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{144, -48}, {164, -28}})));
        Cardiovascular.Hydraulic.Components.Resistor Rcp(Resistance=
              2666447.7483)
        annotation(Placement(transformation(extent = {{122, -48}, {142, -28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel Cvp(
          volume_start=0.000154,
          ZeroPressureVolume=0.0001,
          Compliance=5.2504310309196e-08,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{184, -48}, {204, -28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel Capprox(
          volume_start=3e-05,
          ZeroPressureVolume=2e-05,
          Compliance=7.5006157584566e-09,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{98, -48}, {118, -28}})));
        Cardiovascular.Hydraulic.Components.Resistor Rap(Resistance=
              2666447.7483)
        annotation(Placement(transformation(extent = {{164, -48}, {184, -28}})));
        Parts.AtrialElastance RAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=26664477.483)
          annotation (Placement(transformation(extent={{-56,-18},{-32,2}})));
        Parts.VentricularElastance RVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=50662507.2177)
          annotation (Placement(transformation(extent={{14,-14},{36,6}})));
        Parts.AtrialElastance LAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=33330596.85375) annotation (Placement(transformation(
              extent={{-9,-8},{9,8}},
              rotation=0,
              origin={167,32})));
        Parts.VentricularElastance LVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          AVDelay(displayUnit="s"),
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=205316476.6191)
          annotation (Placement(transformation(extent={{88,16},{112,36}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
              1.3333333333333)                                                      annotation(Placement(transformation(extent={{-86,34},
                  {-78,42}})));
        Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=180,
              origin={-13,-55})));
        Modelica.Blocks.Math.Add3 add
                                     annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-30,-32})));
        Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=0,
              origin={139,-19})));
        Modelica.Blocks.Math.Add3 add1
                                      annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={176,14})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
          annotation (Placement(transformation(extent={{100,-22},{112,-12}})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
          annotation (Placement(transformation(
              extent={{7,-5},{-7,5}},
              rotation=0,
              origin={19,-53})));
        Modelica.Blocks.Math.Add add2 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={35,-25})));
        Modelica.Blocks.Math.Add add3 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={109,11})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=0)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={50,-4})));
      equation
        connect(AOV.q_in, LV.q_in) annotation(Line(points={{90,-4},{102,-4}},    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LV.q_in, MV.q_out) annotation(Line(points={{102,-4},{112,-4}},                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TV.q_out, RV.q_in) annotation(Line(points = {{14, -40}, {26, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RV.q_in, PV.q_in) annotation(Line(points = {{26, -40}, {40, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PV.q_out, Rcsp.q_in) annotation(Line(points = {{60, -40}, {70, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcsp.q_out, Capprox.q_in) annotation(Line(points = {{90, -40}, {98, -40}, {98, -38}, {108, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Capprox.q_in, Rcp.q_in) annotation(Line(points = {{108, -38}, {122, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcp.q_out, Cap.q_in) annotation(Line(points = {{142, -38}, {154, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cap.q_in, Rap.q_in) annotation(Line(points = {{154, -38}, {164, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rap.q_out, Cvp.q_in) annotation(Line(points = {{184, -38}, {194, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(heartRate.y, RAElastance.HR) annotation (Line(
            points={{-77,38},{-74,38},{-74,6},{-66,6},{-66,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.HR, RAElastance.HR) annotation (Line(
            points={{15.21,4.3},{-2,4.3},{-2,6},{-58,6},{-58,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.HR, heartRate.y) annotation (Line(
            points={{158.99,38.64},{128,38.64},{128,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.HR, heartRate.y) annotation (Line(
            points={{89.32,34.3},{62,34.3},{62,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.StressedVolume, RAElastance.Vs) annotation (Line(
            points={{-54.4,-29.8},{-54.4,-19.9},{-54.32,-19.9},{-54.32,-16.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.StressedVolume, LVElastance.Vs) annotation (Line(
            points={{97.6,6.2},{97.6,16},{89.68,16},{89.68,17.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LA.StressedVolume, LAElastance.Vs) annotation (Line(
            points={{163.6,6.2},{159.26,6.2},{159.26,24.96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.q_in, TV.q_in) annotation(Line(points = {{-50, -40}, {-6, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LA.q_in, MV.q_in) annotation(Line(points={{168,-4},{132,-4}},                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cvp.q_in, Rvp.q_in) annotation (Line(
            points={{194,-38},{206,-38},{206,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvp.q_out, LA.q_in) annotation (Line(
            points={{186,8},{186,-4},{168,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(AOV.q_out, Rcprox.q_in) annotation (Line(
            points={{70,-4},{70,22},{62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
            points={{42,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_in, Caprox.q_in) annotation (Line(
            points={{18,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_out, Cas.q_in) annotation (Line(
            points={{-2,22},{-14,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cas.q_in, Ras.q_in) annotation (Line(
            points={{-14,22},{-28,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ras.q_out, Cvs.q_in) annotation (Line(
            points={{-48,22},{-62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cvs.q_in, Rvs.q_in) annotation (Line(
            points={{-62,22},{-84,22},{-84,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvs.q_out, RA.q_in) annotation (Line(
            points={{-64,-40},{-50,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RAVGain.y, add.u1) annotation (Line(
            points={{-18.5,-55},{-18.5,-35.2},{-25.2,-35.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.Ct, LV.compliance) annotation (Line(
            points={{103.6,17.4},{103.6,17.21},{102,17.21},{102,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.Ct, LA.compliance) annotation (Line(
            points={{169.7,25.12},{169.7,18},{168,18},{168,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Ct, RV.compliance) annotation (Line(
            points={{28.3,-12.6},{28.3,-25.79},{26,-25.79},{26,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Ct, RA.compliance) annotation (Line(
            points={{-40.4,-16.6},{-40.4,-26},{-50,-26},{-50,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.StressedVolume, RVElastance.Vs) annotation (Line(
            points={{21.6,-29.8},{21.6,-24.9},{15.54,-24.9},{15.54,-12.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.q_in, pressureMeasure.q_in) annotation (Line(
            points={{102,-4},{103.6,-4},{103.6,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.q_in, RV.q_in) annotation (Line(
            points={{21.8,-56},{24,-56},{24,-40},{26,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.pressure, RAVGain.u) annotation (Line(
            points={{14.8,-55},{-7,-55}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.u3, add1.u3) annotation (Line(
            points={{172.8,18.8},{172.8,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Pt, add2.u2) annotation (Line(
            points={{34.02,-12.6},{34.02,-18.9},{33.2,-18.9},{33.2,-21.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.externalPressure, add2.y) annotation (Line(
            points={{34,-32},{34,-28.3},{35,-28.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, RA.externalPressure) annotation (Line(
            points={{-34.4,-32},{-42,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Pt, add.u3) annotation (Line(
            points={{-34.16,-16.6},{-34.16,-26},{-20,-26},{-20,-28.8},{-25.2,
                -28.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LV.externalPressure, add3.y) annotation (Line(
            points={{110,4},{110,7.7},{109,7.7}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LA.externalPressure, add1.y) annotation (Line(
            points={{176,4},{176,9.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pressureMeasure.pressure, LAVGain.u) annotation (Line(
            points={{109.6,-19},{120.8,-19},{120.8,-19},{133,-19}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LAVGain.y, add1.u1) annotation (Line(
            points={{144.5,-19},{184,-19},{184,18.8},{179.2,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Caprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,30},{38,30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add3.u2) annotation (Line(
            points={{55,-4},{66,-4},{66,14.6},{107.2,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LVElastance.Pt, add3.u1) annotation (Line(
            points={{109.84,17.4},{109.84,16.7},{110.8,16.7},{110.8,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add1.u2, LAElastance.Pt) annotation (Line(
            points={{176,18.8},{176,25.12},{174.38,25.12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add1.u3) annotation (Line(
            points={{55,-4},{66,-4},{66,24},{172,24},{172.8,24},{172.8,22},{
                172.8,18.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Capprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cap.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{162,-30},{162,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cvp.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{202,-30},{202,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add2.u1) annotation (Line(
            points={{55,-4},{66,-4},{66,-21.4},{36.8,-21.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add.u2, Capprox.externalPressure) annotation (Line(
            points={{-25.2,-32},{-16,-32},{-16,-18},{66,-18},{66,-26},{116,-26},
                {116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                  -100},{220,100}}),                                                                           graphics), Icon(coordinateSystem(extent = {{-100, -100}, {220, 100}})));
      end HemodynamicsBurkhoff_flatNorm;

      model HemodynamicsBurkhoff
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare replaceable Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
      end HemodynamicsBurkhoff;

      model HemodynamicsBurkhoffBVControl
        extends ControlInterfaces.SystemBVControl(
          redeclare Variants.Parts.PulmonaryControl pulmonaryCirculation,
          redeclare Variants.Parts.HeartControl heart(MV(useLimitationInputs=
                  false), AOV(useLimitationInputs=false)),
          redeclare Variants.Parts.SystemicControl systemicCirculation(Ras(
                useConductanceInput=false)),
          redeclare Control.Baroreflex baroreflex(baroreceptor(
              PAOmedia=11585.715466364,
              EV0right=50662507.2177,
              EV0left=205316476.6191,
              EV0venacava=5.2504310309196e-07,
              activationDelay=10)),
          redeclare replaceable Control.BloodVolumeControl2
                                               bloodVolumeControl);
      /*    redeclare Control.StenosisControl simulationControl(venacavastenosis(
          InitialElastance=1906510.1400345, FinalElastance=
            1906510.1400345),                                aorticstenosis(
          InitialResistance(displayUnit="(mmHg.s)/ml") = 266644.77483,
          FinalResistance(displayUnit="(mmHg.s)/ml") = 266644.77483),
      mitralvalvestenosis(InitialResistance=333305.9685375, FinalResistance=333305.9685375)));*/
      end HemodynamicsBurkhoffBVControl;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model Pulmonary
          extends Interfaces.PulmonaryCirculation;
          Cardiovascular.Hydraulic.Components.Resistor Rcsp(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 2666447.7483)                                                                annotation(Placement(transformation(extent={{-84,-10},
                    {-64,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel      Capprox(
            volume_start=3e-05,
            ZeroPressureVolume=2e-05,
            Compliance=7.5006157584566e-09)                                                                                               annotation(Placement(transformation(extent={{-56,-10},
                    {-36,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Rcp(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 2666447.7483)             annotation(Placement(transformation(extent={{-32,-10},
                    {-12,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel      Cap(
            volume_start=0.000802,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07)                                                                                                annotation(Placement(transformation(extent={{-8,-10},
                    {12,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Rap(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 2666447.7483)             annotation(Placement(transformation(extent={{12,-10},
                    {32,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel      Cvp(
            volume_start=0.000154,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08)                                                                                                annotation(Placement(transformation(extent={{34,-10},
                    {54,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Rvp(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 1999835.811225)           annotation(Placement(transformation(extent={{60,-10},
                    {80,10}})));
        equation
          connect(q_in, Rcsp.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcsp.q_out, Capprox.q_in) annotation (Line(
              points={{-64,2.22045e-16},{-46,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Capprox.q_in, Rcp.q_in) annotation (Line(
              points={{-46,2.22045e-16},{-32,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcp.q_out, Cap.q_in) annotation (Line(
              points={{-12,2.22045e-16},{2,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cap.q_in, Rap.q_in) annotation (Line(
              points={{2,2.22045e-16},{12,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rap.q_out, Cvp.q_in) annotation (Line(
              points={{32,2.22045e-16},{44,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvp.q_in, Rvp.q_in) annotation (Line(
              points={{44,2.22045e-16},{60,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvp.q_out, q_out) annotation (Line(
              points={{80,2.22045e-16},{88,2.22045e-16},{88,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Pulmonary;

        model Systemic
          extends Interfaces.SystemicCirculation;
          Cardiovascular.Hydraulic.Components.Resistor Rcprox(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 2666447.7483)                annotation(Placement(transformation(extent={{86,-10},
                    {66,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Caprox(
            volume_start=3.8e-05,
            ZeroPressureVolume=3e-05,
            Compliance=7.5006157584566e-10)                                                                                                     annotation(Placement(transformation(extent={{44,-10},
                    {64,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Rcs(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 3199737.29796)            annotation(Placement(transformation(extent={{42,-10},
                    {22,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cas(
            volume_start=0.000834,
            ZeroPressureVolume=0.0007,
            Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent={{0,-10},
                    {20,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Ras(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 99991790.56125)           annotation(Placement(transformation(extent={{-2,-10},
                    {-22,10}})));
          Hydraulic.Components.ElasticVesselComplianceAdd2 Cvs(
            volume_start=0.002701,
            ZeroPressureVolume=0.00223,
            useComplianceInput=false,
            Compliance=5.2504310309196e-07)
            annotation (Placement(transformation(extent={{-48,-10},{-28,10}})));
          Cardiovascular.Hydraulic.Components.Resistor Rvs(Resistance(displayUnit=
                  "(mmHg.s)/ml") = 2666447.7483)             annotation(Placement(transformation(extent={{-56,-10},
                    {-76,10}})));
        equation
          connect(Rcprox.q_in, q_in) annotation (Line(
              points={{86,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
              points={{66,0},{54,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Caprox.q_in, Rcs.q_in) annotation (Line(
              points={{54,0},{42,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcs.q_out, Cas.q_in) annotation (Line(
              points={{22,0},{10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cas.q_in, Ras.q_in) annotation (Line(
              points={{10,0},{-2,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ras.q_out, Cvs.q_in) annotation (Line(
              points={{-22,0},{-38,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvs.q_in, Rvs.q_in) annotation (Line(
              points={{-38,0},{-56,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvs.q_out, q_out) annotation (Line(
              points={{-76,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Systemic;

        model ElasticVesselWithSVandP
          "elastic vessel computes aditionally stressed volume and pressure"
          extends Physiolibrary.Hydraulic.Components.ElasticVessel;
          Physiolibrary.Types.RealIO.VolumeOutput StressedVolume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-88, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-44, 102})));
        equation
          StressedVolume = volume - zpv;

          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end ElasticVesselWithSVandP;

        partial model HeartElastance
          "Elastance of heart atria and ventricules by Burkhoff"
          import Physiolibrary.Types.*;
          RealIO.VolumeInput Vs "Stressed volume" annotation(Placement(visible = true, transformation(origin = {-163.397, -51.3719}, extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = 0), iconTransformation(origin={-86,-88},    extent = {{-9.999980000000001, -10}, {10, 9.99995}}, rotation=90)));
          parameter Real Alpha( final unit="1/m3")
            "coefficient of end diastolic pressure-volume curve";
          parameter Pressure Beta
            "coefficient of end diastolic pressure-volume curve";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter HydraulicElastance Ees
            "coefficient of end-systolic elastance"
                annotation (Dialog(enable=not useEs_extInput));
          HydraulicElastance Et "Elastance";
          Time Tsyst;
          //need to define in extended model
          parameter Time Tmax "duration of systole ";
          parameter Time Tau "time constant of myocardial relaxation ";
          Real Et0
            "Relative elastance value (Elastance/End-Systolic Elastance)";
          RealIO.PressureOutput Pt "peak isovolumic pressure" annotation (Placement(
                transformation(extent={{64,-78},{84,-58}}),iconTransformation(
                  extent={{-10,-10},{10,10}},
                rotation=270,
                origin={82,-86})));
          RealIO.HydraulicComplianceOutput Ct annotation (Placement(
                transformation(extent={{52,-76},{72,-56}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-86})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/mes if useEs_extInput annotation (
              Placement(transformation(extent={{64,56},{104,96}}), iconTransformation(
                extent={{-13,-13},{13,13}},
                rotation=180,
                origin={87,67})));
        protected
         HydraulicElastance mes;
        equation
          if not useEs_extInput then
            mes = Ees;
          end if;
          if Tsyst <= 3 / 2 * Tmax then
            Et0 = 0.5 * (sin(Modelica.Constants.pi / Tmax * Tsyst - Modelica.Constants.pi / 2) + 1);
          else
            Et0 = 0.5 * exp(-(Tsyst - 3 * Tmax / 2) / Tau);
          end if;
          //1e+6 and 133.322368 are recalculation in SI units - as the original equation comes in torr and ml.
          //  Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 1e+6) * 133.322368 * 1e+6 + Et0 * Ees;

          Et = Modelica.Constants.eps + Et0 * mes;
          Pt = (1 - Et0) * Beta * (exp(Alpha * Vs) - 1);
          Ct = 1 / Et;
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={  Rectangle(extent={{
                      -100,100},{100,-76}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {255, 255, 170},
                    fillPattern =                                                                                                   FillPattern.Solid), Line(points={{
                      -38,94},{-38,-36},{86,-36}},                                                                                                    color = {0, 0, 0}, smooth = Smooth.None), Line(points={{
                      -34,-34},{30,-32},{54,-30},{70,-28},{76,-26},{82,-24},{86,-22},{90,
                      -20}},                                                                                                    color = {0, 0, 0}, smooth = Smooth.None), Line(points={{
                      -34,-36},{4,94}},                                                                                                    color = {0, 0, 0}, smooth = Smooth.None), Line(points={{
                      -34,-36},{88,80}},                                                                                                    color = {255, 0, 0}, smooth = Smooth.None), Polygon(points={{
                      76,72},{72,80},{80,76},{76,72}},                                                                                                    lineColor = {255, 0, 0}, smooth = Smooth.None, fillColor = {255, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid), Polygon(points = {{0, -4}, {-4, 4}, {4, 0}, {0, -4}}, lineColor = {255, 0, 0}, smooth = Smooth.None, fillColor = {255, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid, origin={84,
                      69},                                                                                                    rotation = 180), Text(extent={{
                      -110,-52},{-64,-76}},                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid, textString = "Vs"), Text(extent={{6,
                      -50},{52,-76}},                                                                                                    lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ct"),                                                                                                    Text(extent={{
                      -100,120},{100,104}},                                                                                                    lineColor = {0, 0, 255}, fillColor = {170, 213, 255},
                    fillPattern =                                                                                                   FillPattern.Solid, textString = "%name"),
                                                                                                    Text(extent={{
                      58,-50},{100,-78}},                                                                                                  lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ped")}));
        end HeartElastance;

        model HeartMitralStenosis
          extends Parts2.HeartOld(
                        AOV(
              useLimitationInputs=false,
              _Gon(displayUnit="ml/(mmHg.s)") = 3.7503078792283e-06,
              _Goff=1.2501026264094e-12,
              Pknee=133.322387415), MV(_Gon(displayUnit="ml/(mmHg.s)"),
                useLimitationInputs=true));
          Modelica.Blocks.Sources.Ramp progressiveAorticConductance(
            duration=30,
            offset=3.0002463033826e-06,
            height=-2.93006157584566e-06,
            startTime=30)    annotation (Placement(transformation(extent={{-54,-94},
                    {-34,-74}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst
            hydraulicConductance(k(displayUnit="m3/(Pa.s)")=
              1.2501026264094e-12) annotation (Placement(transformation(extent=
                    {{-78,-82},{-70,-74}})));
        equation
          connect(progressiveAorticConductance.y, MV.Gon) annotation (Line(
              points={{-33,-84},{0,-84},{0,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hydraulicConductance.y, MV.Goff) annotation (Line(
              points={{-69,-78},{-40,-78},{-40,-76},{-12,-76},{-12,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartMitralStenosis;

        model Heart "heart with modified elastance"
          extends Interfaces.Heart;
          ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
          AtrialElastance atrialElastance1(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={31,3})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
          VentricularElastance ventricularElastance1(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-52,-20},{-18,6}})));
          ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true)
                                      annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
          ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
          VentricularElastance ventricularElastance(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{16,64},{50,92}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
          AtrialElastance atrialElastance(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-48,92}})));
          ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=
                1.3333333333333)                                                      annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Hydraulic.Components.BloodFlowMeasurement bloodFlowMeasurement
            annotation (Placement(transformation(extent={{-76,-50},{-96,-30}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={51,-21})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={-41,59})));
          Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={-22,66})));
          Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={62,-8})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{18,52},{4,64}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
            annotation (Placement(transformation(extent={{-14,-58},{0,-48}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-29.9,-18.18},{-28,-18.18},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{38.1,65.96},{38.1,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,89.45},{-78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-77.76,56},{-77.76,63.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{18.38,54},{18.38,65.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-49.62,-24},{-49.62,-18.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation (Line(
              points={{35.6,-29.8},{35.6,-26},{16.38,-26},{16.38,-8.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-50.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{17.87,89.62},{-46,89.62},{-46,96},{-82,96},{-82,89.45},{
                  -78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_in, AOV.q_out) annotation (Line(
              points={{-76,-40},{-62,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-96,-40},{-100,-40},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.HR, heartRate.y) annotation (Line(
              points={{-80,-30},{-82,-30},{-82,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Pt, LV.externalPressure) annotation (
              Line(
              points={{-21.06,-18.18},{-20,-18.18},{-20,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.externalPressure, add.y) annotation (Line(
              points={{48,-32},{50,-32},{50,-26.5},{51,-26.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, heartRate.y) annotation (Line(
              points={{15.87,13.79},{15.87,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Pt, add1.u2) annotation (Line(
              points={{-50.88,64.1},{-44,64.1},{-44,65}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, RA.externalPressure) annotation (Line(
              points={{-41,53.5},{-41,53.75},{-42,53.75},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u1, RAVGain.y) annotation (Line(
              points={{-38,65},{-38,66},{-28.6,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u1, LAVGain.y) annotation (Line(
              points={{54,-15},{54,-12},{54,-8},{55.4,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure1.q_in, LV.q_in) annotation (Line(
              points={{-9.8,-56},{-24,-56},{-24,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.pressure, LAVGain.u) annotation (Line(
              points={{-2.8,-55},{69.2,-55},{69.2,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.q_in, RV.q_in) annotation (Line(
              points={{13.8,54.4},{14,54.4},{14,46},{26,46},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, RAVGain.u) annotation (Line(
              points={{6.8,55.6},{6.8,66},{-14.8,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.compliance, atrialElastance.Ct) annotation (Line(
              points={{-50,50},{-50,58},{-59.2,58},{-59.2,64.1}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Pt, add.u2) annotation (Line(
              points={{44.94,-8.18},{44.94,-11.09},{48,-11.09},{48,-15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.compliance, atrialElastance1.Ct) annotation (Line(
              points={{40,-32},{38,-32},{38,-8.18},{36.1,-8.18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.externalPressure, ventricularElastance.Pt) annotation (
              Line(
              points={{34,50},{34,56},{46.94,56},{46.94,65.96}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Heart;

        model VentricularElastance
          extends HeartIntervals;
          //produces tvsyst and tasyst
          extends HeartElastance;
          //consumes tsyst from above
        equation
          Tsyst = Tvsyst;
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time HP(start = 0)
            "heart period - duration of cardiac cycle";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-134.0, 8.0}, {-94.0, 48.0}}, origin = {1.3363, -48.0}, rotation = 0), iconTransformation(extent = {{-73.7009, 4.4}, {-51.7009, 26.4}}, origin = {-26.2991, 67.6}, rotation = 0), visible = true));
          Physiolibrary.Types.Time Tasyst
            "time elapsed from the beginning of atrial systole";
          Physiolibrary.Types.Time Tvsyst
            "time elapsed from the beginning of ventricular systole";
          parameter Physiolibrary.Types.Time AVDelay(displayUnit = "s")= 0.160
            "AV interval";
          Physiolibrary.Types.Time T0 "start time of cardiac cycle";
          Physiolibrary.Types.Time EDTV "Ventricular end Diastolic Time";
        equation
          b = time - pre(T0) >= pre(HP);
          when {initial(), b} then
            T0 = time;
            HP = 1 / HR;
            EDTV = T0 + AVDelay;
          end when;
          Tasyst = time - T0;
          if time - T0 < AVDelay then
            Tvsyst = 0;
          else
            Tvsyst = time - (T0 + AVDelay);
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(visible = true, origin = {-18.5625, 68}, lineColor = {0, 0, 255}, extent = {{-73.4375, 6.00004}, {-23.4375, 24}}, textString = "HR", fontName = "Arial")}));
        end HeartIntervals;

        model AtrialElastance
          extends HeartIntervals;
          extends HeartElastance;
        equation
          Tsyst = Tasyst;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;
      end Parts;

      package Parts2

        model SideOfHeart "abstract model for heart side"
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-14, -8}, {6, 12}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{-18, 54}, {2, 74}})));
          Physiolibrary.Types.RealIO.PressureInput PTH "Intrathoracic Pressure"
                                                                                annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-56, 50}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 90, origin = {-8, -102})));
          AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Ees=26664477.483,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02)
            annotation (Placement(transformation(extent={{-100,28},{-66,54}})));
          VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Ees=50662507.2177,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03)
            annotation (Placement(transformation(extent={{0,28},{34,54}})));
          Parts.ElasticVesselWithSVandP atrium(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=4e-05)
            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
          Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 180, origin = {-38, 32})));
          Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 270, origin = {-52, 18})));
          Parts.ElasticVesselWithSVandP ventricle(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=6e-05)
            annotation (Placement(transformation(extent={{30,-10},{50,10}})));
          Physiolibrary.Hydraulic.Components.IdealValve atrioVentricularValve(useLimitationInputs = true) annotation(Placement(transformation(extent = {{-20, -10}, {0, 10}})));
          Physiolibrary.Hydraulic.Components.IdealValve ventriculoArteryValve(useLimitationInputs = true) annotation(Placement(transformation(extent = {{66, -10}, {86, 10}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxABackflow(k = 0) annotation(Placement(transformation(extent = {{-18, 28}, {-8, 36}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst Rxv(k(displayUnit = "(mmHg.s)/ml") = 333305.9685375) annotation(Placement(transformation(extent = {{-24, 16}, {-16, 24}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst xR(k(displayUnit = "(mmHg.s)/ml") = 266644.77483) annotation(Placement(transformation(extent = {{60, 16}, {68, 24}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst CxVBackflow(k = 0) annotation(Placement(transformation(extent = {{60, 28}, {70, 36}})));
          Physiolibrary.Types.Constants.VolumeConst VxAU(k = 5e-06) annotation(Placement(transformation(extent = {{-80, 14}, {-72, 22}})));
          Physiolibrary.Types.Constants.VolumeConst VxVU(k = 5e-06) annotation(Placement(transformation(extent = {{22, 16}, {30, 24}})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-102, 52}, {-82, 72}}), iconTransformation(extent = {{-15, -15}, {15, 15}}, rotation = 270, origin = {-9, 115})));
          Modelica.Blocks.Sources.Constant AVGain(k = 0.02) annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin = {-23, 47})));
        equation
          connect(atrium.externalPressure, add.y) annotation(Line(points = {{-52, 8}, {-52, 11.4}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH, add.u2) annotation(Line(points = {{-56, 50}, {-55.6, 50}, {-55.6, 25.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(product.y, add.u1) annotation(Line(points = {{-44.6, 32}, {-41.5, 32}, {-41.5, 25.2}, {-48.4, 25.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricle.pressure, product.u1) annotation(Line(points={{48,-9.4},
                  {48,-9.4},{48,-16},{-26,-16},{-26,28},{-30,28},{-30,28.4},{
                  -30.8,28.4}},                                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(inflow, atrium.q_in) annotation(Line(points = {{-100, 4.44089e-16}, {-80, 4.44089e-16}, {-80, 0}, {-60, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PTH, ventricle.externalPressure) annotation(Line(points = {{-56, 50}, {-56, 56}, {48, 56}, {48, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(VxAU.y, atrium.zeroPressureVolume) annotation(Line(points = {{-71, 18}, {-70, 18}, {-70, 8}, {-68, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inflow, inflow) annotation(Line(points = {{-100, 4.44089e-16}, {-100, 4.44089e-16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(atrium.q_in, atrioVentricularValve.q_in) annotation(Line(points = {{-60, 0}, {-20, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(atrioVentricularValve.q_out, ventricle.q_in) annotation(Line(points = {{0, 0}, {40, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rxv.y, atrioVentricularValve.Gon) annotation(Line(points = {{-15, 20}, {-16, 20}, {-16, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CxABackflow.y, atrioVentricularValve.Goff) annotation(Line(points = {{-6.75, 32}, {-6.75, 19.5}, {-4, 19.5}, {-4, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricle.q_in, ventriculoArteryValve.q_in) annotation(Line(points = {{40, 0}, {66, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ventriculoArteryValve.q_out, outflow) annotation(Line(points = {{86, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(CxVBackflow.y, ventriculoArteryValve.Goff) annotation(Line(points = {{71.25, 32}, {82, 32}, {82, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(xR.y, ventriculoArteryValve.Gon) annotation(Line(points = {{69, 20}, {68, 20}, {68, 10}, {70, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(AVGain.y, product.u2) annotation(Line(points = {{-28.5, 47}, {-30.8, 47}, {-30.8, 35.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.Ct, atrium.compliance) annotation(Line(points={{-64.3,
                  47.5},{-64.3,34.05},{-60,34.05},{-60,8}},                                                                                  color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrium.StressedVolume, atrialElastance.Vs) annotation(Line(points={{-64.4,
                  10.2},{-64.4,28},{-98.3,28},{-98.3,37.1}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricle.compliance, ventricularElastance.Ct) annotation(Line(points={{40,8},{
                  38,8},{38,47.5},{35.7,47.5}},                                                                                          color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricle.zeroPressureVolume, VxVU.y) annotation(Line(points = {{32, 8}, {32, 14}, {32, 20}, {31, 20}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricle.StressedVolume, ventricularElastance.Vs) annotation(Line(points={{35.6,
                  10.2},{35.6,28},{1.7,28},{1.7,37.1}},                                                                                           color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance.HR, HR) annotation(Line(points = {{-98.13, 51.79}, {-98.13, 55.895}, {-92, 55.895}, {-92, 62}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance.HR, HR) annotation(Line(points = {{1.87, 51.79}, {1.87, 62}, {-92, 62}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-10, -84}, {36, -102}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "PTh"), Text(extent=  {{-32, 102}, {14, 84}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end SideOfHeart;

        model LeftHeart
          extends Physiolibrary.Icons.LeftHeart;
          extends SideOfHeart(atrialElastance(Alpha = 0.04, Beta = 0.3, Tmax(displayUnit = "ms") = 0.125, Tau(displayUnit = "ms") = 0.02, AVDelay(displayUnit = "ms"), Ees = 33330596.85375), ventricularElastance(Alpha = 0.024, Beta = 0.34, Tmax(displayUnit = "ms") = 0.2, Tau(displayUnit = "ms") = 0.03, Ees = 205316476.6191), VxAU(k = 5e-06), VxVU(k = 5e-06), Rxv(k = 333305.9685375), CxABackflow(k = 0), xR(k = 266644.77483), CxVBackflow(k = 0), atrium(volume_start = 8.1e-05), ventricle(volume_start = 0.000125));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end LeftHeart;

        model RightHeart
          extends Physiolibrary.Icons.RightHeart;
          extends SideOfHeart(VxAU(k = 5e-06), VxVU(k = 5e-06), atrialElastance(Alpha = 0.04, Beta = 0.3, Tmax(displayUnit = "ms") = 0.125, Tau(displayUnit = "ms") = 0.02, AVDelay(displayUnit = "ms"), Ees = 26664477.483), ventricularElastance(Alpha = 0.024, Beta = 0.34, Tmax(displayUnit = "ms") = 0.2, Tau(displayUnit = "ms") = 0.03, Ees = 50662507.2177), Rxv(k = 333305.9685375), CxABackflow(k = 0), xR(k = 266644.77483), CxVBackflow(k = 0), atrium(volume_start = 7.3e-05), ventricle(volume_start = 0.000112));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end RightHeart;

        model SystemicCirculation
          extends Cardiovascular.Interfaces.SystemicCirculation;
          Parts.ElasticVesselWithSVandP AortaProximal(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=3.8e-05)
            annotation (Placement(transformation(extent={{42,-10},{62,10}})));
          Parts.ElasticVesselWithSVandP SystemicArteries(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.000834)
            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
          Parts.ElasticVesselWithSVandP SystemicVeins(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.002701)
            annotation (Placement(transformation(extent={{-64,-10},{-44,10}})));
          Physiolibrary.Hydraulic.Components.Conductor SystemicProximalImpedance(useConductanceInput = true) annotation(Placement(transformation(extent = {{88, -10}, {66, 10}})));
          Physiolibrary.Hydraulic.Components.Conductor ProximalAortaResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{34, -10}, {18, 8}})));
          Physiolibrary.Hydraulic.Components.Conductor SystemicArterialResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-16, -10}, {-34, 10}})));
          Physiolibrary.Hydraulic.Components.Conductor SystemicVenousResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-86, -10}, {-66, 10}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RcsProx(k(displayUnit = "(mmHg.s)/ml") = 2666447.7483) annotation(Placement(transformation(extent = {{66, 24}, {74, 32}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RcsSys(k(displayUnit = "(mmHg.s)/ml") = 3199737.29796) annotation(Placement(transformation(extent = {{18, 12}, {26, 20}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RaSys(k(displayUnit = "(mmHg.s)/ml") = 99991790.56125) annotation(Placement(transformation(extent = {{-36, 16}, {-28, 24}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RvSys(k(displayUnit = "(mmHg.s)/ml") = 2666447.7483)
            "Systemic Venous Characteristic Impedance"                                                                                                     annotation(Placement(transformation(extent = {{-88, 14}, {-80, 22}})));
          Physiolibrary.Types.Constants.VolumeConst UVaproxSys(k = 3e-05)
            "Unstressed volume in proximal aorta"                                                               annotation(Placement(transformation(extent = {{32, 22}, {40, 30}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CaproxSys(k = 7.5006157584566e-10)
            "Pulmonary Proximal Aortic Capacitance"                                                                                         annotation(Placement(transformation(extent = {{40, 32}, {48, 40}})));
          Physiolibrary.Types.Constants.VolumeConst UVaSys(k = 0.0007)
            "Unstressed volume in systemic arteries"                                                            annotation(Placement(transformation(extent = {{-20, 16}, {-12, 24}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CaSys(k(displayUnit = "ml/mmHg") = 1.2751046789376e-08)
            "Systemic Artery Capacitance"                                                                                                     annotation(Placement(transformation(extent = {{-12, 32}, {-4, 40}})));
          Physiolibrary.Types.Constants.VolumeConst UVvSys(k = 0.00223)
            "Unstressed volume in systemic veins"                                                             annotation(Placement(transformation(extent = {{-68, 22}, {-60, 30}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CvSys(k(displayUnit = "ml/mmHg") = 5.2504310309196e-07)
            "Systemnic Venous Capacitance "                                                                                                     annotation(Placement(transformation(extent = {{-64, 34}, {-56, 42}})));
          Physiolibrary.Types.Constants.PressureConst PTH(k = 0) annotation(Placement(transformation(extent = {{50, 44}, {58, 52}})));
          Physiolibrary.Types.Constants.PressureConst Pext(k = 0) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {16, 40})));
        equation
          connect(SystemicProximalImpedance.q_out, AortaProximal.q_in) annotation(Line(points = {{66, 0}, {52, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RcsProx.y, SystemicProximalImpedance.cond) annotation(Line(points = {{75, 28}, {77, 28}, {77, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RcsSys.y, ProximalAortaResistance.cond) annotation(Line(points = {{27, 16}, {26, 16}, {26, 4.4}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RaSys.y, SystemicArterialResistance.cond) annotation(Line(points = {{-27, 20}, {-25, 20}, {-25, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RvSys.y, SystemicVenousResistance.cond) annotation(Line(points = {{-79, 18}, {-78, 18}, {-78, 6}, {-76, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(UVaproxSys.y, AortaProximal.zeroPressureVolume) annotation(Line(points = {{41, 26}, {42, 26}, {42, 8}, {44, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CaproxSys.y, AortaProximal.compliance) annotation(Line(points = {{49, 36}, {50, 36}, {50, 8}, {52, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(UVaSys.y, SystemicArteries.zeroPressureVolume) annotation(Line(points = {{-11, 20}, {-10, 20}, {-10, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CaSys.y, SystemicArteries.compliance) annotation(Line(points = {{-3, 36}, {-2, 36}, {-2, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(UVvSys.y, SystemicVeins.zeroPressureVolume) annotation(Line(points = {{-59, 26}, {-62, 26}, {-62, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CvSys.y, SystemicVeins.compliance) annotation(Line(points = {{-55, 38}, {-54, 38}, {-54, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH.y, AortaProximal.externalPressure) annotation(Line(points = {{59, 48}, {60, 48}, {60, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(AortaProximal.q_in, ProximalAortaResistance.q_in) annotation(Line(points = {{52, 0}, {44, 0}, {44, -1}, {34, -1}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ProximalAortaResistance.q_out, SystemicArteries.q_in) annotation(Line(points = {{18, -1}, {10, -1}, {10, 0}, {-2, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(SystemicArterialResistance.q_out, SystemicVeins.q_in) annotation(Line(points = {{-34, 0}, {-54, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(SystemicVenousResistance.q_out, SystemicVeins.q_in) annotation(Line(points = {{-66, 0}, {-54, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(SystemicArterialResistance.q_in, SystemicArteries.q_in) annotation(Line(points = {{-16, 0}, {-2, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Pext.y, SystemicArteries.externalPressure) annotation(Line(points = {{11, 40}, {6, 40}, {6, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(SystemicVeins.externalPressure, Pext.y) annotation(Line(points = {{-46, 8}, {-46, 42}, {11, 42}, {11, 40}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(SystemicVenousResistance.q_in, q_out) annotation(Line(points = {{-86, 0}, {-100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(SystemicProximalImpedance.q_in, q_in) annotation(Line(points = {{88, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end SystemicCirculation;

        model PulmonaryCirculation
          extends Cardiovascular.Interfaces.PulmonaryCirculation;
          Parts.ElasticVesselWithSVandP arteryProximal(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=3e-05)
            annotation (Placement(transformation(extent={{-62,12},{-42,32}})));
          Physiolibrary.Hydraulic.Components.Conductor proximalArteryResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-38, -12}, {-18, 8}})));
          Parts.ElasticVesselWithSVandP artery(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.000802)
            annotation (Placement(transformation(extent={{-12,10},{8,30}})));
          Physiolibrary.Hydraulic.Components.Conductor arterialResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{10, -12}, {30, 8}})));
          Physiolibrary.Hydraulic.Components.Conductor proximalImpedance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-88, -12}, {-68, 8}})));
          Parts.ElasticVesselWithSVandP veins(
            useV0Input=true,
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.000154)
            annotation (Placement(transformation(extent={{36,14},{56,34}})));
          Physiolibrary.Hydraulic.Components.Conductor venousResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{64, -10}, {84, 10}})));
          Physiolibrary.Types.Constants.VolumeConst UVap(k = 2e-05) annotation(Placement(transformation(extent = {{-72, 36}, {-64, 44}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CaproxPulm(k = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{-60, 48}, {-52, 56}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RcPulm(k(displayUnit = "(mmHg.s)/ml") = 2666447.7483) annotation(Placement(transformation(extent = {{-40, 14}, {-32, 22}})));
          Physiolibrary.Types.Constants.VolumeConst UVaP(k = 0.0006) annotation(Placement(transformation(extent = {{-22, 38}, {-14, 46}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CaPulm(k = 1.5001231516913e-07) annotation(Placement(transformation(extent = {{-14, 52}, {-6, 60}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RaPulm(k(displayUnit = "(mmHg.s)/ml") = 2666447.7483) annotation(Placement(transformation(extent = {{10, 36}, {18, 44}})));
          Physiolibrary.Types.Constants.VolumeConst UVvP(k = 0.0001) annotation(Placement(transformation(extent = {{28, 40}, {36, 48}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CvPulm(k(displayUnit = "ml/mmHg") = 5.2504310309196e-08) annotation(Placement(transformation(extent = {{36, 54}, {44, 62}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RvPulm(k(displayUnit = "(mmHg.s)/ml") = 1999835.811225) annotation(Placement(transformation(extent = {{64, 34}, {72, 42}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RcsPulm(k(displayUnit = "(mmHg.s)/ml") = 2666447.7483) annotation(Placement(transformation(extent = {{-92, 14}, {-84, 22}})));
          Physiolibrary.Types.Constants.PressureConst PTH(k = 0) annotation(Placement(transformation(extent = {{-70, 62}, {-62, 70}})));
        equation
          connect(UVap.y, arteryProximal.zeroPressureVolume) annotation(Line(points = {{-63, 40}, {-62, 40}, {-62, 30}, {-60, 30}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CaproxPulm.y, arteryProximal.compliance) annotation(Line(points = {{-51, 52}, {-52, 52}, {-52, 30}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(proximalArteryResistance.cond, RcPulm.y) annotation(Line(points = {{-28, 4}, {-28, 18}, {-31, 18}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(artery.zeroPressureVolume, UVaP.y) annotation(Line(points = {{-10, 28}, {-12, 28}, {-12, 42}, {-13, 42}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CaPulm.y, artery.compliance) annotation(Line(points = {{-5, 56}, {-4, 56}, {-4, 28}, {-2, 28}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(arterialResistance.cond, RaPulm.y) annotation(Line(points = {{20, 4}, {20, 40}, {19, 40}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(veins.zeroPressureVolume, UVvP.y) annotation(Line(points = {{38, 32}, {36, 32}, {36, 44}, {37, 44}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CvPulm.y, veins.compliance) annotation(Line(points = {{45, 58}, {46, 58}, {46, 32}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(proximalImpedance.q_out, arteryProximal.q_in) annotation(Line(points = {{-68, -2}, {-68, 22}, {-52, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(arteryProximal.q_in, proximalArteryResistance.q_in) annotation(Line(points = {{-52, 22}, {-46, 22}, {-46, -2}, {-38, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(proximalArteryResistance.q_out, artery.q_in) annotation(Line(points = {{-18, -2}, {-10, -2}, {-10, 20}, {-2, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(artery.q_in, arterialResistance.q_in) annotation(Line(points = {{-2, 20}, {4, 20}, {4, -2}, {10, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(arterialResistance.q_out, veins.q_in) annotation(Line(points = {{30, -2}, {38, -2}, {38, 24}, {46, 24}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(veins.q_in, venousResistance.q_in) annotation(Line(points = {{46, 24}, {56, 24}, {56, 0}, {64, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(venousResistance.cond, RvPulm.y) annotation(Line(points = {{74, 6}, {74, 38}, {73, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RcsPulm.y, proximalImpedance.cond) annotation(Line(points = {{-83, 18}, {-80, 18}, {-80, 4}, {-78, 4}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH.y, arteryProximal.externalPressure) annotation(Line(points = {{-61, 66}, {-44, 66}, {-44, 30}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH.y, artery.externalPressure) annotation(Line(points = {{-61, 66}, {6, 66}, {6, 28}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PTH.y, veins.externalPressure) annotation(Line(points = {{-61, 66}, {54, 66}, {54, 32}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(proximalImpedance.q_in, q_in) annotation(Line(points = {{-88, -2}, {-96, -2}, {-96, 0}, {-100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(venousResistance.q_out, q_out) annotation(Line(points = {{84, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end PulmonaryCirculation;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          LeftHeart leftHeart annotation(Placement(transformation(extent = {{-18, -32}, {44, 24}})));
          RightHeart rightHeart annotation(Placement(transformation(extent = {{-62, -32}, {2, 28}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.3333333333333) annotation(Placement(transformation(extent = {{-76, 40}, {-68, 48}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k = 0) annotation(Placement(transformation(extent = {{-64, -46}, {-56, -38}})));
          Cardiovascular.Hydraulic.Components.BloodFlowMeasurement bloodFlowMeasurement annotation(Placement(transformation(extent = {{48, 10}, {68, 30}})));
        equation
          connect(rightHeartInflow, rightHeart.inflow) annotation(Line(points={{-100,40},
                  {-66,40},{-66,-1.4},{-31.28,-1.4}},                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(rightHeart.outflow, rightHeartOutflow) annotation(Line(points={{-32.56,
                  17.2},{-65.28,17.2},{-65.28,40},{100,40}},                                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(leftHeart.inflow, leftHeartInflow) annotation(Line(points = {{11.76, -3.44}, {55.88, -3.44}, {55.88, -20}, {100, -20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(heartRate.y, rightHeart.HR) annotation(Line(points = {{-67, 44}, {-32.88, 44}, {-32.88, 32.5}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(heartRate.y, leftHeart.HR) annotation(Line(points = {{-67, 44}, {10.21, 44}, {10.21, 28.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Pth.y, rightHeart.PTH) annotation(Line(points = {{-55, -42}, {-32.56, -42}, {-32.56, -32.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Pth.y, leftHeart.PTH) annotation(Line(points = {{-55, -42}, {10.52, -42}, {10.52, -32.56}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(leftHeart.outflow, bloodFlowMeasurement.q_in) annotation(Line(points = {{10.52, 13.92}, {29.26, 13.92}, {29.26, 20}, {48, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation(Line(points={{68,20},
                  {-16,20},{-16,-20},{-100,-20}},                                                               color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(bloodFlowMeasurement.HR, heartRate.y) annotation(Line(points={{52,30},
                  {52,44},{-67,44}},                                                                                color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end Heart;

        model HeartOld
          extends Interfaces.Heart;
          Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
          AtrialElastance atrialElastance1(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={17,-9})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
          VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-68,-20},{-34,6}})));
          Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Modelica.Blocks.Math.Product product1 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin={9,-61})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
          Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
          VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{-2,62},{24,80}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
          AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-52,82}})));
          Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin={-29,23})));
          Modelica.Blocks.Sources.Constant AVGain(k = 0.02) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin={-14,28})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=1.2)               annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Hydraulic.Components.BloodFlowMeasurement bloodFlowMeasurement
            annotation (Placement(transformation(extent={{-76,-50},{-96,-30}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.pressure, product1.u2) annotation (Line(
              points={{-34.4,-49.8},{-34.4,-64},{-20,-64},{3,-64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, LA.externalPressure) annotation (Line(
              points={{14.5,-61},{52,-61},{52,-32},{48,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, LA.compliance) annotation (Line(
              points={{35.7,-7.7},{40,-7.7},{40,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-32.3,-5.7},{-28,-5.7},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.pressure, product.u1) annotation (Line(
              points={{19.6,32.2},{19.6,20},{-23,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.u2, AVGain.y) annotation (Line(
              points={{-23,26},{-20,26},{-20,28},{-18.4,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, RA.externalPressure) annotation (Line(
              points={{-34.5,23},{-38,23},{-38,50},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, RA.compliance) annotation (Line(
              points={{-50.6,73},{-50.6,65.5},{-50,65.5},{-50,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{25.3,71.9},{25.3,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-78.6,56},{-78.6,69}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{-0.699999,54},{-0.699999,68.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-66.3,-24},{-66.3,-10.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation (Line(
              points={{35.6,-29.8},{35.6,-26},{1.7,-26},{1.7,-12.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{-0.57,78.47},{-46,78.47},{-46,84},{-82,84},{-82,80},{
                  -82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, ventricularElastance1.HR) annotation (
              Line(
              points={{1.87,1.79},{1.87,8},{-82,8},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_in, AOV.q_out) annotation (Line(
              points={{-76,-40},{-62,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-96,-40},{-100,-40},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.HR, heartRate.y) annotation (Line(
              points={{-80,-30},{-82,-30},{-82,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.u1, AVGain.y) annotation (Line(
              points={{3,-58},{-18.4,-58},{-18.4,28}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end HeartOld;

        model HeartWithoutVI
          extends Interfaces.Heart;
          Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=false)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
          AtrialElastance atrialElastance1(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={17,-9})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
          VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-68,-20},{-34,6}})));
          Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
          Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
          VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{-2,62},{24,80}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
          AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-52,82}})));
          Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=false)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=1.2)               annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(AOV.q_out, leftHeartOutflow) annotation (Line(
              points={{-62,-40},{-80,-40},{-80,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, LA.compliance) annotation (Line(
              points={{35.7,-2.5},{40,-2.5},{40,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-32.3,-0.5},{-28,-0.5},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, RA.compliance) annotation (Line(
              points={{-50.6,77},{-50.6,65.5},{-50,65.5},{-50,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{25.3,75.5},{25.3,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-78.6,56},{-78.6,69}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{-0.699999,54},{-0.699999,68.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-66.3,-24},{-66.3,-10.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation (Line(
              points={{35.6,-29.8},{35.6,-26},{1.7,-26},{1.7,-12.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{-0.57,78.47},{-46,78.47},{-46,84},{-82,84},{-82,80},{
                  -82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, ventricularElastance1.HR) annotation (
              Line(
              points={{1.87,1.79},{1.87,8},{-82,8},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartWithoutVI;

        model HeartWithoutVs
          extends Interfaces.Heart;
          Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
          AtrialElastance atrialElastance1(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={17,-9})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
          VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-68,-20},{-34,6}})));
          Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Modelica.Blocks.Sources.Constant AVGain1(k = 0.02) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 0, origin={-8,-56})));
          Modelica.Blocks.Math.Product product1 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin={9,-61})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
          Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
          VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{-2,62},{24,80}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
          AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-52,82}})));
          Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin={-29,23})));
          Modelica.Blocks.Sources.Constant AVGain(k = 0.02) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin={-14,28})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=1.2)               annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Physiolibrary.Types.Constants.VolumeConst volume(k=0.00012)
            annotation (Placement(transformation(extent={{-86,-16},{-78,-8}})));
          Physiolibrary.Types.Constants.VolumeConst volume1(k=7.5e-05)
            annotation (Placement(transformation(extent={{-14,-16},{-6,-8}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(AOV.q_out, leftHeartOutflow) annotation (Line(
              points={{-62,-40},{-80,-40},{-80,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.pressure, product1.u2) annotation (Line(
              points={{-20,-49.4},{-20,-49.4},{-20,-64},{3,-64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(AVGain1.y, product1.u1) annotation (Line(
              points={{-3.6,-56},{0,-56},{0,-58},{3,-58}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, LA.externalPressure) annotation (Line(
              points={{14.5,-61},{52,-61},{52,-32},{48,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, LA.compliance) annotation (Line(
              points={{35.7,-2.5},{40,-2.5},{40,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-32.3,-0.5},{-28,-0.5},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.pressure, product.u1) annotation (Line(
              points={{34,32.6},{34,32.6},{34,20},{-23,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.u2, AVGain.y) annotation (Line(
              points={{-23,26},{-20,26},{-20,28},{-18.4,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, RA.externalPressure) annotation (Line(
              points={{-34.5,23},{-38,23},{-38,50},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, RA.compliance) annotation (Line(
              points={{-50.6,77},{-50.6,65.5},{-50,65.5},{-50,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{25.3,75.5},{25.3,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-78.6,56},{-78.6,69}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{-0.699999,54},{-0.699999,68.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{-0.57,78.47},{-46,78.47},{-46,84},{-82,84},{-82,80},{
                  -82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, ventricularElastance1.HR) annotation (
              Line(
              points={{1.87,1.79},{1.87,8},{-82,8},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume.y, ventricularElastance1.Vs) annotation (Line(
              points={{-77,-12},{-72,-12},{-72,-10.9},{-66.3,-10.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume1.y, atrialElastance1.Vs) annotation (Line(
              points={{-5,-12},{0,-12},{0,-12.9},{1.7,-12.9}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartWithoutVs;

        model HeartWithoutVs2
          extends Interfaces.Heart;
          Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
          AtrialElastance atrialElastance1(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={17,-9})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
          VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-68,-20},{-34,6}})));
          Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-42})));
          Modelica.Blocks.Sources.Constant AVGain1(k = 0.02) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 0, origin={-8,-56})));
          Modelica.Blocks.Math.Product product1 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin={9,-61})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
          Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
          VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{-2,62},{24,80}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
          AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-52,82}})));
          Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 180, origin={-29,23})));
          Modelica.Blocks.Sources.Constant AVGain(k = 0.02) annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin={-14,28})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=1.2)               annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Physiolibrary.Types.Constants.VolumeConst volume(k=7.5e-05)
            annotation (Placement(transformation(extent={{-16,-16},{-8,-8}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-36,-40},{-36,-42},{-42,-42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(AOV.q_out, leftHeartOutflow) annotation (Line(
              points={{-62,-42},{-80,-42},{-80,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.pressure, product1.u2) annotation (Line(
              points={{-20,-49.4},{-20,-49.4},{-20,-64},{3,-64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(AVGain1.y, product1.u1) annotation (Line(
              points={{-3.6,-56},{0,-56},{0,-58},{3,-58}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, LA.externalPressure) annotation (Line(
              points={{14.5,-61},{52,-61},{52,-32},{48,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, LA.compliance) annotation (Line(
              points={{35.7,-2.5},{40,-2.5},{40,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-32.3,-0.5},{-28,-0.5},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.pressure, product.u1) annotation (Line(
              points={{34,32.6},{34,32.6},{34,20},{-23,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.u2, AVGain.y) annotation (Line(
              points={{-23,26},{-20,26},{-20,28},{-18.4,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, RA.externalPressure) annotation (Line(
              points={{-34.5,23},{-38,23},{-38,50},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, RA.compliance) annotation (Line(
              points={{-50.6,77},{-50.6,65.5},{-50,65.5},{-50,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{25.3,75.5},{25.3,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-78.6,56},{-78.6,69}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{-0.699999,54},{-0.699999,68.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{-0.57,78.47},{-46,78.47},{-46,84},{-82,84},{-82,80},{
                  -82.25,80.3},{-78.46,80.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, ventricularElastance1.HR) annotation (
              Line(
              points={{1.87,1.79},{1.87,8},{-82,8},{-82.25,3.79},{-66.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-32,-24},{-32,-20},{-72,-20},{
                  -72,-10.9},{-66.3,-10.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Vs, volume.y) annotation (Line(
              points={{1.7,-12.9},{-2,-12.9},{-2,-12},{-7,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartWithoutVs2;

        partial model HeartElastance
          "Elastance of heart atria and ventricules by Burkhoff"
          //  extends BurkhoffModel.Parts.EtTimingBurkhoff;
          Physiolibrary.Types.RealIO.VolumeInput Vs "Stressed volume" annotation(Placement(visible = true, transformation(origin = {-163.397, -51.3719}, extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = 0), iconTransformation(origin = {-90, -30}, extent = {{-9.999980000000001, -10}, {10, 9.99995}}, rotation = 0)));
          parameter Real Alpha
            "coefficient of end diastolic pressure-volume curve";
          parameter Real Beta
            "coefficient of end diastolic pressure-volume curve";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Ees
            "coefficient of end-systolic elastance"
                annotation (Dialog(enable=not useEs_extInput));
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{94.0, 16.0}, {114.0, 36.0}}, origin = {0.0, 0.0}, rotation = 0), iconTransformation(extent = {{100.0, 20.0}, {120.0, 40.0}}, origin={0,-20},   rotation = 0), visible = true));
          Physiolibrary.Types.HydraulicElastance Et "Elastance";
          Physiolibrary.Types.Time Tsyst;
          //need to define in extended model
          parameter Physiolibrary.Types.Time Tmax "duration of systole ";
          parameter Physiolibrary.Types.Time Tau
            "time constant of myocardial relaxation ";
          Real Et0
            "Relative elastance value (Elastance/End-Systolic Elastance)";
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
           Real X,Y,Z;
           Physiolibrary.Types.Pressure Pt;
        equation
          if not useEs_extInput then
            es_int=Ees;
          end if;
          if Tsyst <= 3 / 2 * Tmax then
            Et0 = 0.5 * (sin(Modelica.Constants.pi / Tmax * Tsyst - Modelica.Constants.pi / 2) + 1);
          else
            Et0 = 0.5 * exp(-(Tsyst - 3 * Tmax / 2) / Tau);
          end if;
          //1e+6 and 133.322368 are recalculation in SI units - as the original equation comes in torr and ml.
          //  Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 1e+6) * 133.322368 * 1e+6 + Et0 * Ees;
          X = exp(Alpha * Vs * 1e+6) - 1;
          Y = exp(Alpha * time) - 1;
          Z = exp(Alpha * time);
          Pt = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1)*133.322368; //(1 - Et0) * Beta * (exp(Alpha * Vs) - 1);
          Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 133.322368 + Et0 * es_int;
          Ct = 1 / Et;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={  Rectangle(extent=  {{-52, 94}, {94, -76}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-42, 90}, {-42, -60}, {82, -60}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -58}, {26, -56}, {50, -54}, {66, -52}, {72, -50}, {78, -48}, {82, -46}, {86, -44}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -60}, {4, 88}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -60}, {84, 56}}, color=  {255, 0, 0}, smooth=  Smooth.None), Polygon(points=  {{72, 48}, {68, 56}, {76, 52}, {72, 48}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{0, -4}, {-4, 4}, {4, 0}, {0, -4}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, origin=  {80, 45}, rotation=  180), Text(extent=  {{-92, -26}, {-38, -42}}, lineColor=  {0, 0, 255}, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Vs"), Text(extent={{
                      50,34},{104,-4}},                                                                                                    lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ct"),                                                                                                    Text(extent=  {{-100, -108}, {100, -124}}, lineColor=  {0, 0, 255}, fillColor=  {170, 213, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
        end HeartElastance;

        model AtrialElastance
          extends Parts.HeartIntervals;
          extends Parts2.HeartElastance;
        equation
          Tsyst = Tasyst;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;

        model VentricularElastance
          extends Parts.HeartIntervals;
          //produces tvsyst and tasyst
          extends Parts2.HeartElastance;
          //consumes tsyst from above
        equation
          Tsyst = Tvsyst;
        end VentricularElastance;
      end Parts2;

      package Test
        model HemodynamicsBurkhoff
          extends Cardiovascular.System(
            redeclare Parts2.Heart heart,
            redeclare Parts2.PulmonaryCirculation pulmonaryCirculation,
            redeclare Parts2.SystemicCirculation systemicCirculation);
          annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}})));
        end HemodynamicsBurkhoff;

        model HemodynamicsBurkhoffVolumeControl
          extends Cardiovascular.Test.SystemVolume(
            redeclare Parts2.PulmonaryCirculation pulmonaryCirculation,
            redeclare Parts2.Heart heart,
            redeclare Parts2.SystemicCirculation systemicCirculation);
        equation
          volume = pulmonaryCirculation.arteryProximal.volume + pulmonaryCirculation.artery.volume + pulmonaryCirculation.veins.volume + systemicCirculation.AortaProximal.volume + systemicCirculation.SystemicArteries.volume + systemicCirculation.SystemicVeins.volume + heart.leftHeart.atrium.volume + heart.leftHeart.ventricle.volume + heart.rightHeart.atrium.volume + heart.rightHeart.ventricle.volume;
        end HemodynamicsBurkhoffVolumeControl;

        model HeartAorticStenosis
          extends Parts2.HeartOld(
                        AOV(
              useLimitationInputs=true,
              _Gon=3.7503078792283e-06,
              _Goff=1.2501026264094e-12,
              Pknee=133.322387415));
          Modelica.Blocks.Sources.Ramp progressiveAorticConductance(
            duration=30,
            offset=3.7503078792283e-06,
            startTime=60,
            height=-3.05e-6) annotation (Placement(transformation(extent={{-52,
                    -94},{-32,-74}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst
            hydraulicConductance(k(displayUnit="m3/(Pa.s)")=
              1.2501026264094e-12) annotation (Placement(transformation(extent=
                    {{-78,-82},{-70,-74}})));
        equation
          connect(AOV.Gon, progressiveAorticConductance.y) annotation (Line(
              points={{-46,-50},{-42,-50},{-42,-78},{-31,-78},{-31,-84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hydraulicConductance.y, AOV.Goff) annotation (Line(
              points={{-69,-78},{-64,-78},{-64,-50},{-58,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartAorticStenosis;

        model HemodynamicsBurkhoff_flat_first
          Physiolibrary.Hydraulic.Components.ElasticVessel Cvs(
            volume_start=0.002701,
            ZeroPressureVolume=0.00223,
            Compliance=5.2504310309196e-07)                                                                                                     annotation(Placement(transformation(extent = {{-72, 12}, {-52, 32}})));
          Physiolibrary.Hydraulic.Components.Conductor Ras(Conductance(displayUnit = "ml/(mmHg.s)") = 1.000057099075e-08) annotation(Placement(transformation(extent={{-48,12},
                    {-28,32}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cas(
            volume_start=0.000834,
            ZeroPressureVolume=0.0007,
            Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent = {{-24, 12}, {-4, 32}})));
          Physiolibrary.Hydraulic.Components.Conductor Rcs(Conductance(displayUnit = "ml/(mmHg.s)") = 3.1252815680761e-07) annotation(Placement(transformation(extent = {{-2, 12}, {18, 32}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Caprox(
            volume_start=3.8e-05,
            ZeroPressureVolume=3e-05,
            Compliance=7.5006157584566e-10)                                                                                                     annotation(Placement(transformation(extent = {{20, 12}, {40, 32}})));
          Physiolibrary.Hydraulic.Components.Conductor Rcprox(Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-07) annotation(Placement(transformation(extent = {{42, 12}, {62, 32}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {80, 2})));
          Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=false)
            annotation (Placement(transformation(extent={{92,-8},{112,12}})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit=
                  "ml/(mmHg.s)") = 3.0002463033826e-06)                                                             annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {122, 0})));
          Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{158,-10},{178,10}})));
          Physiolibrary.Hydraulic.Components.Conductor RVP(Conductance(displayUnit = "ml/(mmHg.s)") = 5.0004355076902e-07) annotation(Placement(transformation(extent = {{186, -2}, {206, 18}})));
          Physiolibrary.Hydraulic.Components.Conductor Rvs(Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-07) annotation(Placement(transformation(extent = {{-84, -36}, {-64, -16}})));
          Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {4, -40})));
          Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,-50},{36,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {50, -40})));
          Physiolibrary.Hydraulic.Components.Conductor Rcsp(Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-07) annotation(Placement(transformation(extent = {{70, -50}, {90, -30}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cap(
            volume_start=0.000802,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07)                                                                                                     annotation(Placement(transformation(extent = {{144, -48}, {164, -28}})));
          Physiolibrary.Hydraulic.Components.Conductor Rcp(Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-07) annotation(Placement(transformation(extent = {{122, -48}, {142, -28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cvp(
            volume_start=0.000154,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08)                                                                                                     annotation(Placement(transformation(extent = {{184, -48}, {204, -28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Capprox(
            volume_start=3e-05,
            ZeroPressureVolume=2e-05,
            Compliance=7.5006157584566e-09)                                                                                                     annotation(Placement(transformation(extent = {{98, -48}, {118, -28}})));
          Physiolibrary.Hydraulic.Components.Conductor Rap(Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-07) annotation(Placement(transformation(extent = {{164, -48}, {184, -28}})));
          Parts2.AtrialElastance atrialElastance(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-56,-20},{-22,6}})));
          Parts2.VentricularElastance ventricularElastance(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{4,-24},{38,2}})));
          Parts2.AtrialElastance atrialElastance1(
            Alpha=0.04,
            Beta=0.3,
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={153,31})));
          Parts2.VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            AVDelay(displayUnit="s"),
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{78,20},{112,46}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.3333333333333) annotation(Placement(transformation(extent = {{-94, 42}, {-84, 52}})));
          Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=180,
                origin={-13,-57})));
          Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={139,-15})));
        equation
          connect(Cvs.q_in, Ras.q_in) annotation(Line(points={{-62,22},{-48,22}},      color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Ras.q_out, Cas.q_in) annotation(Line(points={{-28,22},{-14,22}},      color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Cas.q_in, Rcs.q_in) annotation(Line(points = {{-14, 22}, {-2, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcs.q_out, Caprox.q_in) annotation(Line(points = {{18, 22}, {30, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcprox.q_in, Caprox.q_in) annotation(Line(points = {{42, 22}, {30, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(AOV.q_out, Rcprox.q_out) annotation(Line(points = {{70, 2}, {66, 2}, {66, 22}, {62, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(AOV.q_in, LV.q_in) annotation(Line(points = {{90, 2}, {102, 2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(LV.q_in, MV.q_out) annotation(Line(points = {{102, 2}, {108, 2}, {108, 1.55431e-15}, {112, 1.55431e-15}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(LA.q_in, RVP.q_in) annotation(Line(points={{168,8.88178e-16},
                  {174,8.88178e-16},{174,0},{180,0},{180,8},{186,8}},                                                       color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rvs.q_in, Cvs.q_in) annotation(Line(points = {{-84, -26}, {-84, 22}, {-62, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rvs.q_out, RA.q_in) annotation(Line(points = {{-64, -26}, {-58, -26}, {-58, -40}, {-50, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(TV.q_out, RV.q_in) annotation(Line(points = {{14, -40}, {26, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RV.q_in, PV.q_in) annotation(Line(points = {{26, -40}, {40, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PV.q_out, Rcsp.q_in) annotation(Line(points = {{60, -40}, {70, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Cvp.q_in, RVP.q_out) annotation(Line(points = {{194, -38}, {206, -38}, {206, 8}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcsp.q_out, Capprox.q_in) annotation(Line(points = {{90, -40}, {98, -40}, {98, -38}, {108, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Capprox.q_in, Rcp.q_in) annotation(Line(points = {{108, -38}, {122, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcp.q_out, Cap.q_in) annotation(Line(points = {{142, -38}, {154, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Cap.q_in, Rap.q_in) annotation(Line(points = {{154, -38}, {164, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rap.q_out, Cvp.q_in) annotation(Line(points = {{184, -38}, {194, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RA.compliance, atrialElastance.Ct) annotation(Line(points={{-50,-32},
                  {-50,-24},{-18,-24},{-18,-10},{-20.3,-10},{-20.3,-5.7}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation(Line(points={{39.7,
                  -9.7},{46,-9.7},{46,-28},{26,-28},{26,-32}},                                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(LA.compliance, atrialElastance1.Ct) annotation(Line(points={{168,8},
                  {171.7,8},{171.7,32.3}},                                                                              color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation(Line(points={{113.7,
                  34.3},{113.7,31.05},{102,31.05},{102,10}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation(Line(points={{-82.75,
                  47},{-78,47},{-78,6},{-66,6},{-66,3.79},{-54.13,3.79}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation(Line(points={{5.87,
                  -0.21},{-2,-0.21},{-2,6},{-58,6},{-58,3.79},{-54.13,3.79}},                                                                                         color = {0, 0, 127}, smooth = Smooth.None));
          connect(atrialElastance1.HR, heartRate.y) annotation(Line(points = {{137.87, 41.79}, {128, 41.79}, {128, 47}, {-82.75, 47}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ventricularElastance1.HR, heartRate.y) annotation(Line(points = {{79.87, 43.79}, {62, 43.79}, {62, 47}, {-82.75, 47}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation(Line(points={{-54.4,
                  -29.8},{-54.4,-19.9},{-54.3,-19.9},{-54.3,-10.9}},                                                                                color = {0, 0, 127}, smooth = Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation(Line(points={{97.6,
                  12.2},{97.6,16},{79.7,16},{79.7,29.1}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation(Line(points={{21.6,
                  -29.8},{21.6,-28},{6,-28},{6,-22},{5.7,-22},{5.7,-14.9}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation(Line(points={{163.6,
                  10.2},{137.7,10.2},{137.7,27.1}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
          connect(RA.q_in, TV.q_in) annotation(Line(points = {{-50, -40}, {-6, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(LA.q_in, MV.q_in) annotation(Line(points = {{168, 8.88178e-16}, {156, 8.88178e-16}, {156, -8.88178e-16}, {132, -8.88178e-16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RV.pressure, RAVGain.u) annotation (Line(
              points={{19.6,-49.8},{19.6,-57},{-7,-57}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.pressure, LAVGain.u) annotation (Line(
              points={{95.6,-7.8},{95.6,-15},{133,-15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RAVGain.y, RA.externalPressure) annotation (Line(
              points={{-18.5,-57},{-18.5,-45.5},{-42,-45.5},{-42,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LAVGain.y, LA.externalPressure) annotation (Line(
              points={{144.5,-15},{180,-15},{180,14},{176,14},{176,8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{220,100}}),                                                                           graphics), Icon(coordinateSystem(extent = {{-100, -100}, {220, 100}})));
        end HemodynamicsBurkhoff_flat_first;

        model HemodynamicsBurkhoff2
          extends System(
            redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
            redeclare replaceable Burkhoff.Parts2.HeartOld heart,
            redeclare Burkhoff.Parts.Systemic systemicCirculation);
        end HemodynamicsBurkhoff2;

        model testElastances
          Parts.VentricularElastance HeartElastance(
            Alpha=24000,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Beta=45.3296117211,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-64,44},{-44,64}})));
          Parts.ElasticVesselWithSVandP elasticVesselWithSVandP(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0001,
            ZeroPressureVolume=1e-05)
            annotation (Placement(transformation(extent={{-56,10},{-36,30}})));
          Parts2.VentricularElastance ventricularElastance1(
            Alpha=0.024,
            Beta=0.34,
            Ees=205316476.6191,
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03)
            annotation (Placement(transformation(extent={{-66,-26},{-46,-6}})));
          Parts.ElasticVesselWithSVandP elasticVesselWithSVandP1(
            useComplianceInput=true,
            volume_start=0.0001,
            ZeroPressureVolume=1e-05) annotation (Placement(transformation(
                  extent={{-54,-56},{-34,-36}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
              SolutionFlow=8.3333333333333e-05)
            annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump1(
              SolutionFlow=8.3333333333333e-05) annotation (Placement(
                transformation(extent={{-90,-56},{-70,-36}})));
          Hydraulic.Components.Resistor resistor(Resistance=1333223874.15)
            annotation (Placement(transformation(extent={{-26,10},{-6,30}})));
          Hydraulic.Components.Resistor resistor1(Resistance=1333223874.15)
            annotation (Placement(transformation(extent={{-24,-56},{-4,-36}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume(P=
                2666.4477483) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={20,20})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume1(P=
                2666.4477483) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={24,-46})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.3333333333333) annotation(Placement(transformation(extent={{-92,50},
                    {-82,60}})));
        equation
          connect(unlimitedPump1.q_out, elasticVesselWithSVandP1.q_in)
            annotation (Line(
              points={{-70,-46},{-44,-46}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(unlimitedPump.q_out, elasticVesselWithSVandP.q_in)
            annotation (Line(
              points={{-74,20},{-46,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVesselWithSVandP.q_in, resistor.q_in) annotation (Line(
              points={{-46,20},{-26,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVesselWithSVandP1.q_in, resistor1.q_in) annotation (
              Line(
              points={{-44,-46},{-24,-46}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistor1.q_out, unlimitedVolume1.y) annotation (Line(
              points={{-4,-46},{14,-46}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistor.q_out, unlimitedVolume.y) annotation (Line(
              points={{-6,20},{10,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heartRate.y, HeartElastance.HR) annotation (Line(
              points={{-80.75,55},{-75.375,55},{-75.375,62.3},{-62.9,62.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-80.75,55},{-80.75,-13.5},{-64.9,-13.5},{-64.9,-7.7}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticVesselWithSVandP.StressedVolume, HeartElastance.Vs)
            annotation (Line(
              points={{-50.4,30.2},{-62.6,30.2},{-62.6,45.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticVesselWithSVandP1.StressedVolume,
            ventricularElastance1.Vs) annotation (Line(
              points={{-48.4,-35.8},{-48.4,-27.9},{-65,-27.9},{-65,-19}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticVesselWithSVandP1.compliance, ventricularElastance1.Ct)
            annotation (Line(
              points={{-44,-38},{-44,-15},{-45,-15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HeartElastance.Ct, elasticVesselWithSVandP.compliance)
            annotation (Line(
              points={{-51,45.4},{-51,34},{-46,34},{-46,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HeartElastance.Pt, elasticVesselWithSVandP.externalPressure)
            annotation (Line(
              points={{-45.8,45.4},{-45.8,36},{-38,36},{-38,28}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end testElastances;

        model BurkhoffBleeding

          HemodynamicsBurkhoffBVControl hemodynamicsBurkhoffBVControl(
              bloodVolumeControl(plasma(transfusion(SolutionFlow=0,
                    useSolutionFlowInput=true),  hemorrhage(SolutionFlow=0,
                    useSolutionFlowInput=true)), redBloodCells(transfusion(
                    useChangeInput=true), hemorrhage(useChangeInput=true))))
            annotation (Placement(transformation(extent={{18,-6},{84,76}})));
          BleedingTransfusionScenario bleedingTransfusionScenario(
            Tbd=300,
            BloodLoss=0.0005,
            Tts=1200,
            Ttd=600,
            BloodTrans=0.0005)
            annotation (Placement(transformation(extent={{-92,-12},{-28,48}})));
        equation

          hemodynamicsBurkhoffBVControl.bloodVolumeControl.redBloodCells.hemorrhage.populationChange=
            bleedingTransfusionScenario.bleedrate*
              hemodynamicsBurkhoffBVControl.bloodVolumeControl.bloodProperties.hematocrit.y*12e12/2.4e-3;
          hemodynamicsBurkhoffBVControl.bloodVolumeControl.plasma.hemorrhage.solutionFlow=
            bleedingTransfusionScenario.bleedrate*
              (1-hemodynamicsBurkhoffBVControl.bloodVolumeControl.bloodProperties.hematocrit.y);

          hemodynamicsBurkhoffBVControl.bloodVolumeControl.plasma.transfusion.solutionFlow=
          bleedingTransfusionScenario.transrate*(1-0.4);
          hemodynamicsBurkhoffBVControl.bloodVolumeControl.redBloodCells.transfusion.populationChange=
          bleedingTransfusionScenario.transrate*0.4*12e12/2.4e-3;

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics={
                Line(
                  points={{-70,32},{28,32}},
                  color={0,0,255},
                  smooth=Smooth.Bezier,
                  arrow={Arrow.None,Arrow.Filled}),
                Line(
                  points={{-42,22},{26,22}},
                  color={0,0,255},
                  smooth=Smooth.Bezier,
                  arrow={Arrow.None,Arrow.Filled}),
                Text(
                  extent={{-28,38},{10,34}},
                  lineColor={0,0,255},
                  textString="bleedrate"),
                Text(
                  extent={{-28,26},{10,22}},
                  lineColor={0,0,255},
                  textString="transfusionrate")}));
        end BurkhoffBleeding;

        model BleedingTransfusionScenario
          import Physiolibrary.Types.*;
          parameter Time Tbs=60,Tbd=5*60; //1 minute, 5minutes bleeding
          parameter Volume BloodLoss=0.001;
          parameter Time Tts=20*60,Ttd=10*60;//after 20 minutes, transfussion for 10 minutes
          parameter Volume BloodTrans=0.001;
          VolumeFlowRate bleedrate,transrate;
        equation
          if time>Tbs and time<Tbs+Tbd then
            bleedrate=BloodLoss/Tbd;
          else
            bleedrate=0;
          end if;

          if time>Tts and time<Tts+Ttd then
              transrate=BloodTrans/Ttd;
          else
              transrate=0;
          end if;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Line(
                  points={{-80,80},{-80,-80}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{80,-80},{-80,-80}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{-76,58},{-46,58},{-28,50},{-28,26},{-8,12},{4,14},{28,14},{50,
                      8},{54,20},{62,60},{80,60}},
                  color={0,0,255},
                  smooth=Smooth.Bezier),
                Text(
                  extent={{-100,-80},{100,-100}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end BleedingTransfusionScenario;
      end Test;

      package Variants
        extends Modelica.Icons.VariantsPackage;

        package Parts
          extends Modelica.Icons.UtilitiesPackage;
          model PulmonaryControl
            extends ControlInterfaces.PulmonaryControl;
            extends Cardiovascular.Model.Burkhoff.Parts.Pulmonary;
            Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                  transformation(extent={{-36,22},{-56,42}})));
          equation
            connect(Capprox.volume, add3_1.u3) annotation (Line(
                points={{-40,-10},{-40,-16},{-34,-16},{-34,24}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(Cap.volume, add3_1.u2) annotation (Line(
                points={{8,-10},{10,-10},{10,-16},{16,-16},{16,32},{-34,32}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(Cvp.volume, add3_1.u1) annotation (Line(
                points={{50,-10},{52,-10},{52,-16},{56,-16},{56,40},{-34,40}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.y, busConnector.pulmonaryBloodVolume) annotation (
                Line(
                points={{-57,32},{-68,32},{-68,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end PulmonaryControl;

          model SystemicControl
            extends ControlInterfaces.SystemicControl;
            extends Cardiovascular.Model.Burkhoff.Parts.Systemic(
              Cvs(useComplianceInput=true),
              Caprox(useComplianceInput=false));
            Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                  transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=180,
                  origin={-65,-23})));
            Hydraulic.Components.MeanAortaPressureMeasurement
              aortaPressureMeasurement
              annotation (Placement(transformation(extent={{32,12},{52,32}})));
          equation
            connect(add3_1.u3, Cvs.volume) annotation (Line(
                points={{-56.6,-17.4},{-32,-17.4},{-32,-10}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.u2, Cas.volume) annotation (Line(
                points={{-56.6,-23},{16,-23},{16,-10}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.u1, Caprox.volume) annotation (Line(
                points={{-56.6,-28.6},{60,-28.6},{60,-10}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.y, busConnector.systemicBloodVolume) annotation (
                Line(
                points={{-72.7,-23},{-80,-23},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(Rcs.q_in, aortaPressureMeasurement.q_in) annotation (Line(
                points={{42,0},{42,16},{38,16}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
              annotation (Line(
                points={{49,25},{62,25},{62,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(Cvs.compliance, busConnector.venacavacompliance)
              annotation (Line(
                points={{-38,8},{-38,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end SystemicControl;

          model HeartControl
            extends ControlInterfaces.HeartControl;
            extends Cardiovascular.Model.Burkhoff.Parts.Heart(
              redeclare Types.Constants.FrequencyControl heartRate,
              ventricularElastance(useEs_extInput=true),
              atrialElastance1(useEs_extInput=false),
              ventricularElastance1(useEs_extInput=true),
              AOV(_Goff(displayUnit="ml/(mmHg.s)"), useLimitationInputs=false),
              MV(useLimitationInputs=false));
            Modelica.Blocks.Math.Sum sum1(nin=4)
              annotation (Placement(transformation(extent={{58,6},{78,26}})));
          equation
            connect(heartRate.c, busConnector.heartrate) annotation (Line(
                points={{-94.5,15},{-94.5,49.5},{-98,49.5},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularElastance.Es_ext, busConnector.rvcompliance) annotation (
                Line(
                points={{47.79,87.38},{28,87.38},{28,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularElastance1.Es_ext, busConnector.lvcompliance) annotation (
                Line(
                points={{-20.21,1.71},{82,1.71},{82,86},{-98,86}},
                color={128,255,0},
                smooth=Smooth.None,
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(RV.volume, sum1.u[1]) annotation (Line(
                points={{32,32},{32,14.5},{56,14.5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(RA.volume, sum1.u[2]) annotation (Line(
                points={{-44,32},{-46,32},{-46,15.5},{56,15.5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(LV.volume, sum1.u[3]) annotation (Line(
                points={{-22,-50},{-22,-72},{56,-72},{56,16.5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(LA.volume, sum1.u[4]) annotation (Line(
                points={{46,-50},{46,-58},{56,-58},{56,17.5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
                points={{79,16},{82,16},{82,86},{-98,86}},
                color={127,255,0},
                smooth=Smooth.None,
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics));
          end HeartControl;

          model HeartVenousReturn
            import Cardiovascular;
            extends Cardiovascular.Model.Burkhoff.Parts.Heart(TV(_Gon=
                    7.5006157584566e-16, _Goff(displayUnit="ml/(mmHg.s)")=
                  7.5006157584566e-16));
            Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput=
                  true)
              annotation (Placement(transformation(extent={{-14,82},{6,102}})));
            Modelica.Blocks.Sources.Ramp ramp(
              startTime=20,
              height=0.000166,
              duration=200) annotation (Placement(transformation(extent={{-56,
                      104},{-36,124}})));
          equation
            connect(pump.q_in, rightHeartInflow) annotation (Line(
                points={{-14,92},{-100,92},{-100,40}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(pump.q_out, rightHeartOutflow) annotation (Line(
                points={{6,92},{98,92},{98,40},{100,40}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(ramp.y, pump.solutionFlow) annotation (Line(
                points={{-35,114},{-16,114},{-16,122},{-4,122},{-4,99}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end HeartVenousReturn;
        end Parts;

        model BurkhoffVenousReturn2
          import Cardiovascular;
          extends Cardiovascular.ControlInterfaces.SystemVenousReturn(
            redeclare Cardiovascular.Model.Burkhoff.Parts.Pulmonary
              pulmonaryCirculation,
            redeclare Cardiovascular.Model.Burkhoff.Parts.Heart heart,
            redeclare Cardiovascular.Model.Burkhoff.Parts.Systemic
              systemicCirculation,
            pump(useSolutionFlowInput=true));

          Modelica.Blocks.Sources.Ramp ramp(
            startTime=20,
            height=0.000166,
            duration=200) annotation (Placement(transformation(extent={{-46,-10},
                    {-26,10}})));
        equation
          connect(ramp.y, pump.solutionFlow) annotation (Line(
              points={{-25,0},{-20.2,0}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-20,-40},{20,40}}), graphics));
        end BurkhoffVenousReturn2;
      end Variants;

      model HemodynamicsBurkhoffVenousReturn
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
      end HemodynamicsBurkhoffVenousReturn;

      model BurkhoffAorticStenosis
        extends HemodynamicsBurkhoff(redeclare Test.HeartAorticStenosis heart);
      end BurkhoffAorticStenosis;

      model BurkhofControlAorticStenosis
        extends HemodynamicsBurkhoffBVControl(stenosisControl(aorticstenosis(
              startTime=60,
              duration=10,
              FinalResistance=26664477.483)));
      end BurkhofControlAorticStenosis;

      model MitralStenosis
        extends HemodynamicsBurkhoffBVControl(stenosisControl(
              mitralvalvestenosis(
              startTime=30,
              duration=30,
              FinalResistance=13332238.7415)));
      end MitralStenosis;

      model BurkhoffMitralStenosis
        extends HemodynamicsBurkhoff(redeclare Parts.HeartMitralStenosis heart);
      end BurkhoffMitralStenosis;

    end Burkhoff;

    package Fernandez2014 "corrected model by Fernandez de Canete 2014"
      model HemodynamicsFernandezDeCanete
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (Documentation(info="<html>
<p>This model is second release of an alternative approach to modeling the cardiovascular system with a short-term control mechanism published in Computers in Biology and Medicine, Vol. 47 (2014), pp. 104&ndash;112 by Fernandez de Canete et al.</p>
<ul>
<li>J. Fernandez de Canete, J. Luque, J. Barbancho, and V. Munoz, &ldquo;Modelling of long-term and short-term mechanisms of arterial pressure control in the cardiovascular system: An object-oriented approach.,&rdquo; <i>Comput. Biol. Med.</i>, vol. 47, pp. 104&ndash;112, Apr. 2014.</li>
<li>T. Kulh&aacute;nek, J. Kofr&aacute;nek, and M. Matej&aacute;k, &ldquo;Modeling of short-term mechanism of arterial pressure control in the cardiovascular system: Object oriented and acausal approach,&rdquo; <i>Comput. Biol. Med.</i>, vol. 54, no. 1, pp. 137&ndash;144, 2014.</li>
</ul>
</html>"));
      end HemodynamicsFernandezDeCanete;

      model HemodynamicsFernandezControllable
        extends Cardiovascular.ControlInterfaces.SystemBVControl(
          redeclare Variants.Parts.PulmonaryControl pulmonaryCirculation,
          redeclare Variants.Parts.HeartControl heart,
          redeclare Variants.Parts.SystemicControl systemicCirculation,
          redeclare Control.StenosisControl stenosisControl(aorticstenosis(
                InitialResistance(displayUnit="(mmHg.s)/ml") = 1666529.8426875,
                FinalResistance(displayUnit="(mmHg.s)/ml") = 1666529.8426875),
              venacavastenosis(
              startTime(displayUnit="s"),
              duration(displayUnit="s"),
              InitialElastance=533289.54966,
              FinalElastance=533289.54966)),
          redeclare replaceable Control.BloodVolumeControl
                                               bloodVolumeControl,
          redeclare Control.Baroreflex baroreflex);
      end HemodynamicsFernandezControllable;

      package Parts2 "helper classes"
        model pulsos "generates relative position in heart period from 0 to 1"
          discrete Physiolibrary.Types.Time HP(start = 0)
            "heart period - duration of cardiac cycle";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.TimeOutput T0
            "start time of cardiac cycle";
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-158, 20}, {-118, 60}}), iconTransformation(extent = {{-88, -32}, {-48, 8}})));
          Modelica.Blocks.Interfaces.RealOutput heartphase annotation(Placement(transformation(extent = {{-162, 64}, {-142, 84}}), iconTransformation(extent = {{72, -24}, {92, -4}})));
        equation
          b = time - pre(T0) >= pre(HP);
          when {initial(), b} then
            T0 = time;
            HP = 1 / HR;
          end when;
          heartphase = (time - pre(T0)) / pre(HP);
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent=  {{-46, 52}, {68, -78}}, lineColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {255, 170, 170})}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end pulsos;

        model VariableElasticityGenerator2
          Physiolibrary.Types.RealIO.HydraulicComplianceInput maxelastance annotation(Placement(transformation(extent = {{-104, 2}, {-64, 42}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-4, 76})));
          Physiolibrary.Types.RealIO.FrequencyInput heartRate annotation(Placement(transformation(extent = {{-106, 32}, {-66, 72}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {-37, 77})));
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct annotation (
              Placement(transformation(extent={{30,4},{50,24}}),
                iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-14,-14})));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-58, 62}, {20, 0}}, lineColor=  {0, 0, 255}, fillColor=  {255, 240, 234},
                    fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-56, 64}, {-20, 46}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Text(extent=  {{-26, 64}, {26, 46}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Emax"), Line(points=  {{-52, 4}, {-44, 22}, {-36, 48}, {-30, 48}, {-28, 36}, {-26, 6}, {-20, 6}, {0, 6}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier)}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VariableElasticityGenerator2;

        model Heart
          //extends Physiolibrary.Icons.Heart;
          //  extends Physiolibrary.Icons.RightHeart;
          extends Cardiovascular.Interfaces.Heart;
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           ERMAX(k = 103991462.1837) annotation(Placement(transformation(extent = {{-16, 38}, {-34, 52}})));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           ELMAX(k = 106657909.932) annotation(Placement(transformation(extent = {{96, 44}, {80, 60}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.3333333333333) annotation(Placement(transformation(extent = {{-86, 48}, {-68, 62}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(useLimitationInputs = true) annotation(Placement(transformation(extent={{-72,-42},
                    {-52,-22}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, ZeroPressureVolume = 0, volume_start = 0.00015) annotation(Placement(transformation(extent = {{-52, -12}, {-32, 8}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst backflowConductance(k=
                1.2501026264094e-15)                                                         annotation(Placement(transformation(extent = {{-78, 2}, {-60, 16}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RRV(k(displayUnit = "(mmHg.s)/ml") = 1706526.558912) annotation(Placement(transformation(extent = {{-88, -20}, {-72, -4}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(useLimitationInputs = true) annotation(Placement(transformation(extent = {{40, -38}, {60, -18}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, ZeroPressureVolume = 0, volume_start = 0.00015) annotation(Placement(transformation(extent = {{68, -10}, {88, 10}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst backflowConductance1(k=
                1.2501026264094e-15)                                                          annotation(Placement(transformation(extent = {{36, 8}, {54, 22}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RLV(k(displayUnit = "(mmHg.s)/ml") = 7839356.380002) annotation(Placement(transformation(extent = {{24, -12}, {40, 4}})));
          VariableElasticityGenerator  variableElasticityGenerator(const(k = 0.87)) annotation(Placement(transformation(extent = {{-70, 4}, {-22, 46}})));
          VariableElasticityGenerator  variableElasticityGenerator1(const(k = 0.8), curve(y = {0.0033, 0.41, 0.63, 0.73, 0.8, 0.76, 0.25, 0.0033, 0.0033}, slope = {0, 5.0136, 2.56, 1.36, 0.24, -4.4, -6.0536, 0, 0})) annotation(Placement(transformation(extent = {{48, 2}, {96, 44}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve annotation(Placement(transformation(extent = {{10, -11}, {-10, 11}}, rotation = 180, origin = {98, 1})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve annotation(Placement(transformation(extent = {{-28, 4}, {-8, 24}})));
        equation
          connect(variableElasticityGenerator.hydrauliccompliance, rightVentricle.compliance) annotation(Line(points = {{-49.36, 22.06}, {-49.36, 15.45}, {-42, 15.45}, {-42, 6}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(heartRate.y, variableElasticityGenerator.heartRate) annotation(Line(points = {{-65.75, 55}, {-55.875, 55}, {-55.875, 41.17}, {-54.88, 41.17}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(ERMAX.y, variableElasticityGenerator.maxelastance) annotation(Line(points = {{-36.25, 45}, {-46.96, 45}, {-46.96, 40.96}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(variableElasticityGenerator1.hydrauliccompliance, leftVentricle.compliance) annotation(Line(points = {{68.64, 20.06}, {68.64, 15.45}, {78, 15.45}, {78, 8}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(heartRate.y, variableElasticityGenerator1.heartRate) annotation(Line(points = {{-65.75, 55}, {63.12, 55}, {63.12, 39.17}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(ELMAX.y, variableElasticityGenerator1.maxelastance) annotation(Line(points = {{78, 52}, {78, 52.5}, {71.04000000000001, 52.5}, {71.04000000000001, 38.96}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
          connect(RRV.y, tricuspidValve.Gon) annotation(Line(points={{-70,-12},
                  {-70,-22},{-68,-22}},                                                         color = {0, 0, 127}, smooth = Smooth.None));
          connect(backflowConductance.y, tricuspidValve.Goff) annotation(Line(points={{-57.75,
                  9},{-57.75,-6.5},{-56,-6.5},{-56,-22}},                                                                                      color = {0, 0, 127}, smooth = Smooth.None));
          connect(RLV.y, mitralValve.Gon) annotation(Line(points={{42,-4},{44,
                  -4},{44,-18}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
          connect(backflowConductance1.y, mitralValve.Goff) annotation(Line(points = {{56.25, 15}, {56.25, -1.5}, {56, -1.5}, {56, -18}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(tricuspidValve.q_out, rightVentricle.q_in) annotation(Line(points={{-52,-32},
                  {-52,-2},{-42,-2}},                                                                                                 color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(rightVentricle.q_in, pulmonaryValve.q_in) annotation(Line(points = {{-42, -2}, {-28, -2}, {-28, 14}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation(Line(points={{-8,14},
                  {-2,14},{-2,40},{100,40}},                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(rightHeartInflow, tricuspidValve.q_in) annotation(Line(points={{-100,40},
                  {-82,40},{-82,-32},{-72,-32}},                                                                                     color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(leftHeartInflow, mitralValve.q_in) annotation(Line(points = {{100, -20}, {32.5, -20}, {32.5, -28}, {40, -28}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation(Line(points = {{60, -28}, {68, -28}, {68, 0}, {78, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(leftVentricle.q_in, aorticValve.q_in) annotation(Line(points = {{78, 0}, {84, 0}, {84, 1}, {88, 1}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(aorticValve.q_out, leftHeartOutflow) annotation(Line(points={{108,1},
                  {112,1},{112,-20},{-100,-20}},                                                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics));
        end Heart;

        model SystemicCirculation
          extends Cardiovascular.Interfaces.SystemicCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel aorta(useComplianceInput = true, ZeroPressureVolume = 0, volume_start = 0.0001) annotation(Placement(transformation(extent = {{44, -10}, {64, 10}})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EAO(k=
                106657909.932)                                                                     annotation(Placement(transformation(extent = {{32, 14}, {48, 28}})));
          Physiolibrary.Hydraulic.Components.Conductor peripheralResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{16, -12}, {-4, 12}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel peripheralVessels(useComplianceInput = true, volume_start = 0.00334) annotation(Placement(transformation(extent = {{-32, -10}, {-12, 10}})));
          replaceable
            Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst
                                                                                          RPS(k(displayUnit = "(mmHg.s)/ml") = 81793284.679103) annotation(Placement(transformation(extent = {{-14, 20}, {4, 38}})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EPS(k=
                2039832.5274495)                                                                     annotation(Placement(transformation(extent = {{-40, 18}, {-24, 32}})));
          Physiolibrary.Hydraulic.Components.Conductor venacavaResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-40, -12}, {-60, 12}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel venacava(useComplianceInput = true, volume_start = 0.0005) annotation(Placement(transformation(extent = {{-92, -10}, {-72, 10}})));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           ECV(k(displayUnit = "mmHg/ml") = 533289.54966) annotation(Placement(transformation(extent = {{-100, 22}, {-84, 36}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RCV(k(displayUnit = "(mmHg.s)/ml") = 80793366.77349) annotation(Placement(transformation(extent = {{-70, 18}, {-52, 36}})));
          Cardiovascular.Hydraulic.Components.AortaFlowMeasurement bloodFlowMeasurement annotation(Placement(transformation(extent = {{42, -10}, {22, 10}})));
          Physiolibrary.Hydraulic.Components.Conductor aortaResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{90, -12}, {70, 12}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RAO(k(displayUnit = "(mmHg.s)/ml") = 1666529.8426875) annotation(Placement(transformation(extent={{60,16},
                    {78,34}})));
        equation
          connect(EAO.y, aorta.compliance) annotation(Line(points = {{50, 21}, {50, 8}, {54, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(peripheralVessels.q_in, peripheralResistance.q_out) annotation(Line(points = {{-22, 0}, {-4, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RPS.y, peripheralResistance.cond) annotation(Line(points = {{6.25, 29}, {6.25, 25.5}, {6, 25.5}, {6, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(EPS.y, peripheralVessels.compliance) annotation(Line(points = {{-22, 25}, {-22, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(peripheralVessels.q_in, venacavaResistance.q_in) annotation(Line(points = {{-22, 0}, {-40, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(venacavaResistance.q_out, venacava.q_in) annotation(Line(points = {{-60, 0}, {-82, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ECV.y, venacava.compliance) annotation(Line(points = {{-82, 29}, {-82, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RCV.y, venacavaResistance.cond) annotation(Line(points = {{-49.75, 27}, {-49.75, 17.5}, {-50, 17.5}, {-50, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(venacava.q_in, q_out) annotation(Line(points = {{-82, 2.22045e-16}, {-92, 2.22045e-16}, {-92, 0}, {-100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(peripheralResistance.q_in, bloodFlowMeasurement.q_out) annotation(Line(points = {{16, 0}, {22, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(bloodFlowMeasurement.q_in, aorta.q_in) annotation(Line(points = {{42, 0}, {54, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(aortaResistance.q_in, q_in) annotation(Line(points = {{90, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(aorta.q_in, aortaResistance.q_out) annotation(Line(points = {{54, 0}, {70, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RAO.y, aortaResistance.cond) annotation(Line(points={{80.25,
                  25},{80.25,26.5},{80,26.5},{80,7.2}},                                                                      color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 60}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 60}}), graphics));
        end SystemicCirculation;

        model PulmonaryCirculation
          extends Cardiovascular.Interfaces.PulmonaryCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArteries(useComplianceInput = true, ZeroPressureVolume = 0,
            volume_start=0.00012)                                                                                                     annotation(Placement(transformation(extent={{-18,-4},
                    {2,16}})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EPA(k=
                17771874.242419)                                                                     annotation(Placement(transformation(extent={{-26,24},
                    {-10,38}})));
          Physiolibrary.Hydraulic.Components.Conductor pulmonaryResistance(useConductanceInput = true) annotation(Placement(transformation(extent={{20,-4},
                    {40,16}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(useComplianceInput = true, volume_start = 0.00024) annotation(Placement(transformation(extent = {{52, -4}, {72, 16}})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EPV(k=
                4399638.784695)                                                                     annotation(Placement(transformation(extent={{44,24},
                    {62,38}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RPV(k(displayUnit = "(mmHg.s)/ml") = 19051769.161603) annotation(Placement(transformation(extent={{12,24},
                    {26,36}})));
          Physiolibrary.Hydraulic.Components.Conductor arteryResistance(useConductanceInput = true) annotation(Placement(transformation(extent={{-58,-4},
                    {-38,16}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RPA(k(displayUnit = "(mmHg.s)/ml") = 1479878.5003065) annotation(Placement(transformation(extent={{-64,24},
                    {-50,36}})));
        equation
          connect(EPA.y, pulmonaryArteries.compliance) annotation(Line(points={{-8,31},
                  {-8,14}},                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(EPV.y, pulmonaryVeins.compliance) annotation(Line(points={{64.25,
                  31},{62.25,31.5},{62,31.5},{62,14}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
          connect(q_out, pulmonaryVeins.q_in) annotation(Line(points = {{100, 8.88178e-16}, {82, 8.88178e-16}, {82, 6}, {62, 6}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulmonaryVeins.q_in, pulmonaryResistance.q_out) annotation(Line(points={{62,6},{
                  40,6}},                                                                                      color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulmonaryArteries.q_in, pulmonaryResistance.q_in) annotation(Line(points={{-8,6},{
                  20,6}},                                                                                         color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RPV.y, pulmonaryResistance.cond) annotation(Line(points={{27.75,
                  30},{26,30},{26,12},{30,12}},                                                                          color = {0, 0, 127}, smooth = Smooth.None));
          connect(arteryResistance.q_out, pulmonaryArteries.q_in) annotation(Line(points={{-38,6},
                  {-8,6}},                                                                                       color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(q_in, arteryResistance.q_in) annotation(Line(points={{-100,
                  8.88178e-16},{-80,8.88178e-16},{-80,6},{-58,6}},                                                                     color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RPA.y, arteryResistance.cond) annotation(Line(points={{-48.25,
                  30},{-48,30},{-48,12}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -40}, {100, 40}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -40}, {100, 40}}), graphics));
        end PulmonaryCirculation;

        model SystemicCirculation_test
          "with bloodflowmeasurement need heart rate"
          extends Physiolibrary.Icons.SystemicCirculation;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{96, -10}, {116, 10}}), iconTransformation(extent = {{84, -8}, {104, 12}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{-112, -10}, {-92, 10}}), iconTransformation(extent = {{-112, -10}, {-92, 10}})));
          Cardiovascular.Hydraulic.Components.CardiacValve aorticValve annotation(Placement(transformation(extent = {{88, -10}, {68, 12}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel aorta(useComplianceInput = true, ZeroPressureVolume = 0, volume_start = 0.0001) annotation(Placement(transformation(extent = {{44, -10}, {64, 10}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst backflowConductance(k = 0) annotation(Placement(transformation(extent = {{-9, -7}, {9, 7}}, rotation = 180, origin = {101, 25})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EAO(k = 106657909.932) annotation(Placement(transformation(extent = {{32, 14}, {48, 28}})));
          Physiolibrary.Types.Constants.HydraulicResistanceConst RAO(k(displayUnit = "(mmHg.s)/ml") = 1666529.8426875) annotation(Placement(transformation(extent = {{56, 18}, {72, 34}})));
          Physiolibrary.Hydraulic.Components.Conductor peripheralResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{20, -14}, {0, 10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel peripheralVessels(useComplianceInput = true, volume_start = 0.00334) annotation(Placement(transformation(extent = {{-32, -12}, {-12, 8}})));
          replaceable
            Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst
                                                                                          RPS(k(displayUnit = "(mmHg.s)/ml") = 81793284.679103) annotation(Placement(transformation(extent = {{-10, 16}, {8, 34}})));
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst EPS(k = 2039832.5274495) annotation(Placement(transformation(extent = {{-38, 18}, {-22, 32}})));
          Physiolibrary.Hydraulic.Components.Conductor venacavaResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-40, -14}, {-60, 10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel venacava(useComplianceInput = true, volume_start = 0.0005) annotation(Placement(transformation(extent = {{-92, -10}, {-72, 10}})));
          replaceable
            Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           ECV(k = 533289.54966) annotation(Placement(transformation(extent = {{-100, 22}, {-84, 36}})));
          Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RCV(k(displayUnit = "(mmHg.s)/ml") = 80793366.77349) annotation(Placement(transformation(extent = {{-70, 18}, {-52, 36}})));
          Cardiovascular.Hydraulic.Components.BloodFlowMeasurement bloodFlowMeasurement annotation(Placement(transformation(extent = {{24, -12}, {44, 8}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.2) annotation(Placement(transformation(extent = {{10, 34}, {28, 48}})));
        equation
          connect(aorticValve.inflow, inflow) annotation(Line(points = {{87.8, 0.78}, {95.90000000000001, 0.78}, {95.90000000000001, 0}, {106, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(aorta.q_in, aorticValve.outflow) annotation(Line(points = {{54, 2.22045e-016}, {60, 2.22045e-016}, {60, 1}, {68, 1}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(EAO.y, aorta.compliance) annotation(Line(points = {{50, 21}, {50, 8}, {54, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(backflowConductance.y, aorticValve.backflowConductance) annotation(Line(points = {{89.75, 25}, {89.75, 22.5}, {85.40000000000001, 22.5}, {85.40000000000001, 9.359999999999999}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(peripheralVessels.q_in, peripheralResistance.q_out) annotation(Line(points = {{-22, -2}, {0, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RPS.y, peripheralResistance.cond) annotation(Line(points = {{10.25, 25}, {10.25, 25.5}, {10, 25.5}, {10, 5.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(EPS.y, peripheralVessels.compliance) annotation(Line(points = {{-20, 25}, {-20, 6}, {-22, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(peripheralVessels.q_in, venacavaResistance.q_in) annotation(Line(points = {{-22, -2}, {-40, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(venacavaResistance.q_out, venacava.q_in) annotation(Line(points = {{-60, -2}, {-72, -2}, {-72, 0}, {-82, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(ECV.y, venacava.compliance) annotation(Line(points = {{-82, 29}, {-82, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RCV.y, venacavaResistance.cond) annotation(Line(points = {{-49.75, 27}, {-49.75, 17.5}, {-50, 17.5}, {-50, 5.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(venacava.q_in, outflow) annotation(Line(points = {{-82, 2.22045e-016}, {-92, 2.22045e-016}, {-92, 0}, {-102, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(aorticValve.outflowResistance, RAO.y) annotation(Line(points = {{72.8, 10.68}, {72.8, 18.34}, {74, 18.34}, {74, 26}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(bloodFlowMeasurement.q_out, aorta.q_in) annotation(Line(points = {{44, -2}, {50, -2}, {50, 0}, {54, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(bloodFlowMeasurement.q_in, peripheralResistance.q_in) annotation(Line(points = {{24, -2}, {20, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(heartRate.y, bloodFlowMeasurement.HR) annotation(Line(points = {{30.25, 41}, {30.25, 23.5}, {28, 23.5}, {28, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 60}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 60}}), graphics));
        end SystemicCirculation_test;

        model VariableElasticityGenerator
              pulsos pulsos1(HP(displayUnit = "s", start = 1)) annotation(Placement(transformation(extent = {{-62, 42}, {-42, 62}})));
              Modelica.Blocks.Math.Product product1 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 270, origin = {11, 23})));
              Modelica.Blocks.Sources.Constant const(k = 0.87) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {30, 84})));
              Modelica.Blocks.Math.Product product2 annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin = {-9, 31})));
              Physiolibrary.Types.RealIO.HydraulicComplianceInput maxelastance annotation(Placement(transformation(extent = {{-104, 2}, {-64, 42}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-4, 76})));
              Physiolibrary.Types.RealIO.FrequencyInput heartRate annotation(Placement(transformation(extent = {{-106, 32}, {-66, 72}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {-37, 77})));
              Physiolibrary.Types.RealIO.HydraulicComplianceOutput hydrauliccompliance annotation(Placement(transformation(extent = {{20, -8}, {40, 12}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-14, -14})));
              Cardiovascular.Blocks.Interpolation.Curve curve(x = {0, 0.0625, 0.125, 0.1875, 0.25, 0.3125, 0.375, 0.4375, 1}, y = {0.0066, 0.16, 0.32, 0.45, 0.625, 0.78, 0.27, 0.0066, 0.0066}, slope = {0, 0, 2.32, 2.44, 2.64, -2.84, -6.1872, 0, 0}) annotation(Placement(transformation(extent = {{-30, 48}, {-10, 68}})));
              Cardiovascular.Types.RealIO.HydraulicElastanceToCompliance hydrauliccompliance1 annotation(Placement(transformation(extent = {{0, 54}, {8, 62}})));
        equation
              connect(heartRate, pulsos1.HR) annotation(Line(points = {{-86, 52}, {-76, 52}, {-76, 50.8}, {-58.8, 50.8}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(maxelastance, product2.u2) annotation(Line(points = {{-84, 22}, {-48, 22}, {-48, 28}, {-15, 28}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(product2.y, product1.u2) annotation(Line(points = {{-3.5, 31}, {0.25, 31}, {0.25, 29}, {8, 29}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(product1.y, hydrauliccompliance) annotation(Line(points = {{11, 17.5}, {11, 2}, {30, 2}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(const.y, product1.u1) annotation(Line(points = {{41, 84}, {42, 84}, {42, 29}, {14, 29}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(pulsos1.heartphase, curve.u) annotation(Line(points = {{-43.8, 50.6}, {-36.9, 50.6}, {-36.9, 58}, {-30, 58}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(product2.u1, hydrauliccompliance1.y) annotation(Line(points = {{-15, 34}, {-20, 34}, {-20, 42}, {14, 42}, {14, 58}, {9, 58}}, color = {0, 0, 127}, smooth = Smooth.None));
              connect(curve.val, hydrauliccompliance1.hydraulicelastance) annotation(Line(points = {{-10, 58}, {-6, 58}, {-6, 57.9}, {-0.1, 57.9}}, color = {0, 0, 127}, smooth = Smooth.None));
              annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-58, 62}, {20, 0}}, lineColor=  {0, 0, 255}, fillColor=  {255, 240, 234},
                    fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-56, 64}, {-20, 46}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Text(extent=  {{-26, 64}, {26, 46}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Emax"), Line(points=  {{-52, 4}, {-44, 22}, {-36, 48}, {-30, 48}, {-28, 36}, {-26, 6}, {-20, 6}, {0, 6}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier)}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VariableElasticityGenerator;
      end Parts2;

      package Experiments
        "helper classes for regulation control and experiment"
        model SystemicCirculation_baro
          extends Parts2.SystemicCirculation(
                                            redeclare
              Cardiovascular.Types.Constants.HydraulicConductanceControl                                         RPS, redeclare
              Cardiovascular.Types.Constants.HydraulicComplianceControl                                                                                                     ECV);
          Physiolibrary.Types.RealIO.HydraulicConductanceInput RPSin annotation(Placement(transformation(extent = {{-58, 30}, {-18, 70}}), iconTransformation(extent = {{-11, -11}, {11, 11}}, rotation = 270, origin = {1, 65})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ECVin annotation(Placement(transformation(extent = {{-132, 26}, {-92, 66}}), iconTransformation(extent = {{-12, -12}, {12, 12}}, rotation = 270, origin = {-54, 62})));
          Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{46, -52}, {66, -32}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {86, 34})));
        equation
          connect(RPS.c, RPSin) annotation(Line(points = {{-9.5, 29}, {-16, 29}, {-16, 50}, {-38, 50}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ECV.c, ECVin) annotation(Line(points = {{-96, 29}, {-102, 29}, {-102, 30}, {-112, 30}, {-112, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Pmean, Pmean) annotation(Line(points = {{56, -42}, {56, -42}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(bloodFlowMeasurement.Pmean, Pmean) annotation(Line(points = {{35.8, -9.8}, {35.8, -42}, {56, -42}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics));
        end SystemicCirculation_baro;

        model Heart_baro
          extends Cardiovascular.Model.Fernandez2014.Parts2.Heart(
                                                                 redeclare
              Cardiovascular.Types.Constants.HydraulicComplianceControl                                                              ERMAX, redeclare
              Cardiovascular.Types.Constants.HydraulicComplianceControl                                                                                                     ELMAX, redeclare
              Cardiovascular.Types.Constants.FrequencyControl                                                                                                     heartRate);
          Physiolibrary.Types.RealIO.FrequencyInput HRin annotation(Placement(transformation(extent = {{-132, 42}, {-92, 82}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {49, 63})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMaxIn annotation(Placement(transformation(extent = {{46, 18}, {6, 58}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-30, 62})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMaxIn annotation(Placement(transformation(extent = {{128, 42}, {88, 82}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {16, 62})));
        equation
          connect(HRin, heartRate.c) annotation(Line(points = {{-112, 62}, {-101, 62}, {-101, 55}, {-81.5, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ERMAX.c, ERMaxIn) annotation(Line(points = {{-20.5, 45}, {-2.25, 45}, {-2.25, 38}, {26, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ELMaxIn, ELMAX.c) annotation(Line(points = {{108, 62}, {106, 62}, {106, 52}, {92, 52}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -60}, {120, 80}}), graphics));
        end Heart_baro;

        model Hemodynamics_controllable
          extends Cardiovascular.Model.Fernandez2014.Test.HemodynamicsFernandez(
                                                                           redeclare Heart_baro
                                                                                                heart, redeclare
              SystemicCirculation_baro                                                                                                    systemicCirculation);
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMax annotation(Placement(transformation(extent = {{18, 8}, {58, 48}}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {12, -2})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMax annotation(Placement(transformation(extent = {{-68, -4}, {-28, 36}}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {0, -16})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{22, -18}, {62, 22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {6, 16})));
          Physiolibrary.Types.RealIO.HydraulicConductanceInput RSP annotation(Placement(transformation(extent = {{-62, -42}, {-22, -2}}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {16, -38})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ECV annotation(Placement(transformation(extent = {{-70, -66}, {-30, -26}}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {2, -52})));
          Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{32, -40}, {52, -20}}), iconTransformation(extent = {{20, -78}, {32, -66}})));
        equation
          connect(Pmean, systemicCirculation.Pmean) annotation(Line(points={{42,-30},
                  {7.16667,-30},{7.16667,-22.5714}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
          connect(RSP, systemicCirculation.RPSin) annotation(Line(points={{-42,-22},
                  {0.0833333,-22},{0.0833333,-18.1429}},                                                                        color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.ELMaxIn, ELMax) annotation(Line(points={{-0.933333,
                  5.94286},{-0.933333,28},{38,28}},                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.ERMaxIn, ERMax) annotation(Line(points={{-4,5.94286},{
                  -4,15.6857},{-48,15.6857},{-48,16}},                                                                            color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.HRin, HR) annotation(Line(points={{1.26667,6.05714},{
                  1.26667,14},{34,14},{34,2},{42,2}},                                                                       color = {0, 0, 127}, smooth = Smooth.None));
          connect(ECV, systemicCirculation.ECVin) annotation(Line(points={{-50,-46},
                  {-34,-46},{-34,-18.5714},{-4.5,-18.5714}},                                                                            color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(extent = {{-60, -80}, {60, 80}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-60, -80}, {60, 80}}, preserveAspectRatio = false), graphics));
        end Hemodynamics_controllable;

        model SystemicCirculation_VCStenosis
          extends Cardiovascular.Model.Fernandez2014.Parts2.SystemicCirculation(
                                                                               redeclare
              Cardiovascular.Types.Constants.HydraulicComplianceControl                                                                            ECV);
          Physiolibrary.Types.RealIO.HydraulicComplianceInput EVCin annotation(Placement(transformation(extent = {{-136, 28}, {-96, 68}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-84, 34})));
        equation
          connect(EVCin, ECV.c) annotation(Line(points = {{-116, 48}, {-108, 48}, {-108, 29}, {-96, 29}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -60},{120,60}}),                                                                           graphics));
        end SystemicCirculation_VCStenosis;

        model Hemodynamics_VCStenosis
          extends Cardiovascular.Model.Fernandez2014.Test.HemodynamicsFernandez(
                                                                           redeclare
              SystemicCirculation_VCStenosis                                                                        systemicCirculation);
          Physiolibrary.Types.RealIO.HydraulicComplianceInput ECV annotation(Placement(transformation(extent = {{-64, -54}, {-24, -14}}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {6, -44})));
        equation
          connect(ECV, systemicCirculation.EVCin) annotation(Line(points={{-44,-34},
                  {-32,-34},{-32,-20.3333},{-7,-20.3333}},                                                                            color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-40, -80}, {40, 80}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-40, -80}, {40, 80}}), graphics));
        end Hemodynamics_VCStenosis;

        model Stenosis
          parameter Physiolibrary.Types.HydraulicElastance InitialElastance(displayUnit = "mmHg/ml") = 533289.54966;
          parameter Physiolibrary.Types.HydraulicElastance FinalElastance(displayUnit = "mmHg/ml") = 266644.77483;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput hydrauliccompliance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          hydrauliccompliance = 1 / (InitialElastance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalElastance - InitialElastance) / duration else FinalElastance - InitialElastance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end Stenosis;

        model Hemodynamics_stenosiswithbarocontrol
          "stenosis and baroreflex regulation"
          Experiments.Hemodynamics_controllable hemodynamics_baro annotation(Placement(transformation(extent = {{-96, -52}, {-2, 60}})));
          Control.Baroreceptor baroreceptor(
            EV0venacava(displayUnit="ml/mmHg"),
            activationDelay(displayUnit="s"),
            EV0right(displayUnit="mmHg/ml"),
            PAOmedia=13264.244323918)
            annotation (Placement(transformation(extent={{-8,-44},{58,22}})));
          Experiments.Stenosis stenosis(InitialElastance(displayUnit = "mmHg/ml"), FinalElastance(displayUnit = "mmHg/ml"), startTime(displayUnit = "s"), duration(displayUnit = "s")) annotation(Placement(transformation(extent = {{-78, -82}, {-30, -38}})));
        equation
          connect(hemodynamics_baro.Pmean, baroreceptor.PAo) annotation(Line(points={{
                  -28.6333,-46.4},{-3.31665,-46.4},{-3.31665,-38.06},{-0.08,
                  -38.06}},                                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(baroreceptor.evenacava, hemodynamics_baro.ECV) annotation(Line(points={{-0.74,
                  -30.14},{-22.37,-30.14},{-22.37,-32.4},{-47.4333,-32.4}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
          connect(baroreceptor.RS, hemodynamics_baro.RSP) annotation(Line(points={{-0.08,
                  -18.92},{-17.04,-18.92},{-17.04,-22.6},{-36.4667,-22.6}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
          connect(baroreceptor.evright, hemodynamics_baro.ERMax) annotation(Line(points = {{-0.08, -7.7}, {-22.04, -7.7}, {-22.04, -7.2}, {-49, -7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(baroreceptor.evleft, hemodynamics_baro.ELMax) annotation(Line(points = {{-1.4, 2.86}, {-18.7, 2.86}, {-18.7, 2.6}, {-39.6, 2.6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(baroreceptor.HR, hemodynamics_baro.HR) annotation(Line(points = {{-1.73, 13.75}, {-21.865, 13.75}, {-21.865, 15.2}, {-44.3, 15.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(stenosis.hydrauliccompliance, baroreceptor.ECV0) annotation(Line(points = {{-52.08, -54.72}, {33.58, -54.72}, {33.58, -28.82}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), experiment(StopTime = 100, __Dymola_NumberOfIntervals = 5000, Tolerance = 1e-006), Documentation(info = "<html>
<p>This model simulates stenosis of venacava and short-term regulation mechanism compensating of the fall of arterial blood-pressure.</p>
<ul>
<li>J. Fernandez de Canete, J. Luque, J. Barbancho, and V. Munoz, &ldquo;Modelling of long-term and short-term mechanisms of arterial pressure control in the cardiovascular system: An object-oriented approach.,&rdquo; <i>Comput. Biol. Med.</i>, vol. 47, pp. 104&ndash;112, Apr. 2014.</li>
<li>T. Kulh&aacute;nek, J. Kofr&aacute;nek, and M. Matej&aacute;k, &ldquo;Modeling of short-term mechanism of arterial pressure control in the cardiovascular system: Object oriented and acausal approach,&rdquo; <i>Comput. Biol. Med.</i>, vol. 54, no. 1, pp. 137&ndash;144, 2014.</li>
</ul>
</html>"));
        end Hemodynamics_stenosiswithbarocontrol;

        model Hemodynamics_stenosiswithoutbaro
          "stenosis without baroreflex regulation"
          Experiments.Hemodynamics_VCStenosis hemodynamics_VCStenosis annotation(Placement(transformation(extent = {{-76, -66}, {-2, 72}})));
          Experiments.Stenosis stenosis annotation(Placement(visible = true, transformation(origin = {-36, -80}, extent = {{-26, -22}, {26, 22}}, rotation = 0)));
        equation
          connect(stenosis.hydrauliccompliance, hemodynamics_VCStenosis.ECV) annotation(Line(points = {{-33.92, -74.72}, {-33.45, -74.72}, {-33.45, -34.95}}, color = {0, 0, 127}));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), experiment(StopTime = 100, __Dymola_NumberOfIntervals = 5000, Tolerance = 1e-006), Documentation(info = "<html>
<p>This model simulates stenosis of venacava and theoretical imapct of CVS (blood pressure) without any regulation and compensation mechanism. </p>
<ul>
<li>J. Fernandez de Canete, J. Luque, J. Barbancho, and V. Munoz, &ldquo;Modelling of long-term and short-term mechanisms of arterial pressure control in the cardiovascular system: An object-oriented approach.,&rdquo; <i>Comput. Biol. Med.</i>, vol. 47, pp. 104&ndash;112, Apr. 2014.</li>
<li>T. Kulh&aacute;nek, J. Kofr&aacute;nek, and M. Matej&aacute;k, &ldquo;Modeling of short-term mechanism of arterial pressure control in the cardiovascular system: Object oriented and acausal approach,&rdquo; <i>Comput. Biol. Med.</i>, vol. 54, no. 1, pp. 137&ndash;144, 2014.</li>
</ul>
</html>"));
        end Hemodynamics_stenosiswithoutbaro;
      end Experiments;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model PulmonaryTest
          extends Interfaces.PulmonaryCirculation;
          Hydraulic.Components.Resistor                arteryResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              1466546.261565)                                                                       annotation(Placement(transformation(extent={{-82,-14},
                    {-54,14}})));
          Hydraulic.Components.ElasticVesselNorm           pulmonaryArteries(                           ZeroPressureVolume = 0,
            useComplianceInput=false,
            volume_start=6.96e-05,
            E=17771874.242419)                                                                                                     annotation(Placement(transformation(extent={{-42,-14},
                    {-14,14}})));
          Hydraulic.Components.Resistor                pulmonaryResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              18665134.2381)                                                                           annotation(Placement(transformation(extent={{-4,-16},
                    {28,16}})));
          Hydraulic.Components.ElasticVesselNorm           pulmonaryVeins(
            useComplianceInput=false,
            volume_start=2.06e-05,
            E=4399638.784695)                                                                                                annotation(Placement(transformation(extent={{40,-14},
                    {68,14}})));
        equation
          connect(q_in, arteryResistance.q_in) annotation (Line(
              points={{-100,0},{-92,0},{-92,1.9984e-15},{-82,1.9984e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arteryResistance.q_out, pulmonaryArteries.q_in) annotation (
              Line(
              points={{-54,1.9984e-15},{-40,1.9984e-15},{-40,2.22045e-15},{-28,
                  2.22045e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, pulmonaryResistance.q_in) annotation (
             Line(
              points={{-28,2.22045e-15},{-16,2.22045e-15},{-16,4.44089e-16},{-4,
                  4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryResistance.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{28,4.44089e-16},{44,4.44089e-16},{44,1.9984e-15},{54,
                  1.9984e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, q_out) annotation (Line(
              points={{54,1.9984e-15},{78,1.9984e-15},{78,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryTest;

        model Systemic_bad
          extends Interfaces.SystemicCirculation;
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm venacava(
            useComplianceInput=false,
            volume_start=0.0005,
            E=533289.54966)                                                                                                annotation(Placement(transformation(extent={{-56,-10},
                    {-36,10}})));
          Cardiovascular.Hydraulic.Components.Resistor venacavaResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              1333223.87415)                                                                          annotation(Placement(transformation(extent={{-66,-12},
                    {-88,12}})));
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm peripheralVessels(
            useComplianceInput=false,
            volume_start=0.00334,
            E=2039832.5274495)                                                                                                     annotation(Placement(transformation(extent={{0,-10},
                    {20,10}})));
          Cardiovascular.Hydraulic.Components.Resistor peripheralResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              81726623.485395)                                                                          annotation(Placement(transformation(extent={{-6,-12},
                    {-28,12}})));
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm aorta(                           ZeroPressureVolume = 0,
            useComplianceInput=false,
            volume_start=0.0001,
            E=106657909.932)                                                                                                     annotation(Placement(transformation(extent={{68,-10},
                    {88,10}})));
          Cardiovascular.Hydraulic.Components.Resistor aortaResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              93325671.1905)                                                                       annotation(Placement(transformation(extent={{52,-12},
                    {28,12}})));
        equation
          connect(peripheralVessels.q_in, peripheralResistance.q_in)
            annotation (Line(
              points={{10,2.22045e-16},{2,2.22045e-16},{2,0},{-6,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(peripheralResistance.q_out, venacava.q_in) annotation (Line(
              points={{-28,0},{-36,0},{-36,2.22045e-16},{-46,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venacava.q_in, venacavaResistance.q_in) annotation (Line(
              points={{-46,2.22045e-16},{-56,2.22045e-16},{-56,0},{-66,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venacavaResistance.q_out, q_out) annotation (Line(
              points={{-88,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(peripheralVessels.q_in, aortaResistance.q_out) annotation (
              Line(
              points={{10,0},{28,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aortaResistance.q_in, aorta.q_in) annotation (Line(
              points={{52,0},{78,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, q_in) annotation (Line(
              points={{78,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end Systemic_bad;

        model Heart
          extends Interfaces.Heart;
          Hydraulic.Components.IdealValveNorm           tricuspidValve(
              useLimitationInputs=false, R_on(displayUnit="(mmHg.s)/ml")=
              399967.162245)                                                                       annotation(Placement(transformation(extent={{-72,26},
                    {-44,54}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, ZeroPressureVolume = 0,
            useExternalPressureInput=true,
            volume_start=5.74e-05)                                                                                                    annotation(Placement(transformation(extent={{-14,26},
                    {14,54}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(
                displayUnit="ml/(mmHg.s)"))                            annotation(Placement(transformation(extent={{38,24},
                    {68,56}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
                1.3333333333333)                                                                  annotation(Placement(transformation(extent={{-48,70},
                    {-30,84}})));
          TimeVaryingElastance timeVaryingElastance(
            useEs_extInput=false,
            Ed=879927.756939,
            Es=103991462.1837,
            Pi0=3199.73729796)
            annotation (Placement(transformation(extent={{-10,60},{10,80}})));
          Hydraulic.Components.IdealValveNorm           mitralValve(
              useLimitationInputs=false, R_on(displayUnit="(mmHg.s)/ml")=
              399967.162245)                                                                    annotation(Placement(transformation(extent={{80,-36},
                    {50,-4}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, ZeroPressureVolume = 0,
            useExternalPressureInput=true,
            volume_start=0.0001464)                                                                                                   annotation(Placement(transformation(extent={{-22,-36},
                    {10,-4}})));
          Hydraulic.Components.IdealValveNorm           aorticValve(_Gon(
                displayUnit="ml/(mmHg.s)"), R_on(displayUnit="(mmHg.s)/ml")=
              1666529.8426875)                                      annotation(Placement(transformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation = 180, origin={-58,-20})));
          TimeVaryingElastance timeVaryingElastance1(
            useEs_extInput=false,
            Ed=439963.8784695,
            Es=106657909.932,
            Pi0=6666.11937075)
            annotation (Placement(transformation(extent={{-16,0},{4,20}})));
        equation
          connect(rightHeartInflow, tricuspidValve.q_in) annotation (Line(
              points={{-100,40},{-72,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, rightVentricle.q_in) annotation (Line(
              points={{-44,40},{2.22045e-15,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, pulmonaryValve.q_in) annotation (Line(
              points={{2.22045e-15,40},{38,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation (Line(
              points={{68,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastance.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{7,61},{7,51.2},{11.2,51.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastance.HR) annotation (Line(
              points={{-27.75,77},{-18.875,77},{-18.875,77.6},{-8.6,77.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mitralValve.q_in, leftHeartInflow) annotation (Line(
              points={{80,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{50,-20},{-6,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, aorticValve.q_in) annotation (Line(
              points={{-6,-20},{-44,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, leftHeartOutflow) annotation (Line(
              points={{-72,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastance1.HR, heartRate.y) annotation (Line(
              points={{-14.6,17.6},{-27.75,17.6},{-27.75,77}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance1.C, leftVentricle.compliance)
            annotation (Line(
              points={{-6,1},{-6,-7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance1.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{1,1},{6.8,1},{6.8,-7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.compliance, timeVaryingElastance.C)
            annotation (Line(
              points={{0,51.2},{0,61}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Fernandez")}));
        end Heart;

        model TimeVaryingElastance
          parameter Physiolibrary.Types.HydraulicElastance Ed
            "elastance of diastole";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Es=0
            "elastance of systole"
            annotation (Dialog(enable=not useEs_extInput));
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real a;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -90})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {70, -90})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-106, 56}, {-66, 96}}), iconTransformation(extent = {{-106, 56}, {-66, 96}})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Es)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=Es;
          end if;
          tm = time - pre(t0);
          if tm < pre(ts) then
            a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
          else
            a = 0;
          end if;
          E = Ed + es_int * a;
          C = 1 / E;
          Pi = Pi0 * a;
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,-100},
                    {100,100}}),                                                                              graphics={  Rectangle(extent=  {{-80, 80}, {80, -80}}, lineColor=  {0, 0, 255}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-78, 0}, {-68, 18}, {-54, 52}, {-44, 64}, {-30, 60}, {-26, 46}}, color=  {0, 0, 255}, smooth=  Smooth.None), Line(points=  {{-26, 46}, {-26, 32}, {-20, 10}, {-8, 2}, {36, 2}, {80, 2}}, color=  {0, 0, 255}, smooth=  Smooth.None), Text(extent=  {{-70, 98}, {-22, 80}}, lineColor=  {0, 0, 255}, textString=  "HR"), Text(extent=  {{-10, -56}, {14, -78}}, lineColor=  {0, 0, 255}, textString=  "Et"), Text(extent=  {{56, -58}, {82, -78}}, lineColor=  {0, 0, 255}, textString=  "Pi")}));
        end TimeVaryingElastance;

        model Systemic
          extends Interfaces.SystemicCirculation;
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm venacava(
            useComplianceInput=false,
            volume_start=0.000616,
            E=533289.54966)                                                                                                annotation(Placement(transformation(extent={{-56,-10},
                    {-36,10}})));
          Cardiovascular.Hydraulic.Components.Resistor venacavaResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              1706526.558912)                                                                         annotation(Placement(transformation(extent={{-64,-12},
                    {-86,12}})));
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm peripheralVessels(
            useComplianceInput=false,
            volume_start=0.003293,
            E=2039832.5274495)                                                                                                     annotation(Placement(transformation(extent={{0,-10},
                    {20,10}})));
          Cardiovascular.Hydraulic.Components.Resistor peripheralResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              81726623.485395)                                                                          annotation(Placement(transformation(extent={{44,-10},
                    {24,10}})));
          Cardiovascular.Hydraulic.Components.ElasticVesselNorm aorta(                           ZeroPressureVolume = 0,
            useComplianceInput=false,
            volume_start=0.000105,
            E=106657909.932)                                                                                                     annotation(Placement(transformation(extent={{58,-10},
                    {78,10}})));
          Cardiovascular.Hydraulic.Components.Resistor veinResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              80793366.77349)
            annotation (Placement(transformation(extent={{-10,-12},{-32,12}})));
        equation
          connect(q_out, venacavaResistance.q_out) annotation (Line(
              points={{-100,0},{-86,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, peripheralResistance.q_in) annotation (Line(
              points={{68,0},{44,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(peripheralResistance.q_out, peripheralVessels.q_in)
            annotation (Line(
              points={{24,0},{10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(peripheralVessels.q_in, veinResistance.q_in) annotation (Line(
              points={{10,0},{-10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(veinResistance.q_out, venacava.q_in) annotation (Line(
              points={{-32,0},{-46,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venacava.q_in, venacavaResistance.q_in) annotation (Line(
              points={{-46,0},{-64,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, q_in) annotation (Line(
              points={{68,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Fernandez")}));
        end Systemic;

        model Pulmonary
          extends Interfaces.PulmonaryCirculation;
          Hydraulic.Components.Resistor                arteryResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              2666447.7483)                                                                         annotation(Placement(transformation(extent={{-44,-14},
                    {-16,14}})));
          Hydraulic.Components.ElasticVesselNorm           pulmonaryArteries(                           ZeroPressureVolume = 0,
            useComplianceInput=false,
            volume_start=3.91e-05,
            E=17771874.242419)                                                                                                     annotation(Placement(transformation(extent={{-82,-14},
                    {-54,14}})));
          Hydraulic.Components.Resistor                pulmonaryResistance(
              useConductanceInput=false, R(displayUnit="(mmHg.s)/ml")=
              3999671.62245)                                                                           annotation(Placement(transformation(extent={{40,-16},
                    {72,16}})));
          Hydraulic.Components.ElasticVesselNorm           pulmonaryVeins(
            useComplianceInput=false,
            volume_start=0.0001411,
            E=4399638.784695)                                                                                                annotation(Placement(transformation(extent={{-4,-14},
                    {24,14}})));
        equation
          connect(q_in, pulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-68,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, arteryResistance.q_in) annotation (
              Line(
              points={{-68,0},{-44,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arteryResistance.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{-16,0},{10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, pulmonaryResistance.q_in) annotation (
              Line(
              points={{10,0},{40,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryResistance.q_out, q_out) annotation (Line(
              points={{72,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Fernandez")}));
        end Pulmonary;
      end Parts;

      package Test
        model HemodynamicsFernandez
          "model of CVS by Fernandez de Canete et al. corrected by Kulhanek et al."
          extends Cardiovascular.System(
            redeclare Parts2.PulmonaryCirculation pulmonaryCirculation,
            redeclare Parts2.Heart heart,
            redeclare Parts2.SystemicCirculation systemicCirculation);
          annotation(Documentation(info = "<html>
<p>This model introduces an alternative approach to modeling the cardiovascular system with a short-term control mechanism published in Computers in Biology and Medicine, Vol. 47 (2014), pp. 104&ndash;112. </p>
<ul>
<li>J. Fernandez de Canete, J. Luque, J. Barbancho, and V. Munoz, &ldquo;Modelling of long-term and short-term mechanisms of arterial pressure control in the cardiovascular system: An object-oriented approach.,&rdquo; <i>Comput. Biol. Med.</i>, vol. 47, pp. 104&ndash;112, Apr. 2014.</li>
<li>T. Kulh&aacute;nek, J. Kofr&aacute;nek, and M. Matej&aacute;k, &ldquo;Modeling of short-term mechanism of arterial pressure control in the cardiovascular system: Object oriented and acausal approach,&rdquo; <i>Comput. Biol. Med.</i>, vol. 54, no. 1, pp. 137&ndash;144, 2014.</li>
</ul>
</html>"));
        end HemodynamicsFernandez;

        model elastancetest
          extends Parts.Heart(timeVaryingElastance(useEs_extInput=true),
              timeVaryingElastance1(useEs_extInput=true));
          Modelica.Blocks.Sources.Ramp ramp(
            height=1e-8,
            duration=1000,
            offset=1e-11,
            startTime=120) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={34,78})));
        equation
          connect(ramp.y, timeVaryingElastance.Es_ext) annotation (Line(
              points={{23,78},{8,78}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, timeVaryingElastance1.Es_ext) annotation (Line(
              points={{23,78},{20,78},{20,8},{2,8},{2,18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end elastancetest;

        model ElastanceIdentification
          extends Cardiovascular.System(
            redeclare Parts.PulmonaryTest pulmonaryCirculation,
            redeclare elastancetest heart,
            redeclare Parts.Systemic_bad systemicCirculation);
        end ElastanceIdentification;
      end Test;

      package Variants
        extends Modelica.Icons.VariantsPackage;
        package Parts
            extends Modelica.Icons.UtilitiesPackage;
          model SystemicStenosis
            import Cardiovascular;
            extends Cardiovascular.Model.Fernandez2014.Parts.Systemic(venacava(
                  useComplianceInput=true));
            Physiolibrary.Types.RealIO.HydraulicComplianceInput EVCin annotation(Placement(transformation(extent={{-114,12},
                      {-74,52}}),                                                                                                    iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-84, 34})));
          equation
            connect(venacava.compliance, EVCin) annotation (Line(
                points={{-46,8},{-46,32},{-94,32}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end SystemicStenosis;

          model SystemicControl
            import Cardiovascular;
            extends Cardiovascular.ControlInterfaces.SystemicControl;
            extends Cardiovascular.Model.Fernandez2014.Parts.Systemic(venacava(
                  useComplianceInput=true), peripheralResistance(
                  useConductanceInput=true, R=81726623.485395),
              aorta(useComplianceInput=false));
            /*Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-98,8},{-58,48}}), iconTransformation(
          extent={{-100,-68},{-60,-28}})));*/
            Cardiovascular.Hydraulic.Components.MeanAortaPressureMeasurement
              aortaPressureMeasurement
              annotation (Placement(transformation(extent={{38,8},{58,28}})));
            Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=270,
                  origin={17,-23})));
          equation
            connect(venacava.compliance, busConnector.venacavacompliance)
              annotation (Line(
                points={{-46,8},{-46,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(peripheralResistance.cond, busConnector.peripheralconductance)
              annotation (Line(
                points={{34,6},{34,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(peripheralResistance.q_in, aortaPressureMeasurement.q_in)
              annotation (Line(
                points={{44,0},{44,12}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
              annotation (Line(
                points={{55,21},{60,21},{60,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(venacava.volume, add3_1.u3) annotation (Line(
                points={{-40,-10},{-40,-17},{13,-17}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(peripheralVessels.volume, add3_1.u2) annotation (Line(
                points={{16,-10},{16,-17},{17,-17}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.u1, aorta.volume) annotation (Line(
                points={{21,-17},{74,-17},{74,-10}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add3_1.y, busConnector.systemicBloodVolume) annotation (
                Line(
                points={{17,-28.5},{106,-28.5},{106,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-120,-100},{120,100}}), graphics), Icon(
                  coordinateSystem(preserveAspectRatio=false, extent={{-120,-100},{120,100}}),
                                         graphics));
          end SystemicControl;

          model HeartControl
            import Cardiovascular;
            extends Cardiovascular.ControlInterfaces.HeartControl;
            extends Cardiovascular.Model.Fernandez2014.Parts.Heart(
              redeclare Cardiovascular.Types.Constants.FrequencyControl
                heartRate,
              timeVaryingElastance(useEs_extInput=true),
              timeVaryingElastance1(useEs_extInput=true),
              rightVentricle(volume_start=6.24e-05, ZeroPressureVolume=5e-06),
              leftVentricle(volume_start=0.0001516, ZeroPressureVolume=5e-06),
              aorticValve(useLimitationInputs=true));
            Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                    extent={{20,-62},{40,-42}})));
          equation
            connect(timeVaryingElastance.Es_ext, busConnector.rvcompliance)
              annotation (Line(
                points={{8,78},{14,78},{14,94},{-98,94},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(timeVaryingElastance1.Es_ext, busConnector.lvcompliance)
              annotation (Line(
                points={{2,18},{32,18},{32,94},{-98,94},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(heartRate.c, busConnector.heartrate) annotation (Line(
                points={{-43.5,77},{-62.75,77},{-62.75,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(leftVentricle.volume, add.u2) annotation (Line(
                points={{3.6,-36},{4,-36},{4,-58},{18,-58}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(rightVentricle.volume, add.u1) annotation (Line(
                points={{8.4,26},{12,26},{12,-46},{18,-46}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, busConnector.heartBloodVolume) annotation (Line(
                points={{41,-52},{112,-52},{112,94},{-98,94},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aorticValve.Goff, busConnector.avbackflowconductance)
              annotation (Line(
                points={{-66.4,-34},{-66.4,-42},{-98,-42},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aorticValve.Gon, busConnector.avoutflowresistance)
              annotation (Line(
                points={{-49.6,-34},{-49.6,-46},{-98,-46},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics), Icon(
                  coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics));
          end HeartControl;

          model PulmonaryControl
            import Cardiovascular;
            extends Cardiovascular.ControlInterfaces.PulmonaryControl;
            extends Cardiovascular.Model.Fernandez2014.Parts.Pulmonary;
          /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{74,-48},{114,-8}}),
        iconTransformation(extent={{-100,10},{-60,50}})));*/
            Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                    extent={{22,-38},{42,-18}})));
          equation
            connect(pulmonaryArteries.volume, add.u2) annotation (Line(
                points={{-59.6,-14},{-58,-14},{-58,-34},{20,-34}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.u1, pulmonaryVeins.volume) annotation (Line(
                points={{20,-22},{18.4,-22},{18.4,-14}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
                points={{43,-28},{44,-28},{44,-22},{44,-22},{44,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics), Icon(
                  coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics));
          end PulmonaryControl;

          model StenosisControl
            extends Control.StenosisControl(aorticstenosis(InitialResistance=
                    1666529.8426875, FinalResistance=1666529.8426875),
                venacavastenosis(InitialElastance=533289.54966, FinalElastance=
                    533289.54966));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end StenosisControl;

          model Baroreflex
            extends Control.Baroreflex;
          end Baroreflex;
        end Parts;

        model HemodynamicsVenaCavaSt
          import Cardiovascular;
          extends System(
            redeclare Cardiovascular.Model.Fernandez2014.Parts.PulmonaryTest
              pulmonaryCirculation,
            redeclare Cardiovascular.Model.Fernandez2014.Parts.Heart
                                  heart,
            redeclare Parts.SystemicStenosis
                                     systemicCirculation);
          Cardiovascular.Model.Control.Stenosis.StenosisElastance stenosis
            annotation (Placement(transformation(extent={{-42,-36},{-22,-16}})));
        equation
          connect(stenosis.hydrauliccompliance, systemicCirculation.EVCin)
            annotation (Line(
              points={{-31.2,-23.6},{-31.2,-20},{-8.4,-20},{-8.4,-22.6}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(extent={{-40,-40},{20,40}},
                  preserveAspectRatio=false), graphics), Icon(coordinateSystem(
                  extent={{-40,-40},{20,40}})));
        end HemodynamicsVenaCavaSt;

        model HemodynamicsVenaCavaBus
          import Cardiovascular;
          extends System(
            redeclare
              Cardiovascular.Model.Fernandez2014.Variants.Parts.PulmonaryControl
              pulmonaryCirculation,
            redeclare
              Cardiovascular.Model.Fernandez2014.Variants.Parts.HeartControl
              heart(rightVentricle(CollapsingPressureVolume=1e-11),
                leftVentricle(CollapsingPressureVolume=1e-11)),
            redeclare
              Cardiovascular.Model.Fernandez2014.Variants.Parts.SystemicControl
              systemicCirculation);
          Cardiovascular.Model.Control.StenosisControl stenosis annotation (
              Placement(transformation(extent={{-40,-40},{-20,-20}})));
          Cardiovascular.Model.Control.Baroreflex baroreflex
            annotation (Placement(transformation(extent={{-40,20},{-24,36}})));
          Cardiovascular.Model.Control.BloodVolumeControl bloodVolumeControl
            annotation (Placement(transformation(extent={{-46,-12},{-26,8}})));
        equation
          connect(stenosis.busConnector, systemicCirculation.busConnector)
            annotation (Line(
              points={{-30.8,-26.6},{-30.8,-26},{-18,-26},{-18,-29},{-6.33333,
                  -29}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(baroreflex.busConnector, systemicCirculation.busConnector)
            annotation (Line(
              points={{-25.6,35.2},{-18,35.2},{-18,-29},{-6.33333,-29}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(baroreflex.busConnector, heart.busConnector) annotation (Line(
              points={{-25.6,35.2},{-18,35.2},{-18,6},{-14,6},{-14,-5.6},{-8.4,
                  -5.6}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(bloodVolumeControl.busConnector, systemicCirculation.busConnector)
            annotation (Line(
              points={{-37.8,0.4},{-18,0.4},{-18,-29},{-6.33333,-29}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(bloodVolumeControl.port_a, heart.rightHeartInflow)
            annotation (Line(
              points={{-26.6,-8},{-14,-8},{-14,-1.6},{-9.84,-1.6}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryCirculation.busConnector, systemicCirculation.busConnector)
            annotation (Line(
              points={{-8,25.2},{-14,25.2},{-14,26},{-18,26},{-18,-29},{
                  -6.33333,-29}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(extent={{-60,-40},{20,40}},
                  preserveAspectRatio=false), graphics), Icon(coordinateSystem(
                  extent={{-60,-40},{20,40}})));
        end HemodynamicsVenaCavaBus;

      end Variants;

      model FernandezFlat

        Hydraulic.Components.IdealValveNorm           tricuspidValve(
            useLimitationInputs=false, R_on(displayUnit="(mmHg.s)/ml")=
            399967.162245)                                                                       annotation(Placement(transformation(extent={{-76,6},
                  {-48,34}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, ZeroPressureVolume = 0,
          useExternalPressureInput=true,
          volume_start=5.74e-05)                                                                                                    annotation(Placement(transformation(extent={{-18,6},
                  {10,34}})));
        Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve                              annotation(Placement(transformation(extent={{34,4},{
                  64,36}})));
        replaceable Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
              1.3333333333333)                                                                  annotation(Placement(transformation(extent={{-52,50},
                  {-34,64}})));
        Parts.TimeVaryingElastance
                             timeVaryingElastance(
          useEs_extInput=false,
          Ed=879927.756939,
          Es=103991462.1837,
          Pi0=3199.73729796)
          annotation (Placement(transformation(extent={{-12,40},{8,60}})));
        Hydraulic.Components.IdealValveNorm           mitralValve(
            useLimitationInputs=false, R_on(displayUnit="(mmHg.s)/ml")=
            399967.162245)                                                                    annotation(Placement(transformation(extent={{76,-56},
                  {46,-24}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, ZeroPressureVolume = 0,
          useExternalPressureInput=true,
          volume_start=0.0001464)                                                                                                   annotation(Placement(transformation(extent={{-26,-56},
                  {6,-24}})));
        Hydraulic.Components.IdealValveNorm           aorticValve(R_on(displayUnit="(mmHg.s)/ml")=
            1666529.8426875)                                      annotation(Placement(transformation(extent={{-14,-14},
                  {14,14}},                                                                                                    rotation = 180, origin={-62,-40})));
        Parts.TimeVaryingElastance
                             timeVaryingElastance1(
          useEs_extInput=false,
          Ed=439963.8784695,
          Es=106657909.932,
          Pi0=6666.11937075)
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Hydraulic.Components.Resistor                arteryResistance(
            useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml")=
            2666447.7483)                                                                         annotation(Placement(transformation(extent={{-42,106},
                  {-14,134}})));
        Hydraulic.Components.ElasticVesselNorm           pulmonaryArteries(                           ZeroPressureVolume = 0,
          useComplianceInput=false,
          volume_start=3.91e-05,
          Elastance=17771874.242419)                                                                                                     annotation(Placement(transformation(extent={{-80,106},
                  {-52,134}})));
        Hydraulic.Components.Resistor                pulmonaryResistance(
            useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml")=
            3999671.62245)                                                                           annotation(Placement(transformation(extent={{42,104},
                  {74,136}})));
        Hydraulic.Components.ElasticVesselNorm           pulmonaryVeins(
          useComplianceInput=false,
          volume_start=0.0001411,
          Elastance=4399638.784695)                                                                                                annotation(Placement(transformation(extent={{-2,106},
                  {26,134}})));
        Hydraulic.Components.ElasticVesselNorm                venacava(
          useComplianceInput=false,
          volume_start=0.000616,
          Elastance=533289.54966)                                                                                                annotation(Placement(transformation(extent={{-72,
                  -154},{-52,-134}})));
        Hydraulic.Components.Resistor                venacavaResistance(
            useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml")=
            1706526.558912)                                                                         annotation(Placement(transformation(extent={{-90,
                  -160},{-114,-128}})));
        Hydraulic.Components.ElasticVesselNorm                peripheralVessels(
          useComplianceInput=false,
          volume_start=0.003293,
          Elastance=2039832.5274495)                                                                                                     annotation(Placement(transformation(extent={{-16,
                  -154},{4,-134}})));
        Hydraulic.Components.Resistor                peripheralResistance(
            useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml")=
            81726623.485395)                                                                          annotation(Placement(transformation(extent={{28,-154},
                  {8,-134}})));
        Hydraulic.Components.ElasticVesselNorm                aorta(                           ZeroPressureVolume = 0,
          useComplianceInput=false,
          volume_start=0.000105,
          Elastance=106657909.932)                                                                                                     annotation(Placement(transformation(extent={{42,-154},
                  {62,-134}})));
        Hydraulic.Components.Resistor                veinResistance(
            useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml")=
            80793366.77349)
          annotation (Placement(transformation(extent={{-26,-156},{-48,-132}})));
      equation
        connect(tricuspidValve.q_out,rightVentricle. q_in) annotation (Line(
            points={{-48,20},{-4,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(rightVentricle.q_in,pulmonaryValve. q_in) annotation (Line(
            points={{-4,20},{34,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastance.Pi,rightVentricle. externalPressure)
          annotation (Line(
            points={{5,41},{5,31.2},{7.2,31.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heartRate.y,timeVaryingElastance. HR) annotation (Line(
            points={{-31.75,57},{-22.875,57},{-22.875,57.6},{-10.6,57.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mitralValve.q_out,leftVentricle. q_in) annotation (Line(
            points={{46,-40},{-10,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftVentricle.q_in,aorticValve. q_in) annotation (Line(
            points={{-10,-40},{-48,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastance1.HR,heartRate. y) annotation (Line(
            points={{-18.6,-2.4},{-31.75,-2.4},{-31.75,57}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastance1.C,leftVentricle. compliance)
          annotation (Line(
            points={{-10,-19},{-10,-27.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastance1.Pi,leftVentricle. externalPressure)
          annotation (Line(
            points={{-3,-19},{2.8,-19},{2.8,-27.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(rightVentricle.compliance,timeVaryingElastance. C)
          annotation (Line(
            points={{-4,31.2},{-4,41},{-2,41}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in,arteryResistance. q_in) annotation (
            Line(
            points={{-66,120},{-42,120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(arteryResistance.q_out,pulmonaryVeins. q_in) annotation (Line(
            points={{-14,120},{12,120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in,pulmonaryResistance. q_in) annotation (
            Line(
            points={{12,120},{42,120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{64,20},{66,20},{66,74},{-112,74},{-112,120},{-66,120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryResistance.q_out, mitralValve.q_in) annotation (Line(
            points={{74,120},{96,120},{96,-40},{76,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorta.q_in,peripheralResistance. q_in) annotation (Line(
            points={{52,-144},{28,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(peripheralResistance.q_out,peripheralVessels. q_in)
          annotation (Line(
            points={{8,-144},{-6,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(peripheralVessels.q_in,veinResistance. q_in) annotation (Line(
            points={{-6,-144},{-26,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(veinResistance.q_out,venacava. q_in) annotation (Line(
            points={{-48,-144},{-62,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venacava.q_in,venacavaResistance. q_in) annotation (Line(
            points={{-62,-144},{-90,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation (Line(
            points={{-76,-40},{-76,-80},{68,-80},{68,-144},{52,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venacavaResistance.q_out, tricuspidValve.q_in) annotation (Line(
            points={{-114,-144},{-132,-144},{-132,16},{-76,16},{-76,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(extent={{-200,-200},{200,180}},
                preserveAspectRatio=false), graphics), Icon(coordinateSystem(
                extent={{-200,-200},{200,180}})));
      end FernandezFlat;

      model FernandezBlock
      end FernandezBlock;

      package Blocks
        model GeneralCompartment

          Modelica.Blocks.Interfaces.RealInput inflow
            annotation (Placement(transformation(extent={{-98,30},{-58,70}})));
          Modelica.Blocks.Math.Add add(k1=-1)
            annotation (Placement(transformation(extent={{-48,34},{-28,54}})));
          Modelica.Blocks.Interfaces.RealOutput outflow annotation (Placement(
                transformation(
                extent={{-14,-14},{14,14}},
                rotation=0,
                origin={60,-72})));
          Modelica.Blocks.Continuous.Integrator integrator
            annotation (Placement(transformation(extent={{-12,34},{8,54}})));
          Modelica.Blocks.Interfaces.RealOutput volume(start=0.000501) annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=0,
                origin={62,44})));
          Modelica.Blocks.Interfaces.RealInput elastance
            annotation (Placement(transformation(extent={{-96,-48},{-56,-8}})));
          Modelica.Blocks.Interfaces.RealOutput pressure annotation (Placement(
                transformation(
                extent={{-18,-18},{18,18}},
                rotation=0,
                origin={62,-22})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-8,-32},{12,-12}})));
          Modelica.Blocks.Interfaces.RealInput inputpressure
            annotation (Placement(transformation(extent={{-98,-92},{-58,-52}})));
          Modelica.Blocks.Math.Add add1(k1=-1)
            annotation (Placement(transformation(extent={{-42,-76},{-22,-56}})));
          Modelica.Blocks.Sources.Constant conductance(k=1)
            annotation (Placement(transformation(extent={{-14,-92},{6,-72}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{18,-82},{38,-62}})));
        equation
          connect(inflow, add.u1) annotation (Line(
              points={{-78,50},{-50,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, integrator.u) annotation (Line(
              points={{-27,44},{-14,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator.y, volume) annotation (Line(
              points={{9,44},{62,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, pressure) annotation (Line(
              points={{13,-22},{62,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator.y, product.u1) annotation (Line(
              points={{9,44},{10,44},{10,-6},{-16,-6},{-16,-16},{-10,-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elastance, product.u2) annotation (Line(
              points={{-76,-28},{-10,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u1, product.y) annotation (Line(
              points={{-44,-60},{-46,-60},{-46,-50},{13,-50},{13,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(inputpressure, add1.u2) annotation (Line(
              points={{-78,-72},{-44,-72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, product1.u1) annotation (Line(
              points={{-21,-66},{16,-66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(conductance.y, product1.u2) annotation (Line(
              points={{7,-82},{12,-82},{12,-78},{16,-78}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, outflow) annotation (Line(
              points={{39,-72},{60,-72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, add.u2) annotation (Line(
              points={{39,-72},{40,-72},{40,-98},{-94,-98},{-94,38},{-50,38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(outflow, outflow) annotation (Line(
              points={{60,-72},{60,-72}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-60,80},{40,-96}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255})}));
        end GeneralCompartment;

        model BlockWindKessel
          GeneralCompartment generalCompartment(conductance(k=
                  8.1006650191331e-09))
            annotation (Placement(transformation(extent={{-2,26},{18,46}})));
          Modelica.Blocks.Sources.Constant elastance(k=95230276.725001711)
            annotation (Placement(transformation(extent={{-34,2},{-14,22}})));
          Modelica.Blocks.Sources.Constant ZastavaSrdce(k=0)
            annotation (Placement(transformation(extent={{-34,32},{-14,52}})));
        equation
          connect(elastance.y, generalCompartment.elastance) annotation (Line(
              points={{-13,12},{-8,12},{-8,33.2},{0.4,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ZastavaSrdce.y, generalCompartment.inflow) annotation (Line(
              points={{-13,42},{-6,42},{-6,41},{0.2,41}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end BlockWindKessel;

        model Veins

          Modelica.Blocks.Interfaces.RealInput inflow
            annotation (Placement(transformation(extent={{-98,30},{-58,70}})));
          Modelica.Blocks.Continuous.Integrator integrator
            annotation (Placement(transformation(extent={{-12,34},{8,54}})));
          Modelica.Blocks.Interfaces.RealOutput volume(start=0.002) annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=0,
                origin={62,44})));
          Modelica.Blocks.Interfaces.RealInput elastance
            annotation (Placement(transformation(extent={{-96,-48},{-56,-8}})));
          Modelica.Blocks.Interfaces.RealOutput pressure annotation (Placement(
                transformation(
                extent={{-18,-18},{18,18}},
                rotation=0,
                origin={62,-22})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-8,-32},{12,-12}})));
        equation
          connect(integrator.y, volume) annotation (Line(
              points={{9,44},{62,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, pressure) annotation (Line(
              points={{13,-22},{62,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator.y, product.u1) annotation (Line(
              points={{9,44},{10,44},{10,-6},{-16,-6},{-16,-16},{-10,-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elastance, product.u2) annotation (Line(
              points={{-76,-28},{-10,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(inflow, integrator.u) annotation (Line(
              points={{-78,50},{-48,50},{-48,44},{-14,44}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-60,80},{40,-96}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255})}));
        end Veins;

        model BlockZastava

          GeneralCompartment generalCompartment(conductance(k=8.1006650191331e-09))
            annotation (Placement(transformation(extent={{4,28},{24,48}})));
          Modelica.Blocks.Sources.Constant elastance(k=95230276.725001711)
            annotation (Placement(transformation(extent={{-34,2},{-14,22}})));
          Modelica.Blocks.Sources.Constant ZastavaSrdce(k=0)
            annotation (Placement(transformation(extent={{-34,32},{-14,52}})));
          Veins veins annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={12,4})));
          Modelica.Blocks.Sources.Constant elastance1(k=133322387.414999348)
            annotation (Placement(transformation(extent={{52,4},{32,24}})));
        equation
          connect(elastance.y, generalCompartment.elastance) annotation (Line(
              points={{-13,12},{-8,12},{-8,35.2},{6.4,35.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ZastavaSrdce.y, generalCompartment.inflow) annotation (Line(
              points={{-13,42},{-6,42},{-6,43},{6.2,43}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(generalCompartment.outflow, veins.inflow) annotation (Line(
              points={{20,30.8},{58,30.8},{58,32},{66,32},{66,-1},{19.8,-1}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(veins.pressure, generalCompartment.inputpressure) annotation (Line(
              points={{5.8,6.2},{5.8,18.1},{6.2,18.1},{6.2,30.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elastance1.y, veins.elastance) annotation (Line(
              points={{31,14},{19.6,14},{19.6,6.8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end BlockZastava;
      end Blocks;
    end Fernandez2014;

    package Guyton1972
      model Cardiovascular_Dynamics
        Physiolibrary.Types.BusConnector busConnector annotation(Placement(transformation(extent = {{64, -18}, {104, 22}})));
        Physiolibrary.Hydraulic.Components.Conductor muscleResistance annotation(Placement(transformation(extent = {{6, -6}, {26, 14}})));
        Physiolibrary.Hydraulic.Components.Conductor nonMuscleResistance annotation(Placement(transformation(extent = {{6, -28}, {26, -8}})));
        Physiolibrary.Hydraulic.Components.Conductor renalConductance annotation(Placement(transformation(extent = {{6, -48}, {26, -28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel annotation(Placement(transformation(extent = {{44, -12}, {64, 8}})));
      equation
        connect(elasticVessel.q_in, nonMuscleResistance.q_out) annotation(Line(points = {{54, -2}, {54, -18}, {26, -18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(renalConductance.q_out, nonMuscleResistance.q_out) annotation(Line(points = {{26, -38}, {32, -38}, {32, -18}, {26, -18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(muscleResistance.q_out, nonMuscleResistance.q_out) annotation(Line(points = {{26, 4}, {32, 4}, {32, -18}, {26, -18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                  -100},{100,100}}),                                                                           graphics));
      end Cardiovascular_Dynamics;
    end Guyton1972;

    package Smith2004Model
      model HemodynamicsSmith_flat

        Hydraulic.Components.ElasticVesselNorm aorta(
          ZeroPressureVolume=0,
          volume_start=0.0001241,
          Elastance=92165766.41999)
          annotation (Placement(transformation(extent={{-130,-30},{-110,-10}})));
        Hydraulic.Components.ElasticVesselNorm           venaCava(
          ZeroPressureVolume=0,
          volume_start=0.0002952,
          Elastance(displayUnit="Pa/m3") = 786602.0857485)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
        Hydraulic.Components.IdealValveNorm           aorticValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 2399802.97347)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-10}})));

        Hydraulic.Components.Resistor                Rsys(Resistance(displayUnit="(mmHg.s)/ml")=
            145054757.50752)                          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-120,6})));
        Hydraulic.Components.IdealValveNorm           tricuspidValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-62,24},{-42,44}})));

        Physiolibrary.Hydraulic.Components.Inertia Lav(
            I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
              displayUnit="m3/s") = -1.4e-8)                           annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-44,-20})));
        Physiolibrary.Hydraulic.Components.Inertia Lpv(
            I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
              displayUnit="m3/s") = -1.9e-9)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        Hydraulic.Components.IdealValveNorm           pulmonaryValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{62,24},{82,44}})));

        Hydraulic.Components.ElasticVesselNorm pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=3.904e-05,
          Elastance(displayUnit="Pa/m3") = 49195960.956135)
          annotation (Placement(transformation(extent={{102,24},{122,44}})));
        Hydraulic.Components.Resistor                Rpul(Resistance(displayUnit="(mmHg.s)/ml")=
            20691634.526808)                         annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={114,4})));
        Hydraulic.Components.ElasticVesselNorm pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=0.0008269,
          Elastance(displayUnit="Pa/m3") = 973253.4281295)
          annotation (Placement(transformation(extent={{104,-30},{124,-10}})));
        Hydraulic.Components.IdealValveNorm           mitralValve(
                                                      Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{56,-30},{36,-10}})));

        Physiolibrary.Hydraulic.Components.Inertia Ltc(
            I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
              displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-106,24},{-86,44}})));
        Physiolibrary.Hydraulic.Components.Inertia Lmt(
            I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
              displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,-20})));
        Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
          annotation (Placement(transformation(extent={{-44,0},{-28,14}})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(extent={{38,12},{50,20}})));
        Parts.VentricularInteraction_flat ventricularInteraction_flat(
          lambdalv=33000,
          lambdaperi=30000,
          lambdas(displayUnit="1/m3") = 435000,
          lambdarv(displayUnit="1/m3") = 23000,
          Essept(displayUnit="mmHg/ml") = 6499999676.0309,
          V0peri=0.0002,
          Pi0sept=148.00118226939,
          Pi0rv=28.757638965416,
          Pi0lv=16.038683206025,
          Pi0peri=66.701190423724,
          Esrv=77993596.637775,
          Eslv=383941811.27772)
          annotation (Placement(transformation(extent={{-18,-12},{20,28}})));
      equation
        connect(aorta.q_in, Rsys.q_in) annotation (Line(
            points={{-120,-20},{-120,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rsys.q_out, venaCava.q_in) annotation (Line(
            points={{-120,16},{-120,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{82,34},{112,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
            points={{112,34},{114,34},{114,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
            points={{114,-6},{114,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation (Line(
            points={{-82,-20},{-120,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venaCava.q_in, Ltc.q_in) annotation (Line(
            points={{-120,34},{-106,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
            points={{114,-20},{88,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_out, aorticValve.q_in) annotation (Line(
            points={{-54,-20},{-62,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
            points={{-86,34},{-62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{52,34},{62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
            points={{56,-20},{68,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(tricuspidValve.q_out, ventricularInteraction_flat.rvflow)
          annotation (Line(
            points={{-42,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_in, ventricularInteraction_flat.rvflow) annotation (Line(
            points={{32,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(ventricularInteraction_flat.lvflow, Lav.q_in) annotation (Line(
            points={{1,-12},{2,-12},{2,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, Lav.q_in) annotation (Line(
            points={{36,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(HR.y, ventricularInteraction_flat.HR) annotation (Line(
            points={{-26,7},{-22,7},{-22,8},{-14.2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, ventricularInteraction_flat.Pth)
          annotation (Line(
            points={{51.5,16},{58,16},{58,8},{16.58,8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryArteries.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{120,42},{120,46},{86,46},{86,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryVeins.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{122,-12},{122,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                  -100},{160,100}}),      graphics), Icon(coordinateSystem(extent={{-160,
                  -100},{160,100}})));
      end HemodynamicsSmith_flat;

      model HemodynamicsSmith
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
      end HemodynamicsSmith;

      model HemodynamicsSmithControl
        extends ControlInterfaces.SystemBVControl(
          redeclare Variants.Parts.PulmonaryControl pulmonaryCirculation,
          redeclare Variants.Parts.HeartControl heart,
          redeclare Variants.Parts.SystemicControl systemicCirculation,
          redeclare Control.StenosisControl stenosisControl(
            venacavastenosis(InitialElastance=786602.0857485, FinalElastance=786602.0857485),
            AVBackFlowConductance(k(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-14),
            aorticstenosis(InitialResistance=2399802.97347, FinalResistance=
                  2399802.97347)),
          redeclare replaceable Control.BloodVolumeControl
                                               bloodVolumeControl,
          redeclare Variants.Parts.Baroreflex baroreflex(baroreceptor(
                activationDelay=15)));

      end HemodynamicsSmithControl;

      model HemodynamicsSmith_flat2
        Hydraulic.Components.ElasticVesselNorm aorta(
          ZeroPressureVolume=0,
          volume_start=0.0001241,
          E=92165766.41999)
          annotation (Placement(transformation(extent={{-114,-30},{-94,-10}})));
        Hydraulic.Components.ElasticVesselNorm           venaCava(
          ZeroPressureVolume=0,
          volume_start=0.0002952,
          E=786602.0857485)
          annotation (Placement(transformation(extent={{-114,24},{-94,44}})));
        Hydraulic.Components.IdealValveNorm           aorticValve(
                                                                Pknee=0,
          _Gon(displayUnit="ml/(mmHg.s)"),
          R_on(displayUnit="(mmHg.s)/ml") = 2399802.97347)
          annotation (Placement(transformation(extent={{-46,-30},{-66,-10}})));
        Hydraulic.Components.Resistor                Rsys(Conductance(
              displayUnit="ml/(mmHg.s)"), R(displayUnit="(mmHg.s)/ml")=
            145054757.50752)                          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-104,6})));
        Hydraulic.Components.IdealValveNorm           tricuspidValve(
                                                                Pknee=0,
          _Gon(displayUnit="ml/(mmHg.s)"),
          R_on(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-46,24},{-26,44}})));
        Physiolibrary.Hydraulic.Components.Inertia Lav(
            I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
              displayUnit="m3/s") = -1.4e-8)                           annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-28,-20})));
        Physiolibrary.Hydraulic.Components.Inertia Lpv(
            I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
              displayUnit="m3/s") = -1.9e-9)
          annotation (Placement(transformation(extent={{28,24},{48,44}})));
        Hydraulic.Components.IdealValveNorm           pulmonaryValve(
                                                                Pknee=0,
          _Gon(displayUnit="ml/(mmHg.s)"),
          R_on(displayUnit="(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{58,24},{78,44}})));
        Hydraulic.Components.ElasticVesselNorm pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=3.904e-05,
          E=49195960.956135)
          annotation (Placement(transformation(extent={{98,24},{118,44}})));
        Hydraulic.Components.Resistor                Rpul(Conductance(
              displayUnit="ml/(mmHg.s)"), R(displayUnit="(mmHg.s)/ml")=
            20691634.526808)                         annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={110,4})));
        Hydraulic.Components.ElasticVesselNorm pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=0.0008269,
          E=973253.4281295)
          annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
        Hydraulic.Components.IdealValveNorm           mitralValve(
                                                      Pknee=0,
          _Gon(displayUnit="ml/(mmHg.s)"),
          R_on(displayUnit="(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{52,-30},{32,-10}})));
        Physiolibrary.Hydraulic.Components.Inertia Ltc(
            I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
              displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-90,24},{-70,44}})));
        Physiolibrary.Hydraulic.Components.Inertia Lmt(
            I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
              displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={74,-20})));
        Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
          annotation (Placement(transformation(extent={{-52,0},{-36,14}})));
        Parts.VentricularInteraction ventricularInteraction
          annotation (Placement(transformation(extent={{-24,-20},{36,34}})));
        Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
          annotation (Placement(transformation(extent={{40,12},{52,24}})));
      equation
        connect(aorta.q_in, Rsys.q_in) annotation (Line(
            points={{-104,-20},{-104,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rsys.q_out, venaCava.q_in) annotation (Line(
            points={{-104,16},{-104,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{78,34},{108,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
            points={{108,34},{110,34},{110,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
            points={{110,-6},{110,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation (Line(
            points={{-66,-20},{-104,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venaCava.q_in, Ltc.q_in) annotation (Line(
            points={{-104,34},{-90,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
            points={{110,-20},{84,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_out, aorticValve.q_in) annotation (Line(
            points={{-38,-20},{-46,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
            points={{-70,34},{-46,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{48,34},{58,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
            points={{52,-20},{64,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(HR.y, ventricularInteraction.frequency) annotation (Line(
            points={{-34,7},{-26,7},{-26,9.16},{-18,9.16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Pth.y, ventricularInteraction.Pth) annotation (Line(
            points={{53.5,18},{56,18},{56,9.16},{30,9.16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Pth.y, pulmonaryArteries.externalPressure) annotation (Line(
            points={{53.5,18},{86,18},{86,42},{116,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Pth.y, pulmonaryVeins.externalPressure) annotation (Line(
            points={{53.5,18},{86,18},{86,-12},{118,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tricuspidValve.q_out, ventricularInteraction.rvflow)
          annotation (Line(
            points={{-26,34},{6,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_in, ventricularInteraction.rvflow) annotation (Line(
            points={{28,34},{6,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_in, ventricularInteraction.lvflow) annotation (Line(
            points={{-18,-20},{6,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, ventricularInteraction.lvflow) annotation (
            Line(
            points={{32,-20},{6,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                  -100},{120,100}}),      graphics), Icon(coordinateSystem(extent={
                  {-120,-100},{120,100}})));
      end HemodynamicsSmith_flat2;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model Septum
          Physiolibrary.Hydraulic.Sensors.PressureMeasure rvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-12,40})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-23,23})));
          TimeVaryingElastance septumdrv(
            lambda=435000,
            Es=6499999676.0309,
            Pi0=148.00118226939) annotation (Placement(transformation(
                extent={{-10,-12},{10,12}},
                rotation=0,
                origin={-58,12})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure lvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-14})));
          ElasticWall elasticWall(volume(start=2e-06), V0=2e-06)
            annotation (Placement(transformation(extent={{-28,-8},{18,22}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume(start=2e-06)
            annotation (Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-84,-10}), iconTransformation(extent={{80,-10},{100,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,-28},{16,-8}}),
                iconTransformation(extent={{-10,-40},{10,-20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,32},{16,52}}),
                iconTransformation(extent={{-10,6},{10,26}})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-94,10},{-74,30}}),
                iconTransformation(extent={{-100,-10},{-80,10}})));
        equation
          connect(elasticWall.compliance, septumdrv.C) annotation (Line(
              points={{-27.08,7.9},{-32,7.9},{-32,13.68},{-47.25,13.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.Pi, add1.u2) annotation (Line(
              points={{-47.25,19.92},{-33.625,19.92},{-33.625,20},{-29,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, elasticWall.prv) annotation (Line(
              points={{-17.5,23},{-13.74,23},{-13.74,7.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, septumdrv.V) annotation (Line(
              points={{-27.08,-1.4},{-44,-1.4},{-44,7.2},{-48,7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume, elasticWall.volume) annotation (Line(points={{-84,-10},
                  {-27.08,-10},{-27.08,-1.4}}, color={0,0,127}));
          connect(HR, septumdrv.HR) annotation (Line(points={{-84,20},{-68,20},
                  {-68,19.2}}, color={0,0,127}));
          connect(lvpressure.pressure, elasticWall.plv) annotation (Line(
              points={{-16,-8},{-16,-0.5},{-16.96,-0.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvpressure.q_in, rvflow) annotation (Line(
              points={{-18,44},{-6,44},{-6,42},{6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rvpressure.pressure, add1.u1) annotation (Line(
              points={{-16,34},{-34,34},{-34,26},{-29,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvflow, lvpressure.q_in) annotation (Line(
              points={{6,-18},{-14,-18}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Polygon(
                  points={{-100,-20},{-40,0},{-6,6},{8,6},{40,0},{100,-20},{98,
                      -20},{-100,-20}},
                  lineColor={167,167,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-100,-20},{-78,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{80,-20},{100,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="V"),
                Text(
                  extent={{-80,-20},{76,0}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Septum;

        model Ventricle
          TimeVaryingElastance drive(
            lambda=23000,
            Es=77993596.637775,
            Pi0=28.757638965416)
            annotation (Placement(transformation(extent={{-32,-4},{-12,22}})));
          Hydraulic.Components.ElasticVesselSV ventricle(
            useComplianceInput=true,
            useExternalPressureInput=true,
            useV0Input=true,
            volume_start=0.0001042,
            E=133322387.415)
            annotation (Placement(transformation(extent={{16,-22},{36,-2}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={34,6})));
          Modelica.Blocks.Interfaces.RealInput Pext annotation (Placement(
                transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={50,12}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={30,30})));
          Modelica.Blocks.Interfaces.RealInput V0 annotation (Placement(
                transformation(
                rotation=0,
                extent={{-10,-10},{10,10}},
                origin={0,0}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-10})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation (
              Placement(transformation(rotation=0, extent={{36,-22},{56,-2}}),
                iconTransformation(extent={{-50,-20},{-30,0}})));
          Physiolibrary.Types.RealIO.VolumeOutput stressedVolume annotation (
              Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-26,-10}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-10})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-56,6},{-36,26}}),
                iconTransformation(extent={{-40,20},{-20,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,-28}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={6,-10})));
        equation
          connect(drive.C, ventricle.compliance) annotation (Line(
              points={{-11.25,10.82},{26,10.82},{26,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.externalPressure, add.y) annotation (Line(
              points={{34,-4},{34,1.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.Pi, add.u2) annotation (Line(
              points={{-11.25,17.58},{10,17.58},{10,18},{32,18},{32,10.8},{31.6,
                  10.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HR, drive.HR) annotation (Line(points={{-46,16},{-42,16},{-42,
                  16.8},{-32,16.8}}, color={0,0,127}));
          connect(add.u1, Pext) annotation (Line(
              points={{36.4,10.8},{47.2,10.8},{47.2,12},{50,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(V0, ventricle.zeroPressureVolume) annotation (Line(
              points={{0,0},{18,0},{18,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.stressedVolume, stressedVolume) annotation (Line(
              points={{18.2,-22},{-8,-22},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.V, stressedVolume) annotation (Line(
              points={{-12,3.8},{-8,3.8},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.q_in, q_in) annotation (Line(
              points={{26,-12},{46,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricle.volume, volume) annotation (Line(
              points={{32,-22},{32,-28},{-26,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-60,-60},{60,40}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics={
                Bitmap(extent={{-34,44},{28,-24}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/heartVentricle.png"),
                Text(
                  extent={{-40,18},{-20,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{20,20},{42,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pext"),
                Text(
                  extent={{-16,0},{6,-20}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="V0"),
                Rectangle(extent={{-40,40},{40,-20}}, lineColor={0,0,127}),
                Text(
                  extent={{-60,60},{60,42}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Ventricle;

        model VentricularInteraction
        //  Physiolibrary.Types.Pressure Plv,Plvf,Pperi,Prv,Prvf,Ppcd,Pth,Pspt;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-10,90},{10,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          Physiolibrary.Types.RealIO.FrequencyInput frequency annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-12},{-60,28}})));
          Pericardium pericardium(
            lambda(displayUnit="1/m3") = 30000,
            V0=0.0002,
            P0=66.701190423724) annotation (Placement(transformation(
                extent={{13,26},{-13,-26}},
                rotation=180,
                origin={25,12})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,8})));
          Parts.Ventricle rightVentricle(drive(
              lambda=23000,
              Es=77993596.637775,
              Pi0=28.757638965416))
                             annotation (Placement(transformation(rotation=0,
                  extent={{-20,26},{0,46}})));
          Parts.Ventricle leftVentricle(drive(
              lambda=33000,
              Es=383941811.27772,
              Pi0=16.038683206025))
                             annotation (Placement(transformation(
                rotation=180,
                extent={{10,-10},{-10,10}},
                origin={-10,-16})));
          Parts.Septum septum annotation (Placement(transformation(rotation=0,
                  extent={{-54,-6},{-14,26}})));
          Modelica.Blocks.Math.Gain gain(k=-1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=90,
                origin={-14,22})));
        equation
          /*Plv = Plvf+Pperi;
  Plvf=e*Peslvf+(1-e)*Pedlvf;

  Prv=Prvf+Pperi;
  Prvf=e*Pesrvf+(1-e)*Pedrvf;

  Pperi=Ppcd+Pth;

  Pspt=Plv-Prv;

Pspt=e*Pesspt+(1-e)*Pedspt;
*/
          //Pspt = leftVentricle.q_in.pressure - rightVentricle.q_in.pressure;
          connect(frequency,leftVentricle. HR) annotation (Line(
              points={{-58,-20},{-15,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.HR, frequency) annotation (Line(
              points={{-15,44},{-58,44},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.HR,    frequency) annotation (Line(
              points={{-52,10},{-58,10},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.stressedVolume, pericardium.Vrvfw) annotation (
             Line(
              points={{-5,36},{-5,19.54},{20.06,19.54}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(lvflow,leftVentricle. q_in) annotation (Line(
              points={{-36,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pericardium.pressure,leftVentricle. Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,-20},{-5,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth, pericardium.Pth) annotation (Line(
              points={{4,34},{20.06,34},{20.06,35.14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.pressure, rightVentricle.Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,44},{-5,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.stressedVolume, pericardium.Vlvfw) annotation (
              Line(
              points={{-5,-12},{-4,-12},{-4,3.94},{20.06,3.94}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(septum.volume,leftVentricle. V0) annotation (Line(
              points={{-16,10},{-13.3333,10},{-13.3333,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.volume, gain.u) annotation (Line(
              points={{-16,10},{-14,10},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.Vsept, gain.u) annotation (Line(
              points={{20.06,12.26},{-14,12.26},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, rightVentricle.V0) annotation (Line(
              points={{-14,28.6},{-14,28},{-13.3333,28},{-13.3333,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, rvflow) annotation (Line(
              points={{-16.6667,36},{-28,36},{-28,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.rvflow, rvflow) annotation (Line(
              points={{-34,12.56},{-34,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.lvflow,leftVentricle. q_in) annotation (Line(
              points={{-34,5.2},{-34,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-102,-20},{-76,-32}},
                  lineColor={0,0,255},
                  textString="HR"),
                Text(
                  extent={{100,-32},{74,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Bitmap(extent={{-92,84},{-4,-74}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceprava.png"),
                Bitmap(extent={{-18,102},{94,-72}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceLeva.png"),
                Polygon(
                  points={{-18,48},{4,48},{6,30},{14,2},{16,-28},{16,-62},{18,
                      -64},{10,-72},{-6,-70},{-8,-52},{-10,-4},{-14,28},{-18,44},
                      {-18,46},{-18,48}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,205,205}),
                Polygon(
                  points={{-58,0},{-64,0},{-66,0},{-62,-12},{-56,-38},{-38,-60},
                      {-6,-76},{24,-72},{44,-50},{62,-18},{68,2},{60,4},{56,-10},
                      {46,-32},{34,-52},{20,-66},{4,-68},{-12,-64},{-44,-42},{
                      -42,-42},{-58,0}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{-98,-68},{98,-92}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                          extent={{-100,-100},{100,100}}), graphics));
        end VentricularInteraction;

        model TimeVaryingElastance
          //parameter Physiolibrary.Types.HydraulicElastance Ed "elastance of diastole";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Es
            "elastance of systole"                                                   annotation (Dialog(enable=not useEs_extInput));
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          parameter Cardiovascular.Model.Smith2004Model.Parts.HydraulicLambda
            lambda;
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real et;
          parameter Real A=1,B=80,CC=0.375;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,14})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,66})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent={{76,58},
                    {116,98}}),                                                                                                    iconTransformation(extent={{-20,-20},
                    {20,20}},
                rotation=0,
                origin={-100,60})));
          Physiolibrary.Types.RealIO.VolumeInput V annotation (Placement(
                transformation(extent={{82,54},{122,94}}),     iconTransformation(
                  extent={{-20,-20},{20,20}},
                rotation=180,
                origin={60,-40})));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Es)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-100,20})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=Es;
          end if;
          tm = time - pre(t0);
        /*  if tm < pre(ts) then
    a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
  else
    a = 0;
  end if;
  E = Ed + Es * a;
  C = 1 / E;
  //  Pi = Pi0 * a;
  */
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          et = A*exp(-B*(tm-CC)^2);//(5)
          E = et*es_int;//(derived (4)
          C = 1/E;
          Pi = (1-et)*Pi0*(exp(lambda*V)-1);//derived(4)
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{60,100}}),                                                                         graphics={  Rectangle(extent={{
                      -42,80},{50,-76}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid),                                                                                                    Text(extent={{
                      -96,82},{-32,58}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR"), Text(extent={{
                      -16,28},{84,-2}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "Et"), Text(extent={{8,
                      86},{58,56}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="P"),                                                                                                    Text(extent={{
                      -288,134},{260,78}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="%name"),
                Text(
                  extent={{44,-52},{76,-80}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="V"),
                Line(
                  points={{-40,0},{-32,0},{-32,4},{-30,26},{-26,40},{-22,42},{-20,
                      38},{-18,22},{-16,0},{6,0},{8,24},{12,40},{16,42},{18,38},{
                      22,0},{44,0}},
                  color={0,0,255},
                  smooth=Smooth.None)}), Diagram(coordinateSystem(extent={{-100,
                    -100},{60,100}})));
        end TimeVaryingElastance;

        type HydraulicLambda = Real(final quantity="HydraulicLambda",final unit="1/m3", displayUnit="1/ml", nominal=(1e-5), min=0);
        model Pericardium
          parameter Physiolibrary.Types.Volume V0;
          parameter Physiolibrary.Types.Pressure P0;
          parameter Cardiovascular.Model.Smith2004Model.Parts.HydraulicLambda
            lambda;
          Physiolibrary.Types.RealIO.VolumeInput Vsept annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,1})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-40,-10},{-20,10}}),iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=0,
                origin={50,90})));
          Physiolibrary.Types.RealIO.VolumeInput Vrvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,29})));
          Physiolibrary.Types.RealIO.VolumeInput Vlvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,-31})));
                Physiolibrary.Types.Volume Vperi;
                Physiolibrary.Types.Pressure Pperi;
          Physiolibrary.Types.RealIO.VolumeOutput Vrv annotation (Placement(
                transformation(extent={{40,20},{60,40}}), iconTransformation(extent={{40,
                    20},{60,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput Vlv annotation (Placement(
                transformation(extent={{36,20},{56,40}}), iconTransformation(extent={{40,
                    -40},{60,-20}})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-50,60},{-10,100}}), iconTransformation(extent={
                    {-40,78},{-18,100}})));
        equation
          Vperi = Vrvfw+Vlvfw;
          Vrv = Vrvfw+Vsept;
          Vlv= Vlvfw-Vsept;
          Pperi=P0*(exp(lambda*(Vperi-V0))-1); //orig equation in mmHg and ml
           pressure = Pth + Pperi;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-40,
                    -100},{60,100}}),
                                 graphics={
                Polygon(
                  points={{-18,90},{-18,-90},{-6,-80},{24,-44},{32,-16},{30,10},
                      {24,32},{0,68},{-18,92},{-18,90}},
                  smooth=Smooth.None,
                  lineColor={167,167,255},
                  fillPattern=FillPattern.Forward,
                  fillColor={227,227,255}),
                Polygon(
                  points={{30,4},{22,6},{-6,8},{-18,6},{-18,4},{-18,0},{-18,-4},
                      {-16,-4},{-8,-6},{24,-4},{30,-4},{30,4}},
                  lineColor={167,167,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Polygon(
                  points={{-18,102},{20,50},{36,14},{36,-30},{16,-62},{-18,-98},{-20,-88},
                      {12,-54},{28,-30},{28,14},{12,48},{-18,90},{-18,102}},
                  lineColor={0,0,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{22,98},{40,80}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="p"),
                Text(
                  extent={{-16,14},{12,-10}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vsept"),
                Text(
                  extent={{-16,40},{10,14}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrvfw"),
                Text(
                  extent={{-18,-18},{8,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlvfw"),
                Text(
                  extent={{22,40},{38,22}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrv"),
                Text(
                  extent={{20,-22},{40,-36}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlv"),
                Text(
                  extent={{-10,98},{12,76}},
                  lineColor={0,0,255},
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-40,120},{64,100}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}),
                                     Diagram(coordinateSystem(extent={{-40,-100},{60,100}}),
                graphics));
        end Pericardium;

        model ElasticWall
          Physiolibrary.Types.RealIO.PressureInput prv annotation (Placement(
                transformation(extent={{-26,32},{14,72}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-38,6})));
          Physiolibrary.Types.RealIO.PressureInput plv annotation (Placement(
                transformation(extent={{-26,-54},{14,-14}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-52,-50})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-2,-94},{18,-74}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,-46})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(extent={{-112,-66},{-92,-46}}),
                                                           iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={-96,-56})));
                    parameter Physiolibrary.Types.Volume V0=0;
          Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance
            annotation (Placement(transformation(extent={{-24,42},{16,82}}),
                iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-96,6})));
        equation
          pressure = plv -prv;
          pressure = (volume-V0) /compliance;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-30,26},{22,-4}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="prv"),
                Text(
                  extent={{-42,-38},{10,-68}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="plv"),
                Text(
                  extent={{26,-32},{102,-56}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="pressure"),
                Text(
                  extent={{-150,-26},{-70,-46}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="Volume"),
                Polygon(
                  points={{-100,-14},{-40,-34},{-6,-40},{8,-40},{40,-34},{100,
                      -14},{98,-14},{-100,-14}},
                  lineColor={0,0,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-128,-10},{-60,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="compliance
"),             Text(
                  extent={{20,40},{166,-18}},
                  lineColor={0,0,255},
                  horizontalAlignment=TextAlignment.Left,
                  textString="  pressure = plv -prv;
  pressure = (volume-V0) /compliance;")}), Diagram(coordinateSystem(preserveAspectRatio=
                   false, extent={{-100,-100},{100,100}}), graphics));
        end ElasticWall;

        model VentricularInteraction_flat
            import Physiolibrary.Types.*;
            Volume Vsept(start=0.000002),Vrv(start=0.0001042),Vlv(start=0.0001042),Vperi;
            parameter Volume V0sept=0.000002,V0peri;
            Pressure Psept,Pperi;
            parameter Pressure Pi0sept,Pi0rv,Pi0lv,Pi0peri
            "peak isovolumic pressure";
            parameter HydraulicElastance Essept,Esrv,Eslv
            "elastance of systole";
            parameter Real A=1,B=80,CC=0.375;
            Time tm;
            discrete Time HP "heart period";
            discrete Time t0 "time of beginning of the cardiac cycle";
            discrete Time ts "duration of systole";
            parameter HydraulicLambda lambdas,lambdarv,lambdalv,lambdaperi;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-12,90},{8,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          RealIO.FrequencyInput HR annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={82,0})));
        equation
          //timing
          tm = time - pre(t0);
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          //  septum
          Psept = lvflow.pressure-rvflow.pressure;
          Psept = (Vsept-V0sept)*A*exp(-B*(tm-CC)^2)*Essept
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0sept*(exp(lambdas*Vsept)-1);
          // rightventricle
          rvflow.pressure - Pperi = (Vrv+Vsept)*A*exp(-B*(tm-CC)^2)*Esrv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0rv*(exp(lambdarv*(Vrv+Vsept))-1);
          der(Vrv) = rvflow.q;
          //leftventricle
          lvflow.pressure - Pperi = (Vlv-Vsept)*A*exp(-B*(tm-CC)^2)*Eslv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0lv*(exp(lambdalv*(Vlv-Vsept))-1);
          der(Vlv) = lvflow.q;
          //pericardium
          Vperi = Vrv+Vlv;
          Pperi=Pth+ Pi0peri*(exp(lambdaperi*(Vperi-V0peri))-1);
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{102,-32},{76,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-100,-22},{-74,-34}},
                  lineColor={0,0,255},
                  textString="HR"),
                Rectangle(extent={{-20,80},{20,-60}}, lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255}),
                Text(
                  extent={{-100,-60},{100,-80}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end VentricularInteraction_flat;

        model Heart
          extends Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.Inertia Ltc(
              I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
                displayUnit="m3/s") = 0.0001372)
            annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
          Hydraulic.Components.IdealValveNorm           tricuspidValve(
                                                                  Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
            annotation (Placement(transformation(extent={{-48,30},{-28,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lpv(
              I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
                displayUnit="m3/s") = -1.9e-9)
            annotation (Placement(transformation(extent={{42,30},{62,50}})));
          Hydraulic.Components.IdealValveNorm           pulmonaryValve(
                                                                  Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 733273.1307825)
            annotation (Placement(transformation(extent={{66,30},{86,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lmt(
              I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
                displayUnit="m3/s") = 0.0001141)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={78,-14})));
          Hydraulic.Components.IdealValveNorm           mitralValve(
                                                        Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 2106493.721157)
            annotation (Placement(transformation(extent={{60,-24},{40,-4}})));
          Physiolibrary.Hydraulic.Components.Inertia Lav(
              I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
                displayUnit="m3/s") = -1.4e-8)                           annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-40,-14})));
          Hydraulic.Components.IdealValveNorm           aorticValve(
                                                                  Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 2399802.97347)
            annotation (Placement(transformation(extent={{-58,-24},{-78,-4}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       HR(k=1.2)
            annotation (Placement(transformation(extent={{-52,8},{-36,22}})));
          replaceable VentricularInteraction
                                 ventricularInteraction constrainedby
            VentricularInteraction
            annotation (Placement(transformation(extent={{-24,-14},{36,40}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{42,20},{52,30}})));
        equation
          connect(rightHeartInflow, Ltc.q_in) annotation (Line(
              points={{-100,40},{-90,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ltc.q_out, tricuspidValve.q_in) annotation (Line(
              points={{-70,40},{-48,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, ventricularInteraction.rvflow)
            annotation (Line(
              points={{-28,40},{6,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularInteraction.rvflow, Lpv.q_in) annotation (Line(
              points={{6,40},{42,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{62,40},{66,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation (Line(
              points={{86,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, ventricularInteraction.Pth) annotation (Line(
              points={{53.25,25},{56,25},{56,15.16},{30,15.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularInteraction.frequency, HR.y) annotation (Line(
              points={{-18,15.16},{-26,15.16},{-26,15},{-34,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Lmt.q_in, leftHeartInflow) annotation (Line(
              points={{88,-14},{94,-14},{94,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lmt.q_out, mitralValve.q_in) annotation (Line(
              points={{68,-14},{60,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, ventricularInteraction.lvflow) annotation (
             Line(
              points={{40,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_in, ventricularInteraction.lvflow) annotation (Line(
              points={{-30,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_in, Lav.q_out) annotation (Line(
              points={{-58,-14},{-50,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, leftHeartOutflow) annotation (Line(
              points={{-78,-14},{-84,-14},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Heart;

        model Pulmonary
          extends Interfaces.PulmonaryCirculation;
          Hydraulic.Components.ElasticVesselNorm pulmonaryArteries(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=3.904e-05,
            E=49195960.956135)
            annotation (Placement(transformation(extent={{-72,-18},{-34,18}})));
          Hydraulic.Components.Resistor                Rpul(R(displayUnit="(mmHg.s)/ml")=
              20691634.526808)                         annotation (Placement(
                transformation(
                extent={{-15,-16},{15,16}},
                rotation=0,
                origin={-5,0})));
          Hydraulic.Components.ElasticVesselNorm pulmonaryVeins(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=0.0008269,
            E=973253.4281295)
            annotation (Placement(transformation(extent={{36,-18},{72,18}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{-92,8},{-80,20}})));
        equation
          connect(q_in, pulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-53,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
              points={{-53,2.22045e-16},{-42,2.22045e-16},{-42,4.44089e-16},{
                  -20,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{10,4.44089e-16},{36,4.44089e-16},{36,2.22045e-16},{54,
                  2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, q_out) annotation (Line(
              points={{54,2.22045e-16},{80,2.22045e-16},{80,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, pulmonaryArteries.externalPressure) annotation (Line(
              points={{-78.5,14},{-58,14},{-58,14.4},{-37.8,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmonaryArteries.externalPressure, pulmonaryVeins.externalPressure)
            annotation (Line(
              points={{-37.8,14.4},{16.1,14.4},{16.1,14.4},{68.4,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Pulmonary;

        model Systemic
          extends Interfaces.SystemicCirculation;
          Hydraulic.Components.ElasticVesselNorm aorta(
            ZeroPressureVolume=0,
            volume_start=0.0001241,
            Elastance=92165766.41999)
            annotation (Placement(transformation(extent={{36,-14},{68,18}})));
          Hydraulic.Components.Resistor                Rsys(Resistance(displayUnit="(mmHg.s)/ml")=
              145054757.50752)                          annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=180,
                origin={-8,0})));
          Hydraulic.Components.ElasticVesselNorm           venaCava(
            ZeroPressureVolume=0,
            volume_start=0.0002952,
            Elastance=786602.0857485)
            annotation (Placement(transformation(extent={{-72,-16},{-40,16}})));
        equation
          connect(aorta.q_in, q_in) annotation (Line(
              points={{52,2},{70,2},{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, Rsys.q_in) annotation (Line(
              points={{52,2},{20,2},{20,-2.22045e-15},{8,-2.22045e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsys.q_out, venaCava.q_in) annotation (Line(
              points={{-24,1.77636e-15},{-40,1.77636e-15},{-40,2.22045e-16},{
                  -56,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venaCava.q_in, q_out) annotation (Line(
              points={{-56,2.22045e-16},{-80,2.22045e-16},{-80,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Systemic;

        model TimeVaryingElastance2
          //parameter Physiolibrary.Types.HydraulicElastance Ed "elastance of diastole";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Es
            "elastance of systole"                                                   annotation (Dialog(enable=not useEs_extInput));
          parameter Real Pi0 "peak isovolumic pressure";
          parameter Real
            lambda;
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real et;
          parameter Real A=1,B=80,CC=0.375;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,14})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,66})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent={{76,58},
                    {116,98}}),                                                                                                    iconTransformation(extent={{-20,-20},
                    {20,20}},
                rotation=0,
                origin={-100,60})));
          Physiolibrary.Types.RealIO.VolumeInput V annotation (Placement(
                transformation(extent={{82,54},{122,94}}),     iconTransformation(
                  extent={{-20,-20},{20,20}},
                rotation=180,
                origin={60,-40})));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Es)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-100,20})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=Es;
          end if;
          tm = time - pre(t0);
        /*  if tm < pre(ts) then
    a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
  else
    a = 0;
  end if;
  E = Ed + Es * a;
  C = 1 / E;
  //  Pi = Pi0 * a;
  */
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          et = A*exp(-B*(tm-CC)^2);//(5)
          E = et*es_int;//(derived (4)
          C = 1/E;
          Pi = (1-et)*Pi0*(exp(lambda*V*1e+6)-1)*133.322;//derived(4)
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{60,100}}),                                                                         graphics={  Rectangle(extent={{
                      -42,80},{50,-76}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid),                                                                                                    Text(extent={{
                      -96,82},{-32,58}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR"), Text(extent={{
                      -16,28},{84,-2}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "Et"), Text(extent={{8,
                      86},{58,56}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="P"),                                                                                                    Text(extent={{
                      -288,134},{260,78}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="%name"),
                Text(
                  extent={{44,-52},{76,-80}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="V"),
                Line(
                  points={{-40,0},{-32,0},{-32,4},{-30,26},{-26,40},{-22,42},{-20,
                      38},{-18,22},{-16,0},{6,0},{8,24},{12,40},{16,42},{18,38},{
                      22,0},{44,0}},
                  color={0,0,255},
                  smooth=Smooth.None)}), Diagram(coordinateSystem(extent={{-100,
                    -100},{60,100}})));
        end TimeVaryingElastance2;

        model Ventricle2
          TimeVaryingElastance2 drive(
            lambda=23000,
            Es=77993596.637775,
            Pi0=28.757638965416)
            annotation (Placement(transformation(extent={{-32,-4},{-12,22}})));
          Hydraulic.Components.ElasticVesselSV ventricle(
            useComplianceInput=true,
            useExternalPressureInput=true,
            useV0Input=true,
            volume_start=0.0001042,
            E=133322387.415)
            annotation (Placement(transformation(extent={{16,-22},{36,-2}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={34,6})));
          Modelica.Blocks.Interfaces.RealInput Pext annotation (Placement(
                transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={50,12}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={30,30})));
          Modelica.Blocks.Interfaces.RealInput V0 annotation (Placement(
                transformation(
                rotation=0,
                extent={{-10,-10},{10,10}},
                origin={0,0}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-10})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation (
              Placement(transformation(rotation=0, extent={{36,-22},{56,-2}}),
                iconTransformation(extent={{-50,-20},{-30,0}})));
          Physiolibrary.Types.RealIO.VolumeOutput stressedVolume annotation (
              Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-26,-10}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-10})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-56,6},{-36,26}}),
                iconTransformation(extent={{-40,20},{-20,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,-28}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={6,-10})));
        equation
          connect(drive.C, ventricle.compliance) annotation (Line(
              points={{-11.25,10.82},{26,10.82},{26,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.externalPressure, add.y) annotation (Line(
              points={{34,-4},{34,1.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.Pi, add.u2) annotation (Line(
              points={{-11.25,17.58},{10,17.58},{10,18},{32,18},{32,10.8},{31.6,
                  10.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HR, drive.HR) annotation (Line(points={{-46,16},{-42,16},{-42,
                  16.8},{-32,16.8}}, color={0,0,127}));
          connect(add.u1, Pext) annotation (Line(
              points={{36.4,10.8},{47.2,10.8},{47.2,12},{50,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(V0, ventricle.zeroPressureVolume) annotation (Line(
              points={{0,0},{18,0},{18,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.stressedVolume, stressedVolume) annotation (Line(
              points={{18.2,-22},{-8,-22},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.V, stressedVolume) annotation (Line(
              points={{-12,3.8},{-8,3.8},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.q_in, q_in) annotation (Line(
              points={{26,-12},{46,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricle.volume, volume) annotation (Line(
              points={{32,-22},{32,-28},{-26,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-60,-60},{60,40}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics={
                Bitmap(extent={{-34,44},{28,-24}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/heartVentricle.png"),
                Text(
                  extent={{-40,18},{-20,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{20,20},{42,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pext"),
                Text(
                  extent={{-16,0},{6,-20}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="V0"),
                Rectangle(extent={{-40,40},{40,-20}}, lineColor={0,0,127}),
                Text(
                  extent={{-60,60},{60,42}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Ventricle2;

        model VentricularInteraction2
        //  Physiolibrary.Types.Pressure Plv,Plvf,Pperi,Prv,Prvf,Ppcd,Pth,Pspt;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-10,90},{10,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          Physiolibrary.Types.RealIO.FrequencyInput frequency annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-12},{-60,28}})));
          Pericardium pericardium(
            lambda(displayUnit="1/m3") = 30000,
            V0=0.0002,
            P0=66.701190423724) annotation (Placement(transformation(
                extent={{13,26},{-13,-26}},
                rotation=180,
                origin={25,12})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,8})));
          Ventricle2      rightVentricle(drive(
              Pi0=0.2157,
              lambda=0.023,
              Es=77993596.637775))
                             annotation (Placement(transformation(rotation=0,
                  extent={{-20,26},{0,46}})));
          Ventricle2      leftVentricle(drive(
              Pi0=0.1203,
              lambda=0.033,
              Es=383941811.27772))
                             annotation (Placement(transformation(
                rotation=180,
                extent={{10,-10},{-10,10}},
                origin={-10,-16})));
          Septum2      septum(septumdrv(
              Es=6499999676.0309,
              Pi0=1.1101,
              lambda=0.435), elasticWall(volume(start=2e-06), V0=2e-06))
                              annotation (Placement(transformation(rotation=0,
                  extent={{-54,-6},{-14,26}})));
          Modelica.Blocks.Math.Gain gain(k=-1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=90,
                origin={-14,22})));
        equation
          /*Plv = Plvf+Pperi;
  Plvf=e*Peslvf+(1-e)*Pedlvf;

  Prv=Prvf+Pperi;
  Prvf=e*Pesrvf+(1-e)*Pedrvf;

  Pperi=Ppcd+Pth;

  Pspt=Plv-Prv;

Pspt=e*Pesspt+(1-e)*Pedspt;
*/
          //Pspt = leftVentricle.q_in.pressure - rightVentricle.q_in.pressure;
          connect(frequency,leftVentricle. HR) annotation (Line(
              points={{-58,-20},{-15,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.HR, frequency) annotation (Line(
              points={{-15,44},{-58,44},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.HR,    frequency) annotation (Line(
              points={{-52,10},{-58,10},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.stressedVolume, pericardium.Vrvfw) annotation (
             Line(
              points={{-5,36},{-5,19.54},{20.06,19.54}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(lvflow,leftVentricle. q_in) annotation (Line(
              points={{-36,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pericardium.pressure,leftVentricle. Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,-20},{-5,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth, pericardium.Pth) annotation (Line(
              points={{4,34},{20.06,34},{20.06,35.14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.pressure, rightVentricle.Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,44},{-5,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.stressedVolume, pericardium.Vlvfw) annotation (
              Line(
              points={{-5,-12},{-4,-12},{-4,3.94},{20.06,3.94}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(septum.volume,leftVentricle. V0) annotation (Line(
              points={{-16,10},{-13.3333,10},{-13.3333,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.volume, gain.u) annotation (Line(
              points={{-16,10},{-14,10},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.Vsept, gain.u) annotation (Line(
              points={{20.06,12.26},{-14,12.26},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, rightVentricle.V0) annotation (Line(
              points={{-14,28.6},{-14,28},{-13.3333,28},{-13.3333,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, rvflow) annotation (Line(
              points={{-16.6667,36},{-28,36},{-28,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.rvflow, rvflow) annotation (Line(
              points={{-34,12.56},{-34,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.lvflow,leftVentricle. q_in) annotation (Line(
              points={{-34,5.2},{-34,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-102,-20},{-76,-32}},
                  lineColor={0,0,255},
                  textString="HR"),
                Text(
                  extent={{100,-32},{74,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Bitmap(extent={{-92,84},{-4,-74}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceprava.png"),
                Bitmap(extent={{-18,102},{94,-72}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceLeva.png"),
                Polygon(
                  points={{-18,48},{4,48},{6,30},{14,2},{16,-28},{16,-62},{18,
                      -64},{10,-72},{-6,-70},{-8,-52},{-10,-4},{-14,28},{-18,44},
                      {-18,46},{-18,48}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,205,205}),
                Polygon(
                  points={{-58,0},{-64,0},{-66,0},{-62,-12},{-56,-38},{-38,-60},
                      {-6,-76},{24,-72},{44,-50},{62,-18},{68,2},{60,4},{56,-10},
                      {46,-32},{34,-52},{20,-66},{4,-68},{-12,-64},{-44,-42},{
                      -42,-42},{-58,0}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{-98,-68},{98,-92}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                          extent={{-100,-100},{100,100}}), graphics));
        end VentricularInteraction2;

        model Septum2
          Physiolibrary.Hydraulic.Sensors.PressureMeasure rvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-12,40})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-23,23})));
          TimeVaryingElastance2 septumdrv(
            Es=6499999676.0309,
            Pi0=1.1101,
            lambda=0.435)        annotation (Placement(transformation(
                extent={{-10,-12},{10,12}},
                rotation=0,
                origin={-58,12})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure lvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-14})));
          ElasticWall elasticWall(volume(start=2e-06), V0=2e-06)
            annotation (Placement(transformation(extent={{-28,-8},{18,22}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume(start=2e-06)
            annotation (Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-84,-10}), iconTransformation(extent={{80,-10},{100,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,-28},{16,-8}}),
                iconTransformation(extent={{-10,-40},{10,-20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,32},{16,52}}),
                iconTransformation(extent={{-10,6},{10,26}})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-94,10},{-74,30}}),
                iconTransformation(extent={{-100,-10},{-80,10}})));
        equation
          connect(elasticWall.compliance, septumdrv.C) annotation (Line(
              points={{-27.08,7.9},{-32,7.9},{-32,13.68},{-47.25,13.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.Pi, add1.u2) annotation (Line(
              points={{-47.25,19.92},{-33.625,19.92},{-33.625,20},{-29,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, elasticWall.prv) annotation (Line(
              points={{-17.5,23},{-13.74,23},{-13.74,7.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, septumdrv.V) annotation (Line(
              points={{-27.08,-1.4},{-44,-1.4},{-44,7.2},{-48,7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume, elasticWall.volume) annotation (Line(points={{-84,-10},
                  {-27.08,-10},{-27.08,-1.4}}, color={0,0,127}));
          connect(HR, septumdrv.HR) annotation (Line(points={{-84,20},{-68,20},
                  {-68,19.2}}, color={0,0,127}));
          connect(lvpressure.pressure, elasticWall.plv) annotation (Line(
              points={{-16,-8},{-16,-0.5},{-16.96,-0.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvpressure.q_in, rvflow) annotation (Line(
              points={{-18,44},{-6,44},{-6,42},{6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rvpressure.pressure, add1.u1) annotation (Line(
              points={{-16,34},{-34,34},{-34,26},{-29,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvflow, lvpressure.q_in) annotation (Line(
              points={{6,-18},{-14,-18}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Polygon(
                  points={{-100,-20},{-40,0},{-6,6},{8,6},{40,0},{100,-20},{98,
                      -20},{-100,-20}},
                  lineColor={167,167,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-100,-20},{-78,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{80,-20},{100,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="V"),
                Text(
                  extent={{-80,-20},{76,0}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Septum2;

        model Heart2
          extends Heart(redeclare VentricularInteraction2
              ventricularInteraction);
        end Heart2;

        record HeartPart
          import Physiolibrary.Types.*;
            Volume V(start=V_start);
            parameter HydraulicElastance Es "elastance of systole";
            parameter Volume V0 "unstressed volume";
            parameter Volume V_start "initial volume";
            Pressure P;
            parameter Pressure Pi0 "peak isovolumic pressure";
            parameter HydraulicLambda lambda;
        end HeartPart;

        model VentricularInteractionObj
            import Physiolibrary.Types.*;
        //    HeartPart septum(V(start=0.000002)), pericardium, rightVentricle, leftVentricle;
        //    Volume Vsept(start=0.000002),Vrv(start=0.0001042),Vlv(start=0.0001042),Vperi;
        //    parameter Volume V0sept=0.000002,V0peri;
        //    Pressure Psept,Pperi;
        //    parameter Pressure Pi0sept,Pi0rv,Pi0lv,Pi0peri "peak isovolumic pressure";
        //    parameter HydraulicElastance Essept,Esrv,Eslv "elastance of systole";
            parameter Real A=1,B=80,CC=0.375;
            Time tm;
            discrete Time HP "heart period";
            discrete Time t0 "time of beginning of the cardiac cycle";
            discrete Time ts "duration of systole";
        //    parameter HydraulicLambda lambdas,lambdarv,lambdalv,lambdaperi;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-12,90},{8,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          RealIO.FrequencyInput HR annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={82,0})));
          HeartPart septum(
            V0=2e-06,
            V_start=2e-06,
            Pi0=148.00118226939,
            Es=6499999676.0309,
            lambda=435000)
            annotation (Placement(transformation(extent={{-6,-8},{14,12}})));
          HeartPart pericardium(
            V0=0.0002,
            V_start=0,
            Pi0=66.701190423724,
            Es=0,
            lambda=30000)
            annotation (Placement(transformation(extent={{22,64},{42,84}})));
          HeartPart rightVentricle(
            V0=0,
            V_start=0.0001042,
            Pi0=28.757638965416,
            Es=77993596.637775,
            lambda=23000)
            annotation (Placement(transformation(extent={{-64,-8},{-44,12}})));
          HeartPart leftVentricle(
            V0=0,
            V_start=0.0001042,
            Pi0=16.038683206025,
            Es=383941811.27772,
            lambda=33000)
            annotation (Placement(transformation(extent={{26,-66},{46,-46}})));
        equation
          //timing
          tm = time - pre(t0);
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          //  septum
          septum.P = lvflow.pressure-rvflow.pressure;
          septum.P = (septum.V-septum.V0)*A*exp(-B*(tm-CC)^2)*septum.Es
                        +(1-A*exp(-B*(tm-CC)^2))*septum.Pi0*(exp(septum.lambda*septum.V)-1);
          // rightventricle
          rvflow.pressure = rightVentricle.P;
          rvflow.pressure - pericardium.P = (rightVentricle.V+septum.V)*A*exp(-B*(tm-CC)^2)*rightVentricle.Es
                        +(1-A*exp(-B*(tm-CC)^2))*rightVentricle.Pi0*(exp(rightVentricle.lambda*(rightVentricle.V+septum.V))-1);
          der(rightVentricle.V) = rvflow.q;
          //leftventricle
          lvflow.pressure = leftVentricle.P;
          lvflow.pressure - pericardium.P = (leftVentricle.V-septum.V)*A*exp(-B*(tm-CC)^2)*leftVentricle.Es
                        +(1-A*exp(-B*(tm-CC)^2))*leftVentricle.Pi0*(exp(leftVentricle.lambda*(leftVentricle.V-septum.V))-1);
          der(leftVentricle.V) = lvflow.q;
          //pericardium
          pericardium.V = rightVentricle.V+leftVentricle.V;
          pericardium.P=Pth+ pericardium.Pi0*(exp(pericardium.lambda*(pericardium.V-pericardium.V0))-1);
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{102,-32},{76,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-100,-22},{-74,-34}},
                  lineColor={0,0,255},
                  textString="HR"),
                Rectangle(extent={{-20,80},{20,-60}}, lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255}),
                Text(
                  extent={{-100,-60},{100,-80}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end VentricularInteractionObj;
      end Parts;

      package Test
        model VentricularInteraction
        //  Physiolibrary.Types.Pressure Plv,Plvf,Pperi,Prv,Prvf,Ppcd,Pth,Pspt;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-10,80},{10,100}}),
                iconTransformation(extent={{-10,90},{10,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a1 annotation (
              Placement(transformation(extent={{-10,-90},{10,-70}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true, useExternalPressureInput=true)
            annotation (Placement(transformation(extent={{-10,34},{10,54}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
            useV0Input=false,
            useComplianceInput=true,
            useExternalPressureInput=true)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-34,-64})));
          Parts.TimeVaryingElastance rvdrive(
            Ed=3999671.62245,
            Es=43729743.07212,
            Pi0=3199.73729796,
            lambda=0.000000023)
            annotation (Placement(transformation(extent={{-18,62},{2,82}})));
          Parts.TimeVaryingElastance lvdrive(
            Ed=13332238.7415,
            Es=183318282.69563,
            Pi0=6666.11937075,
            lambda=0.000000033) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-60,-34})));
          Physiolibrary.Types.RealIO.FrequencyInput frequency annotation (
              Placement(transformation(extent={{-104,-20},{-64,20}}),
                iconTransformation(extent={{-104,-20},{-64,20}})));
          Physiolibrary.Types.RealIO.VolumeOutput Vlv "Vlvf+Vseptum" annotation (
              Placement(transformation(extent={{92,-50},{112,-30}}),
                iconTransformation(extent={{92,-50},{112,-30}})));
          Physiolibrary.Types.RealIO.VolumeOutput Vrv "Vrvf-Vseptum" annotation (
              Placement(transformation(extent={{96,18},{116,38}}),
                iconTransformation(extent={{96,18},{116,38}})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{32,18},{52,38}})));
          Modelica.Blocks.Math.Add add1(k1=-1)
            annotation (Placement(transformation(extent={{32,-50},{52,-30}})));
          Parts.ElasticWall elasticWall
            annotation (Placement(transformation(extent={{-42,-12},{4,18}})));
          Parts.TimeVaryingElastance septumdrv(
            Ed=13332238.7415,
            Es=6399474595.92,
            Pi0=133.322387415,
            lambda=0.000000435) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-46,28})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure rvpressure
            annotation (Placement(transformation(extent={{-54,46},{-34,66}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure lvpressure
            annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
          Parts.Pericardium pericardium(
            lambda(displayUnit="1/m3") = 0.00000003,
            V0=0.0002,
            P0=148.00118226939)
            annotation (Placement(transformation(extent={{62,-24},{102,16}})));
          Modelica.Blocks.Math.Add add2
            annotation (Placement(transformation(extent={{44,-12},{64,8}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{-76,64},{-64,76}})));
          Modelica.Blocks.Math.Add add5
            annotation (Placement(transformation(extent={{-4,-4},{4,4}},
                rotation=270,
                origin={-30,14})));
          Modelica.Blocks.Math.Add3 add3_1
            annotation (Placement(transformation(extent={{-36,-46},{-26,-36}})));
          Modelica.Blocks.Math.Add3 add3_2 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={11,65})));
        equation
          /*Plv = Plvf+Pperi;
  Plvf=e*Peslvf+(1-e)*Pedlvf;

  Prv=Prvf+Pperi;
  Prvf=e*Pesrvf+(1-e)*Pedrvf;

  Pperi=Ppcd+Pth;

  Pspt=Plv-Prv;

Pspt=e*Pesspt+(1-e)*Pedspt;
*/
          //Pspt = leftVentricle.q_in.pressure - rightVentricle.q_in.pressure;
          connect(leftVentricle.q_in, port_a1) annotation (Line(
              points={{-34,-64},{-34,-60},{0,-60},{0,-80}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, port_a) annotation (Line(
              points={{2.22045e-16,44},{30,44},{30,90},{0,90}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rvdrive.C, rightVentricle.compliance) annotation (Line(
              points={{2.75,73.4},{2.75,58},{0,58},{0,52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvdrive.HR, frequency) annotation (Line(
              points={{-18,78},{-84,78},{-84,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.volume, add.u1) annotation (Line(
              points={{6,34},{30,34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, add1.u2) annotation (Line(
              points={{-28,-74},{30,-74},{30,-46}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, Vlv) annotation (Line(
              points={{53,-40},{102,-40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, Vrv) annotation (Line(
              points={{53,28},{106,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvdrive.C, leftVentricle.compliance) annotation (Line(
              points={{-49.25,-32.6},{-50,-32.6},{-50,-56},{-34,-56}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, add.u2) annotation (Line(
              points={{-41.08,-5.4},{29.5,-5.4},{29.5,22},{30,22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u1, add.u2) annotation (Line(
              points={{30,-34},{30,0},{29.5,0},{29.5,22},{30,22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.C, elasticWall.compliance) annotation (Line(
              points={{-35.25,29.4},{-35.25,3.9},{-41.08,3.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvpressure.q_in, rightVentricle.q_in) annotation (Line(
              points={{-48,50},{-48,44},{0,44}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, lvpressure.q_in) annotation (Line(
              points={{-34,-64},{-20,-64},{-20,-50},{-10,-50}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(add.y, add2.u1) annotation (Line(
              points={{53,28},{54,28},{54,4},{42,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, add2.u2) annotation (Line(
              points={{53,-40},{52,-40},{52,-8},{42,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add2.y, pericardium.volume) annotation (Line(
              points={{65,-2},{68,-2},{68,-3.8},{66.4,-3.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.HR, frequency) annotation (Line(
              points={{-56,34},{-84,34},{-84,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvpressure.pressure, elasticWall.plv) annotation (Line(
              points={{0,-48},{-2,-48},{-2,-26},{-30.96,-26},{-30.96,-4.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add5.y, elasticWall.prv) annotation (Line(
              points={{-30,9.6},{-30,3.9},{-27.74,3.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add5.u1, rvpressure.pressure) annotation (Line(
              points={{-27.6,18.8},{-27.6,52},{-38,52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add5.u2, septumdrv.Pi) annotation (Line(
              points={{-32.4,18.8},{-36.2,18.8},{-36.2,34.6},{-35.25,34.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.pressure, add3_1.u1) annotation (Line(
              points={{98,14},{98,-20},{-37,-20},{-37,-37}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.y, leftVentricle.externalPressure) annotation (Line(
              points={{-25.5,-41},{-25.5,-48.5},{-26,-48.5},{-26,-56}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvdrive.Pi, add3_1.u3) annotation (Line(
              points={{-49.25,-27.4},{-44.5,-27.4},{-44.5,-45},{-37,-45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.u2, Pth.y) annotation (Line(
              points={{-37,-41},{-62.5,-41},{-62.5,70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_2.y, rightVentricle.externalPressure) annotation (Line(
              points={{11,59.5},{11,55.75},{8,55.75},{8,52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_2.u1, pericardium.pressure) annotation (Line(
              points={{15,71},{98,71},{98,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_2.u2, rvdrive.Pi) annotation (Line(
              points={{11,71},{11,76},{4,76},{4,78.6},{2.75,78.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth.y, add3_2.u3) annotation (Line(
              points={{-62.5,70},{-28,70},{-28,71},{7,71}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, septumdrv.V) annotation (Line(
              points={{-41.08,-5.4},{18,-5.4},{18,-14},{-36,-14},{-36,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.volume, rvdrive.V) annotation (Line(
              points={{6,34},{2,34},{2,68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, lvdrive.V) annotation (Line(
              points={{-28,-74},{-28,-80},{-74,-80},{-74,-38},{-50,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvdrive.HR, frequency) annotation (Line(
              points={{-70,-28},{-84,-28},{-84,0}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Ellipse(
                  extent={{98,0},{-102,-100}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{100,98},{-98,0}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-80,0},{-66,4},{-50,6},{-32,2},{-16,0},{-4,0},{12,4},{30,4},
                      {50,0},{74,-2},{80,0},{80,-4},{74,-6},{64,-4},{52,-8},{30,-2},{
                      12,0},{2,-4},{-8,-4},{-20,-6},{-30,-4},{-48,0},{-68,-2},{-80,-6},
                      {-80,0}},
                  lineColor={0,0,255},
                  smooth=Smooth.None,
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-16,54},{-16,8},{-28,20},{-4,20},{-16,8}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{34,-68},{34,-10},{22,-24},{48,-24},{34,-12}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Text(
                  extent={{-14,44},{62,20}},
                  lineColor={0,0,255},
                  textString="septum"),
                Line(
                  points={{-12,100},{-60,96},{-90,82},{-104,50},{-106,-58},{-82,-88},{-26,
                      -106},{44,-104},{94,-76},{96,-72},{104,-38},{104,-36},{104,56},{102,
                      60},{68,92},{66,94},{18,102},{-32,98}},
                  color={0,0,255},
                  smooth=Smooth.Bezier,
                  thickness=0.5),
                Line(
                  points={{0,23},{0,-23},{-12,-11},{12,-11},{0,-23}},
                  color={0,0,255},
                  smooth=Smooth.None,
                  origin={84,-93},
                  rotation=270),
                Text(
                  extent={{74,-88},{162,-112}},
                  lineColor={0,0,255},
                  lineThickness=1,
                  textString="pericardum")}),
                                         Diagram(coordinateSystem(preserveAspectRatio=false,
                          extent={{-100,-100},{100,100}}), graphics));
        end VentricularInteraction;

        model TimeVaryingElastance
          parameter Physiolibrary.Types.HydraulicElastance Ed
            "elastance of diastole";
          parameter Physiolibrary.Types.HydraulicElastance Es
            "elastance of systole";
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real a;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -90})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {70, -90})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-106, 56}, {-66, 96}}), iconTransformation(extent = {{-106, 56}, {-66, 96}})));
        equation
          tm = time - pre(t0);
          if tm < pre(ts) then
            a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
          else
            a = 0;
          end if;
          E = Ed + Es * a;
          C = 1 / E;
          Pi = Pi0 * a;
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-80, 80}, {80, -80}}, lineColor=  {0, 0, 255}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-78, 0}, {-68, 18}, {-54, 52}, {-44, 64}, {-30, 60}, {-26, 46}}, color=  {0, 0, 255}, smooth=  Smooth.None), Line(points=  {{-26, 46}, {-26, 32}, {-20, 10}, {-8, 2}, {36, 2}, {80, 2}}, color=  {0, 0, 255}, smooth=  Smooth.None), Text(extent=  {{-70, 98}, {-22, 80}}, lineColor=  {0, 0, 255}, textString=  "HR"), Text(extent=  {{-74, -40}, {40, -80}}, lineColor=  {0, 0, 255}, textString=  "Et"), Text(extent=  {{42, -40}, {100, -80}}, lineColor=  {0, 0, 255}, textString=  "Pi"), Text(extent=  {{-272, 16}, {276, -40}}, lineColor=  {0, 0, 255}, textString=  "%name")}));
        end TimeVaryingElastance;

        model Hemodynamics_flat
          Physiolibrary.Hydraulic.Components.ElasticVessel aorta(
            volume_start=0.000842,
            ZeroPressureVolume=0.0007,
            Compliance=1.2751046789376e-08)
            annotation (Placement(transformation(extent={{-114,-30},{-94,-10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel venaCava(
            volume_start=0.002755,
            ZeroPressureVolume=0.00223,
            Compliance=5.2504310309196e-07)
            annotation (Placement(transformation(extent={{-114,24},{-94,44}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(
                displayUnit="ml/(mmHg.s)") = 4.1703423617018e-07, Pknee=0)
            annotation (Placement(transformation(extent={{-46,-30},{-66,-10}})));
          Physiolibrary.Hydraulic.Components.Conductor Rsys(Conductance(displayUnit=
                  "ml/(mmHg.s)") = 6.9110673598419e-09) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-104,6})));
          Physiolibrary.Hydraulic.Components.IdealValve tricupsidValve(_Gon(
                displayUnit="ml/(mmHg.s)") = 3.1802610815856e-07, Pknee=0)
            annotation (Placement(transformation(extent={{-46,24},{-26,44}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=false,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{-8,24},{12,44}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=false,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            ExternalPressure=-533.28954966)
            annotation (Placement(transformation(extent={{2,-32},{18,-8}})));
          Physiolibrary.Hydraulic.Components.Inertia Lav(volumeFlow_start=1e-05,
              I(displayUnit="mmHg.s2/ml") = 16250.665802014)             annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-18,-20})));
          Physiolibrary.Hydraulic.Components.Inertia Lpv(volumeFlow_start=1e-05,
              I(displayUnit="mmHg.s2/ml") = 19822.372560862)
            annotation (Placement(transformation(extent={{18,24},{38,44}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(
                displayUnit="ml/(mmHg.s)") = 1.3651120680391e-06, Pknee=0)
            annotation (Placement(transformation(extent={{58,24},{78,44}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArteries(
            volume_start=0.001237,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07)
            annotation (Placement(transformation(extent={{98,24},{118,44}})));
          Physiolibrary.Hydraulic.Components.Conductor Rpul(Conductance(displayUnit=
                  "ml/(mmHg.s)") = 4.830396548446e-08) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={110,4})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            volume_start=0.000197,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08)
            annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(_Gon(displayUnit=
                  "ml/(mmHg.s)") = 4.7778922381368e-07, Pknee=0)
            annotation (Placement(transformation(extent={{54,-30},{34,-10}})));
          Physiolibrary.Hydraulic.Components.Inertia Ltc(volumeFlow_start=1e-05,
              I(displayUnit="mmHg.s2/ml") = 10678.18997523)
            annotation (Placement(transformation(extent={{-90,24},{-70,44}})));
          Physiolibrary.Hydraulic.Components.Inertia Lmt(volumeFlow_start=1e-05,
              I(displayUnit="mmHg.s2/ml") = 10261.557514558)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={82,-20})));
          Test.TimeVaryingElastance RE(
            Ed=3999671.62245,
            Es=43729743.07212,
            Pi0=3199.73729796)
            annotation (Placement(transformation(extent={{-8,58},{12,78}})));
          Test.TimeVaryingElastance Le(
            Ed=13332238.7415,
            Es=183318282.69563,
            Pi0=6666.11937075)
            annotation (Placement(transformation(extent={{0,-6},{22,18}})));
          Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
            annotation (Placement(transformation(extent={{-78,12},{-70,20}})));
        equation
          connect(aorta.q_in, Rsys.q_in) annotation (Line(
              points={{-104,-20},{-104,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsys.q_out, venaCava.q_in) annotation (Line(
              points={{-104,16},{-104,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricupsidValve.q_out, rightVentricle.q_in) annotation (Line(
              points={{-26,34},{2,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
              points={{78,34},{108,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
              points={{108,34},{110,34},{110,14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{110,-6},{110,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, aorta.q_in) annotation (Line(
              points={{-66,-20},{-104,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.compliance, RE.C) annotation (Line(
              points={{2,42},{2,59}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(venaCava.q_in, Ltc.q_in) annotation (Line(
              points={{-104,34},{-90,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, Lpv.q_in) annotation (Line(
              points={{2,34},{18,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
              points={{110,-20},{92,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_out, aorticValve.q_in) annotation (Line(
              points={{-28,-20},{-46,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ltc.q_out, tricupsidValve.q_in) annotation (Line(
              points={{-70,34},{-46,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{38,34},{58,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
              points={{54,-20},{72,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_in, leftVentricle.q_in) annotation (Line(
              points={{-8,-20},{10,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{34,-20},{10,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(HR.y, RE.HR) annotation (Line(
              points={{-69,16},{-60,16},{-60,75.6},{-6.6,75.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HR.y, Le.HR) annotation (Line(
              points={{-69,16},{-58,16},{-58,15.12},{1.54,15.12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Le.C, leftVentricle.compliance) annotation (Line(
              points={{11,-4.8},{11,-6.4},{10,-6.4},{10,-10.4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                    -100},{120,100}}),      graphics), Icon(coordinateSystem(extent={
                    {-120,-100},{120,100}})));
        end Hemodynamics_flat;

        model HemodynamicsInteraction_flat2av
          Hydraulic.Components.ElasticVesselNorm aorta(
            ZeroPressureVolume=0,
            volume_start=0.0001241,
            E=92165766.41999)
            annotation (Placement(transformation(extent={{-114,-30},{-94,-10}})));
          Hydraulic.Components.ElasticVesselNorm           venaCava(
            ZeroPressureVolume=0,
            volume_start=0.0002952,
            E=786602.0857485)
            annotation (Placement(transformation(extent={{-114,24},{-94,44}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(
                displayUnit="ml/(mmHg.s)") = 4.1628417459434e-07, _Goff(
                displayUnit="ml/(mmHg.s)"))
            annotation (Placement(transformation(extent={{-46,-30},{-66,-10}})));
          Hydraulic.Components.Resistor                Rsys(Conductance(
                displayUnit="ml/(mmHg.s)"), R(displayUnit="(mmHg.s)/ml")=
              145054757.50752)                          annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-104,6})));
          Hydraulic.Components.IdealValveNorm           tricuspidValve(
                                                                  Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
            annotation (Placement(transformation(extent={{-46,24},{-26,44}})));
          Physiolibrary.Hydraulic.Components.Inertia Lav(
              I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
                displayUnit="m3/s") = -1.4e-8)                           annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-28,-20})));
          Physiolibrary.Hydraulic.Components.Inertia Lpv(
              I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
                displayUnit="m3/s") = -1.9e-9)
            annotation (Placement(transformation(extent={{28,24},{48,44}})));
          Hydraulic.Components.IdealValveNorm           pulmonaryValve(
                                                                  Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 733273.1307825)
            annotation (Placement(transformation(extent={{58,24},{78,44}})));
          Hydraulic.Components.ElasticVesselNorm pulmonaryArteries(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=3.904e-05,
            E=49195960.956135)
            annotation (Placement(transformation(extent={{98,24},{118,44}})));
          Hydraulic.Components.Resistor                Rpul(Conductance(
                displayUnit="ml/(mmHg.s)"), R(displayUnit="(mmHg.s)/ml")=
              20691634.526808)                         annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={110,4})));
          Hydraulic.Components.ElasticVesselNorm pulmonaryVeins(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=0.0008269,
            E=973253.4281295)
            annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
          Hydraulic.Components.IdealValveNorm           mitralValve(
                                                        Pknee=0,
            _Gon(displayUnit="ml/(mmHg.s)"),
            R_on(displayUnit="(mmHg.s)/ml") = 2106493.721157)
            annotation (Placement(transformation(extent={{52,-30},{32,-10}})));
          Physiolibrary.Hydraulic.Components.Inertia Ltc(
              I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
                displayUnit="m3/s") = 0.0001372)
            annotation (Placement(transformation(extent={{-90,24},{-70,44}})));
          Physiolibrary.Hydraulic.Components.Inertia Lmt(
              I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
                displayUnit="m3/s") = 0.0001141)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={74,-20})));
          Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
            annotation (Placement(transformation(extent={{-52,0},{-36,14}})));
          Parts.VentricularInteraction ventricularInteraction2_1
            annotation (Placement(transformation(extent={{-24,-20},{36,34}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{40,12},{52,24}})));
        equation
          connect(aorta.q_in, Rsys.q_in) annotation (Line(
              points={{-104,-20},{-104,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsys.q_out, venaCava.q_in) annotation (Line(
              points={{-104,16},{-104,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
              points={{78,34},{108,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
              points={{108,34},{110,34},{110,14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{110,-6},{110,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, aorta.q_in) annotation (Line(
              points={{-66,-20},{-104,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venaCava.q_in, Ltc.q_in) annotation (Line(
              points={{-104,34},{-90,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
              points={{110,-20},{84,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_out, aorticValve.q_in) annotation (Line(
              points={{-38,-20},{-46,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
              points={{-70,34},{-46,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{48,34},{58,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
              points={{52,-20},{64,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(HR.y, ventricularInteraction2_1.frequency) annotation (Line(
              points={{-34,7},{-26,7},{-26,9.16},{-18,9.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth.y, ventricularInteraction2_1.Pth) annotation (Line(
              points={{53.5,18},{56,18},{56,9.16},{30,9.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth.y, pulmonaryArteries.externalPressure) annotation (Line(
              points={{53.5,18},{86,18},{86,42},{116,42}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth.y, pulmonaryVeins.externalPressure) annotation (Line(
              points={{53.5,18},{86,18},{86,-12},{118,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, ventricularInteraction2_1.rvflow)
            annotation (Line(
              points={{-26,34},{6,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_in, ventricularInteraction2_1.rvflow) annotation (Line(
              points={{28,34},{6,34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_in, ventricularInteraction2_1.lvflow) annotation (Line(
              points={{-18,-20},{6,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, ventricularInteraction2_1.lvflow)
            annotation (Line(
              points={{32,-20},{6,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                    -100},{120,100}}),      graphics), Icon(coordinateSystem(extent={
                    {-120,-100},{120,100}})));
        end HemodynamicsInteraction_flat2av;

        model AorticStenosis
          extends Test.HemodynamicsInteraction_flat2av(
                                                  aorticValve(useLimitationInputs=
                 true));
          Modelica.Blocks.Sources.Ramp ramp(
            startTime=30,
            duration=200,
            offset=1,
            height=-0.9)
            annotation (Placement(transformation(extent={{-92,-58},{-80,-46}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst
            hydraulicConductance(k(displayUnit="l/(mmHg.min)")=
              1.2501026264094e-12)
            annotation (Placement(transformation(extent={{-86,-6},{-78,2}})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst
            hydraulicConductance1(k(displayUnit="ml/(mmHg.s)")=
              4.1628417459434e-07)
            annotation (Placement(transformation(extent={{-90,-36},{-82,-28}})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-68,-50},{-58,-40}})));
        equation
          connect(hydraulicConductance.y, aorticValve.Goff) annotation (Line(
              points={{-77,-2},{-62,-2},{-62,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hydraulicConductance1.y, product.u1) annotation (Line(
              points={{-81,-32},{-76,-32},{-76,-42},{-69,-42}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, product.u2) annotation (Line(
              points={{-79.4,-52},{-72,-52},{-72,-48},{-69,-48}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, aorticValve.Gon) annotation (Line(
              points={{-57.5,-45},{-50,-45},{-50,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                    {{-120,-100},{120,100}}), graphics));
        end AorticStenosis;

        model PericardiumPVRelationship
          "Pericardium simulation of pressure when increasing volume of ventricles"
          Parts.Pericardium pericardium(
            lambda=30000,
            V0=0.0002,
            P0=66.701190423724)
            annotation (Placement(transformation(extent={{2,-58},{58,30}})));
          Physiolibrary.Types.Constants.PressureConst pressure(k=-533.28954966)
            annotation (Placement(transformation(extent={{-54,20},{-30,36}})));
          Physiolibrary.Types.Constants.VolumeConst volume(k=0)
            annotation (Placement(transformation(extent={{-46,-6},{-26,10}})));
          Physiolibrary.Types.Constants.VolumeConst volume1(k=0) annotation (
              Placement(transformation(extent={{-56,-24},{-34,-10}})));
          Modelica.Blocks.Sources.Clock clock annotation (Placement(
                transformation(extent={{-82,-58},{-62,-38}})));
          Modelica.Blocks.Math.Gain gain(k=1e-6) annotation (Placement(
                transformation(extent={{-44,-60},{-24,-40}})));
        equation
          connect(pressure.y, pericardium.Pth) annotation (Line(
              points={{-27,28},{-9.5,28},{-9.5,25.16},{8.16,25.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume.y, pericardium.Vrvfw) annotation (Line(
              points={{-23.5,2},{-8,2},{-8,-1.24},{8.16,-1.24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume1.y, pericardium.Vsept) annotation (Line(
              points={{-31.25,-17},{-12.625,-17},{-12.625,-13.56},{8.16,-13.56}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(clock.y, gain.u) annotation (Line(
              points={{-61,-48},{-52.5,-48},{-52.5,-50},{-46,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, pericardium.Vlvfw) annotation (Line(
              points={{-23,-50},{-16,-50},{-16,-46},{8.16,-46},{8.16,-27.64}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PericardiumPVRelationship;
      end Test;

      package Variants
        extends Modelica.Icons.VariantsPackage;
        package Parts
          extends Modelica.Icons.UtilitiesPackage;
          model PulmonaryControl
            import Cardiovascular;
            extends Cardiovascular.Model.Smith2004Model.Parts.Pulmonary;
            extends Cardiovascular.ControlInterfaces.PulmonaryControl;
            Modelica.Blocks.Math.Add add
              annotation (Placement(transformation(extent={{72,-42},{92,-22}})));
          equation
            connect(pulmonaryArteries.volume, add.u2) annotation (Line(
                points={{-41.6,-18},{-40,-18},{-40,-38},{70,-38}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(pulmonaryVeins.volume, add.u1) annotation (Line(
                points={{64.8,-18},{66,-18},{66,-26},{70,-26}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
                points={{93,-32},{92,-32},{92,24},{-80,24},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{-25,58},{-25,58}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end PulmonaryControl;

          model SystemicControl
            import Cardiovascular;
            extends Cardiovascular.Model.Smith2004Model.Parts.Systemic(venaCava(
                  useComplianceInput=true), Rsys(useConductanceInput=true));
            extends Cardiovascular.ControlInterfaces.SystemicControl;
            Cardiovascular.Hydraulic.Components.AortaPressureMeasurement
              aortaPressureMeasurement
              annotation (Placement(transformation(extent={{4,10},{24,30}})));
            Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                    extent={{72,-34},{92,-14}})));
          equation
            connect(venaCava.compliance, busConnector.venacavacompliance)
              annotation (Line(
                points={{-56,12.8},{-56,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(Rsys.cond, busConnector.peripheralconductance) annotation (
                Line(
                points={{-6,-9.6},{-4,-9.6},{-4,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{5,1},{5,1}}));
            connect(Rsys.q_in, aortaPressureMeasurement.q_in) annotation (Line(
                points={{10,0},{10,14}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.None));
            connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
              annotation (Line(
                points={{21,23},{26,23},{26,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aorta.volume, add.u1) annotation (Line(
                points={{61.6,-16},{64,-16},{64,-20},{70,-20},{70,-18}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.u2, venaCava.volume) annotation (Line(
                points={{70,-30},{-46.4,-30},{-46.4,-16}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, busConnector.systemicBloodVolume) annotation (Line(
                points={{93,-24},{92,-24},{92,34},{-80,34}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{-25,60},{-25,60}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end SystemicControl;

          model HeartControl
            import Cardiovascular;
            extends Cardiovascular.ControlInterfaces.HeartControl;
            extends Cardiovascular.Model.Smith2004Model.Parts.Heart(redeclare
                Cardiovascular.Types.Constants.FrequencyControl HR,
              redeclare
                Cardiovascular.Model.Smith2004Model.Variants.Parts.VIVolume
                ventricularInteraction(rightVentricle(drive(useEs_extInput=true))),
              aorticValve(useLimitationInputs=true));

          equation
          //  connect(volume, busConnector.heartvolume);
            connect(HR.c, busConnector.heartrate) annotation (Line(
                points={{-48,15},{-54,15},{-54,18},{-66,18},{-66,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularInteraction.busConnector, busConnector) annotation (Line(
                points={{-9.6,27.04},{-9.6,86},{-98,86}},
                color={0,0,255},
                thickness=0.5,
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(ventricularInteraction.volume, busConnector.heartBloodVolume)
              annotation (Line(
                points={{17.4,26.5},{17.4,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}}));
            connect(aorticValve.Goff, busConnector.avbackflowconductance) annotation (
                Line(
                points={{-74,-4},{-76,-4},{-76,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{1,6},{1,6}}));
            connect(aorticValve.Gon, busConnector.avoutflowresistance) annotation (Line(
                points={{-62,-4},{-62,86},{-98,86}},
                color={0,0,127},
                smooth=Smooth.None), Text(
                string="%second",
                index=1,
                extent={{1,3},{1,3}}));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}}), graphics));
          end HeartControl;

          model VIVolume
            import Cardiovascular;
            extends
              Cardiovascular.Model.Smith2004Model.Parts.VentricularInteraction(
                rightVentricle(drive(useEs_extInput=true)), leftVentricle(drive(
                    useEs_extInput=true)));
            Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                  transformation(extent={{34,-44},{54,-24}}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={38,50})));
            Modelica.Blocks.Math.Add add
              annotation (Placement(transformation(extent={{2,-40},{16,-26}})));
            Physiolibrary.Types.BusConnector busConnector annotation (Placement(
                  transformation(extent={{-72,32},{-32,72}}), iconTransformation(extent={{
                      -72,32},{-32,72}})));
          equation
            connect(busConnector.rvcompliance,rightVentricle.drive.Es_ext);
            connect(busConnector.lvcompliance,leftVentricle.drive.Es_ext);
            connect(rightVentricle.volume, add.u2) annotation (Line(
                points={{-9,36},{-10,36},{-10,-37.2},{0.6,-37.2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(leftVentricle.volume, add.u1) annotation (Line(
                points={{-9,-12},{-9,-28.8},{0.6,-28.8}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(add.y, volume) annotation (Line(
                points={{16.7,-33},{26.35,-33},{26.35,-34},{44,-34}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                      {100,100}}), graphics={Text(
                    extent={{46,60},{98,42}},
                    lineColor={0,0,255},
                    textString="volume")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics={
                  Text(
                    extent={{-40,56},{24,52}},
                    lineColor={0,0,255},
                    textString="rvcompliance ->rightVentricle.drive.Es_ext"),
                  Text(
                    extent={{-62,-42},{2,-46}},
                    lineColor={0,0,255},
                    textString="lvcompliance ->leftVentricle.drive.Es_ext"),
                  Line(
                    points={{-60,50},{-60,-40},{-12,-40},{-12,-24}},
                    color={0,0,255},
                    smooth=Smooth.None),
                  Line(
                    points={{-42,52},{-8,52},{-8,48}},
                    color={0,0,255},
                    smooth=Smooth.None)}));
          end VIVolume;

          model Baroreflex
            extends Control.Baroreflex(baroreceptor(
                PAOmedia=12486.574838127,
                HR0Param=1.2,
                EV0right=77993596.637775,
                EV0left=383835153.36779,
                EV0venacava=1.2713543710584e-06,
                RS0=145054757.50752));
          end Baroreflex;
        end Parts;

        model HemodynamicsSmithAorcticStenosis
          import Cardiovascular;
          extends Cardiovascular.Model.Smith2004Model.HemodynamicsSmithControl(
                                           stenosisControl(aorticstenosis(
                  FinalResistance=19198423.78776)));
        end HemodynamicsSmithAorcticStenosis;
      end Variants;

      model HemodynamicsSmith_flatObj

        Hydraulic.Components.ElasticVesselNorm arteries(
          ZeroPressureVolume=0,
          volume_start=0.0001241,
          Elastance=92165766.41999) annotation (Placement(transformation(extent=
                 {{-130,-30},{-110,-10}})));
        Hydraulic.Components.ElasticVesselNorm veins(
          ZeroPressureVolume=0,
          Elastance(displayUnit="Pa/m3") = 786602.0857485,
          volume_start=0.0002952)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
        Hydraulic.Components.IdealValveNorm           aorticValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 2399802.97347)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-10}})));

        Hydraulic.Components.Resistor systemic(Resistance(displayUnit=
                "(mmHg.s)/ml") = 145054757.50752) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-120,6})));
        Hydraulic.Components.IdealValveNorm           tricuspidValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-62,24},{-42,44}})));

        Physiolibrary.Hydraulic.Components.Inertia Lav(
            I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
              displayUnit="m3/s") = -1.4e-8)                           annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-44,-20})));
        Physiolibrary.Hydraulic.Components.Inertia Lpv(volumeFlow_start(
              displayUnit="m3/s") = -1.9e-09, I(displayUnit="Pa.s2/m3")=
            19822.372560862)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        Hydraulic.Components.IdealValveNorm           pulmonaryValve(
                                                                Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{62,24},{82,44}})));

        Hydraulic.Components.ElasticVesselNorm pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=3.904e-05,
          Elastance(displayUnit="Pa/m3") = 49195960.956135)
          annotation (Placement(transformation(extent={{102,24},{122,44}})));
        Hydraulic.Components.Resistor pulmonary(Resistance(displayUnit=
                "(Pa.s)/m3") = 20691634.526808) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={114,4})));
        Hydraulic.Components.ElasticVesselNorm pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=0.0008269,
          Elastance(displayUnit="Pa/m3") = 973253.4281295)
          annotation (Placement(transformation(extent={{104,-30},{124,-10}})));
        Hydraulic.Components.IdealValveNorm           mitralValve(
                                                      Pknee=0,
          R_on(displayUnit="(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{56,-30},{36,-10}})));

        Physiolibrary.Hydraulic.Components.Inertia Ltc(
            I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
              displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-106,24},{-86,44}})));
        Physiolibrary.Hydraulic.Components.Inertia Lmt(
            I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
              displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,-20})));
        Physiolibrary.Types.Constants.FrequencyConst HeartRate(k=1.2)
          annotation (Placement(transformation(extent={{-44,0},{-28,14}})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(extent={{38,12},{50,20}})));
        Parts.VentricularInteractionObj   ventricularInteraction_flat(
          rightVentricle(
            V0=0,
            lambda=23000,
            V_start=0.0001042,
            Pi0=28.757638965416,
            Es(displayUnit="mmHg/ml") = 77993596.637775),
          pericardium(
            V0=0.0002,
            V_start=0,
            Pi0=66.701190423724,
            Es=0,
            lambda=30000),
          septum(
            lambda=435000,
            V0=2e-06,
            V_start=2e-06,
            Pi0(displayUnit="Pa") = 148.00118226939,
            Es(displayUnit="Pa/m3") = 6499999676.0309),
          leftVentricle(
            V0=0,
            V_start=0.0001042,
            Pi0=16.038683206025,
            Es=383941811.27772,
            lambda=33000))
          annotation (Placement(transformation(extent={{-18,-12},{20,28}})));
      equation
        connect(arteries.q_in, systemic.q_in) annotation (Line(
            points={{-120,-20},{-120,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemic.q_out, veins.q_in) annotation (Line(
            points={{-120,16},{-120,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{82,34},{112,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in, pulmonary.q_in) annotation (Line(
            points={{112,34},{114,34},{114,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonary.q_out, pulmonaryVeins.q_in) annotation (Line(
            points={{114,-6},{114,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, arteries.q_in) annotation (Line(
            points={{-82,-20},{-120,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(veins.q_in, Ltc.q_in) annotation (Line(
            points={{-120,34},{-106,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
            points={{114,-20},{88,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_out, aorticValve.q_in) annotation (Line(
            points={{-54,-20},{-62,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
            points={{-86,34},{-62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{52,34},{62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
            points={{56,-20},{68,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(tricuspidValve.q_out, ventricularInteraction_flat.rvflow)
          annotation (Line(
            points={{-42,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_in, ventricularInteraction_flat.rvflow) annotation (Line(
            points={{32,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(ventricularInteraction_flat.lvflow, Lav.q_in) annotation (Line(
            points={{1,-12},{2,-12},{2,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, Lav.q_in) annotation (Line(
            points={{36,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(HeartRate.y, ventricularInteraction_flat.HR) annotation (Line(
            points={{-26,7},{-22,7},{-22,8},{-14.2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, ventricularInteraction_flat.Pth)
          annotation (Line(
            points={{51.5,16},{58,16},{58,8},{16.58,8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryArteries.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{120,42},{120,46},{86,46},{86,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryVeins.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{122,-12},{122,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                  -100},{160,100}}),      graphics), Icon(coordinateSystem(extent={{-160,
                  -100},{160,100}})));
      end HemodynamicsSmith_flatObj;
      annotation (
        conversion(noneFromVersion=""));
    end Smith2004Model;

    package Control "models of control mechanism"
      extends Modelica.Icons.VariantsPackage;
      model StenosisControl
        extends Cardiovascular.ControlInterfaces.StenosisControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{-28,14},{12,54}})));*/
        Stenosis.StenosisElastance venacavastenosis
          annotation (Placement(transformation(extent={{-80,-52},{-28,-2}})));
        Stenosis.StenosisResistance aorticstenosis
          "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{-30,-54},{22,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst AVgon(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={14,-9})));
        Stenosis.StenosisResistance mitralvalvestenosis(InitialResistance(
              displayUnit="(mmHg.s)/ml"), FinalResistance(displayUnit=
                "(mmHg.s)/ml"))
          "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{22,-54},{74,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst mvgoff(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={66,-9})));
      equation
        connect(venacavastenosis.hydrauliccompliance, busConnector.venacavacompliance0)
          annotation (Line(
            points={{-51.92,-21},{-51.92,17.5},{-8,17.5},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(aorticstenosis.conductance, busConnector.avoutflowresistance)
          annotation (Line(
            points={{-1.92,-23},{-1.92,18},{-8,18},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mitralvalvestenosis.conductance, busConnector.mv_gon)
          annotation (Line(
            points={{50.08,-23},{50.08,18},{-8,18},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mvgoff.y, busConnector.mv_goff) annotation (Line(
            points={{53.5,-9},{54,-9},{54,18},{-8,18},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(AVgon.y, busConnector.avbackflowconductance) annotation (Line(
            points={{1.5,-9},{1.5,18},{-8,18},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics={                                                                                                    Rectangle(extent={{
                    -80,50},{64,22}},
                  lineThickness =                                                                                                   1, fillColor = {255, 255, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, pattern = LinePattern.None)}),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics));
      end StenosisControl;

      package Stenosis
          extends Modelica.Icons.UtilitiesPackage;
        model StenosisElastance
          parameter Physiolibrary.Types.HydraulicElastance InitialElastance;
          parameter Physiolibrary.Types.HydraulicElastance FinalElastance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput hydrauliccompliance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          hydrauliccompliance = 1 / (InitialElastance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalElastance - InitialElastance) / duration else FinalElastance - InitialElastance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisElastance;

        model StenosisResistance
          parameter Physiolibrary.Types.HydraulicResistance InitialResistance;
          parameter Physiolibrary.Types.HydraulicResistance FinalResistance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicConductanceOutput conductance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          conductance = 1 / (InitialResistance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalResistance - InitialResistance) / duration else FinalResistance - InitialResistance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisResistance;
      end Stenosis;

      model Baroreflex
        extends Cardiovascular.ControlInterfaces.BaroreflexControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{60,70},{100,110}})));*/
        Baroreceptor baroreceptor(activationDelay(displayUnit="s"))
          annotation (Placement(transformation(extent={{18,-54},{80,18}})));
      equation
        connect(baroreceptor.RS, busConnector.peripheralconductance)
          annotation (Line(
            points={{25.44,-26.64},{-8,-26.64},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evright, busConnector.rvcompliance)
          annotation (Line(
            points={{25.44,-14.4},{-8,-14.4},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evleft, busConnector.lvcompliance) annotation (
           Line(
            points={{24.2,-2.88},{-8,-2.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.HR, busConnector.heartrate) annotation (Line(
            points={{23.89,9},{-8,9},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.PAo, busConnector.aortameanpressure)
          annotation (Line(
            points={{25.44,-47.52},{-8,-47.52},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evenacava, busConnector.venacavacompliance)
          annotation (Line(
            points={{24.82,-38.88},{-8,-38.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics),
                                       Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics));
      end Baroreflex;

      model Baroreceptor
        Modelica.Blocks.Continuous.TransferFunction H1(a = {15, 1}, b = {1});
        Modelica.Blocks.Continuous.TransferFunction H2(a = {15, 1}, b = {0.048});
        Modelica.Blocks.Continuous.TransferFunction H3(a = {15, 1}, b = {0.154});
        // from orign.mo(a={30,1}, b={0.194});
        Modelica.Blocks.Continuous.TransferFunction H4(a = {2, 1}, b = {0.1});
        Modelica.Blocks.Nonlinear.DeadZone deadZone(uMax = 0.1, uMin = -0.1);
        parameter Physiolibrary.Types.Pressure PAOmedia = 13465.561128915;
        parameter Physiolibrary.Types.Frequency HR0Param = 1.3333333333333 annotation(Dialog(enable = not useConductanceInput));
        parameter Boolean useHRInput = false
          "=true, if external HR value is used"                                    annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
        Physiolibrary.Types.RealIO.FrequencyInput cond(start = HR0Param) = HR0 if useHRInput annotation(Placement(transformation(extent = {{-62, 36}, {-22, 76}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {26, 76})));
        Physiolibrary.Types.RealIO.PressureInput PAo "pressure in aorta" annotation(Placement(transformation(extent = {{2, -58}, {42, -18}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 0, origin = {-76, -82})));
        Physiolibrary.Types.RealIO.FrequencyOutput HR
          "heart rate - compatible with Const block"                                             annotation(Placement(transformation(extent = {{-76, 60}, {-56, 80}}), iconTransformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-81, 75})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evright annotation(Placement(transformation(extent = {{80, 22}, {100, 42}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, 10})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evleft annotation(Placement(transformation(extent = {{78, -18}, {98, 2}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-80, 42})));
        Physiolibrary.Types.HydraulicElastance evrightref;
        Physiolibrary.Types.HydraulicElastance evleftref;
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evenacava annotation(Placement(transformation(extent = {{78, -54}, {98, -34}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-78, -58})));
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput RS annotation(Placement(transformation(extent = {{80, -90}, {100, -70}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, -24})));
        parameter Physiolibrary.Types.HydraulicElastance EV0right = 103991462.1837, EV0left = 106657909.932;
        parameter Physiolibrary.Types.HydraulicCompliance EV0venacava = 1.8751539396141e-006;
        parameter Physiolibrary.Types.HydraulicResistance RS0(displayUnit = "(mmHg.s)/ml") = 81793284.67910001;
        parameter Physiolibrary.Types.Time activationDelay = 15;
        //  parameter Physiolibrary.Types.HydraulicConductance Conductance=0
      protected
        Physiolibrary.Types.Frequency HR0;
      //  parameter Physiolibrary.Types.HydraulicCompliance ECV0;
      equation
        if not useHRInput then
          HR0 = HR0Param;
        end if;
        if time > activationDelay then
          deadZone.u = (PAOmedia - PAo) / 133.322387415 / 2;
        else
          deadZone.u = 0;
        end if;
        H1.u = deadZone.y;
        HR = (HR0 * 60 + H1.y) / 60;
        //recount to SI Hz
        H2.u = deadZone.y;
        evright = 1 / (EV0right + H2.y * 1000000.0 * 133.322387415);
        evrightref = 1 / evright;
        //recount to SI
        evleft = 1 / (EV0left + H2.y * 1000000.0 * 133.322387415);
        evleftref = 1 / evleft;
        //recount to SI
        H3.u = deadZone.y;
        evenacava = H3.y * 1e-006 / 133.322387415;
        H4.u = deadZone.y;
        RS = 1 / (RS0 + H4.y * 1000000.0 * 133.322387415);
        //recount to conductance
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent = {{28, 102}, {-68, -110}}, lineColor = {0, 0, 127}, fillColor = {255, 170, 170},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -66,74},{18,58}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {0, 0, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "HR"), Text(extent={{
                    -58,12},{22,-2}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {0, 0, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "EVright"), Text(extent={{
                    -62,44},{26,30}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {0, 0, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "EVleft"), Text(extent={{
                    -80,-60},{34,-72}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {255, 170, 170},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "ECV"), Text(extent={{
                    -62,-20},{16,-34}},                                                                                                    lineColor = {0, 0, 127}, fillColor = {255, 170, 170},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "RPS"), Text(extent={{
                    -60,-84},{-16,-94}},                                                                                                    lineColor = {0, 0, 127}, textString = "PAo"), Text(extent = {{-98, -104}, {116, -120}}, lineColor = {0, 0, 0},
                  lineThickness =                                                                                                   1, fillColor = {255, 128, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end Baroreceptor;

      model BloodVolumeControl
        extends Cardiovascular.ControlInterfaces.BloodVolumeControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-40,2},{0,42}}), iconTransformation(
          extent={{-38,4},{2,44}})));*/
        BloodVolume.Plasma plasma
          annotation (Placement(transformation(extent={{-56,24},{-24,56}})));
        BloodVolume.RedBloodCells redBloodCells
          annotation (Placement(transformation(extent={{-50,-38},{-16,-6}})));
        Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{0,-8},{
                  20,12}})));
        BloodVolume.KidneyPO2Estimate kidneyPO2Estimate
          annotation (Placement(transformation(extent={{4,-48},{24,-28}})));
      equation
        connect(plasma.plasmaVolume, add.u1) annotation (Line(
            points={{-27.2,52.8},{-2,52.8},{-2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(redBloodCells.volume, add.u2) annotation (Line(
            points={{-19.0909,-9.52},{-2,-9.52},{-2,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, busConnector.desiredBloodVolume) annotation (Line(
            points={{21,2},{24,2},{24,12},{20,12}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.bloodVolume, busConnector.bloodVolume)
          annotation (Line(
            points={{-19.0909,-15.6},{20,-15.6},{20,12}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.kidney_po2, busConnector.kidneyPO2)
          annotation (Line(
            points={{-19.0909,-28.4},{20,-28.4},{20,12}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(add3_1.y, plasma.bloodVolume) annotation (Line(
            points={{88.7,33},{88,33},{88,46.72},{-27.2,46.72}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(redBloodCells.hematocrit, kidneyPO2Estimate.hematocrit)
          annotation (Line(
            points={{-18.7818,-35.12},{2,-35.12},{2,-38},{6,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(kidneyPO2Estimate.pressure, busConnector.kidneyPO2)
          annotation (Line(
            points={{23.2,-38},{20,-38},{20,12}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.ecfVolume, plasma.ecfVolume) annotation (Line(
            points={{-43.8182,-9.2},{-43.8182,12},{-52.8,12},{-52.8,20.8}},
            color={0,0,127},
            smooth=Smooth.None));

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics), Icon(
              coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end BloodVolumeControl;

      package BloodVolume
        extends Modelica.Icons.UtilitiesPackage;
        model VolumeRefill
          "injects/removes volume if the pressure on connector is > 0"

          Test.Control1.VolumeControl.DesiredFlowrate desiredFlowrate(flowtime(
                displayUnit="s") = 1)
            annotation (Placement(transformation(extent={{-22,2},{-2,22}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent={{74,-42},
                    {94,-22}}),                                                                                                    iconTransformation(extent = {{82, -100}, {102, -80}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeRefill(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-32,-26},
                    {-12,-6}})));
          Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-36, 24}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-20, 80})));
          Physiolibrary.Types.RealIO.VolumeInput currentVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 180, origin={12,28}),    iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {20, 80})));
          Modelica.Blocks.Logical.Switch switch1
            annotation (Placement(transformation(extent={{14,-4},{0,10}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst zeroRefill(k(
                displayUnit="l/min") = 0) annotation (Placement(
                transformation(
                extent={{-8,-6},{8,6}},
                rotation=180,
                origin={44,-20})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{74,-16},{54,4}})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=
               0)
            annotation (Placement(transformation(extent={{52,-4},{36,12}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08) annotation (
             Placement(transformation(extent={{50,-42},{70,-22}})));
        equation
        /*  if desiredFlowrate.volumeflowrate < 0 then
    volumeRefill.solutionFlow = -max(0, min(-desiredFlowrate.volumeflowrate, -maxflowrate));
  else
    volumeRefill.solutionFlow = desiredFlowrate.volumeflowrate;
  end if;*/
          connect(desiredFlowrate.desiredVolume, desiredVolume) annotation(Line(points={{-18.8,
                  19.2},{-18.8,24},{-36,24}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(desiredFlowrate.volume, currentVolume) annotation(Line(points={{-10.6,
                  19.2},{-3.3,19.2},{-3.3,28},{12,28}},                                                                                color = {0, 0, 127}, smooth = Smooth.None));
          connect(switch1.y, volumeRefill.solutionFlow) annotation (Line(
              points={{-0.7,3},{-22,3},{-22,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(desiredFlowrate.volumeflowrate, switch1.u1) annotation (Line(
              points={{-2.1,14.5},{15.4,14.5},{15.4,8.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(zeroRefill.y, switch1.u3) annotation (Line(
              points={{34,-20},{28,-20},{28,-2.6},{15.4,-2.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, greaterThreshold.u) annotation (Line(
              points={{58,-10},{58,4},{53.6,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterThreshold.y, switch1.u2) annotation (Line(
              points={{35.2,4},{26,4},{26,3},{15.4,3}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(port_b, conductor.q_out) annotation (Line(
              points={{84,-32},{70,-32}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_out, pressureMeasure.q_in) annotation (Line(
              points={{70,-32},{70,-12},{68,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(volumeRefill.q_out, conductor.q_in) annotation (Line(
              points={{-12,-16},{22,-16},{22,-32},{50,-32}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-28, 36}, {34, -30}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}, radius = 4), Rectangle(extent = {{-24, -28}, {-20, -62}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}), Rectangle(extent = {{30, -26}, {34, -62}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}), Polygon(points = {{6, -30}, {6, -38}, {8, -40}, {12, -46}, {10, -48}, {12, -52}, {14, -54}, {16, -56}, {14, -58}, {12, -62}, {14, -64}, {18, -66}, {20, -68}, {22, -74}, {24, -76}, {28, -80}, {34, -82}, {40, -86}, {48, -90}, {54, -92}, {60, -94}, {64, -94}, {80, -96}, {88, -96}, {88, -96}, {86, -94}, {80, -92}, {74, -92}, {64, -90}, {62, -90}, {56, -86}, {46, -84}, {40, -80}, {36, -78}, {30, -76}, {26, -70}, {24, -68}, {22, -64}, {18, -60}, {22, -54}, {16, -50}, {16, -46}, {18, -44}, {12, -38}, {10, -34}, {10, -30}, {6, -30}}, lineColor = {127, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, smooth = Smooth.None, fillColor = {190, 0, 0}), Rectangle(extent = {{-28, 62}, {34, 56}}, lineColor = {0, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid, fillColor = {170, 255, 255}), Rectangle(extent = {{-28, 56}, {34, 32}}, lineColor = {0, 0, 0}, fillColor = {170, 255, 255},
                    fillPattern =                                                                                                   FillPattern.Sphere, radius = 2,
                    lineThickness =                                                                                                   1)}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end VolumeRefill;

        model KidneyPO2Estimate

          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{82,-10},
                    {102,10}})));
        parameter Real MaxPo2 = 60;
          Physiolibrary.Types.RealIO.FractionInput hematocrit annotation (
              Placement(transformation(extent={{-100,-20},{-60,20}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          Physiolibrary.Blocks.Factors.Spline spline(data=[0,0,0; 0.5,35,1; 1,
                60,0], Yscale=101325/760)
            annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
          Physiolibrary.Types.Constants.OneConst one
            annotation (Placement(transformation(extent={{-26,8},{-18,16}})));
        equation
          connect(hematocrit, spline.u) annotation (Line(
              points={{-80,0},{-12,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(spline.y, pressure) annotation (Line(
              points={{-4,-4},{-4,-6},{72,-6},{72,0},{92,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(one.y, spline.yBase) annotation (Line(
              points={{-17,12},{-4,12},{-4,2}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-80,80},{82,-60}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,255,167}),                                   Text(
                  extent={{-184,-58},{214,-94}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end KidneyPO2Estimate;

        model Plasma

          Physiolibrary.Types.RealIO.VolumeOutput plasmaVolume annotation(Placement(transformation(extent={{-9,-9},
                    {9,9}},                                                                                                    rotation = 0, origin={79,-79}),    iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 180, origin = {80, 80})));
          Physiolibrary.Types.RealIO.VolumeInput bloodVolume annotation(Placement(transformation(extent = {{-16, -16}, {16, 16}}, rotation = 0, origin={-50,-74}),    iconTransformation(extent = {{100, 22}, {60, 62}})));
          Physiolibrary.Osmotic.Sources.SolventInflux transfusion(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-50,38},
                    {-30,58}})));
          Physiolibrary.Osmotic.Sources.SolventOutflux hemorrhage(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 180, origin={-38,18})));
          Physiolibrary.Osmotic.Sources.SolventInflux IVDrip(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-50,26},
                    {-30,46}})));
          Osmotic.Components.OsmoticContainer plasma(useImpermeableSolutesInput = true) annotation(Placement(transformation(extent = {{-26, -76}, {0, -46}})));
          Physiolibrary.Types.Constants.FractionConst initialHematocrit(k = 0.4) annotation(Placement(transformation(extent={{-4,-4},
                    {4,4}},
                rotation=180,
                origin={-44,-34})));
          Modelica.Blocks.Math.Product PlasmaInitialVolume annotation(Placement(transformation(extent={{-6,-6},
                    {6,6}},
                rotation=0,
                origin={-42,-48})));
          Modelica.Blocks.Math.Add add(k1=-1)   annotation(Placement(transformation(extent={{-4,-4},
                    {4,4}},
                rotation=180,
                origin={-48,-18})));
          Modelica.Blocks.Sources.Constant const(k = 1) annotation(Placement(transformation(extent={{-4,-4},
                    {4,4}},
                rotation=0,
                origin={-48,-6})));
          Physiolibrary.Osmotic.Sources.SolventInflux FoodAndDrink(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 2.4101851851852e-08) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 180, origin={8,48})));
          Physiolibrary.Osmotic.Sources.SolventInflux Metabolism(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 3.4722222222222e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={12,36})));
          Physiolibrary.Osmotic.Sources.SolventOutflux SkinAndLungsLoss(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.0416666666667e-08) annotation(Placement(transformation(extent={{-11,-11},
                    {11,11}},                                                                                                    rotation = 0, origin={9,13})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Urine(SolutionFlow(displayUnit = "ml/day") = 1.7361111111111e-08, useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {40, -4})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Feces(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.1574074074074e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {8, -14})));
          Physiolibrary.Osmotic.Components.Membrane capillaryMembrane(cond = 5.5004515562015e-11, HydraulicPressureIn = 2339.8078991333, HydraulicPressureOut = -579.95238525525) annotation(Placement(transformation(extent = {{0, -68}, {20, -48}})));
          Physiolibrary.Osmotic.Components.OsmoticCell interstitialFluid(
              volume_start=0.011, ImpermeableSolutes={0.0022})                                                                annotation(Placement(transformation(extent={{26,-68},
                    {46,-48}})));
          Physiolibrary.Types.RealIO.VolumeOutput ecfVolume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={74,-68}),    iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-80, -120})));
          Modelica.Blocks.Math.Add add1(k2 = -1) annotation(Placement(transformation(extent={{50,-74},
                    {60,-64}})));
          KidneyFluidBalance kidneyFluidBalance
            annotation (Placement(transformation(extent={{10,0},{68,52}})));
          Physiolibrary.Osmotic.Components.SolventFlux lymphatic(SolutionFlow = 1.3333333333333e-08) annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin={13,-31})));
          Modelica.Blocks.Math.Product plasmaInitialOsmolarity annotation(Placement(transformation(extent={{-34,-26},
                    {-24,-16}})));
          Physiolibrary.Types.Constants.OsmolarityConst initialOsmolarity(k = 1.2) annotation(Placement(transformation(extent={{-5,-4},
                    {5,4}},
                rotation=180,
                origin={-33,6})));
        equation
          connect(IVDrip.q_out, plasma.q_in) annotation(Line(points={{-34,36},{-13,
                  36},{-13,-57.7}},                                                                         color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(transfusion.q_out, plasma.q_in) annotation(Line(points={{-34,48},
                  {-13,48},{-13,-57.7}},                                                                         color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(hemorrhage.q_in, plasma.q_in) annotation(Line(points={{-32,18},{
                  -13,18},{-13,-57.7}},                                                                        color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(PlasmaInitialVolume.y, plasma.volume1) annotation(Line(points={{-35.4,
                  -48},{-32,-48},{-32,-58},{-23.4,-58}},                                                      color = {0, 0, 127}, smooth = Smooth.None));
          connect(FoodAndDrink.q_out, plasma.q_in) annotation(Line(points={{2,48},{
                  -13,48},{-13,-57.7}},                                                                         color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(Metabolism.q_out, plasma.q_in) annotation(Line(points={{6,36},{
                  -13,36},{-13,-57.7}},                                                                       color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(Feces.q_in, plasma.q_in) annotation(Line(points = {{2, -14}, {-13, -14}, {-13, -57.7}}, color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(Urine.q_in, plasma.q_in) annotation(Line(points = {{34, -4}, {-13, -4}, {-13, -57.7}}, color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(SkinAndLungsLoss.q_in, plasma.q_in) annotation(Line(points={{2.4,13},
                  {-13,13},{-13,-57.7}},                                                                           color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(plasma.q_in, capillaryMembrane.q_in) annotation(Line(points = {{-13, -57.7}, {-6.5, -57.7}, {-6.5, -58}, {0, -58}}, color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(capillaryMembrane.q_out, interstitialFluid.q_in[1]) annotation(Line(points={{20,-58},
                  {36,-58}},                                                                                           color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(plasma.volume, add1.u2) annotation(Line(points={{-12.74,-79.6},{
                  20,-79.6},{20,-72},{49,-72}},                                                                          color = {0, 0, 127}, smooth = Smooth.None));
          connect(plasmaVolume, plasmaVolume) annotation(Line(points={{79,-79},
                  {79,-79}},                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(interstitialFluid.volume, add1.u1) annotation(Line(points={{42,-68},
                  {46,-68},{46,-66},{49,-66}},                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(interstitialFluid.q_in[1], lymphatic.q_in) annotation(Line(points={{36,-58},
                  {36,-42},{42,-42},{42,-32},{34,-32},{34,-31},{20,-31}},                                                color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(plasma.q_in, lymphatic.q_out) annotation(Line(points={{-13,
                  -57.7},{-13,-31},{6,-31}},                                                                    color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(PlasmaInitialVolume.y, plasmaInitialOsmolarity.u2) annotation(Line(points={{-35.4,
                  -48},{-35.4,-24},{-35,-24}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(initialOsmolarity.y, plasmaInitialOsmolarity.u1) annotation(Line(points={{-39.25,
                  6},{-40,6},{-40,-18},{-35,-18}},                                                                                       color = {0, 0, 127}, smooth = Smooth.None));
          connect(plasmaInitialOsmolarity.y, plasma.impermeableSolutes) annotation (
             Line(
              points={{-23.5,-21},{-23.4,-21},{-23.4,-52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(bloodVolume, PlasmaInitialVolume.u2) annotation (Line(
              points={{-50,-74},{-50,-51.6},{-49.2,-51.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, PlasmaInitialVolume.u1) annotation (Line(
              points={{-52.4,-18},{-54,-18},{-54,-44.4},{-49.2,-44.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u1, initialHematocrit.y) annotation (Line(
              points={{-43.2,-20.4},{-40,-20.4},{-40,-26},{-52,-26},{-52,-34},{-49,
                  -34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, add.u2) annotation (Line(
              points={{-43.6,-6},{-42,-6},{-42,-15.6},{-43.2,-15.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, ecfVolume) annotation (Line(
              points={{60.5,-69},{72.25,-69},{72.25,-68},{74,-68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(plasma.volume, plasmaVolume) annotation (Line(
              points={{-12.74,-79.6},{29.63,-79.6},{29.63,-79},{79,-79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(kidneyFluidBalance.urineoutflowrate, Urine.solutionFlow)
            annotation (Line(
              points={{53.5,7.8},{53.5,3},{40,3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(plasma.volume, kidneyFluidBalance.plasmaticVolume)
            annotation (Line(
              points={{-12.74,-79.6},{-12.74,-80},{80,-80},{80,22},{66,22},{66,
                  24.18},{52.63,24.18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-72, 72}, {80, -78}}, fileName = "modelica://Cardiovascular/Resources/Icons/plazma.png"), Text(extent = {{-100, -62}, {96, -98}}, lineColor = {0, 0, 255}, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={  Text(extent = {{-42, -50}, {-24, -54}}, lineColor = {0, 0, 255}, textString = "volume_start")}));
        end Plasma;

        model RedBloodCells

          Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,-78}),    iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 180, origin = {80, 78})));
          Physiolibrary.Types.RealIO.VolumeInput bloodVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 0, origin = {-81, -85}), iconTransformation(extent = {{100, 20}, {60, 60}})));
          Hydraulic.Components.VolumeContainer RBCVolume annotation(Placement(transformation(extent={{-14,-58},
                    {6,-38}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump transfusion(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, 22}, {-38, 42}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump hemorrhage(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{36, 12}, {56, 32}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump RBCProduction(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, -38}, {-38, -18}})));
          Hydraulic.Components.Degradation RBCDegradation(t12(displayUnit = "d") = 10368000) annotation(Placement(transformation(extent = {{34, -38}, {54, -18}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst RBCBaseSecretionRate(k=
                2.3148333333333e-10)                                                                      annotation(Placement(transformation(extent = {{-92, -2}, {-70, 14}})));
          Physiolibrary.Types.Constants.FractionConst initialHematocrit(k = 0.4) annotation(Placement(transformation(extent={{-92,-66},
                    {-74,-48}})));
          Modelica.Blocks.Math.Product RBCInitialVolume annotation(Placement(transformation(extent = {{-52, -88}, {-32, -68}})));
          replaceable Physiolibrary.Types.Constants.VolumeFlowRateConst
                                                            RBCTransfusionRate(k = 0) annotation(Placement(transformation(extent={{-94,32},
                    {-72,50}})));
          replaceable Physiolibrary.Types.Constants.VolumeFlowRateConst
                                                            RBCHemorrhageRate(k = 0) annotation(Placement(transformation(extent={{8,32},{
                    30,50}})));
          Erythropoetin erythropoetin annotation (Placement(transformation(
                extent={{-11,-10},{11,10}},
                rotation=0,
                origin={-79,-18})));
          Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-112, -54}, {-84, -26}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {80, -40})));
          Physiolibrary.Types.RealIO.VolumeInput ecfVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-65, -35}), iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-80, 80})));
          Physiolibrary.Blocks.Factors.SplineLag spline(data = {{0.0, 0.0, 0}, {1300, 1.0, 1.0}, {4000, 4.0, 0}},
              HalfTime=259200)                                                                                                     annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-46, 6})));
          Physiolibrary.Blocks.Math.Log10AsEffect logEffect annotation(Placement(transformation(extent = {{-62, -18}, {-50, -6}})));
          Modelica.Blocks.Math.Division division
            annotation (Placement(transformation(extent={{0,-100},{20,-80}})));
          Physiolibrary.Types.RealIO.FractionOutput hematocrit annotation (
              Placement(transformation(extent={{58,-104},{78,-84}}),
                iconTransformation(extent={{66,-98},{98,-66}})));
        initial algorithm

        equation
          connect(RBCProduction.q_out, RBCVolume.q_in) annotation(Line(points={{-38,-28},
                  {-4,-28},{-4,-48}},                                                                               color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RBCDegradation.q_in, RBCVolume.q_in) annotation(Line(points={{34,-28},
                  {-4,-28},{-4,-48}},                                                                              color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(hemorrhage.q_in, transfusion.q_out) annotation(Line(points = {{36, 22}, {-2, 22}, {-2, 32}, {-38, 32}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(transfusion.q_out, RBCVolume.q_in) annotation(Line(points={{-38,32},
                  {-4,32},{-4,-48}},                                                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(bloodVolume, RBCInitialVolume.u2) annotation(Line(points = {{-81, -85}, {-69, -85}, {-69, -84}, {-54, -84}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(initialHematocrit.y, RBCInitialVolume.u1) annotation(Line(points={{-71.75,
                  -57},{-64,-57},{-64,-72},{-54,-72}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCTransfusionRate.y, transfusion.solutionFlow) annotation(Line(points={{-69.25,
                  41},{-48,41},{-48,39}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCHemorrhageRate.y, hemorrhage.solutionFlow) annotation(Line(points={{32.75,
                  41},{46,41},{46,29}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCInitialVolume.y, RBCVolume.volume1) annotation(Line(points={{-31,-78},
                  {-20,-78},{-20,-40},{-12,-40}},                                                                                   color = {0, 0, 127}, smooth = Smooth.None));
          connect(erythropoetin.kidney_po2, kidney_po2) annotation(Line(points={{
                  -86.6154,-26},{-86.6154,-33},{-98,-33},{-98,-40}},                                                                         color = {0, 0, 127}, smooth = Smooth.None));
          connect(ecfVolume, erythropoetin.ecf_volume) annotation(Line(points={{-65,-35},
                  {-81.5385,-35},{-81.5385,-26}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCVolume.volume, RBCDegradation.V0) annotation(Line(points={{-4,-58},
                  {66,-58},{66,-14},{44,-14},{44,-21}},                                                                                  color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCBaseSecretionRate.y, spline.yBase) annotation(Line(points = {{-67.25, 6}, {-48, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(erythropoetin.concentration, logEffect.u) annotation(Line(points = {{-71.3, -17.7}, {-68, -17.7}, {-68, -12}, {-63.2, -12}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(logEffect.y, spline.u) annotation(Line(points = {{-49.4, -12}, {-46, -12}, {-46, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(RBCProduction.solutionFlow, spline.y) annotation(Line(points={{-48,-21},
                  {-48,-20},{-34,-20},{-34,6},{-42,6}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
          connect(hematocrit, division.y) annotation (Line(
              points={{68,-94},{48,-94},{48,-90},{21,-90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(division.u1, RBCVolume.volume) annotation (Line(
              points={{-2,-84},{-2,-58},{-4,-58}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(division.u2, RBCInitialVolume.u2) annotation (Line(
              points={{-2,-96},{-64,-96},{-64,-84},{-54,-84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume, RBCDegradation.V0) annotation (Line(
              points={{68,-78},{56,-78},{56,-68},{66,-68},{66,-14},{44,-14},{44,-21}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                        graphics={  Bitmap(extent = {{-78, 102}, {80, -56}}, fileName = "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"), Text(extent={{
                      -162,-36},{66,-66}},                                                                                                    lineColor = {0, 0, 255}, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                                                    graphics));
        end RedBloodCells;

        model Erythropoetin

          Physiolibrary.Chemical.Components.Substance erythropoetin(useNormalizedVolume = false, solute_start(displayUnit = "U_EPO") = 0.000114888) annotation(Placement(transformation(extent = {{-30, 6}, {2, 40}})));
          Physiolibrary.Chemical.Sources.UnlimitedSolutePump secretion(useSoluteFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {144, 62})));
          Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure annotation(Placement(transformation(extent={{-21,-21},
                    {21,21}},
                rotation=90,
                origin={-15,81})));
          Physiolibrary.Types.RealIO.ConcentrationOutput concentration annotation(Placement(transformation(extent={{42,72},
                    {62,92}}),                                                                                                   iconTransformation(extent = {{-21, -21}, {21, 21}}, rotation = 0, origin = {121, 3})));
          Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {138, -2}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-60, -80})));
          Physiolibrary.Blocks.Factors.Spline PO2Effect(data = {{0.0, 4.0, 0}, {35.0, 0.0, -0.14}, {60.0, -1.0, 0}}, Xscale = 101325 / 760) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {102, -2})));
          Physiolibrary.Blocks.Math.Power pow annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {98, 16})));
          Physiolibrary.Blocks.Factors.Normalization CounEffect annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 90, origin={58,46})));
          Physiolibrary.Blocks.Factors.Normalization FunctionEffect annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {78, 46})));
          Physiolibrary.Blocks.Factors.Normalization PO2Effect1 annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {98, 46})));
          Physiolibrary.Types.Constants.FractionConst Kidney_Nefron_Count_TotalxNormal(k = 1) annotation(Placement(transformation(extent={{26,16},
                    {42,26}})));
          Physiolibrary.Types.Constants.FractionConst KidneyFunctionEffect(k = 1) annotation(Placement(transformation(extent={{60,10},
                    {76,20}})));
          Physiolibrary.Types.RealIO.VolumeInput ecf_volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 0, origin = {-58, 70}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {0, -80})));
          Modelica.Blocks.Math.Gain VODIST(k = 0.4) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-58, 46})));
          Physiolibrary.Types.Constants.FractionConst hormoneFlowFraction(k = 1) annotation(Placement(transformation(extent={{72,-28},
                    {88,-20}})));
          Physiolibrary.Types.Constants.MolarFlowRateConst molarFlowRate(k(displayUnit = "mol/min") = 0.011166666666667) annotation(Placement(transformation(extent = {{30, 40}, {44, 50}})));
          Physiolibrary.Chemical.Components.Degradation degradation(HalfTime(displayUnit = "h") = 18000, useNormalizedVolume = false) annotation(Placement(transformation(extent = {{-13, 13}, {13, -13}}, rotation = 180, origin = {-55, 23})));
        equation
          connect(secretion.q_out, erythropoetin.q_out) annotation(Line(points = {{134, 62}, {8, 62}, {8, 23}, {-14, 23}}, color = {107, 45, 134}, thickness = 1, smooth = Smooth.None));
          connect(pow.y, PO2Effect1.u) annotation(Line(points = {{98, 22.6}, {98, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CounEffect.y, FunctionEffect.yBase) annotation(Line(points = {{62, 46}, {76, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(FunctionEffect.y, PO2Effect1.yBase) annotation(Line(points = {{82, 46}, {96, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Kidney_Nefron_Count_TotalxNormal.y, CounEffect.u) annotation(Line(points={{44,21},
                  {58,21},{58,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(KidneyFunctionEffect.y, FunctionEffect.u) annotation(Line(points={{78,15},
                  {78,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.y, pow.exponent) annotation(Line(points = {{102, 2}, {102, 10}, {101.6, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(kidney_po2, PO2Effect.u) annotation(Line(points = {{138, -2}, {110, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.yBase, hormoneFlowFraction.y) annotation(Line(points={{102,-4},
                  {102,-24},{90,-24}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
          connect(molarFlowRate.y, CounEffect.yBase) annotation(Line(points = {{45.75, 45}, {50.875, 45}, {50.875, 46}, {56, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(erythropoetin.solutionVolume, VODIST.y) annotation(Line(points = {{-20.4, 29.8}, {-20.4, 46}, {-51.4, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect1.y, secretion.soluteFlow) annotation(Line(points = {{102, 46}, {140, 46}, {140, 58}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(degradation.q_in, erythropoetin.q_out) annotation(Line(points = {{-42, 23}, {-14, 23}}, color = {107, 45, 134}, thickness = 1, smooth = Smooth.None));
          connect(degradation.solutionVolume, VODIST.y) annotation(Line(points = {{-49.8, 28.2}, {-49.8, 46}, {-51.4, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ecf_volume, VODIST.u) annotation(Line(points = {{-58, 70}, {-68, 70}, {-68, 46}, {-65.2, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(concentrationMeasure.concentration, concentration) annotation (
              Line(
              points={{1.8,81},{4,81},{4,82},{52,82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.q_out, concentrationMeasure.q_in) annotation (Line(
              points={{-14,23},{-14,81},{-15,81}},
              color={107,45,134},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                        graphics={  Text(extent = {{-180, 98}, {200, 60}}, lineColor = {0, 0, 255}, textString = "%name"), Bitmap(
                    extent={{-88,62},{102,-80}}, fileName=
                      "modelica://Cardiovascular/Resources/Icons/320px-Erythropoietin.png")}),                                                            Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                                                    graphics));
        end Erythropoetin;

        model KidneyFluidBalance

          Physiolibrary.Types.RealIO.VolumeFlowRateOutput urineoutflowrate annotation(Placement(transformation(extent = {{40, -80}, {60, -60}}), iconTransformation(extent = {{40, -80}, {60, -60}})));
          Physiolibrary.Types.RealIO.VolumeInput plasmaticVolume annotation(Placement(transformation(extent = {{46, -12}, {86, 28}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 180, origin = {47, -7})));
          parameter Physiolibrary.Types.VolumeFlowRate Kud = 0.000000046; //dehydratation
          parameter Physiolibrary.Types.VolumeFlowRate Kuo = 0.00000034; //overhydratation
          parameter Physiolibrary.Types.VolumeFlowRate Jun = 0.000000016;
          discrete Physiolibrary.Types.Volume Vpn;
        equation
          when {initial()} then
              Vpn = plasmaticVolume;
          end when;
          if plasmaticVolume < Vpn then
            urineoutflowrate = Kud * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          else
            urineoutflowrate = Kuo * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-82, 82}, {80, -80}}, fileName = "modelica://Cardiovascular/Resources/Icons/kidney.png")}));
        end KidneyFluidBalance;

        model RedBloodCells2

          Erythropoetin erythropoetin annotation (Placement(transformation(
                extent={{-11,-10},{11,10}},
                rotation=0,
                origin={-77,-4})));
          Physiolibrary.Population.Components.Population RBC
            annotation (Placement(transformation(extent={{-18,-26},{2,-6}})));
          Physiolibrary.Population.Sources.Growth erythropoiesis(useChangeInput=
               true) annotation (Placement(transformation(extent={{-46,-30},{
                    -26,-10}})));
          Physiolibrary.Population.Sources.Growth transfusion
            annotation (Placement(transformation(extent={{-38,14},{-18,34}})));
          Physiolibrary.Population.Components.Mortality degradation(LifeTime(
                displayUnit="d") = 10368000)
            annotation (Placement(transformation(extent={{6,-30},{26,-10}})));
          Physiolibrary.Population.Sources.Loss hemorrhage
            annotation (Placement(transformation(extent={{6,16},{26,36}})));
        Physiolibrary.Types.Constants.PopulationChangeConst RBCBaseSecretionRate(
            k=1.16e6) "13.7 ml/day (12e12 cells == 2.4 L)"
          annotation (Placement(transformation(extent={{-54,4},{-38,16}})));
          Physiolibrary.Blocks.Factors.SplineLag      EPOEffect(
            HalfTime=3*86400*Modelica.Math.log(2),
            data={{0.0,0.0,0},{1.3,1.0,1.0},{4.0,4.0,0}},
            stateName="[EPO]Delay.Effect",
          UsePositiveLog10=true,
          Xscale=1e3) "20 miu/ml = 20e3 iu/m3"
            annotation (Placement(transformation(extent={{-46,-14},{-26,6}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-118,10},{-78,50}})));
          Modelica.Blocks.Math.Gain RBCVol(k=2.4e-3/12e12)
            "12e12 cells == 2.4 L"
          annotation (Placement(transformation(
              extent={{5,-5},{-5,5}},
              rotation=0,
              origin={-35,-41})));
          Modelica.Blocks.Math.Gain InitialPopulation(k=12e12/2.4e-3)
            "12e12 cells == 2.4 L" annotation (Placement(transformation(
                extent={{5,-5},{-5,5}},
                rotation=90,
                origin={-7,7})));
        initial algorithm

        equation
          connect(erythropoiesis.port_b, RBC.port) annotation (Line(
              points={{-26,-20},{-16,-20},{-16,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(transfusion.port_b, RBC.port) annotation (Line(
              points={{-18,24},{-18,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(degradation.port_a, RBC.port) annotation (Line(
              points={{6.2,-20},{4,-20},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.port_a, RBC.port) annotation (Line(
              points={{6,26},{4,26},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(erythropoiesis.populationChange, EPOEffect.y) annotation (
              Line(
              points={{-36,-16},{-36,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCBaseSecretionRate.y, EPOEffect.yBase) annotation (Line(
              points={{-36,10},{-36,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(EPOEffect.u, erythropoetin.concentration) annotation (Line(
              points={{-44,-4},{-64,-4},{-64,-3.7},{-69.3,-3.7}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.kidney_po2, busConnector.Kidney_PO2)
            annotation (Line(
              points={{-84.6154,-12},{-96,-12},{-96,-20},{-98,-20},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-9,-3},{-9,-3}}));
          connect(erythropoetin.ecf_volume, busConnector.ecfvolume) annotation (
             Line(
              points={{-79.5385,-12},{-79.5385,-24},{-98,-24},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{2,-6},{2,-6}}));
          connect(RBC.population, RBCVol.u) annotation (Line(
              points={{-2,-26},{-2,-41},{-29,-41}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCVol.y, busConnector.RBCVolume) annotation (Line(
              points={{-40.5,-41},{-98,-41},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialPopulation.u, busConnector.initialrbcvolume)
            annotation (Line(
              points={{-7,13},{-7,30},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                        graphics={  Bitmap(extent = {{-78, 102}, {80, -56}}, fileName = "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"), Text(extent={{
                      -162,-36},{66,-66}},                                                                                                    lineColor = {0, 0, 255}, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                                                    graphics));
        end RedBloodCells2;

        model RedBloodCells3
        end RedBloodCells3;

        model Plasma2

          Physiolibrary.Osmotic.Sources.SolventInflux transfusion(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-58,-38},
                    {-38,-18}})));
          Physiolibrary.Osmotic.Sources.SolventOutflux hemorrhage(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 180, origin={-48,-54})));
          Physiolibrary.Osmotic.Sources.SolventInflux IVDrip(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-58,-50},
                    {-38,-30}})));
          Physiolibrary.Osmotic.Sources.SolventInflux FoodAndDrink(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 2.4101851851852e-08) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation=0,     origin={-48,0})));
          Physiolibrary.Osmotic.Sources.SolventInflux Metabolism(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 3.4722222222222e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={-48,-12})));
          Physiolibrary.Osmotic.Sources.SolventOutflux SkinAndLungsLoss(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.0416666666667e-08) annotation(Placement(transformation(extent={{-11,-11},
                    {11,11}},                                                                                                    rotation = 0, origin={3,-3})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Urine(SolutionFlow(displayUnit = "ml/day") = 1.7361111111111e-08, useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-2,-30})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Feces(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.1574074074074e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={2,-14})));
          Physiolibrary.Osmotic.Components.Membrane capillaryMembrane(
            cond=5.5004515562015e-11,
            HydraulicPressureIn=2339.8078991333,
            HydraulicPressureOut=-579.95238525525)                                                                                                     annotation(Placement(transformation(extent = {{0, -68}, {20, -48}})));
          Physiolibrary.Osmotic.Components.OsmoticCell interstitialFluid(
              volume_start=0.011, ImpermeableSolutes={0.0022})                                                                annotation(Placement(transformation(extent = {{26, -68}, {46, -48}})));
          Modelica.Blocks.Math.Add add1          annotation(Placement(transformation(extent={{46,-76},
                    {56,-66}})));
          KidneyFluidBalance kidneyFluidBalance
            annotation (Placement(transformation(extent={{8,-30},{66,22}})));
          Physiolibrary.Osmotic.Components.SolventFlux lymphatic(SolutionFlow=
                1.3333333333333e-08)                                                                 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin={11,-39})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{54,-18},{94,22}})));
          Physiolibrary.Osmotic.Components.OsmoticCell
                                                plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit,
              ImpermeableSolutes={0.0022})
            annotation (Placement(transformation(extent={{-26,-68},{-6,-48}})));
        equation
          connect(capillaryMembrane.q_out, interstitialFluid.q_in[1]) annotation(Line(points = {{20, -58}, {36, -58}}, color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(interstitialFluid.volume, add1.u1) annotation(Line(points={{42,-68},
                  {45,-68}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(interstitialFluid.q_in[1], lymphatic.q_in) annotation(Line(points={{36,-58},
                  {36,-38},{34,-38},{34,-39},{18,-39}},                                                                  color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(kidneyFluidBalance.urineoutflowrate, Urine.solutionFlow)
            annotation (Line(
              points={{51.5,-22.2},{51.5,-23},{-2,-23}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(plasma.q_in[1], capillaryMembrane.q_in) annotation (Line(
              points={{-16,-58},{0,-58}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(plasma.q_in[1], transfusion.q_out) annotation (Line(
              points={{-16,-58},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(lymphatic.q_out, transfusion.q_out) annotation (Line(
              points={{4,-39},{-16,-39},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IVDrip.q_out, transfusion.q_out) annotation (Line(
              points={{-42,-40},{-30,-40},{-30,-38},{-16,-38},{-16,-28},{-42,
                  -28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.q_in, transfusion.q_out) annotation (Line(
              points={{-42,-54},{-16,-54},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Metabolism.q_out, transfusion.q_out) annotation (Line(
              points={{-42,-12},{-16,-12},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(FoodAndDrink.q_out, transfusion.q_out) annotation (Line(
              points={{-42,0},{-16,0},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SkinAndLungsLoss.q_in, transfusion.q_out) annotation (Line(
              points={{-3.6,-3},{-16,-3},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Feces.q_in, transfusion.q_out) annotation (Line(
              points={{-4,-14},{-16,-14},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Urine.q_in, transfusion.q_out) annotation (Line(
              points={{-8,-30},{-16,-30},{-16,-28},{-42,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(kidneyFluidBalance.plasmaticVolume, busConnector.plasmaVolume)
            annotation (Line(
              points={{50.63,-5.82},{62.315,-5.82},{62.315,2},{74,2}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(plasma.volume, busConnector.plasmaVolume) annotation (Line(
              points={{-10,-68},{-10,-78},{74,-78},{74,2}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(add1.u2, plasma.volume) annotation (Line(
              points={{45,-74},{-10,-74},{-10,-68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, busConnector.ecfvolume) annotation (Line(
              points={{56.5,-71},{56.5,-70},{56,-70},{60,-70},{74,-70},{74,2}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));

          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-72, 72}, {80, -78}}, fileName = "modelica://Cardiovascular/Resources/Icons/plazma.png"), Text(extent = {{-100, -62}, {96, -98}}, lineColor = {0, 0, 255}, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end Plasma2;

        model VolumeRefill2
          "injects/removes volume if the pressure on connector is > 0"

          Test.Control1.VolumeControl.DesiredFlowrate desiredFlowrate(flowtime(
                displayUnit="s") = 1)
            annotation (Placement(transformation(extent={{-22,2},{-2,22}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent={{74,-42},
                    {94,-22}}),                                                                                                    iconTransformation(extent = {{82, -100}, {102, -80}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeRefill(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-32,-26},
                    {-12,-6}})));
          Modelica.Blocks.Logical.Switch switch1
            annotation (Placement(transformation(extent={{14,-4},{0,10}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst zeroRefill(k(
                displayUnit="l/min") = 0) annotation (Placement(
                transformation(
                extent={{-8,-6},{8,6}},
                rotation=180,
                origin={44,-20})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{74,-16},{54,4}})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=
               0)
            annotation (Placement(transformation(extent={{52,-4},{36,12}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08) annotation (
             Placement(transformation(extent={{50,-42},{70,-22}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-52,18},{-12,58}})));
        equation
        /*  if desiredFlowrate.volumeflowrate < 0 then
    volumeRefill.solutionFlow = -max(0, min(-desiredFlowrate.volumeflowrate, -maxflowrate));
  else
    volumeRefill.solutionFlow = desiredFlowrate.volumeflowrate;
  end if;*/
          connect(switch1.y, volumeRefill.solutionFlow) annotation (Line(
              points={{-0.7,3},{-22,3},{-22,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(desiredFlowrate.volumeflowrate, switch1.u1) annotation (Line(
              points={{-2.1,14.5},{15.4,14.5},{15.4,8.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(zeroRefill.y, switch1.u3) annotation (Line(
              points={{34,-20},{28,-20},{28,-2.6},{15.4,-2.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, greaterThreshold.u) annotation (Line(
              points={{58,-10},{58,4},{53.6,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterThreshold.y, switch1.u2) annotation (Line(
              points={{35.2,4},{26,4},{26,3},{15.4,3}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(port_b, conductor.q_out) annotation (Line(
              points={{84,-32},{70,-32}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_out, pressureMeasure.q_in) annotation (Line(
              points={{70,-32},{70,-12},{68,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(volumeRefill.q_out, conductor.q_in) annotation (Line(
              points={{-12,-16},{22,-16},{22,-32},{50,-32}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(desiredFlowrate.volume, busConnector.bloodVolume) annotation (
             Line(
              points={{-10.6,19.2},{-10.6,38},{-32,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{3,6},{3,6}}));
          connect(desiredFlowrate.desiredVolume, busConnector.desiredBloodVolume)
            annotation (Line(
              points={{-18.8,19.2},{-18.8,38},{-32,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-28, 36}, {34, -30}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}, radius = 4), Rectangle(extent = {{-24, -28}, {-20, -62}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}), Rectangle(extent = {{30, -26}, {34, -62}}, lineColor = {0, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, fillColor = {190, 0, 0}), Polygon(points = {{6, -30}, {6, -38}, {8, -40}, {12, -46}, {10, -48}, {12, -52}, {14, -54}, {16, -56}, {14, -58}, {12, -62}, {14, -64}, {18, -66}, {20, -68}, {22, -74}, {24, -76}, {28, -80}, {34, -82}, {40, -86}, {48, -90}, {54, -92}, {60, -94}, {64, -94}, {80, -96}, {88, -96}, {88, -96}, {86, -94}, {80, -92}, {74, -92}, {64, -90}, {62, -90}, {56, -86}, {46, -84}, {40, -80}, {36, -78}, {30, -76}, {26, -70}, {24, -68}, {22, -64}, {18, -60}, {22, -54}, {16, -50}, {16, -46}, {18, -44}, {12, -38}, {10, -34}, {10, -30}, {6, -30}}, lineColor = {127, 0, 0},
                    lineThickness =                                                                                                   1,
                    fillPattern =                                                                                                   FillPattern.Sphere, smooth = Smooth.None, fillColor = {190, 0, 0}), Rectangle(extent = {{-28, 62}, {34, 56}}, lineColor = {0, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid, fillColor = {170, 255, 255}), Rectangle(extent = {{-28, 56}, {34, 32}}, lineColor = {0, 0, 0}, fillColor = {170, 255, 255},
                    fillPattern =                                                                                                   FillPattern.Sphere, radius = 2,
                    lineThickness =                                                                                                   1)}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={Text(
                  extent={{16,24},{70,14}},
                  lineColor={0,0,255},
                  textString="Allow change only
if the pressure is 
above 0 mmHg.")}));
        end VolumeRefill2;

        model BloodProperties

          Modelica.Blocks.Math.Add DesiredBloodVolume
            annotation (Placement(transformation(extent={{8,-32},{28,-12}})));
          KidneyPO2Estimate kidneyPO2Estimate
            annotation (Placement(transformation(extent={{8,-98},{28,-78}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-20,-8},{20,32}})));
          Modelica.Blocks.Math.Division hematocrit
            annotation (Placement(transformation(extent={{8,-64},{28,-44}})));
          Modelica.Blocks.Math.Add3 BloodVolume
            annotation (Placement(transformation(extent={{12,34},{26,48}})));
          Physiolibrary.Types.Constants.FractionConst initialHematocrit(k=0.4)
            annotation (Placement(transformation(extent={{-2,68},{6,76}})));
          Modelica.Blocks.Math.Product InitialRBCVolume
            annotation (Placement(transformation(extent={{14,64},{24,74}})));
          Modelica.Blocks.Math.Add InitialPlasmaVolume(k2=-1)
            annotation (Placement(transformation(extent={{16,82},{26,92}})));
        equation
          connect(DesiredBloodVolume.u2, busConnector.RBCVolume) annotation (Line(
              points={{6,-28},{0,-28},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.u1, busConnector.plasmaVolume) annotation (Line(
              points={{6,-16},{0,-16},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.y, busConnector.desiredBloodVolume) annotation (
              Line(
              points={{29,-22},{34,-22},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.u2, DesiredBloodVolume.y) annotation (Line(
              points={{6,-60},{0,-60},{0,-38},{32,-38},{32,-22},{29,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.u1, DesiredBloodVolume.u2) annotation (Line(
              points={{6,-48},{6,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.y, busConnector.hematocrit) annotation (Line(
              points={{29,-54},{34,-54},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.y, kidneyPO2Estimate.hematocrit) annotation (Line(
              points={{29,-54},{32,-54},{32,-76},{0,-76},{0,-88},{10,-88}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(kidneyPO2Estimate.pressure, busConnector.Kidney_PO2) annotation (Line(
              points={{27.2,-88},{34,-88},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u3, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{10.6,35.4},{0,35.4},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u2, busConnector.systemicBloodVolume) annotation (Line(
              points={{10.6,41},{0,41},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u1, busConnector.heartBloodVolume) annotation (Line(
              points={{10.6,46.6},{0,46.6},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.y, busConnector.bloodVolume) annotation (Line(
              points={{26.7,41},{34,41},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(initialHematocrit.y, InitialRBCVolume.u1) annotation (Line(
              points={{7,72},{13,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialRBCVolume.u2) annotation (Line(
              points={{26.7,41},{26.7,62},{13,62},{13,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialRBCVolume.y, busConnector.initialrbcvolume)
            annotation (Line(
              points={{24.5,69},{34,69},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialRBCVolume.y, InitialPlasmaVolume.u2) annotation (Line(
              points={{24.5,69},{24.5,78},{15,78},{15,84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialPlasmaVolume.u1) annotation (Line(
              points={{26.7,41},{26.7,60},{-8,60},{-8,90},{15,90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialPlasmaVolume.y, busConnector.initialPlasmaVolume)
            annotation (Line(
              points={{26.5,87},{34,87},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-40,40},{40,-20}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,127,127}), Text(
                  extent={{-100,-20},{100,-60}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end BloodProperties;
      end BloodVolume;

      model BloodVolumeControl2
        extends Cardiovascular.ControlInterfaces.BloodVolumeControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-40,2},{0,42}}), iconTransformation(
          extent={{-38,4},{2,44}})));*/
        BloodVolume.Plasma2 plasma(plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit))
          annotation (Placement(transformation(extent={{-28,26},{4,58}})));
                                   //(plasma(volume_start=bloodProperties.BloodVolume.y))
        BloodVolume.RedBloodCells2 redBloodCells(RBC(population_start=2, Simulation=
                Physiolibrary.Types.SimulationType.NoInit))
          annotation (Placement(transformation(extent={{-20,-18},{14,14}})));
        BloodVolume.BloodProperties bloodProperties annotation (Placement(
              transformation(rotation=0, extent={{-18,-40},{10,-12}})));
      initial algorithm
        plasma.plasma.state:=bloodProperties.InitialPlasmaVolume.y;
        redBloodCells.RBC.state:=redBloodCells.InitialPopulation.y;
      equation

        connect(plasma.busConnector, busConnector) annotation (Line(
            points={{-0.16,42.32},{20,42.32},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.busConnector, busConnector) annotation (Line(
            points={{-16.6,2.8},{-16.6,12},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bloodProperties.busConnector, busConnector) annotation (Line(
            points={{-4,-24.32},{-4,-22},{20,-22},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics), Icon(
              coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end BloodVolumeControl2;
    end Control;

    package Avolio1980
      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model ArterialSegment
          parameter Physiolibrary.Types.Height L=0.094 "length";//L=0.094,R=0.002,h=0.0005,E=4000.0)
          parameter Physiolibrary.Types.Height R=0.002 "radius";
          parameter Physiolibrary.Types.Height h=0.0005 "wall thickness";
          parameter Modelica.SIunits.SurfaceTension E=4000.0 "surface tension";
          //parameter Real LL,CC;
          parameter Modelica.SIunits.Density ro=1060;
          parameter Modelica.SIunits.DynamicViscosity mi=0.04;
          parameter Boolean branch = false;
          parameter Physiolibrary.Types.HydraulicResistance Rbref=100000000;
        //  Physiolibrary.Types.Conductance Z0;

          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-110,-10},{-90,10}}),
                iconTransformation(extent={{-120,-20},{-80,20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{90,-10},{110,10}}), iconTransformation(
                  extent={{80,-20},{120,20}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elastance(final Compliance=3*Modelica.Constants.pi*R^3*L/(2*E*h),
            Simulation=Physiolibrary.Types.SimulationType.NoInit,
            volume_start=6.6e-06)
            annotation (Placement(transformation(extent={{52,-22},{96,22}})));
          Physiolibrary.Hydraulic.Components.Conductor resistance(final Conductance=(8*mi*L)/(Modelica.Constants.pi*R^4))
            annotation (Placement(transformation(extent={{-86,-22},{-42,22}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(final I=(4*Modelica.Constants.pi*R^2)/(9*ro*L),
              volumeFlow_start(displayUnit="l/min") = 8.3333333333333e-05)
            annotation (Placement(transformation(extent={{26,-10},{46,10}})));
          Physiolibrary.Hydraulic.Components.Conductor branchresistance(final
              Conductance=if branch then R/(Rbref*h) else 1/Modelica.Constants.eps)
            annotation (Placement(transformation(extent={{-28,-22},{16,22}})));
        equation
         // LL = ;
          //CC = 3*Modelica.Constants.pi*R^3*L/(2*E*h);
        //  c0 = sqrt(E*h/(2*ro*R));
        //  Z0 = ro*c0/sqrt(1-sigma^2)*(1-F10)^(-1/2);
          connect(port_a, resistance.q_in) annotation (Line(
              points={{-100,0},{-96,0},{-96,4.44089e-16},{-86,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_out, elastance.q_in) annotation (Line(
              points={{46,2.22045e-16},{46,4.44089e-16},{74,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));

          connect(elastance.q_in, port_b) annotation (Line(
              points={{74,4.44089e-16},{76,4.44089e-16},{76,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistance.q_out, branchresistance.q_in) annotation (Line(
              points={{-42,0},{-34,0},{-34,4.44089e-16},{-28,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, branchresistance.q_out) annotation (Line(
              points={{26,0},{22,0},{22,4.44089e-16},{16,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Bitmap(extent={{12,40},{92,-40}},   fileName=
                      "modelica://Physiolibrary/Resources/Icons/elastickyKompartment.png"),
                Text(
                  extent={{-100,-30},{100,-60}},
                  lineColor={0,0,255},
                  textString="%name"),
                Bitmap(extent={{-100,40},{22,-44}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/resistance.png")}),
                                              Diagram(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
        end ArterialSegment;
      end Parts;

      model ArterialTree
        Parts.ArterialSegment a1 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,0})));
        Parts.ArterialSegment a2 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,26})));
        Parts.ArterialSegment a4 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={2,60})));
        Parts.ArterialSegment a3 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={18,36})));
        Parts.ArterialSegment a5 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,24})));
        Parts.ArterialSegment a6 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-42,40})));
        Parts.ArterialSegment a7 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={46,50})));
        Parts.ArterialSegment a8 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={48,36})));
        Parts.ArterialSegment a9 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={26,4})));
        Parts.ArterialSegment a10 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,84})));
        Parts.ArterialSegment a11 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-6})));
        Parts.ArterialSegment a12 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,64})));
        Parts.ArterialSegment a13 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-68,62})));
        Parts.ArterialSegment a14 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-80,40})));
        Parts.ArterialSegment a15 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-52,8})));
        Parts.ArterialSegment a16 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={80,10})));
        Parts.ArterialSegment a17 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={86,36})));
        Parts.ArterialSegment a18 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={66,8})));
        Parts.ArterialSegment a19 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={54,8})));
        Parts.ArterialSegment a20 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,114})));
        Parts.ArterialSegment a21 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-34})));
        Parts.ArterialSegment a22 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,94})));
        Parts.ArterialSegment a23 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-92,14})));
        Parts.ArterialSegment a24 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-100,12})));
        Parts.ArterialSegment a25 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-120,40})));
        Parts.ArterialSegment a26 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-114,12})));
        Parts.ArterialSegment a27 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={124,36})));
        Parts.ArterialSegment a28 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={126,18})));
        Parts.ArterialSegment a29 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={120,-2})));
        Parts.ArterialSegment a30 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={106,-2})));
        Parts.ArterialSegment a31 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,142})));
        Parts.ArterialSegment a32 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={36,132})));
        Parts.ArterialSegment a33 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={46,124})));
        Parts.ArterialSegment a34 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-60})));
        Parts.ArterialSegment a35 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-70,104})));
        Parts.ArterialSegment a36 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,118})));
        Parts.ArterialSegment a37 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,128})));
        Parts.ArterialSegment a38 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-140,14})));
        Parts.ArterialSegment a39 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-128,12})));
        Parts.ArterialSegment a40 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-158,24})));
        Parts.ArterialSegment a41 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-172,40})));
        Parts.ArterialSegment a42 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,6})));
        Parts.ArterialSegment a43 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,160})));
        Parts.ArterialSegment a44 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,178})));
        Parts.ArterialSegment a45 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-6,148})));
        Parts.ArterialSegment a46 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={46,158})));
        Parts.ArterialSegment a47 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={58,158})));
        Parts.ArterialSegment a48 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={76,150})));
        Parts.ArterialSegment a49 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={24,-70})));
        Parts.ArterialSegment a50 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-88})));
        Parts.ArterialSegment a51 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-108,118})));
        Parts.ArterialSegment a52 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-110,152})));
        Parts.ArterialSegment a53 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-92,152})));
        Parts.ArterialSegment a54 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-32,132})));
        Parts.ArterialSegment a55 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,174})));
        Parts.ArterialSegment a56 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-34,156})));
        Parts.ArterialSegment a57 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-8})));
        Parts.ArterialSegment a58 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={138,-18})));
        Parts.ArterialSegment a59 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,-22})));
        Parts.ArterialSegment a60 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,208})));
        Parts.ArterialSegment a61 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={58,-70})));
        Parts.ArterialSegment a62 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={60,-56})));
        Parts.ArterialSegment a63 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={58,-82})));
        Parts.ArterialSegment a64 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={26,-98})));
        Parts.ArterialSegment a65 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-118})));
        Parts.ArterialSegment a66 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-8,-112})));
        Parts.ArterialSegment a67 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-26,-98})));
        Parts.ArterialSegment a68 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,202})));
        Parts.ArterialSegment a69 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-36})));
        Parts.ArterialSegment a70 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-146,-18})));
        Parts.ArterialSegment a71 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,-52})));
        Parts.ArterialSegment a72 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={174,-44})));
        Parts.ArterialSegment a73 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,238})));
        Parts.ArterialSegment a74 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={22,238})));
        Parts.ArterialSegment a75 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-144})));
        Parts.ArterialSegment a76 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,236})));
        Parts.ArterialSegment a77 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-44,236})));
        Parts.ArterialSegment a78 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-184,-46})));
        Parts.ArterialSegment a79 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-66})));
        Parts.ArterialSegment a80 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={132,-62})));
        Parts.ArterialSegment a81 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-80})));
        Parts.ArterialSegment a82 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={24,-154})));
        Parts.ArterialSegment a83 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-170})));
        Parts.ArterialSegment a84 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-14,-154})));
        Parts.ArterialSegment a85 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-96})));
        Parts.ArterialSegment a86 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-134,-76})));
        Parts.ArterialSegment a87 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-110})));
        Parts.ArterialSegment a88 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={174,-90})));
        Parts.ArterialSegment a89 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-154})));
        Parts.ArterialSegment a90 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={34,-172})));
        Parts.ArterialSegment a91 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-24,-172})));
        Parts.ArterialSegment a92 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-42,-154})));
        Parts.ArterialSegment a93 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-174,-116})));
        Parts.ArterialSegment a94 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-124})));
        Parts.ArterialSegment a95 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-138})));
        Parts.ArterialSegment a96 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={136,-130})));
        Parts.ArterialSegment a97 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={194,-100})));
        Parts.ArterialSegment a98 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={84,-154})));
        Parts.ArterialSegment a99 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-68,-154})));
        Parts.ArterialSegment a100 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-182,-136})));
        Parts.ArterialSegment a101 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-144,-144})));
        Parts.ArterialSegment a102 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-154})));
        Parts.ArterialSegment a103 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-170})));
        Parts.ArterialSegment a104 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-166})));
        Parts.ArterialSegment a105 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={94,-174})));
        Parts.ArterialSegment a106 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-84,-164})));
        Parts.ArterialSegment a107 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-164})));
        Parts.ArterialSegment a108 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-180})));
        Parts.ArterialSegment a109 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-196})));
        Parts.ArterialSegment a110 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-190})));
        Parts.ArterialSegment a111 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-226})));
        Parts.ArterialSegment a112 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-216})));
        Parts.ArterialSegment a113 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-256})));
        Parts.ArterialSegment a114 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-96,-242})));
        Parts.ArterialSegment a115 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-284})));
        Parts.ArterialSegment a116 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={88,-266})));
        Parts.ArterialSegment a117 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-76,-252})));
        Parts.ArterialSegment a118 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-96,-270})));
        Parts.ArterialSegment a119 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={132,-294})));
        Parts.ArterialSegment a120 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={90,-294})));
        Parts.ArterialSegment a121 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={58,-278})));
        Parts.ArterialSegment a122 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-52,-266})));
        Parts.ArterialSegment a123 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-72,-292})));
        Parts.ArterialSegment a124 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-116,-292})));
        Parts.ArterialSegment a125 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-304})));
        Parts.ArterialSegment a126 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={72,-304})));
        Parts.ArterialSegment a127 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-62,-314})));
        Parts.ArterialSegment a128 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-126,-314})));
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
            Placement(transformation(extent={{-28,-44},{-8,-24}}),
              iconTransformation(extent={{-310,-10},{-290,10}})));
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
            Placement(transformation(extent={{290,-10},{310,10}}),
              iconTransformation(extent={{290,-10},{310,10}})));
      equation
        connect(a2.port_b, a3.port_a) annotation (Line(
            points={{-18,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a4.port_a, a3.port_a) annotation (Line(
            points={{2,50},{2,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a5.port_a, a3.port_a) annotation (Line(
            points={{2,34},{2,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a6.port_a, a2.port_b) annotation (Line(
            points={{-32,40},{-26,40},{-26,36},{-18,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a7.port_a) annotation (Line(
            points={{28,36},{28,43},{36,43},{36,50}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a9.port_a) annotation (Line(
            points={{28,36},{28,14},{26,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a4.port_b, a10.port_a) annotation (Line(
            points={{2,70},{4,70},{4,74},{10,74}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a5.port_b, a11.port_a) annotation (Line(
            points={{2,14},{2,4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a14.port_a, a6.port_b) annotation (Line(
            points={{-70,40},{-52,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a6.port_b, a15.port_a) annotation (Line(
            points={{-52,40},{-52,18}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a8.port_a) annotation (Line(
            points={{28,36},{38,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a8.port_b, a16.port_a) annotation (Line(
            points={{58,36},{74,36},{74,20},{80,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a8.port_b, a17.port_a) annotation (Line(
            points={{58,36},{76,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a18.port_a, a8.port_b) annotation (Line(
            points={{66,18},{66,36},{58,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a19.port_a, a8.port_b) annotation (Line(
            points={{54,18},{60,18},{60,36},{58,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a12.port_a, a6.port_b) annotation (Line(
            points={{-50,54},{-52,54},{-52,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a10.port_b, a20.port_a) annotation (Line(
            points={{10,94},{10,104}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a11.port_b, a21.port_a) annotation (Line(
            points={{2,-16},{2,-24}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a12.port_b, a22.port_a) annotation (Line(
            points={{-50,74},{-50,84}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a23.port_a, a14.port_b) annotation (Line(
            points={{-92,24},{-92,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a13.port_a, a6.port_b) annotation (Line(
            points={{-68,52},{-60,52},{-60,40},{-52,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a24.port_a, a14.port_b) annotation (Line(
            points={{-100,22},{-100,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a14.port_b, a25.port_a) annotation (Line(
            points={{-90,40},{-110,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a26.port_a, a14.port_b) annotation (Line(
            points={{-114,22},{-106,22},{-106,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a27.port_a) annotation (Line(
            points={{96,36},{114,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a28.port_a, a17.port_b) annotation (Line(
            points={{116,18},{106,18},{106,36},{96,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a29.port_a) annotation (Line(
            points={{96,36},{106,36},{106,8},{120,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a30.port_a) annotation (Line(
            points={{96,36},{106,36},{106,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a20.port_b, a31.port_a) annotation (Line(
            points={{10,124},{10,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_a, a31.port_a) annotation (Line(
            points={{26,132},{10,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a20.port_b, a33.port_a) annotation (Line(
            points={{10,124},{36,124}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a21.port_b, a34.port_a) annotation (Line(
            points={{2,-44},{2,-50}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a35.port_a) annotation (Line(
            points={{-50,104},{-60,104}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a36.port_a) annotation (Line(
            points={{-50,104},{-56,104},{-56,118},{-62,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a37.port_a) annotation (Line(
            points={{-50,104},{-50,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a25.port_b, a38.port_a) annotation (Line(
            points={{-130,40},{-136,40},{-136,24},{-140,24}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a39.port_a, a25.port_b) annotation (Line(
            points={{-128,22},{-128,40},{-130,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a40.port_a, a25.port_b) annotation (Line(
            points={{-158,34},{-146,34},{-146,40},{-130,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a25.port_b, a41.port_a) annotation (Line(
            points={{-130,40},{-162,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a28.port_b, a42.port_a) annotation (Line(
            points={{136,18},{146,18},{146,16},{156,16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a31.port_b, a43.port_a) annotation (Line(
            points={{10,152},{6,152},{6,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a43.port_a, a44.port_a) annotation (Line(
            points={{6,160},{6,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a45.port_a, a31.port_b) annotation (Line(
            points={{4,148},{6,148},{6,152},{10,152}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a47.port_a, a48.port_a) annotation (Line(
            points={{58,148},{62,148},{62,150},{66,150}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_b, a46.port_a) annotation (Line(
            points={{46,132},{46,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_b, a47.port_a) annotation (Line(
            points={{46,132},{52,132},{52,148},{58,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a34.port_b, a49.port_a) annotation (Line(
            points={{2,-70},{14,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a34.port_b, a50.port_a) annotation (Line(
            points={{2,-70},{4,-70},{4,-78}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a36.port_b, a51.port_a) annotation (Line(
            points={{-82,118},{-98,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a52.port_a, a36.port_b) annotation (Line(
            points={{-110,142},{-92,142},{-92,118},{-82,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a53.port_a, a51.port_a) annotation (Line(
            points={{-92,142},{-92,118},{-98,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a37.port_b, a54.port_a) annotation (Line(
            points={{-50,138},{-44,138},{-44,132},{-42,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a55.port_a, a37.port_b) annotation (Line(
            points={{-50,164},{-50,138}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a56.port_a, a37.port_b) annotation (Line(
            points={{-44,156},{-44,138},{-50,138}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a40.port_b, a57.port_a) annotation (Line(
            points={{-158,14},{-158,2},{-162,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a42.port_b, a58.port_a) annotation (Line(
            points={{156,-4},{154,-4},{154,-8},{138,-8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_a, a42.port_b) annotation (Line(
            points={{156,-12},{156,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a44.port_b, a60.port_a) annotation (Line(
            points={{6,188},{6,198}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a49.port_b, a61.port_a) annotation (Line(
            points={{34,-70},{48,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a62.port_a, a49.port_b) annotation (Line(
            points={{50,-56},{42,-56},{42,-70},{34,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a63.port_a, a49.port_b) annotation (Line(
            points={{48,-82},{42,-82},{42,-70},{34,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a50.port_b, a64.port_a) annotation (Line(
            points={{4,-98},{16,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a50.port_b, a65.port_a) annotation (Line(
            points={{4,-98},{4,-108}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a66.port_a, a50.port_b) annotation (Line(
            points={{-8,-102},{-2,-102},{-2,-98},{4,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a67.port_a, a50.port_b) annotation (Line(
            points={{-16,-98},{4,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a55.port_b, a68.port_a) annotation (Line(
            points={{-50,184},{-50,192}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a57.port_b, a69.port_a) annotation (Line(
            points={{-162,-18},{-162,-26}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a70.port_a, a57.port_b) annotation (Line(
            points={{-156,-18},{-162,-18}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_b, a71.port_a) annotation (Line(
            points={{156,-32},{156,-42}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_b, a72.port_a) annotation (Line(
            points={{156,-32},{166,-32},{166,-34},{174,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a73.port_a, a60.port_b) annotation (Line(
            points={{6,228},{6,218}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a60.port_b, a74.port_a) annotation (Line(
            points={{6,218},{14,218},{14,228},{22,228}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a65.port_b, a75.port_a) annotation (Line(
            points={{4,-128},{4,-134}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a68.port_b, a76.port_a) annotation (Line(
            points={{-50,212},{-60,212},{-60,226}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a77.port_a, a68.port_b) annotation (Line(
            points={{-44,226},{-44,212},{-50,212}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a69.port_b, a78.port_a) annotation (Line(
            points={{-162,-46},{-174,-46}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a69.port_b, a79.port_a) annotation (Line(
            points={{-162,-46},{-162,-56}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a71.port_b, a80.port_a) annotation (Line(
            points={{156,-62},{142,-62}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a71.port_b, a81.port_a) annotation (Line(
            points={{156,-62},{158,-62},{158,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a75.port_b, a82.port_a) annotation (Line(
            points={{4,-154},{14,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a75.port_b, a83.port_a) annotation (Line(
            points={{4,-154},{4,-160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_a, a75.port_b) annotation (Line(
            points={{-4,-154},{4,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a79.port_b, a85.port_a) annotation (Line(
            points={{-162,-76},{-162,-86}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a79.port_b, a86.port_a) annotation (Line(
            points={{-162,-76},{-144,-76}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a81.port_b, a87.port_a) annotation (Line(
            points={{158,-90},{158,-100}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a81.port_b, a88.port_a) annotation (Line(
            points={{158,-90},{164,-90}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a82.port_b, a89.port_a) annotation (Line(
            points={{34,-154},{42,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a82.port_b, a90.port_a) annotation (Line(
            points={{34,-154},{34,-162}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_b, a91.port_a) annotation (Line(
            points={{-24,-154},{-24,-162}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_b, a92.port_a) annotation (Line(
            points={{-24,-154},{-32,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a2.port_a, a1.port_b) annotation (Line(
            points={{-18,16},{-18,10}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a85.port_b, a93.port_a) annotation (Line(
            points={{-162,-106},{-174,-106}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a85.port_b, a94.port_a) annotation (Line(
            points={{-162,-106},{-162,-114},{-160,-114}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a87.port_b, a95.port_a) annotation (Line(
            points={{158,-120},{158,-128}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a87.port_b, a96.port_a) annotation (Line(
            points={{158,-120},{136,-120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a88.port_b, a97.port_a) annotation (Line(
            points={{184,-90},{194,-90}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a89.port_b, a98.port_a) annotation (Line(
            points={{62,-154},{74,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a92.port_b, a99.port_a) annotation (Line(
            points={{-52,-154},{-58,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a93.port_b, a100.port_a) annotation (Line(
            points={{-174,-126},{-182,-126}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a94.port_b, a101.port_a) annotation (Line(
            points={{-160,-134},{-144,-134}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a94.port_b, a102.port_a) annotation (Line(
            points={{-160,-134},{-160,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a95.port_b, a103.port_a) annotation (Line(
            points={{158,-148},{158,-160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a98.port_b, a104.port_a) annotation (Line(
            points={{94,-154},{98,-154},{98,-156},{112,-156}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a105.port_a, a104.port_a) annotation (Line(
            points={{94,-164},{104,-164},{104,-156},{112,-156}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a99.port_b, a106.port_a) annotation (Line(
            points={{-78,-154},{-84,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a107.port_a, a106.port_a) annotation (Line(
            points={{-98,-154},{-84,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a102.port_b, a108.port_a) annotation (Line(
            points={{-160,-164},{-160,-170}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a104.port_b, a109.port_a) annotation (Line(
            points={{112,-176},{112,-186}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a107.port_b, a110.port_a) annotation (Line(
            points={{-98,-174},{-98,-180}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a109.port_b, a111.port_a) annotation (Line(
            points={{112,-206},{112,-216}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a110.port_b, a112.port_a) annotation (Line(
            points={{-98,-200},{-98,-206}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a111.port_b, a113.port_a) annotation (Line(
            points={{112,-236},{112,-246}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a112.port_b, a114.port_a) annotation (Line(
            points={{-98,-226},{-98,-232},{-96,-232}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a113.port_b, a115.port_a) annotation (Line(
            points={{112,-266},{112,-274}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a116.port_a, a113.port_b) annotation (Line(
            points={{98,-266},{112,-266}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a114.port_b, a117.port_a) annotation (Line(
            points={{-96,-252},{-86,-252}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a114.port_b, a118.port_a) annotation (Line(
            points={{-96,-252},{-92,-252},{-92,-260},{-96,-260}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a115.port_b, a119.port_a) annotation (Line(
            points={{112,-294},{122,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a115.port_b, a120.port_a) annotation (Line(
            points={{112,-294},{100,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a116.port_b, a121.port_a) annotation (Line(
            points={{78,-266},{68,-266},{68,-268},{58,-268}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a117.port_b, a122.port_a) annotation (Line(
            points={{-66,-252},{-58,-252},{-58,-256},{-52,-256}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a118.port_b, a123.port_a) annotation (Line(
            points={{-96,-280},{-84,-280},{-84,-282},{-72,-282}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a124.port_a, a118.port_b) annotation (Line(
            points={{-116,-282},{-106,-282},{-106,-280},{-96,-280}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a119.port_b, a125.port_a) annotation (Line(
            points={{142,-294},{158,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a120.port_b, a126.port_a) annotation (Line(
            points={{80,-294},{72,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a123.port_b, a127.port_a) annotation (Line(
            points={{-72,-302},{-64,-302},{-64,-304},{-62,-304}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a124.port_b, a128.port_a) annotation (Line(
            points={{-116,-302},{-122,-302},{-122,-304},{-126,-304}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a1.port_a, port_a) annotation (Line(
            points={{-18,-10},{-18,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(port_a, port_a) annotation (Line(
            points={{-18,-34},{-18,-34},{-18,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(port_b, a9.port_b) annotation (Line(
            points={{300,0},{202,0},{202,-190},{122,-190},{122,-84},{86,-84},{
                86,-18},{26,-18},{26,-6}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a19.port_b, a9.port_b) annotation (Line(
            points={{54,-2},{54,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a18.port_b, a9.port_b) annotation (Line(
            points={{66,-2},{66,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a16.port_b, a9.port_b) annotation (Line(
            points={{80,0},{80,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a30.port_b, a9.port_b) annotation (Line(
            points={{106,-12},{106,-12},{106,-18},{82,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a29.port_b, a9.port_b) annotation (Line(
            points={{120,-12},{120,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a62.port_b, a9.port_b) annotation (Line(
            points={{70,-56},{86,-56},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a61.port_b, a9.port_b) annotation (Line(
            points={{68,-70},{86,-70},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a63.port_b, a9.port_b) annotation (Line(
            points={{68,-82},{86,-82},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a80.port_b, a9.port_b) annotation (Line(
            points={{122,-62},{86,-62},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a58.port_b, a9.port_b) annotation (Line(
            points={{138,-28},{112,-28},{112,-30},{86,-30},{86,-18},{26,-18},{
                26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a64.port_b, a9.port_b) annotation (Line(
            points={{36,-98},{122,-98},{122,-84},{86,-84},{86,-18},{26,-18},{26,
                -6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a96.port_b, a9.port_b) annotation (Line(
            points={{136,-140},{128,-140},{128,-144},{122,-144},{122,-84},{86,
                -84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a103.port_b, a9.port_b) annotation (Line(
            points={{158,-180},{158,-190},{122,-190},{122,-84},{86,-84},{86,-18},
                {26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a97.port_b, a9.port_b) annotation (Line(
            points={{194,-110},{202,-110},{202,-190},{122,-190},{122,-84},{86,
                -84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a72.port_b, a9.port_b) annotation (Line(
            points={{174,-54},{188,-54},{188,-56},{202,-56},{202,-190},{122,
                -190},{122,-84},{86,-84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a27.port_b, a9.port_b) annotation (Line(
            points={{134,36},{202,36},{202,-190},{122,-190},{122,-84},{86,-84},
                {86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a7.port_b, a46.port_b) annotation (Line(
            points={{56,50},{72,50},{72,124},{94,124},{94,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

        connect(a47.port_b, a46.port_b) annotation (Line(
            points={{58,168},{58,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a48.port_b, a46.port_b) annotation (Line(
            points={{86,150},{94,150},{94,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a7.port_b, a9.port_b) annotation (Line(
            points={{56,50},{142,50},{142,36},{202,36},{202,-190},{122,-190},{
                122,-84},{86,-84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a33.port_b, a46.port_b) annotation (Line(
            points={{56,124},{94,124},{94,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a46.port_b, a43.port_b) annotation (Line(
            points={{46,168},{46,256},{-14,256},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a56.port_b, a43.port_b) annotation (Line(
            points={{-24,156},{-18,156},{-18,170},{-14,170},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a73.port_b, a43.port_b) annotation (Line(
            points={{6,248},{6,256},{-14,256},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a74.port_b, a43.port_b) annotation (Line(
            points={{22,248},{24,248},{24,256},{-14,256},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a52.port_b, a43.port_b) annotation (Line(
            points={{-110,162},{-110,170},{-72,170},{-72,254},{-14,254},{-14,
                160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a77.port_b, a43.port_b) annotation (Line(
            points={{-44,246},{-44,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a76.port_b, a43.port_b) annotation (Line(
            points={{-60,246},{-60,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a53.port_b, a43.port_b) annotation (Line(
            points={{-92,162},{-92,170},{-72,170},{-72,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

        connect(a51.port_b, a43.port_b) annotation (Line(
            points={{-118,118},{-124,118},{-124,170},{-72,170},{-72,254},{-14,
                254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a35.port_b, a43.port_b) annotation (Line(
            points={{-80,104},{-124,104},{-124,170},{-72,170},{-72,254},{-14,
                254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a13.port_b, a43.port_b) annotation (Line(
            points={{-68,72},{-68,84},{-122,84},{-122,104},{-124,104},{-124,170},
                {-72,170},{-72,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a41.port_b, a43.port_b) annotation (Line(
            points={{-182,40},{-182,58},{-82,58},{-82,84},{-122,84},{-122,104},
                {-124,104},{-124,170},{-72,170},{-72,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

        connect(a41.port_b, a78.port_b) annotation (Line(
            points={{-182,40},{-184,40},{-184,-30},{-194,-30},{-194,-46}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a78.port_b, a100.port_b) annotation (Line(
            points={{-194,-46},{-194,-146},{-182,-146},{-182,-146}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a100.port_b, a108.port_b) annotation (Line(
            points={{-182,-146},{-182,-188},{-160,-188},{-160,-190}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a108.port_b, a101.port_b) annotation (Line(
            points={{-160,-190},{-152,-190},{-152,-192},{-144,-192},{-144,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

        connect(a101.port_b, a86.port_b) annotation (Line(
            points={{-144,-154},{-124,-154},{-124,-76}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a86.port_b, a70.port_b) annotation (Line(
            points={{-124,-76},{-124,-18},{-136,-18}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a70.port_b, a38.port_b) annotation (Line(
            points={{-136,-18},{-138,-18},{-138,4},{-140,4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a38.port_b, a39.port_b) annotation (Line(
            points={{-140,4},{-134,4},{-134,2},{-128,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a39.port_b, a26.port_b) annotation (Line(
            points={{-128,2},{-120,2},{-120,-2},{-114,-2},{-114,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a26.port_b, a24.port_b) annotation (Line(
            points={{-114,2},{-108,2},{-108,2},{-100,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a24.port_b, a23.port_b) annotation (Line(
            points={{-100,2},{-96,2},{-96,4},{-92,4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a23.port_b, a15.port_b) annotation (Line(
            points={{-92,4},{-72,4},{-72,-2},{-52,-2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a15.port_b, a67.port_b) annotation (Line(
            points={{-52,-2},{-52,-50},{-36,-50},{-36,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a66.port_b, a67.port_b) annotation (Line(
            points={{-8,-122},{-22,-122},{-22,-124},{-38,-124},{-38,-98},{-36,
                -98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a128.port_b, a101.port_b) annotation (Line(
            points={{-126,-324},{-144,-324},{-144,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a128.port_b, a127.port_b) annotation (Line(
            points={{-126,-324},{-62,-324}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a127.port_b, a122.port_b) annotation (Line(
            points={{-62,-324},{-52,-324},{-52,-276}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a122.port_b, a106.port_b) annotation (Line(
            points={{-52,-276},{-48,-276},{-48,-182},{-84,-182},{-84,-174}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a91.port_b, a106.port_b) annotation (Line(
            points={{-24,-182},{-84,-182},{-84,-174}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a91.port_b, a83.port_b) annotation (Line(
            points={{-24,-182},{-10,-182},{-10,-180},{4,-180}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a83.port_b, a90.port_b) annotation (Line(
            points={{4,-180},{20,-180},{20,-182},{34,-182}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a90.port_b, a105.port_b) annotation (Line(
            points={{34,-182},{64,-182},{64,-184},{94,-184}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a105.port_b, a121.port_b) annotation (Line(
            points={{94,-184},{94,-248},{50,-248},{50,-288},{58,-288}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a121.port_b, a126.port_b) annotation (Line(
            points={{58,-288},{60,-288},{60,-314},{72,-314}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a126.port_b, a125.port_b) annotation (Line(
            points={{72,-314},{158,-314}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a54.port_b, a45.port_b) annotation (Line(
            points={{-22,132},{-20,132},{-20,148},{-16,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a45.port_b, a43.port_b) annotation (Line(
            points={{-16,148},{-18,148},{-18,170},{-14,170},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,
                  -340},{300,300}}), graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                  {300,300}}), graphics={
              Bitmap(extent={{-202,294},{212,-338}}, fileName=
                    "modelica://Cardiovascular/Resources/Icons/avoliotree.png"),
              Line(
                points={{-292,-2},{-34,-2},{-6,112}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{86,278},{110,276},{128,272},{156,234},{164,154},{190,
                    -8},{200,-18},{240,-20},{296,-2}},
                color={0,0,255},
                smooth=Smooth.None)}),
          Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
      end ArterialTree;

      model PulsatileCirculation
        "Model of cardiovascular system with pulsatile dynamic"
                                extends Physiolibrary.Icons.CardioVascular;

        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
            useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
            7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
            volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
            useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
            2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
            volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
              displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
          useComplianceInput=false,
          volume_start(displayUnit="ml") = 0.0006597,
          ZeroPressureVolume=0.0001,
          Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                    useLimitationInputs=false, _Gon(displayUnit=
               "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
            useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=0.0002097,
          ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
            Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                              annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
               1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
            Conductance(displayUnit="m3/(Pa.s)") = 7.5006157584566e-09)
                                                               annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
            volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
            useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                     annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
            useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=0.00018,
          ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
            Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                               annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
               "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                     annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
          volume_start=2.1e-05,
          ZeroPressureVolume=2e-05,
          Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
          volume_start=0.000637,
          ZeroPressureVolume=0.0006,
          Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel veins(
          volume_start(displayUnit="ml") = 0.002443,
          ZeroPressureVolume=0.00237,
          Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07)
          annotation (Placement(transformation(
              origin={105,-3},
              extent={{-15,-15},{15,15}})));
        Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
          timeVaryingElastanceLeft(
          Ed(displayUnit="mmHg/ml") = 13332238.7415,
          Es(displayUnit="mmHg/ml") = 183318282.69563,
          Pi0(displayUnit="mmHg") = 6666.11937075)
          annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
        Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
          timeVaryingElastanceRight(
          Ed(displayUnit="mmHg/ml") = 3999671.62245,
          Es(displayUnit="mmHg/ml") = 43729743.0721,
          Pi0(displayUnit="mmHg") = 3199.73729796)
          annotation (Placement(transformation(extent={{164,18},{184,38}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                "Hz") = 1.2)
          annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
          //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
        ArterialTree arterialTree(
        a1(L=0.04,R=0.0145,h=0.00163,E=4000.0),
      a2(L=0.02,R=0.0112,h=0.00132,E=4000.0),
      a5(L=0.039,R=0.0107,h=0.00127,E=4000.0),
      a11(L=0.052,R=0.01,h=0.0012,E=4000.0),
      a21(L=0.052,R=0.0095,h=0.00116,E=4000.0),
      a34(L=0.052,R=0.0095,h=0.00116,E=4000.0),
      a50(L=0.053,R=0.0087,h=0.00108,E=4000.0),
      a65(L=0.053,R=0.0057,h=0.0008,E=4000.0),
      a75(L=0.053,R=0.0057,h=0.0008,E=4000.0),
      a49(L=0.01,R=0.0039,h=0.00064,E=4000.0),
      a61(L=0.071,R=0.0018,h=0.00045,E=4000.0),
      a62(L=0.063,R=0.0028,h=0.00054,E=4000.0),
      a63(L=0.066,R=0.0022,h=0.00049,E=4000.0),
      a64(L=0.032,R=0.0026,h=0.00053,E=4000.0),
      a66(L=0.059,R=0.0043,h=0.00069,E=4000.0),
      a67(L=0.032,R=0.0026,h=0.00053,E=4000.0),
      a83(L=0.05,R=0.0016,h=0.00043,E=4000.0),
      a4(L=0.089,R=0.0037,h=0.00063,E=4000.0),
      a10(L=0.089,R=0.0037,h=0.00063,E=4000.0),
      a20(L=0.031,R=0.0037,h=0.00063,E=4000.0),
      a12(L=0.089,R=0.0037,h=0.00063,E=4000.0),
      a22(L=0.089,R=0.0037,h=0.00063,E=4000.0),
      a3(L=0.034,R=0.0042,h=0.00067,E=4000.0),
      a6(L=0.034,R=0.0062,h=0.00086,E=4000.0),
      a82(L=0.058,R=0.0052,h=0.00076,E=4000.0),
      a84(L=0.058,R=0.0052,h=0.00076,E=4000.0),
      a89(L=0.083,R=0.0029,h=0.00055,E=4000.0),
      a92(L=0.083,R=0.0029,h=0.00055,E=4000.0),
      a90(L=0.05,R=0.002,h=0.0004,E=16000.0),
      a91(L=0.05,R=0.002,h=0.0004,E=16000.0),
      a98(L=0.061,R=0.0027,h=0.00053,E=4000.0),
      a99(L=0.061,R=0.0027,h=0.00053,E=4000.0),
      a104(L=0.127,R=0.0024,h=0.0005,E=8000.0),
      a107(L=0.127,R=0.0024,h=0.0005,E=8000.0),
      a105(L=0.126,R=0.0023,h=0.00049,E=16000.0),
      a106(L=0.126,R=0.0023,h=0.00049,E=16000.0),
      a109(L=0.127,R=0.0024,h=0.0005,E=8000.0),
      a110(L=0.127,R=0.0024,h=0.0005,E=8000.0),
      a111(L=0.094,R=0.002,h=0.00047,E=8000.0),
      a112(L=0.094,R=0.002,h=0.00047,E=8000.0),
      a113(L=0.094,R=0.002,h=0.0005,E=4000.0),
      a114(L=0.094,R=0.002,h=0.0005,E=4000.0),
      a115(L=0.025,R=0.0013,h=0.00039,E=16000.0),
      a118(L=0.025,R=0.0013,h=0.00039,E=16000.0),
      a119(L=0.15,R=0.001,h=0.0002,E=16000.0),
      a124(L=0.15,R=0.001,h=0.0002,E=16000.0),
      a125(L=0.15,R=0.001,h=0.0002,E=16000.0),
      a128(L=0.15,R=0.001,h=0.0002,E=16000.0),
      a116(L=0.161,R=0.0018,h=0.00045,E=16000.0),
      a117(L=0.161,R=0.0018,h=0.00045,E=16000.0),
      a121(L=0.161,R=0.0018,h=0.00045,E=16000.0),
      a122(L=0.161,R=0.0018,h=0.00045,E=16000.0),
      a120(L=0.159,R=0.0013,h=0.00039,E=16000.0),
      a123(L=0.159,R=0.0013,h=0.00039,E=16000.0),
      a126(L=0.159,R=0.0013,h=0.00019,E=16000.0),
      a127(L=0.159,R=0.0013,h=0.00019,E=16000.0),
      a31(L=0.059,R=0.0018,h=0.00045,E=8000.0),
      a37(L=0.059,R=0.0018,h=0.00045,E=8000.0),
      a32(L=0.118,R=0.0015,h=0.00042,E=8000.0),
      a36(L=0.118,R=0.0015,h=0.00042,E=8000.0),
      a33(L=0.04,R=0.0007,h=0.0002,E=8000.0),
      a35(L=0.04,R=0.0007,h=0.0002,E=8000.0),
      a43(L=0.03,R=0.001,h=0.0003,E=8000.0),
      a56(L=0.03,R=0.001,h=0.0003,E=8000.0),
      a44(L=0.059,R=0.0013,h=0.00039,E=8000.0),
      a55(L=0.059,R=0.0013,h=0.00039,E=8000.0),
      a45(L=0.04,R=0.001,h=0.0003,E=16000.0),
      a54(L=0.04,R=0.001,h=0.0003,E=16000.0),
      a46(L=0.03,R=0.0006,h=0.0002,E=16000.0),
      a53(L=0.03,R=0.0006,h=0.0002,E=16000.0),
      a47(L=0.059,R=0.0008,h=0.00026,E=16000.0),
      a52(L=0.059,R=0.0008,h=0.00026,E=16000.0),
      a48(L=0.03,R=0.0007,h=0.0002,E=16000.0),
      a51(L=0.03,R=0.0007,h=0.0002,E=16000.0),
      a60(L=0.059,R=0.0008,h=0.00026,E=16000.0),
      a68(L=0.059,R=0.0008,h=0.00026,E=16000.0),
      a73(L=0.04,R=0.0006,h=0.0002,E=16000.0),
      a77(L=0.04,R=0.0006,h=0.0002,E=16000.0),
      a74(L=0.05,R=0.0007,h=0.0002,E=16000.0),
      a76(L=0.05,R=0.0007,h=0.0002,E=16000.0),
      a7(L=0.15,R=0.001,h=0.0003,E=8000.0),
      a15(L=0.15,R=0.001,h=0.0003,E=8000.0),
      a8(L=0.068,R=0.004,h=0.00066,E=4000.0),
      a14(L=0.068,R=0.004,h=0.00066,E=4000.0),
      a9(L=0.148,R=0.0019,h=0.00045,E=8000.0),
      a13(L=0.148,R=0.0019,h=0.00045,E=8000.0),
      a16(L=0.05,R=0.001,h=0.0003,E=8000.0),
      a26(L=0.05,R=0.001,h=0.0003,E=8000.0),
      a17(L=0.061,R=0.0036,h=0.00062,E=4000.0),
      a25(L=0.061,R=0.0036,h=0.00062,E=4000.0),
      a18(L=0.1,R=0.002,h=0.00052,E=8000.0),
      a24(L=0.1,R=0.002,h=0.00052,E=8000.0),
      a19(L=0.05,R=0.001,h=0.0003,E=8000.0),
      a23(L=0.05,R=0.001,h=0.0003,E=8000.0),
      a27(L=0.03,R=0.0015,h=0.00035,E=16000.0),
      a41(L=0.03,R=0.0015,h=0.00035,E=16000.0),
      a28(L=0.056,R=0.0031,h=0.00057,E=4000.0),
      a40(L=0.056,R=0.0031,h=0.00057,E=4000.0),
      a29(L=0.05,R=0.001,h=0.0003,E=16000.0),
      a39(L=0.05,R=0.001,h=0.0003,E=16000.0),
      a30(L=0.08,R=0.0015,h=0.00035,E=16000.0),
      a38(L=0.08,R=0.0015,h=0.00035,E=16000.0),
      a42(L=0.63,R=0.0028,h=0.00055,E=4000.0),
      a57(L=0.63,R=0.0028,h=0.00055,E=4000.0),
      a58(L=0.15,R=0.0015,h=0.00035,E=8000.0),
      a70(L=0.15,R=0.0015,h=0.00035,E=8000.0),
      a59(L=0.063,R=0.0026,h=0.00053,E=4000.0),
      a69(L=0.063,R=0.0026,h=0.00053,E=4000.0),
      a71(L=0.063,R=0.0025,h=0.00052,E=4000.0),
      a79(L=0.063,R=0.0025,h=0.00052,E=4000.0),
      a72(L=0.05,R=0.0007,h=0.0002,E=16000.0),
      a78(L=0.05,R=0.0007,h=0.0002,E=16000.0),
      a80(L=0.05,R=0.0006,h=0.0002,E=16000.0),
      a86(L=0.05,R=0.0006,h=0.0002,E=16000.0),
      a81(L=0.046,R=0.0024,h=0.0005,E=4000.0),
      a85(L=0.046,R=0.0024,h=0.0005,E=4000.0),
      a87(L=0.067,R=0.0021,h=0.00049,E=8000.0),
      a94(L=0.067,R=0.0021,h=0.00049,E=8000.0),
      a88(L=0.117,R=0.0016,h=0.00043,E=8000.0),
      a93(L=0.117,R=0.0016,h=0.00043,E=8000.0),
      a95(L=0.085,R=0.0019,h=0.00462,E=8000.0),
      a102(L=0.085,R=0.0019,h=0.00462,E=8000.0),
      a96(L=0.079,R=0.0009,h=0.00028,E=16000.0),
      a101(L=0.079,R=0.0009,h=0.00028,E=16000.0),
      a97(L=0.117,R=0.0016,h=0.00043,E=8000.0),
      a100(L=0.117,R=0.0016,h=0.00043,E=8000.0),
      a103(L=0.085,R=0.0019,h=0.00046,E=8000.0),
      a108(L=0.085,R=0.0019,h=0.00046,E=8000.0))
          annotation (Placement(transformation(extent={{-92,-38},{-32,26}})));
      equation
        connect(systemicInertia.q_out, veins.q_in) annotation (Line(
            points={{90,-3},{105,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
          annotation (Line(
            points={{-212,17},{-209,17},{-209,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
          annotation (Line(
            points={{174,19},{174,9},{171,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
            points={{105,-3},{122,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
          annotation (Line(
            points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
          annotation (Line(
            points={{181,19},{181,9},{183,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
            points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
            points={{46,-3},{60,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
            points={{171,-3},{152,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
            points={{192,-3},{171,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
            points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{222,-3},{230,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
            points={{260,-3},{266,-3},{266,57},{243,57}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
            points={{243,57},{243,58},{217.5,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
          annotation (Line(
            points={{182.5,58},{173,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
          annotation (Line(
            points={{143,58},{124,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
            Line(
            points={{124,58},{-42,58},{-42,60},{-205,60}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
            Line(
            points={{-235,60},{-263,60}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
            Line(
            points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
            points={{-279,-3},{-258,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
            points={{-228,-3},{-209,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
            points={{-209,-3},{-196,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
            points={{-166,-3},{-158,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, arterialTree.port_a) annotation (Line(
            points={{-128,-3},{-112,-3},{-112,-4},{-92,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(arterialTree.port_b, RSystemic.q_in) annotation (Line(
            points={{-32,-4},{-8,-4},{-8,-3},{16,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2}),
              graphics),                                                                                                    Icon(coordinateSystem(extent={{-350,
                  -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
          Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",       revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),experiment(StopTime=5));
      end PulsatileCirculation;

      package Test
        model PulsatileCirculation
          "Model of cardiovascular system with pulsatile dynamic"
                                  extends Physiolibrary.Icons.CardioVascular;

          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
              volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                  "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
              volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
                displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            useComplianceInput=false,
            volume_start(displayUnit="ml") = 0.0006597,
            ZeroPressureVolume=0.0001,
            Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                      useLimitationInputs=false, _Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0002097,
            ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                                annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
                 1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 7.5006157584566e-09)
                                                                 annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
              volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                  "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
              useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                       annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.00018,
            ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                                 annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                       annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
            volume_start=2.1e-05,
            ZeroPressureVolume=2e-05,
            Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
            volume_start=0.000637,
            ZeroPressureVolume=0.0006,
            Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(
            volume_start(displayUnit="ml") = 0.002443,
            ZeroPressureVolume=0.00237,
            Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07)
            annotation (Placement(transformation(
                origin={105,-3},
                extent={{-15,-15},{15,15}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceLeft(
            Ed(displayUnit="mmHg/ml") = 13332238.7415,
            Es(displayUnit="mmHg/ml") = 183318282.69563,
            Pi0(displayUnit="mmHg") = 6666.11937075)
            annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceRight(
            Ed(displayUnit="mmHg/ml") = 3999671.62245,
            Es(displayUnit="mmHg/ml") = 43729743.0721,
            Pi0(displayUnit="mmHg") = 3199.73729796)
            annotation (Placement(transformation(extent={{164,18},{184,38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                  "Hz") = 1.2)
            annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
            //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
          ArterialTree2 arterialTree(a1(
              E=4000.0,
              L=0.16,
              R=0.0045,
              h=0.00163,
              elastance(volume_start=0.000089)))
            annotation (Placement(transformation(extent={{-92,-38},{-32,26}})));

        equation
          connect(systemicInertia.q_out, veins.q_in) annotation (Line(
              points={{90,-3},{105,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
            annotation (Line(
              points={{-212,17},{-209,17},{-209,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
            annotation (Line(
              points={{174,19},{174,9},{171,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
              points={{105,-3},{122,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{181,19},{181,9},{183,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
              points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
              points={{46,-3},{60,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
              points={{171,-3},{152,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
              points={{192,-3},{171,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
              points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{222,-3},{230,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
              points={{260,-3},{266,-3},{266,57},{243,57}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{243,57},{243,58},{217.5,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{182.5,58},{173,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{143,58},{124,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{124,58},{-42,58},{-42,60},{-205,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
              Line(
              points={{-235,60},{-263,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
              points={{-279,-3},{-258,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{-228,-3},{-209,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
              points={{-209,-3},{-196,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
              points={{-166,-3},{-158,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, arterialTree.port_a) annotation (Line(
              points={{-128,-3},{-112,-3},{-112,-4},{-92,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialTree.port_b, RSystemic.q_in) annotation (Line(
              points={{-32,-4},{-8,-4},{-8,-3},{16,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2}),
                graphics),                                                                                                    Icon(coordinateSystem(extent={{-350,
                    -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),  experiment(StopTime=5));
        end PulsatileCirculation;

        model ArterialTree

          Parts.ArterialSegment a1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,0})));
          Parts.ArterialSegment a2 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,26})));
          Parts.ArterialSegment a3(branch=true)
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={18,36})));
          Parts.ArterialSegment a5(branch=true)
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={2,24})));
          Parts.ArterialSegment a6(branch=true, Rbref(displayUnit="(Pa.s)/m3"))
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-42,40})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-28,-44},{-8,-24}}),
                iconTransformation(extent={{-310,-10},{-290,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{290,-10},{310,10}}),
                iconTransformation(extent={{290,-10},{310,10}})));
        equation
          connect(a2.port_b, a3.port_a) annotation (Line(
              points={{-18,36},{8,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a5.port_a, a3.port_a) annotation (Line(
              points={{2,34},{2,36},{8,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a6.port_a, a2.port_b) annotation (Line(
              points={{-32,40},{-26,40},{-26,36},{-18,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a2.port_a, a1.port_b) annotation (Line(
              points={{-18,16},{-18,10}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, port_a) annotation (Line(
              points={{-18,-34},{-18,-34},{-18,-34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a6.port_b, port_b) annotation (Line(
              points={{-52,40},{-54,40},{-54,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a3.port_b, port_b) annotation (Line(
              points={{28,36},{28,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a5.port_b, port_b) annotation (Line(
              points={{2,14},{54,14},{54,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, a1.port_a) annotation (Line(
              points={{-18,-34},{-18,-10}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,
                    -340},{300,300}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                    {300,300}}), graphics={
                Bitmap(extent={{-202,294},{212,-338}}, fileName=
                      "modelica://Cardiovascular/Resources/Icons/avoliotree.png"),
                Line(
                  points={{-292,-2},{-34,-2},{-6,112}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{86,278},{110,276},{128,272},{156,234},{164,154},{190,
                      -8},{200,-18},{240,-20},{296,-2}},
                  color={0,0,255},
                  smooth=Smooth.None)}),
            Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
        end ArterialTree;

        model Windkessel_2element "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {18, 34})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          ArterialTree arterialTree
            annotation (Placement(transformation(extent={{-20,36},{12,70}})));
        equation
          connect(resistance.q_out, veins.y) annotation(Line(points = {{18, 24}, {18, 20}, {-30, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.q_out, arterialTree.port_a) annotation (Line(
              points={{-30,48},{-26,48},{-26,54.0625},{-20,54.0625}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialTree.port_b, resistance.q_in) annotation (Line(
              points={{12,54.0625},{16,54.0625},{18,54.0625},{18,54},{18,44},{
                  18,44}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_2element;

        model Windkessel_2elementtestinertia "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={94,34})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit=
                  "mmHg.s2/ml") = 19998358.11225)
            annotation (Placement(transformation(extent={{-10,38},{10,58}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel
            annotation (Placement(transformation(extent={{12,38},{32,58}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08)
            annotation (Placement(transformation(extent={{-22,58},{-2,78}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08)
            annotation (Placement(transformation(extent={{30,60},{50,80}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia1(I(displayUnit=
                  "mmHg.s2/ml") = 19998358.11225)
            annotation (Placement(transformation(extent={{50,38},{70,58}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1
            annotation (Placement(transformation(extent={{78,58},{98,78}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel2
            annotation (Placement(transformation(extent={{-44,64},{-24,84}})));
        equation
          connect(resistance.q_out, veins.y) annotation(Line(points={{94,24},{
                  94,20},{-30,20}},                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inertia.q_out, elasticVessel.q_in) annotation (Line(
              points={{10,48},{22,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, conductor.q_out) annotation (Line(
              points={{-10,48},{-10,68},{-2,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVessel.q_in, conductor1.q_in) annotation (Line(
              points={{22,48},{26,48},{26,70},{30,70}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia1.q_in, conductor1.q_out) annotation (Line(
              points={{50,48},{50,70}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia1.q_out, elasticVessel1.q_in) annotation (Line(
              points={{70,48},{80,48},{80,68},{88,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistance.q_in, elasticVessel1.q_in) annotation (Line(
              points={{94,44},{96,44},{96,48},{98,48},{98,68},{88,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heart.q_out, elasticVessel2.q_in) annotation (Line(
              points={{-30,48},{-34,48},{-34,74},{-34,74}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVessel2.q_in, conductor.q_in) annotation (Line(
              points={{-34,74},{-28,74},{-28,68},{-22,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_2elementtestinertia;

        model ArterialTree2

          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-28,-44},{-8,-24}}),
                iconTransformation(extent={{-310,-10},{-290,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{290,-10},{310,10}}),
                iconTransformation(extent={{290,-10},{310,10}})));
          Parts.ArterialSegment a1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,-2})));
        equation
          connect(port_a, port_a) annotation (Line(
              points={{-18,-34},{-18,-34},{-18,-34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, a1.port_a) annotation (Line(
              points={{-18,-34},{-18,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a1.port_b, port_b) annotation (Line(
              points={{-18,8},{142,8},{142,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,
                    -340},{300,300}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                    {300,300}}), graphics={
                Bitmap(extent={{-202,294},{212,-338}}, fileName=
                      "modelica://Cardiovascular/Resources/Icons/avoliotree.png"),
                Line(
                  points={{-292,-2},{-34,-2},{-6,112}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{86,278},{110,276},{128,272},{156,234},{164,154},{190,
                      -8},{200,-18},{240,-20},{296,-2}},
                  color={0,0,255},
                  smooth=Smooth.None)}),
            Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
        end ArterialTree2;
      end Test;
    end Avolio1980;

    model CombinedMostComplex
      extends System(
        redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
        redeclare Smith2004Model.Parts.Heart heart,
        redeclare Meurs.Parts.Systemic systemicCirculation);
    end CombinedMostComplex;

    model Combined
      extends System(
        redeclare Meurs.Parts.Pulmonary pulmonaryCirculation,
        redeclare Burkhoff.Parts2.HeartOld heart,
        redeclare Meurs.Parts.Systemic systemicCirculation);
    end Combined;

    model Combined2
      extends System(
        redeclare Meurs.Parts.Pulmonary pulmonaryCirculation,
        redeclare Meurs.Parts.Heart heart,
        redeclare Meurs.Parts.Systemic systemicCirculation);
    end Combined2;

    model CombinedControled
       extends Cardiovascular.ControlInterfaces.SystemBVControl(
        redeclare Meurs.Variants.Parts.Baroreflex baroreflex(baroreceptor(
            EV0right=50662507.2177,
            EV0left=205316476.6191,
            activationDelay=3)),
        redeclare Control.BloodVolumeControl bloodVolumeControl,
        redeclare Meurs.Variants.Parts.Stenosis stenosisControl,
        redeclare Meurs.Variants.Parts.PulmonaryControl pulmonaryCirculation,
        redeclare Burkhoff.Variants.Parts.HeartControl heart,
        redeclare Meurs.Variants.Parts.SystemicControl systemicCirculation);
    equation

    end CombinedControled;

    package Experiments
      extends Modelica.Icons.UtilitiesPackage;
      model Bleeding
        extends Cardiovascular.Model.Control.BloodVolumeControl(redBloodCells(
              RBCHemorrhageRate(k(displayUnit="l/min") = 3.3333333333333e-07)),
            plasma(hemorrhage(SolutionFlow(displayUnit="l/min") = 5e-07)));
      end Bleeding;

      model BurkhoffBleeding
         extends Cardiovascular.Model.Burkhoff.HemodynamicsBurkhoffBVControl(
            redeclare Bleeding bloodVolumeControl, baroreflex(baroreceptor(
                activationDelay=86400)));
      equation

        annotation (Diagram(coordinateSystem(extent={{-80,-40},{20,40}})), Icon(
              coordinateSystem(extent={{-80,-40},{20,40}})));
      end BurkhoffBleeding;

      model BurkhoffTransfussion
         extends Cardiovascular.Model.Burkhoff.HemodynamicsBurkhoffBVControl(
            redeclare Bleeding2 bloodVolumeControl, baroreflex(baroreceptor(
                activationDelay=86400)));
      equation

      end BurkhoffTransfussion;

      model Bleeding2
        extends Cardiovascular.ControlInterfaces.BloodVolumeControl;
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{-16,-26},{4,-6}})));
        Physiolibrary.Types.Constants.VolumeConst volume(k=1e-05)
          annotation (Placement(transformation(extent={{-58,-40},{-44,-24}})));
      equation
        connect(busConnector.bloodVolume, add.u1) annotation (Line(
            points={{20,12},{4,12},{4,14},{-28,14},{-28,-10},{-18,-10}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(add.y, busConnector.desiredBloodVolume) annotation (Line(
            points={{5,-16},{20,-16},{20,12}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(volume.y, add.u2) annotation (Line(
            points={{-42.25,-32},{-30,-32},{-30,-22},{-18,-22}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end Bleeding2;

      model MeursTransfussion
        extends Meurs.HemodynamicsMeursBVControl(
          redeclare Bleeding2 bloodVolumeControl,
          stenosisControl(AVBackFlowConductance(k=0)),
          baroreflex(baroreceptor(activationDelay=86400)));
      end MeursTransfussion;

      model Smith2004Transfussion
        extends Smith2004Model.HemodynamicsSmithControl(redeclare Bleeding2
            bloodVolumeControl(volume(k=5e-05)), baroreflex(baroreceptor(
                activationDelay=86400)));
      end Smith2004Transfussion;

      model FernandezTransfussion
        extends Fernandez2014.HemodynamicsFernandezControllable(redeclare Bleeding2
                      bloodVolumeControl, baroreflex(baroreceptor(
                activationDelay=86400)));
      end FernandezTransfussion;

      model BurkhoffTransfussion2
        extends Burkhoff.HemodynamicsBurkhoff;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-38,-14},{-18,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-18,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end BurkhoffTransfussion2;

      model MeursTransfussion2
        extends Meurs.HemodynamicsMeurs;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-38,-14},{-18,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-18,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end MeursTransfussion2;

      model Fernandez2013Transfussion2
        extends Examples.FernandezModel2013.HemodynamicsCanete;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-38,-12},{-18,8}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-18,-2},{-14,-2},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end Fernandez2013Transfussion2;

      model BurkhoffWithoutVITransfussion2
        extends Cardiovascular.System(
          redeclare Burkhoff.Parts2.HeartWithoutVI heart,
          redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
          redeclare Burkhoff.Parts.Systemic systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end BurkhoffWithoutVITransfussion2;

      model BurkhoffWithoutVsTransfussion2
        extends Cardiovascular.System(
          redeclare Burkhoff.Parts2.HeartWithoutVs heart,
          redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
          redeclare Burkhoff.Parts.Systemic systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end BurkhoffWithoutVsTransfussion2;

      model BurkhoffWithoutPartialVsTransfussion2
        extends Cardiovascular.System(
          redeclare Burkhoff.Parts2.HeartWithoutVs2 heart,
          redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
          redeclare Burkhoff.Parts.Systemic systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end BurkhoffWithoutPartialVsTransfussion2;

      model GuytonTransfussion2
        extends Guyton.HemodynamicsGuyton;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-38,-12},{-18,8}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-18,-2},{-14,-2},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end GuytonTransfussion2;

      model SmithTransfussion2
        extends Cardiovascular.System(
          redeclare Smith2004Model.Parts.Heart    heart,
          redeclare Smith2004Model.Parts.Pulmonary
                                             pulmonaryCirculation,
          redeclare Smith2004Model.Parts.Systemic
                                            systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end SmithTransfussion2;

      model SmithTransfussion3
        extends Cardiovascular.System(
          redeclare Smith2004Model.Parts.Heart2   heart,
          redeclare Smith2004Model.Parts.Pulmonary
                                             pulmonaryCirculation,
          redeclare Smith2004Model.Parts.Systemic
                                            systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end SmithTransfussion3;

      model FernandezTransfussion2
        extends Cardiovascular.System(
          redeclare Examples.FernandezModel2013.Parts.Heart
                                                  heart,
          redeclare Examples.FernandezModel2013.Parts.Pulmonary
                                             pulmonaryCirculation,
          redeclare Examples.FernandezModel2013.Parts.Systemic
                                            systemicCirculation);

        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-40,-14},{-20,6}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-20,-4},{-14,-4},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end FernandezTransfussion2;
    end Experiments;

    package Fernandez2013
    end Fernandez2013;

    package Maksuti2015 "Model of heart based on AV piston theory"
      model HemodynamicsMaksuti
        extends System(redeclare Burkhoff.Parts.Pulmonary pulmonaryCirculation,
            redeclare Burkhoff.Parts.Systemic systemicCirculation(Cvs(
                volume_start=0.002901)),
          redeclare Heart heart);
      end HemodynamicsMaksuti;

      model Heart
        extends Interfaces.Heart;
        Burkhoff.Parts.ElasticVesselWithSVandP LA(
          useComplianceInput=false,
          useExternalPressureInput=false,
          volume_start=8.1e-05,
          ZeroPressureVolume=5e-06,
          Compliance=2.250184727537e-09)
          annotation (Placement(transformation(extent={{54,-48},{74,-28}})));
        Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit=
                "ml/(mmHg.s)") = 9.3757696980707e-07)                                                             annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={32,-38})));
        Burkhoff.Parts.ElasticVesselWithSVandP LV(
          useComplianceInput=false,
          useExternalPressureInput=true,
          volume_start=0.000125,
          ZeroPressureVolume=5e-06,
          Compliance=2.250184727537e-09)
          annotation (Placement(transformation(extent={{4,-48},{24,-28}})));
        Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit=
                "ml/(mmHg.s)") = 1.5001231516913e-06)                                                              annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-64,-40})));
        Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit=
                "ml/(mmHg.s)") = 3.7503078792283e-07)                                                             annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={28,40})));
        Burkhoff.Parts.ElasticVesselWithSVandP RV(
          ExternalPressure=0,
          useComplianceInput=false,
          useExternalPressureInput=true,
          volume_start=0.000112,
          ZeroPressureVolume=5e-06,
          Compliance=2.250184727537e-09)
          annotation (Placement(transformation(extent={{-34,30},{-14,50}})));
        Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit=
                "ml/(mmHg.s)") = 9.3757696980707e-07)                                                             annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-44,40})));
        Burkhoff.Parts.ElasticVesselWithSVandP RA(
          useComplianceInput=false,
          useExternalPressureInput=false,
          volume_start=7.3e-05,
          ZeroPressureVolume=5e-06,
          Compliance=2.250184727537e-09)
          annotation (Placement(transformation(extent={{-82,30},{-62,50}})));
        replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                     heartRate(k=
              1.3333333333333)                                                      annotation(Placement(transformation(extent={{-98,8},
                  {-84,22}})));
        Hydraulic.Components.BloodFlowMeasurement bloodFlowMeasurement
          annotation (Placement(transformation(extent={{-76,-50},{-96,-30}})));
        AVPiston aVPiston(A1=0.0025, A2=0.0050)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={28,-12})));
        ForceProfile forceProfile(
          tv1=0.1,
          tv2=0.350,
          tv3=0.01,
          ta1=0.1,
          ta2=0.2,
          ta3=0.1,
          tv0=0.1,
          ta0=0.6,
          Fa=1500*0.0133322368,
          Fv=7350*0.0133322368,
          frequency=1.3333333333333)
          annotation (Placement(transformation(extent={{-6,-4},{14,16}})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure2
          annotation (Placement(transformation(extent={{50,-24},{36,-14}})));
        ForceProfile forceProfile1(
          tv1=0.1,
          tv2=0.350,
          tv3=0.01,
          ta1=0.1,
          ta2=0.2,
          ta3=0.1,
          tv0=0.1,
          ta0=0.6,
          Fv=0.3*7350*0.0133322368,
          Fa=0.3*1500*0.0133322368,
          frequency=1.3333333333333)
          annotation (Placement(transformation(extent={{-46,78},{-26,98}})));
        AVPiston aVPiston1(A1=0.0015, A2=0.0025)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-28,64})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure3
          annotation (Placement(transformation(extent={{-60,50},{-46,60}})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit=
                "mmHg.s2/ml") = 2666.4477483, volumeFlow_start(displayUnit=
                "l/min") = 0) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-22,-40})));
        Physiolibrary.Hydraulic.Components.Inertia inertia1(I(displayUnit=
                "mmHg.s2/ml") = 2666.4477483, volumeFlow_start(displayUnit=
                "l/min") = 0) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={0,40})));
      equation
        connect(rightHeartInflow, RA.q_in) annotation (Line(
            points={{-100,40},{-72,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RA.q_in, TV.q_in) annotation (Line(
            points={{-72,40},{-54,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(TV.q_out, RV.q_in) annotation (Line(
            points={{-34,40},{-24,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(PV.q_out, rightHeartOutflow) annotation (Line(
            points={{38,40},{100,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftHeartInflow, LA.q_in) annotation (Line(
            points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-38}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(LA.q_in, MV.q_in) annotation (Line(
            points={{64,-38},{42,-38}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(bloodFlowMeasurement.q_in, AOV.q_out) annotation (Line(
            points={{-76,-40},{-74,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation (
            Line(
            points={{-96,-40},{-100,-40},{-100,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(bloodFlowMeasurement.HR, heartRate.y) annotation (Line(
            points={{-80,-30},{-82,-30},{-82,15},{-82.25,15}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(forceProfile.F, aVPiston.Fh) annotation (Line(
            points={{13.4,7},{28,7},{28,-2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.q_in, MV.q_out) annotation (Line(
            points={{14,-38},{22,-38}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(forceProfile1.F, aVPiston1.Fh) annotation (Line(
            points={{-26.6,89},{-28,89},{-28,74}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pressureMeasure3.pressure, aVPiston1.pressure) annotation (Line(
            points={{-48.8,53},{-48.8,62.5},{-36,62.5},{-36,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AOV.q_in, inertia.q_out) annotation (Line(
            points={{-54,-40},{-32,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(inertia.q_in, LV.q_in) annotation (Line(
            points={{-12,-40},{-12,-38},{14,-38}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure2.q_in, MV.q_in) annotation (Line(
            points={{45.8,-22},{46,-22},{46,-38},{42,-38}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(LV.externalPressure, aVPiston.pressure1) annotation (Line(
            points={{22,-30},{20,-30},{20,-12},{19.6,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(aVPiston.pressure, pressureMeasure2.pressure) annotation (Line(
            points={{36,-12},{38,-12},{38,-21},{38.8,-21}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pressureMeasure3.q_in, TV.q_in) annotation (Line(
            points={{-55.8,52},{-58,52},{-58,40},{-54,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aVPiston1.pressure1, RV.externalPressure) annotation (Line(
            points={{-19.6,64},{-18,64},{-18,48},{-16,48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.q_in, inertia1.q_in) annotation (Line(
            points={{-24,40},{-10,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(inertia1.q_out, PV.q_in) annotation (Line(
            points={{10,40},{18,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                Text(
                extent={{-100,60},{100,100}},
                lineColor={0,0,0},
                textString="Maksuti")}));
      end Heart;

      model AVPiston

        parameter Modelica.SIunits.Area A1,A2;
        ForceInput Fh annotation (Placement(transformation(extent={{-12,76},
                  {28,116}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,100})));
        Physiolibrary.Types.RealIO.PressureInput pressure annotation (Placement(
              transformation(extent={{-22,-80},{18,-40}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,0})));
        Physiolibrary.Types.RealIO.PressureOutput pressure1 annotation (Placement(
              transformation(extent={{-100,-10},{-80,10}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={-84,0})));
      equation
        Fh=A2*pressure1-A1*pressure;
      //  q_out.q=0;
      //  q_in.q=0;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Rectangle(extent={{-86,66},{-64,-66}}, lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255}),
              Rectangle(extent={{-62,40},{60,-40}}, lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255}),
              Rectangle(extent={{62,60},{84,-60}}, lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255}),
              Line(
                points={{-82,80},{68,80}},
                color={0,0,255},
                smooth=Smooth.None)}));
      end AVPiston;

      connector ForceInput =        input Modelica.SIunits.Force
        "input Force as connector"
        annotation (defaultComponentName="acceleration",
        Icon(graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)},
             coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
        Diagram(coordinateSystem(
              preserveAspectRatio=true, initialScale=0.2,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{0,50},{100,0},{0,-50},{0,50}},
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid), Text(
                extent={{-10,85},{-10,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
    <p>
    Connector with one input signal of type Acceleration.
    </p>
    </html>"));
      model ForceProfile
        parameter Real tv0,tv1,tv2,tv3,ta0,ta1,ta2,ta3;
        parameter Modelica.SIunits.Force Fv,Fa;

        parameter Physiolibrary.Types.Frequency frequency;
        ForceOutput F annotation (Placement(transformation(extent={{84,0},{
                  104,20}}), iconTransformation(extent={{84,0},{104,20}})));
        Modelica.Blocks.Sources.Trapezoid VentricleTrapezoid(period=1/frequency,
          amplitude=Fv,
          rising=tv1/frequency,
          width=tv2/frequency,
          falling=tv3/frequency,
          startTime=tv0)
          annotation (Placement(transformation(extent={{-12,28},{8,48}})));
        Modelica.Blocks.Sources.Trapezoid AtriaTrapezoid(              period=1/frequency,
          amplitude=-Fa,
          rising=ta1/frequency,
          width=ta2/frequency,
          falling=ta3/frequency,
          startTime=ta0)
          annotation (Placement(transformation(extent={{-14,-24},{6,-4}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{30,0},{50,20}})));
      equation
        connect(F, add.y) annotation (Line(
            points={{94,10},{51,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.u1, VentricleTrapezoid.y) annotation (Line(
            points={{28,16},{18,16},{18,38},{9,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.u2, AtriaTrapezoid.y) annotation (Line(
            points={{28,4},{18,4},{18,-14},{7,-14}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Line(
                points={{-80,20},{-40,20},{-20,80},{0,82},{6,20},{58,20},{64,6},{70,6},
                    {76,20},{84,20}},
                color={0,0,255},
                smooth=Smooth.None)}), Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics));
      end ForceProfile;

      connector ForceOutput =        output Modelica.SIunits.Force
        "output Force as connector"
        annotation (defaultComponentName="acceleration",
        Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,100},{100,0},{-100,-100},{-100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Polygon(
                points={{-100,50},{0,0},{-100,-50},{-100,50}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{30,110},{30,60}},
                lineColor={0,0,127},
                textString="%name")}),
          Documentation(info="<html>
  <p>
  Connector with one output signal of type Real.
  </p>
  </html>"));
      model testPiston
        ForceProfile forceProfile(
          tv1=0.1,
          tv2=0.350,
          tv3=0.01,
          ta1=0.1,
          ta2=0.2,
          ta3=0.1,
          tv0=0.1,
          Fv=7350*0.0133322368,
          Fa=1500*0.0133322368,
          ta0=0.7,
          frequency=1.3333333333333)
          annotation (Placement(transformation(extent={{-42,10},{-22,30}})));
        AVPiston aVPiston(A1=0.0025, A2=0.0050)
          annotation (Placement(transformation(extent={{-28,-18},{-8,2}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={20,-8})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow(displayUnit="l/min") = 8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-80,-18},{-60,2}})));
      equation
        connect(forceProfile.F, aVPiston.Fh) annotation (Line(
            points={{-22.6,21},{-22.6,12.5},{-18,12.5},{-18,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(unlimitedVolume.y, aVPiston.q_out) annotation (Line(
            points={{10,-8},{-8,-8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(unlimitedPump.q_out, aVPiston.q_in) annotation (Line(
            points={{-60,-8},{-28,-8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end testPiston;

      model MaksutiVsBurkhoff
        HemodynamicsMaksuti hemodynamicsMaksuti
          annotation (Placement(transformation(extent={{-58,-38},{-24,40}})));
        Burkhoff.HemodynamicsBurkhoff hemodynamicsBurkhoff
          annotation (Placement(transformation(extent={{24,-38},{66,34}})));
        annotation (experiment(
            StopTime=10,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=1e-06), __Dymola_experimentSetupOutput);
      end MaksutiVsBurkhoff;
    end Maksuti2015;
  end Model;

  package Examples
    "package of components which are already within Physiolibrary"
    extends Modelica.Icons.ExamplesPackage;
    model TwoBaloon
      "Example of two elastic baloons with liquid connected via resistor"
      extends Modelica.Icons.Example;
      Physiolibrary.Hydraulic.Components.ElasticVessel arteries(
        volume_start=0.000501,
        ZeroPressureVolume=0.0005,
        Compliance=1.5001231516913e-08)
        annotation (Placement(transformation(extent={{-40,-12},{-20,8}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel veins(
        volume_start=0.002,
        ZeroPressureVolume=0.0005,
        Compliance=7.5006157584566e-09)
        annotation (Placement(transformation(extent={{24,-12},{44,8}})));
      Physiolibrary.Hydraulic.Components.Conductor systemic(Conductance(
            displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={0,-2})));
    equation
      connect(arteries.q_in, systemic.q_in) annotation (Line(
          points={{-30,-2},{-10,-2}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(systemic.q_out, veins.q_in) annotation (Line(
          points={{10,-2},{34,-2}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>", info = "<html>
<p>Experiment with liquid and two balloons connected with resistor. </p>
</html>"));
    end TwoBaloon;

    model Windkessel_2element "Two-element Windkessel model"
      extends Modelica.Icons.Example;
      Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel arteries(ZeroPressureVolume(displayUnit = "l") = 0.00085, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-08, volume_start(displayUnit = "l") = 0.00097) annotation(Placement(transformation(extent = {{-14, 38}, {6, 58}})));
      Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {18, 34})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
      Utilities.Pulses pulses(QP(displayUnit = "m3/s") = 0.000424, HR = 1.2) annotation(Placement(transformation(extent = {{-64, 58}, {-44, 78}})));
    equation
      connect(heart.q_out, arteries.q_in) annotation(Line(points = {{-30, 48}, {-4, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(resistance.q_out, veins.y) annotation(Line(points = {{18, 24}, {18, 20}, {-30, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(resistance.q_in, arteries.q_in) annotation(Line(points = {{18, 44}, {18, 48}, {-4, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>", info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"), experiment(StopTime = 5));
    end Windkessel_2element;

    model Windkessel_3element "Three-element windkessel model"
      extends Modelica.Icons.Example;
      Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel arteries(ZeroPressureVolume(displayUnit = "l") = 0.00085, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-08, volume_start(displayUnit = "l") = 0.00097) annotation(Placement(transformation(extent = {{16, 38}, {36, 58}})));
      Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {50, 34})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
      Utilities.Pulses pulses(QP(displayUnit = "m3/s") = 0.000424, TD1(displayUnit = "s"), HR(displayUnit = "1/min") = 1.2) annotation(Placement(transformation(extent = {{-64, 58}, {-44, 78}})));
      Physiolibrary.Hydraulic.Components.Conductor impedance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.5001231516913e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-6, 48})));
    equation
      connect(resistance.q_out, veins.y) annotation(Line(points = {{50, 24}, {50, 20}, {-30, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.q_out, impedance.q_in) annotation(Line(points = {{-30, 48}, {-16, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(impedance.q_out, arteries.q_in) annotation(Line(points = {{4, 48}, {26, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(resistance.q_in, arteries.q_in) annotation(Line(points = {{50, 44}, {50, 48}, {26, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "3-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
<p> </p>
</html>", info = "<html>
<p>Three-element windkessel model, updated two-element windkessel model with an impedance element. Impedance can be approximated by resistance.</p>
<ul>
<li>Westerhof N, Elzinga G (1991) Normalized input impedance and arterial decay time over heart period are independent of animal size. Am J Physiol 261:R126&ndash;R133</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
</ul>
</html>"), experiment(StopTime = 5));
    end Windkessel_3element;

    model Windkessel_4element "Four-element windkessel model"
      extends Modelica.Icons.Example;
      Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel arteries(ZeroPressureVolume(displayUnit = "l") = 0.00085, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-08, volume_start(displayUnit = "l") = 0.00097) annotation(Placement(transformation(extent = {{16, 38}, {36, 58}})));
      Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {48, 34})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
      Utilities.Pulses pulses(QP(displayUnit = "m3/s") = 0.000424, HR = 1.2) annotation(Placement(transformation(extent = {{-64, 58}, {-44, 78}})));
      Physiolibrary.Hydraulic.Components.Conductor impedance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.5001231516913e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-6, 48})));
      Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 666611.937075, volumeFlow_start(displayUnit = "l/min") = 8.3333333333333e-05) annotation(Placement(transformation(extent = {{-16, 56}, {4, 76}})));
    equation
      connect(resistance.q_out, veins.y) annotation(Line(points = {{48, 24}, {48, 20}, {-30, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.q_out, impedance.q_in) annotation(Line(points = {{-30, 48}, {-16, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(impedance.q_out, arteries.q_in) annotation(Line(points = {{4, 48}, {26, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(heart.q_out, inertia.q_in) annotation(Line(points = {{-30, 48}, {-26, 48}, {-26, 66}, {-16, 66}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(inertia.q_out, arteries.q_in) annotation(Line(points = {{4, 66}, {12, 66}, {12, 48}, {26, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(resistance.q_in, arteries.q_in) annotation(Line(points = {{48, 44}, {48, 48}, {26, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "4-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>", info = "<html>
<p>Four-element windkessel model, updated three-element windkessel model with an inertia element. </p>
<ul>
<li>Stergiopulos N, Westerhof BE, Westerhof N (1999) Total arterial inertance as the fourth element of the windkessel model. Am J Physiol 276:H81&ndash;H88</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
</ul>
</html>"), experiment(StopTime = 5));
    end Windkessel_4element;

    package Utilities "Utility components used by package Examples"
      extends Modelica.Icons.UtilitiesPackage;
      model Pulses "example pulse flow generator"
        import Physiolibrary.Types.*;
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeflowrate annotation(Placement(transformation(extent = {{80, -10}, {100, 10}}), iconTransformation(extent = {{80, -10}, {100, 10}})));
        discrete Time T0(start=0) "begining of cardiac cycle";
        Boolean b(start = false);
        discrete Time HP "duration of cardiac cycle";
        parameter Frequency HR = 1.2;
      //  discrete Time tc "relative time in carciac cycle";
        parameter Time TD1 = 0.07 "relative time of start of systole";
        discrete Time TD2 "relative time of end of systole";
        parameter VolumeFlowRate QP = 0.000424 "peak volume flowrate";
      equation
        b = time - pre(T0) >= pre(HP) "true if new cardiac cycle begins";
        when {initial(), b} then
          T0 = time "set begining of cardiac cycle";
          HP = 1 / HR "update length of carciac cycle";
          TD2 = TD1 + 2 / 5 * HP "compute end time of systole";
        end when;
        //tc = time - T0 "relative time in carciac cycle";
        volumeflowrate = if (time - T0) < TD1 then 0 else if (time - T0) < TD2 then sin((time - T0 - TD1) / (TD2 - TD1) * Modelica.Constants.pi) * QP else 0
          "zero before and after systole, otherwise sin up to peak flow";
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-80, 80}, {80, -80}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                  fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-70, 0}, {-50, 0}, {-48, 2}, {-42, 52}, {-36, 60}, {-28, 52}, {-24, 2}, {-20, 0}, {14, 0}, {18, 2}, {24, 48}, {24, 54}, {32, 58}, {40, 50}, {44, 2}, {50, 0}, {74, 0}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-80, 108}, {80, 88}}, lineColor=  {0, 0, 255}, textString=  "%name"), Text(extent=  {{-80, -92}, {78, -112}}, lineColor=  {0, 0, 255}, textString=  "rate=%HR")}));
      end Pulses;
    end Utilities;

    package KofranekModel2013
      "models of cardiovascular system used in www.physiome.cz/atlas"
      extends Modelica.Icons.ExamplesPackage;
      model NonPulsatileCirculation
        extends Physiolibrary.Icons.CardioVascular;
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = true, useComplianceInput = true, volume_start = 0.000373) annotation(Placement(transformation(extent = {{-40, 28}, {-20, 48}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CAP(k = 2.2576853432954e-08) annotation(Placement(transformation(extent = {{-50, 56}, {-36, 70}})));
        Physiolibrary.Types.Constants.VolumeConst V0AP(k = 0.000327) annotation(Placement(transformation(extent = {{-66, 44}, {-52, 58}})));
        Physiolibrary.Hydraulic.Components.Conductor TotalPulmonaryResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-2, 28}, {18, 48}})));
        Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RP(k(displayUnit = "(Pa.s)/m3") = 9332567.11905) annotation(Placement(transformation(extent = {{-6, 60}, {6, 70}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = true, useComplianceInput = true, volume_start = 0.000704) annotation(Placement(transformation(extent = {{42, 28}, {62, 48}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CVP(k = 2.250184727537e-07) annotation(Placement(transformation(extent = {{36, 60}, {50, 74}})));
        Physiolibrary.Types.Constants.VolumeConst V0VP(k = 0.000435) annotation(Placement(transformation(extent = {{20, 48}, {34, 62}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel SystemicVeins(useV0Input = true, useComplianceInput = true, volume_start = 0.003922) annotation(Placement(transformation(extent = {{-46, -70}, {-26, -50}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CVS(k = 1.5001231516913e-06) annotation(Placement(transformation(extent = {{-52, -42}, {-38, -28}})));
        Physiolibrary.Types.Constants.VolumeConst V0VS(k = 0.002845) annotation(Placement(transformation(extent = {{-74, -54}, {-60, -40}})));
        Physiolibrary.Hydraulic.Components.Conductor TotalSystemicResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{16, -70}, {-4, -50}})));
        Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RT(k(displayUnit = "(Pa.s)/m3") = 133322387.415) annotation(Placement(transformation(extent = {{-14, -50}, {-4, -40}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel SystemicArteries(useV0Input = true, useComplianceInput = true, volume_start = 0.000672) annotation(Placement(transformation(extent = {{36, -70}, {56, -50}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CAS(k = 1.1250923637685e-08) annotation(Placement(transformation(extent = {{30, -38}, {44, -24}})));
        Physiolibrary.Types.Constants.VolumeConst V0AS(k = 0.000529) annotation(Placement(transformation(extent = {{14, -50}, {28, -36}})));
        replaceable Parts.HeartPump rightHeart(StarlingSlope(displayUnit = "ml/(mmHg.s)") = 1.2503526469347e-07) annotation(Placement(transformation(extent={{-72,-8},
                  {-48,18}})));
        replaceable Parts.HeartPump leftHeart(StarlingSlope(displayUnit=
                "ml/(mmHg.s)") = 7.5006157584566e-08)                                                         annotation(Placement(transformation(extent = {{74, -10}, {52, 10}})));
      equation
        connect(CAP.y, PulmonaryArteries.compliance) annotation(Line(points = {{-34.25, 63}, {-30, 63}, {-30, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(V0AP.y, PulmonaryArteries.zeroPressureVolume) annotation(Line(points = {{-50.25, 51}, {-50.25, 50.5}, {-38, 50.5}, {-38, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RP.y, TotalPulmonaryResistance.cond) annotation(Line(points = {{7.5, 65}, {8, 65}, {8, 44}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(CVP.y, PulmonaryVeins.compliance) annotation(Line(points = {{51.75, 67}, {52, 67}, {52, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(CVS.y, SystemicVeins.compliance) annotation(Line(points = {{-36.25, -35}, {-36, -35}, {-36, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RT.y, TotalSystemicResistance.cond) annotation(Line(points = {{-2.75, -45}, {6, -45}, {6, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(CAS.y, SystemicArteries.compliance) annotation(Line(points = {{45.75, -31}, {46, -31}, {46, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(PulmonaryArteries.q_in, TotalPulmonaryResistance.q_in) annotation(Line(points = {{-30, 38}, {-2, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TotalPulmonaryResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{18, 38}, {52, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.q_in, leftHeart.inflow) annotation(Line(points = {{52, 38}, {74, 38}, {74, 4.44089e-16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(leftHeart.outflow, SystemicArteries.q_in) annotation(Line(points={{57.28,
                1.2},{57.28,-60},{46,-60}},                                                                                 color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArteries.q_in, TotalSystemicResistance.q_in) annotation(Line(points = {{46, -60}, {16, -60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TotalSystemicResistance.q_out, SystemicVeins.q_in) annotation(Line(points = {{-4, -60}, {-36, -60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicVeins.q_in, rightHeart.inflow) annotation(Line(points={{-36,-60},
                {-78,-60},{-78,5},{-72,5}},                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.zeroPressureVolume, V0VP.y) annotation(Line(points = {{44, 46}, {40, 46}, {40, 55}, {35.75, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(SystemicVeins.zeroPressureVolume, V0VS.y) annotation(Line(points = {{-44, -52}, {-52, -52}, {-52, -47}, {-58.25, -47}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(V0AS.y, SystemicArteries.zeroPressureVolume) annotation(Line(points = {{29.75, -43}, {38, -43}, {38, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(rightHeart.outflow, PulmonaryArteries.q_in) annotation(Line(points={{-53.76,
                6.56},{-53.76,38},{-30,38}},                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Documentation(info = "<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it. </p>
<ul>
<li>J. Kofranek, S. Matousek, J. Rusz, P. Stodulka, P. Privitzer,M. Matejak, M. Tribula, The Atlas of Physiology and Pathophysiology: Web-based multimedia enabled interactive simulations., Comput. Methods Programs Biomed. 104 (2) (2011) 143&ndash;53. doi:10.1016/j.cmpb.2010.12.007.</li>
<li><a href=\"http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html\">http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html</a></li>
</ul>
</html>", revisions = "<html>
<ul>
<li><i>Sep 2014 </i>by Martin Tribula, Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"));
      end NonPulsatileCirculation;

      model PulsatileCirculation
        extends NonPulsatileCirculation(redeclare Parts.PulsatileHeartPump rightHeart(pulses(QP = 0.000338)), redeclare
            Parts.PulsatileHeartPump                                                                                                     leftHeart(pulses(QP = 0.000338)), CAS(k = 7.2755972857029e-09), SystemicArteries(volume_start = 0.000603), SystemicVeins(volume_start = 0.003991));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Documentation(info = "<html>
<p>Extension of the model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes. MEFANET Journal 2014. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>", revisions = "<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"));
      end PulsatileCirculation;

      package Parts "Utility components used by package KofranekModels2013"
        extends Modelica.Icons.UtilitiesPackage;
        model HeartPump "Heart as pump, which flowrate is determined 
                                          by the StarlingSlope and filling pressure."
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-142, -62}, {-122, -42}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{-144, -66}, {-124, -46}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
          parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
        equation
          inflow.q + outflow.q = 0;
          inflow.q = StarlingSlope * inflow.pressure;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{32, -34}, {24, -24}, {18, -10}, {18, -8}, {22, 22}, {24, 24}, {34, 40}, {30, 70}, {26, 82}, {-22, 100}, {-26, 42}, {-26, 40}, {-30, -6}, {-30, -10}, {-6, -40}, {52, -74}, {32, -34}}, lineColor=  {0, 0, 127}, smooth=  Smooth.Bezier, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -60}, {102, -98}}, lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
        end HeartPump;

        model PulsatileHeartPump "Heart as pump, which flowrate is determined 
                                          by the StarlingSlope and filling pressure."
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-64, 0}, {-44, 20}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{42, 2}, {62, 22}}), iconTransformation(extent = {{42, 2}, {62, 22}})));
          Utilities.Pulses pulses annotation(Placement(transformation(extent = {{-40, 30}, {-20, 50}})));
          Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-14, 2}, {6, 22}})));
          parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
        equation
          connect(pump.q_out, outflow) annotation(Line(points = {{6, 12}, {52, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pump.solutionFlow, pulses.volumeflowrate) annotation(Line(points = {{-4, 19}, {-4, 40}, {-21, 40}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inflow, pump.q_in) annotation(Line(points = {{-54, 10}, {-34, 10}, {-34, 12}, {-14, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(inflow, inflow) annotation(Line(points = {{-54, 10}, {-54, 10}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{32, -34}, {24, -24}, {18, -10}, {18, -8}, {22, 22}, {24, 24}, {34, 40}, {30, 70}, {26, 82}, {-22, 100}, {-26, 42}, {-26, 40}, {-30, -6}, {-30, -10}, {-6, -40}, {52, -74}, {32, -34}}, lineColor=  {0, 0, 127}, smooth=  Smooth.Bezier, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -60}, {102, -98}}, lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end PulsatileHeartPump;

        model PulsatileHeartPumpStarling
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-64, 0}, {-44, 20}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{42, 2}, {62, 22}}), iconTransformation(extent = {{42, 2}, {62, 22}})));
          Utilities.pulses_Starling pulses(starlingSlope = StarlingSlope) annotation(Placement(transformation(extent = {{-24, 30}, {-4, 50}})));
          Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-14, 2}, {6, 22}})));
          parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure annotation(Placement(transformation(extent = {{-54, 32}, {-34, 52}})));
        equation
          connect(inflow, pump.q_in) annotation(Line(points = {{-54, 10}, {-34, 10}, {-34, 12}, {-14, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pump.q_out, outflow) annotation(Line(points = {{6, 12}, {30, 12}, {30, 12}, {52, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(inflow, pressureMeasure.q_in) annotation(Line(points = {{-54, 10}, {-52, 10}, {-52, 36}, {-48, 36}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pressureMeasure.pressure, pulses.pressure) annotation(Line(points = {{-38, 38}, {-24, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(pulses.volumeflowrate, pump.solutionFlow) annotation(Line(points={{-5,40},
                  {-4,40},{-4,19}},                                                                                  color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{32, -34}, {24, -24}, {18, -10}, {18, -8}, {22, 22}, {24, 24}, {34, 40}, {30, 70}, {26, 82}, {-22, 100}, {-26, 42}, {-26, 40}, {-30, -6}, {-30, -10}, {-6, -40}, {52, -74}, {32, -34}}, lineColor=  {0, 0, 127}, smooth=  Smooth.Bezier, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -60}, {102, -98}}, lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end PulsatileHeartPumpStarling;
      end Parts;

      model PulsatileCirculation_compMJ
        extends PulsatileCirculation(RT(k(displayUnit = "(mmHg.s)/ml") = 119990148.6735), CAS(k(displayUnit = "m3/Pa") = 7.950652703964e-09), SystemicArteries(volume_start = 0.000608), SystemicVeins(volume_start = 0.003962), CVS(k(displayUnit = "m3/Pa")), CAP(k(displayUnit = "m3/Pa")), CVP(k(displayUnit = "m3/Pa")), leftHeart(pulses(TD1(displayUnit = "s"), QP(displayUnit = "m3/s"))));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end PulsatileCirculation_compMJ;

      model PulsatileCirculationStarling
        extends NonPulsatileCirculation(redeclare
            Parts.PulsatileHeartPumpStarling                                       rightHeart, redeclare
            Parts.PulsatileHeartPumpStarling                                                                                              leftHeart);
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end PulsatileCirculationStarling;

      model NonPulsatileCirculationExperiment
        extends Physiolibrary.Icons.CardioVascular;
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = true, useComplianceInput = true, volume_start = 0.000373) annotation(Placement(transformation(extent = {{-40, 28}, {-20, 48}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CAP(k = 2.2576853432954e-08) annotation(Placement(transformation(extent = {{-50, 56}, {-36, 70}})));
        Physiolibrary.Types.Constants.VolumeConst V0AP(k = 0.000327) annotation(Placement(transformation(extent = {{-66, 44}, {-52, 58}})));
        Physiolibrary.Hydraulic.Components.Conductor TotalPulmonaryResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{-2, 28}, {18, 48}})));
        Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RP(k(displayUnit = "(Pa.s)/m3") = 9332567.11905) annotation(Placement(transformation(extent = {{-6, 60}, {6, 70}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = true, useComplianceInput = true, volume_start = 0.000704) annotation(Placement(transformation(extent = {{42, 28}, {62, 48}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CVP(k = 2.250184727537e-07) annotation(Placement(transformation(extent = {{36, 60}, {50, 74}})));
        Physiolibrary.Types.Constants.VolumeConst V0VP(k = 0.000435) annotation(Placement(transformation(extent = {{20, 48}, {34, 62}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel SystemicVeins(useV0Input = true, useComplianceInput = true, volume_start = 0.003922) annotation(Placement(transformation(extent = {{-46, -70}, {-26, -50}})));
        Physiolibrary.Types.Constants.VolumeConst V0VS(k = 0.002845) annotation(Placement(transformation(extent = {{-74, -54}, {-60, -40}})));
        Physiolibrary.Hydraulic.Components.Conductor TotalSystemicResistance(useConductanceInput = true) annotation(Placement(transformation(extent = {{16, -70}, {-4, -50}})));
        Physiolibrary.Types.Constants.HydraulicResistanceToConductanceConst RT(k(displayUnit = "(Pa.s)/m3") = 133322387.415) annotation(Placement(transformation(extent = {{-14, -50}, {-4, -40}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel SystemicArteries(useV0Input = true, useComplianceInput = true, volume_start = 0.000672) annotation(Placement(transformation(extent = {{36, -70}, {56, -50}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CAS(k = 1.1250923637685e-08) annotation(Placement(transformation(extent = {{30, -38}, {44, -24}})));
        Physiolibrary.Types.Constants.VolumeConst V0AS(k = 0.000529) annotation(Placement(transformation(extent = {{14, -50}, {28, -36}})));
        replaceable Parts.HeartPump rightHeart(StarlingSlope(displayUnit = "ml/(mmHg.s)") = 1.2503526469347e-07) annotation(Placement(transformation(extent = {{-72, -10}, {-48, 16}})));
        replaceable Parts.HeartPump leftHeart(StarlingSlope(displayUnit = "m3/(Pa.s)") = 7.5006157584566e-08) annotation(Placement(transformation(extent = {{74, -10}, {52, 10}})));
        Model.Fernandez2014.Experiments.Stenosis stenosis(InitialElastance = 666611, FinalElastance = 333306) annotation(Placement(transformation(extent = {{-48, -38}, {-28, -18}})));
      equation
        connect(CAP.y, PulmonaryArteries.compliance) annotation(Line(points = {{-34.25, 63}, {-30, 63}, {-30, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(V0AP.y, PulmonaryArteries.zeroPressureVolume) annotation(Line(points = {{-50.25, 51}, {-50.25, 50.5}, {-38, 50.5}, {-38, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RP.y, TotalPulmonaryResistance.cond) annotation(Line(points = {{7.5, 65}, {8, 65}, {8, 44}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(CVP.y, PulmonaryVeins.compliance) annotation(Line(points = {{51.75, 67}, {52, 67}, {52, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RT.y, TotalSystemicResistance.cond) annotation(Line(points = {{-2.75, -45}, {6, -45}, {6, -54}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(CAS.y, SystemicArteries.compliance) annotation(Line(points = {{45.75, -31}, {46, -31}, {46, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(PulmonaryArteries.q_in, TotalPulmonaryResistance.q_in) annotation(Line(points = {{-30, 38}, {-2, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TotalPulmonaryResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{18, 38}, {52, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.q_in, leftHeart.inflow) annotation(Line(points = {{52, 38}, {74, 38}, {74, 4.44089e-16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(leftHeart.outflow, SystemicArteries.q_in) annotation(Line(points = {{57.28, 1.2}, {57.28, -60}, {46, -60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArteries.q_in, TotalSystemicResistance.q_in) annotation(Line(points = {{46, -60}, {16, -60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TotalSystemicResistance.q_out, SystemicVeins.q_in) annotation(Line(points = {{-4, -60}, {-36, -60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicVeins.q_in, rightHeart.inflow) annotation(Line(points = {{-36, -60}, {-78, -60}, {-78, 3}, {-72, 3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.zeroPressureVolume, V0VP.y) annotation(Line(points = {{44, 46}, {40, 46}, {40, 55}, {35.75, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(SystemicVeins.zeroPressureVolume, V0VS.y) annotation(Line(points = {{-44, -52}, {-52, -52}, {-52, -47}, {-58.25, -47}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(V0AS.y, SystemicArteries.zeroPressureVolume) annotation(Line(points = {{29.75, -43}, {38, -43}, {38, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(rightHeart.outflow, PulmonaryArteries.q_in) annotation(Line(points = {{-53.76, 4.56}, {-53.76, 38}, {-30, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(stenosis.hydrauliccompliance, SystemicVeins.compliance) annotation(Line(points = {{-37.2, -25.6}, {-37.2, -39.8}, {-36, -39.8}, {-36, -52}}, color = {0, 0, 127}, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Documentation(info = "<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it. </p>
<ul>
<li>J. Kofranek, S. Matousek, J. Rusz, P. Stodulka, P. Privitzer,M. Matejak, M. Tribula, The Atlas of Physiology and Pathophysiology: Web-based multimedia enabled interactive simulations., Comput. Methods Programs Biomed. 104 (2) (2011) 143&ndash;53. doi:10.1016/j.cmpb.2010.12.007.</li>
<li><a href=\"http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html\">http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html</a></li>
</ul>
</html>", revisions = "<html>
<ul>
<li><i>Sep 2014 </i>by Martin Tribula, Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"));
      end NonPulsatileCirculationExperiment;

      model PulsatileCirculationExperiment
        extends NonPulsatileCirculationExperiment(redeclare
            Parts.PulsatileHeartPump                                                 rightHeart(pulses(QP = 0.000338)), redeclare
            Parts.PulsatileHeartPump                                                                                                     leftHeart(pulses(QP = 0.000338)), CAS(k = 7.2755972857029e-09), SystemicArteries(volume_start = 0.000603), SystemicVeins(volume_start = 0.003991));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Documentation(info = "<html>
<p>Extension of the model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes. MEFANET Journal 2014. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>", revisions = "<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"));
      end PulsatileCirculationExperiment;
      annotation(Documentation(info = "<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
</html>"));
    end KofranekModel2013;

    package FernandezModel2013
      "Model of CVS introduced by Fernandez de Canete et al. 2013"
      model HemodynamicsCanete
        extends System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
      end HemodynamicsCanete;
      extends Modelica.Icons.ExamplesPackage;
      package Parts "Utility components used by package KofranekModels2013"
        extends Modelica.Icons.UtilitiesPackage;
        model TimeVaryingElastance
          parameter Physiolibrary.Types.HydraulicElastance Ed
            "elastance of diastole";
          parameter Physiolibrary.Types.HydraulicElastance Es
            "elastance of systole";
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real a;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -90})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {70, -90})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-106, 56}, {-66, 96}}), iconTransformation(extent = {{-106, 56}, {-66, 96}})));
        equation
          tm = time - pre(t0);
          if tm < pre(ts) then
            a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
          else
            a = 0;
          end if;
          E = Ed + Es * a;
          C = 1 / E;
          Pi = Pi0 * a;
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-80, 80}, {80, -80}}, lineColor=  {0, 0, 255}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-78, 0}, {-68, 18}, {-54, 52}, {-44, 64}, {-30, 60}, {-26, 46}}, color=  {0, 0, 255}, smooth=  Smooth.None), Line(points=  {{-26, 46}, {-26, 32}, {-20, 10}, {-8, 2}, {36, 2}, {80, 2}}, color=  {0, 0, 255}, smooth=  Smooth.None), Text(extent=  {{-70, 98}, {-22, 80}}, lineColor=  {0, 0, 255}, textString=  "HR"), Text(extent=  {{-74, -40}, {40, -80}}, lineColor=  {0, 0, 255}, textString=  "Et"), Text(extent=  {{42, -40}, {100, -80}}, lineColor=  {0, 0, 255}, textString=  "Pi"), Text(extent=  {{-272, 16}, {276, -40}}, lineColor=  {0, 0, 255}, textString=  "%name")}));
        end TimeVaryingElastance;

        model Pulmonary
          extends Interfaces.PulmonaryCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(volume_start = 2.1e-05, ZeroPressureVolume = 2e-05, Compliance = 6.7505541826109e-10) annotation(Placement(visible = true, transformation(origin={-81,0},     extent={{-11,-10},
                    {11,10}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.2216823876548e-07) annotation(Placement(visible = true, transformation(origin={-53.75,
                    0.25},                                                                                                    extent={{-9.75,
                    -9.75},{9.75,9.75}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(I(displayUnit = "mmHg.s2/ml") = 99991.79056125, volumeFlow_start(displayUnit = "ml/min") = 7.9166666666667e-07) annotation(Placement(visible = true, transformation(origin={-23.5,
                    0.5},                                                                                                    extent={{-7.5,
                    -7.5},{7.5,7.5}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(volume_start = 0.000636, ZeroPressureVolume = 0.0006, Compliance = 2.0026644075079e-08) annotation(Placement(visible = true, transformation(origin={0.5,0.5},   extent={{-9.5,
                    -9.5},{9.5,9.5}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 7.425609600872e-08) annotation(Placement(visible = true, transformation(origin={21.5,0.5},   extent={{-10.5,
                    -9.5},{10.5,9.5}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(I(displayUnit = "mmHg.s2/ml") = 410632.9532382, volumeFlow_start(displayUnit = "ml/min") = 2.4033333333333e-05) annotation(Placement(visible = true, transformation(origin={48.5,0.5},   extent={{-7.5,
                    -7.5},{7.5,7.5}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(useComplianceInput = false, volume_start(displayUnit = "ml") = 0.000633, ZeroPressureVolume = 0.0001, Compliance = 3.5027875591992e-07) annotation(Placement(visible = true, transformation(origin={73,0},       extent={{-9,-10},
                    {9,10}},                                                                                                    rotation = 0)));
        equation
          connect(q_in, pulmonaryArtery.q_in) annotation (Line(
              points={{-100,0},{-90,0},{-90,2.22045e-16},{-81,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{-81,2.22045e-16},{-70.5,2.22045e-16},{-70.5,0.25},{-63.5,
                  0.25}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{-44,0.25},{-36,0.25},{-36,0.5},{-31,0.5}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{-16,0.5},{0.5,0.5}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{0.5,0.5},{11,0.5}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in)
            annotation (Line(
              points={{32,0.5},{41,0.5}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
             Line(
              points={{56,0.5},{64,0.5},{64,2.22045e-16},{73,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, q_out) annotation (Line(
              points={{73,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end Pulmonary;

        model Systemic
          extends Interfaces.SystemicCirculation;
          Physiolibrary.Hydraulic.Components.ElasticVessel aorta(volume_start = 4.6e-05, ZeroPressureVolume = 3e-05, Compliance = 1.6501354668604e-09) annotation(Placement(visible = true, transformation(origin={77,1},       extent={{-13,13},
                    {13,-13}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.Conductor Raorta(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.1108411938274e-07) annotation(Placement(visible = true, transformation(origin={49,1},      extent={{-13,13},
                    {13,-13}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.Inertia aorticInertia(I(displayUnit = "mmHg.s2/ml") = 109990.96961737, volumeFlow_start(displayUnit = "ml/min") = 1.0266666666667e-05) annotation(Placement(visible = true, transformation(origin={23,1},      extent={{-9,-9},
                    {9,9}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel arteries(volume_start = 0.000804, ZeroPressureVolume = 0.0007, Compliance = 1.0950899007347e-08) annotation(Placement(visible = true, transformation(origin={1,1},      extent={{-13,13},
                    {13,-13}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 7.5006157584566e-09) annotation(Placement(visible = true, transformation(origin={-25,1},    extent={{-13,13},
                    {13,-13}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.Inertia systemicInertia(volumeFlow_start(displayUnit = "ml/min") = 7.8383333333333e-05, I=
                1727858140.8984)                                                                                                     annotation(Placement(visible = true, transformation(origin={-53,0},    extent={{-9,-8},
                    {9,8}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(volume_start(displayUnit = "ml") = 0.002438, ZeroPressureVolume = 0.00237, Compliance = 1.5001231516913e-07) annotation(Placement(visible = true, transformation(origin={-78,1},     extent={{-12,11},
                    {12,-11}},                                                                                                    rotation=180)));
        equation
          connect(q_in, aorta.q_in) annotation (Line(
              points={{100,0},{88,0},{88,1},{77,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, Raorta.q_in) annotation (Line(
              points={{77,1},{68.5,1},{68.5,1},{62,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Raorta.q_out, aorticInertia.q_in) annotation (Line(
              points={{36,1},{34,1},{34,1},{32,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticInertia.q_out, arteries.q_in) annotation (Line(
              points={{14,1},{6,1},{6,2},{1,2},{1,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arteries.q_in, RSystemic.q_in) annotation (Line(
              points={{1,1},{-5.5,1},{-5.5,1},{-12,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
              points={{-38,1},{-42,1},{-42,-1.33227e-15},{-44,-1.33227e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(systemicInertia.q_out, veins.q_in) annotation (Line(
              points={{-62,0},{-70,0},{-70,1},{-78,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(veins.q_in, q_out) annotation (Line(
              points={{-78,1},{-88,1},{-88,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end Systemic;

        model Heart
          extends Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin={65,-21},     extent={{15,-15},
                    {-15,15}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000204, ZeroPressureVolume = 9e-05) annotation(Placement(visible = true, transformation(origin={23,-21},     extent = {{-15, -15}, {15, 15}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-08) annotation(Placement(visible = true, transformation(origin={-21,-19},    extent={{15,-15},
                    {-15,15}},                                                                                                    rotation = 0)));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin={-61,-19},    extent={{15,-15},
                    {-15,15}},                                                                                                    rotation = 0)));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
                1.3333333333333)                                           annotation(Placement(transformation(extent={{-96,2},
                    {-80,16}})));
          TimeVaryingElastance       timeVaryingElastance(
            Ed=13332238.7415,
            Es=183318282.69563,
            Pi0=6666.11937075)                                                                                           annotation(Placement(transformation(extent={{14,2},{
                    34,22}})));
          TimeVaryingElastance       timeVaryingElastance1(
            Ed=3999671.62245,
            Es=43729743.0721,
            Pi0=3199.73729796)                                                                                          annotation(Placement(transformation(extent={{-34,66},
                    {-14,86}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(useLimitationInputs = false, _Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation(Placement(visible = true, transformation(origin={-61,45},    extent = {{-15, -15}, {15, 15}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000178, ZeroPressureVolume = 7e-05) annotation(Placement(visible = true, transformation(origin={-27,45},    extent = {{-15, -15}, {15, 15}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 4.2858518443821e-07) annotation(Placement(visible = true, transformation(origin={9,45},      extent = {{-15, -15}, {15, 15}}, rotation = 0)));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin={47,45},     extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        equation
          connect(rightHeartInflow, tricuspidValve.q_in) annotation (Line(
              points={{-100,40},{-88,40},{-88,45},{-76,45}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, rightVentricle.q_in) annotation (Line(
              points={{-46,45},{-38,45},{-38,45},{-27,45}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, RRightMyo.q_in) annotation (Line(
              points={{-27,45},{-17.5,45},{-17.5,45},{-6,45}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{24,45},{28,45},{28,45},{32,45}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation (Line(
              points={{62,45},{82,45},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastance1.HR, heartRate.y) annotation (Line(
              points={{-32.6,83.6},{-78,83.6},{-78,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftHeartOutflow, aorticValve.q_out) annotation (Line(
              points={{-100,-20},{-88,-20},{-88,-19},{-76,-19}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_in, RLeftMyo.q_out) annotation (Line(
              points={{-46,-19},{-40,-19},{-40,-19},{-36,-19}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RLeftMyo.q_in, leftVentricle.q_in) annotation (Line(
              points={{-6,-19},{10,-19},{10,-21},{23,-21}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, mitralValve.q_out) annotation (Line(
              points={{23,-21},{36.5,-21},{36.5,-21},{50,-21}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_in, leftHeartInflow) annotation (Line(
              points={{80,-21},{90,-21},{90,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastance1.C, rightVentricle.compliance)
            annotation (Line(
              points={{-24,67},{-26,67},{-26,57},{-27,57}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance1.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{-17,67},{-17,62.5},{-15,62.5},{-15,57}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance.C, leftVentricle.compliance) annotation (
             Line(
              points={{24,3},{24,-9},{23,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{31,3},{31,-2.5},{35,-2.5},{35,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastance.HR, heartRate.y) annotation (Line(
              points={{15.4,19.6},{-78,19.6},{-78,9}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end Heart;
      end Parts;

      model Hemodynamics_flat
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 7.425609600872e-08) annotation(Placement(visible = true, transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(I(displayUnit = "mmHg.s2/ml") = 410632.9532382, volumeFlow_start(displayUnit = "ml/min") = 2.4033333333333e-05) annotation(Placement(visible = true, transformation(origin = {-278, 60}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.2216823876548e-07) annotation(Placement(visible = true, transformation(origin = {200, 58}, extent = {{17.5, -17.5}, {-17.5, 17.5}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(I(displayUnit = "mmHg.s2/ml") = 99991.79056125, volumeFlow_start(displayUnit = "ml/min") = 7.9166666666667e-07) annotation(Placement(visible = true, transformation(origin = {158, 58}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(useComplianceInput = false, volume_start(displayUnit = "ml") = 0.000633, ZeroPressureVolume = 0.0001, Compliance = 3.5027875591992e-07) annotation(Placement(visible = true, transformation(origin = {-279, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve mitralValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-243, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000204, ZeroPressureVolume = 9e-05) annotation(Placement(visible = true, transformation(origin = {-209, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-08) annotation(Placement(visible = true, transformation(origin = {-181, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-143, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel aorta(volume_start = 4.6e-05, ZeroPressureVolume = 3e-05, Compliance = 1.6501354668604e-09) annotation(Placement(visible = true, transformation(origin = {-111, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor Raorta(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.1108411938274e-07) annotation(Placement(visible = true, transformation(origin = {-79, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia aorticInertia(I(displayUnit = "mmHg.s2/ml") = 109990.96961737, volumeFlow_start(displayUnit = "ml/min") = 1.0266666666667e-05) annotation(Placement(visible = true, transformation(origin = {-37, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel arteries(volume_start = 0.000804, ZeroPressureVolume = 0.0007, Compliance = 1.0950899007347e-08) annotation(Placement(visible = true, transformation(origin = {-1, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 7.5006157584566e-09) annotation(Placement(visible = true, transformation(origin = {31, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia systemicInertia(volumeFlow_start(displayUnit = "ml/min") = 7.8383333333333e-05, I=
              1727858140.8984)                                                                                                     annotation(Placement(visible = true, transformation(origin = {75, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(useLimitationInputs = false, _Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation(Placement(visible = true, transformation(origin = {137, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.000178, ZeroPressureVolume = 7e-05) annotation(Placement(visible = true, transformation(origin = {171, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 4.2858518443821e-07) annotation(Placement(visible = true, transformation(origin = {207, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin={243,-3},    extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(volume_start = 2.1e-05, ZeroPressureVolume = 2e-05, Compliance = 6.7505541826109e-10) annotation(Placement(visible = true, transformation(origin={245,57},    extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(volume_start = 0.000636, ZeroPressureVolume = 0.0006, Compliance = 2.0026644075079e-08) annotation(Placement(visible = true, transformation(origin = {124, 58}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel veins(volume_start(displayUnit = "ml") = 0.002438, ZeroPressureVolume = 0.00237, Compliance = 1.5001231516913e-07) annotation(Placement(visible = true, transformation(origin = {105, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Parts.TimeVaryingElastance timeVaryingElastance(
          Ed=13332238.7415,
          Es=183318282.69563,
          Pi0=6666.11937075)                                                                                           annotation(Placement(transformation(extent = {{-222, 16}, {-202, 36}})));
        Parts.TimeVaryingElastance timeVaryingElastance1(
          Ed=3999671.62245,
          Es=43729743.0721,
          Pi0=3199.73729796)                                                                                          annotation(Placement(transformation(extent = {{164, 18}, {184, 38}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k = 1.25) annotation(Placement(transformation(extent = {{-262, 30}, {-244, 42}})));
      equation
        connect(aorta.q_in, Raorta.q_in) annotation(Line(points = {{-111, -3}, {-94, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Raorta.q_out, aorticInertia.q_in) annotation(Line(points = {{-64, -3}, {-52, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(systemicInertia.q_out, veins.q_in) annotation(Line(points = {{90, -3}, {105, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(timeVaryingElastance.C, leftVentricle.compliance) annotation(Line(points = {{-212, 17}, {-209, 17}, {-209, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(timeVaryingElastance1.C, rightVentricle.compliance) annotation(Line(points = {{174, 19}, {174, 9}, {171, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(veins.q_in, tricuspidValve.q_in) annotation(Line(points = {{105, -3}, {122, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(timeVaryingElastance.Pi, leftVentricle.externalPressure) annotation(Line(points = {{-205, 17}, {-205, 16.5}, {-197, 16.5}, {-197, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(timeVaryingElastance1.Pi, rightVentricle.externalPressure) annotation(Line(points = {{181, 19}, {181, 9}, {183, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(heartRate.y, timeVaryingElastance.HR) annotation(Line(points = {{-241.75, 36}, {-232.375, 36}, {-232.375, 33.6}, {-220.6, 33.6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(aorticInertia.q_out, arteries.q_in) annotation(Line(points = {{-22, -3}, {-1, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(arteries.q_in, RSystemic.q_in) annotation(Line(points = {{-1, -3}, {16, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RSystemic.q_out, systemicInertia.q_in) annotation(Line(points = {{46, -3}, {60, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, tricuspidValve.q_out) annotation(Line(points = {{171, -3}, {152, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RRightMyo.q_in, rightVentricle.q_in) annotation(Line(points = {{192, -3}, {171, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(heartRate.y, timeVaryingElastance1.HR) annotation(Line(points = {{-241.75, 36}, {-34, 36}, {-34, 35.6}, {165.4, 35.6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation(Line(points={{222,-3},
                {228,-3}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation(Line(points={{258,-3},
                {266,-3},{266,57},{245,57}},                                                                                       color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation(Line(points={{245,57},
                {245,58},{217.5,58}},                                                                                      color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in) annotation(Line(points = {{182.5, 58}, {173, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in) annotation(Line(points = {{143, 58}, {124, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation(Line(points = {{124, 58}, {-42, 58}, {-42, 60}, {-205, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation(Line(points = {{-235, 60}, {-263, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation(Line(points = {{-293, 60}, {-296, 60}, {-296, -3}, {-279, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation(Line(points={{-279,-3},
                {-258,-3}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(mitralValve.q_out, leftVentricle.q_in) annotation(Line(points={{-228,-3},
                {-209,-3}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(leftVentricle.q_in, RLeftMyo.q_in) annotation(Line(points={{-209,-3},
                {-196,-3}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation(Line(points = {{-128, -3}, {-111, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RLeftMyo.q_out, aorticValve.q_in) annotation(Line(points = {{-166, -3}, {-158, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,   initialScale = 0.1, grid = {2, 2}), graphics), Icon(coordinateSystem(extent = {{-350, -100}, {400, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2})));
      end Hemodynamics_flat;

      model PulsatileCirculation
        extends Physiolibrary.Icons.CardioVascular;
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 7.425609600872e-08) annotation(Placement(visible = true, transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(volumeFlow_start(displayUnit = "m3/s") = 2.225e-05, I(displayUnit = "Pa.s2/m3") = 410632.9532382) annotation(Placement(visible = true, transformation(origin = {-278, 60}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 2.2216823876548e-07) annotation(Placement(visible = true, transformation(origin = {200, 58}, extent = {{17.5, -17.5}, {-17.5, 17.5}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(volumeFlow_start(displayUnit = "ml/min") = 7.3233333333333e-07, I(displayUnit = "mmHg.s2/ml") = 99991.79056125) annotation(Placement(visible = true, transformation(origin = {158, 58}, extent = {{15, -15}, {-15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(useComplianceInput = false, volume_start(displayUnit = "ml") = 0.0006597, ZeroPressureVolume = 0.0001, Compliance(displayUnit = "ml/mmHg") = 3.5027875591992e-07) annotation(Placement(visible = true, transformation(origin = {-279, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve mitralValve(useLimitationInputs = false, _Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation(Placement(visible = true, transformation(origin = {-243, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.0002097, ZeroPressureVolume = 9e-05) annotation(Placement(visible = true, transformation(origin = {-209, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 9.3757696980707e-08) annotation(Placement(visible = true, transformation(origin = {-181, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-143, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel aorta(volume_start = 4.6e-05, ZeroPressureVolume = 3e-05, Compliance(displayUnit = "ml/mmHg") = 1.6501354668604e-09) annotation(Placement(visible = true, transformation(origin = {-111, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor Raorta(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 1.1108411938274e-07) annotation(Placement(visible = true, transformation(origin = {-79, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia aorticInertia(volumeFlow_start(displayUnit = "m3/s") = 1.0385e-05, I(displayUnit = "Pa.s2/m3") = 109990.96961737) annotation(Placement(visible = true, transformation(origin = {-37, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel arteries(volume_start = 0.000805, ZeroPressureVolume = 0.0007, Compliance(displayUnit = "ml/mmHg") = 1.0950899007347e-08) annotation(Placement(visible = true, transformation(origin = {-1, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 7.5006157584566e-09) annotation(Placement(visible = true, transformation(origin = {31, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Inertia systemicInertia(volumeFlow_start(displayUnit = "m3/s") = 7.935e-05, I(displayUnit = "Pa.s2/m3") = 479960.594694) annotation(Placement(visible = true, transformation(origin = {75, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(useLimitationInputs = false, _Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation(Placement(visible = true, transformation(origin = {137, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useExternalPressureInput = true, volume_start = 0.00018, ZeroPressureVolume = 7e-05) annotation(Placement(visible = true, transformation(origin = {171, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput = false, Conductance(displayUnit = "m3/(Pa.s)") = 4.2858518443821e-07) annotation(Placement(visible = true, transformation(origin = {207, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {245, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(volume_start = 2.1e-05, ZeroPressureVolume = 2e-05, Compliance(displayUnit = "m3/Pa") = 6.7505541826109e-10) annotation(Placement(visible = true, transformation(origin = {243, 57}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(volume_start = 0.000637, ZeroPressureVolume = 0.0006, Compliance(displayUnit = "ml/mmHg") = 2.0026644075079e-08) annotation(Placement(visible = true, transformation(origin = {124, 58}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel veins(volume_start(displayUnit = "ml") = 0.002443, ZeroPressureVolume = 0.00237, Compliance(displayUnit = "ml/mmHg") = 1.5001231516913e-07) annotation(Placement(visible = true, transformation(origin = {105, -3}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
        Parts.TimeVaryingElastance timeVaryingElastanceLeft(Ed(displayUnit = "mmHg/ml") = 13332238.7415, Es(displayUnit = "mmHg/ml") = 183318282.69563, Pi0(displayUnit = "mmHg") = 6666.11937075) annotation(Placement(transformation(extent = {{-222, 16}, {-202, 36}})));
        Parts.TimeVaryingElastance timeVaryingElastanceRight(Ed(displayUnit = "mmHg/ml") = 3999671.62245, Es(displayUnit = "mmHg/ml") = 43729743.0721, Pi0(displayUnit = "mmHg") = 3199.73729796) annotation(Placement(transformation(extent = {{164, 18}, {184, 38}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit = "Hz") = 1.2) annotation(Placement(transformation(extent = {{-262, 30}, {-244, 42}})));
      equation
        connect(aorta.q_in, Raorta.q_in) annotation(Line(points = {{-111, -3}, {-94, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Raorta.q_out, aorticInertia.q_in) annotation(Line(points = {{-64, -3}, {-52, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(systemicInertia.q_out, veins.q_in) annotation(Line(points = {{90, -3}, {105, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(timeVaryingElastanceLeft.C, leftVentricle.compliance) annotation(Line(points = {{-212, 17}, {-209, 17}, {-209, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(timeVaryingElastanceRight.C, rightVentricle.compliance) annotation(Line(points = {{174, 19}, {174, 9}, {171, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(veins.q_in, tricuspidValve.q_in) annotation(Line(points = {{105, -3}, {122, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure) annotation(Line(points = {{-205, 17}, {-205, 16.5}, {-197, 16.5}, {-197, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure) annotation(Line(points = {{181, 19}, {181, 9}, {183, 9}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation(Line(points = {{-241.75, 36}, {-232.375, 36}, {-232.375, 33.6}, {-220.6, 33.6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(aorticInertia.q_out, arteries.q_in) annotation(Line(points = {{-22, -3}, {-1, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(arteries.q_in, RSystemic.q_in) annotation(Line(points = {{-1, -3}, {16, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RSystemic.q_out, systemicInertia.q_in) annotation(Line(points = {{46, -3}, {60, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, tricuspidValve.q_out) annotation(Line(points = {{171, -3}, {152, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RRightMyo.q_in, rightVentricle.q_in) annotation(Line(points = {{192, -3}, {171, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(heartRate.y, timeVaryingElastanceRight.HR) annotation(Line(points = {{-241.75, 36}, {-34, 36}, {-34, 35.6}, {165.4, 35.6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation(Line(points = {{222, -3}, {230, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation(Line(points = {{260, -3}, {266, -3}, {266, 57}, {243, 57}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation(Line(points = {{243, 57}, {243, 58}, {217.5, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in) annotation(Line(points = {{182.5, 58}, {173, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in) annotation(Line(points = {{143, 58}, {124, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation(Line(points = {{124, 58}, {-42, 58}, {-42, 60}, {-205, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation(Line(points = {{-235, 60}, {-263, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation(Line(points = {{-293, 60}, {-296, 60}, {-296, -3}, {-279, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation(Line(points = {{-279, -3}, {-258, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(mitralValve.q_out, leftVentricle.q_in) annotation(Line(points = {{-228, -3}, {-209, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(leftVentricle.q_in, RLeftMyo.q_in) annotation(Line(points = {{-209, -3}, {-196, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation(Line(points = {{-128, -3}, {-111, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RLeftMyo.q_out, aorticValve.q_in) annotation(Line(points = {{-166, -3}, {-158, -3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,   initialScale = 0.1, grid = {2, 2}), graphics), Icon(coordinateSystem(extent = {{-350, -100}, {400, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2})), Documentation(info = "<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>", revisions = "<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"));
      end PulsatileCirculation;

      model Fernandez2013Transfussion
        extends HemodynamicsCanete;
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            SolutionFlow=1e-05)
          annotation (Placement(transformation(extent={{-38,-12},{-18,8}})));
      equation
        connect(unlimitedPump.q_out, heart.rightHeartInflow) annotation (Line(
            points={{-18,-2},{-14,-2},{-14,-1.6},{-9.84,-1.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-20,-40},{20,40}}), graphics));
      end Fernandez2013Transfussion;
    end FernandezModel2013;

    package MultidomainExample
      model Windkessel_2element_dizertace "Two-element Windkessel model"
        extends Modelica.Icons.Example;
        HydraulicElastance hydraulicElastance(V0 = 0, p0 = 0, C = 1.0500862061839e-08, V(start = 0.00097)) annotation(Placement(transformation(extent = {{-22, -36}, {-2, -16}})));
        HydraulicConductor hydraulicConductor(G = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {20, -40})));
        HydraulicContraPressure hydraulicContraPressure(contrapressure = 0) annotation(Placement(transformation(extent = {{-46, -64}, {-26, -44}})));
        Cardiovascular.Examples.MultidomainExample.HeartFlow heartflow1
          annotation (Placement(visible=true, transformation(
              origin={-38,-26},
              extent={{-10,-10},{10,10}},
              rotation=0)));
      equation
        connect(heartflow1.qout, hydraulicElastance.qin) annotation(Line(points = {{-34.2, -26}, {-12, -26}, {-12, -26}, {-12, -26}}, color = {0, 0, 255}));
        connect(hydraulicElastance.qin, hydraulicConductor.qin) annotation(Line(points = {{-12, -26}, {20, -26}, {20, -31}}, color = {0, 0, 255}, smooth = Smooth.None));
        connect(hydraulicConductor.qout, hydraulicContraPressure.qin) annotation(Line(points = {{20, -49}, {-6, -49}, {-6, -54}, {-30.8, -54}}, color = {0, 0, 255}, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-74, 90}, {46, 80}}, lineColor=  {175, 175, 175}, textString=  "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>", info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"), experiment(StopTime = 5));
      end Windkessel_2element_dizertace;

      model HydraulicConductor
        parameter Real G;
        HydraulicPort qin annotation(Placement(transformation(extent = {{-100, -10}, {-80, 10}}), iconTransformation(extent = {{-100, -10}, {-80, 10}})));
        HydraulicPort qout annotation(Placement(transformation(extent = {{80, -10}, {100, 10}}), iconTransformation(extent = {{80, -10}, {100, 10}})));
      equation
        qin.q = -qout.q;
        -qin.q = G * (qout.p - qin.p);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-80, 20}, {80, -20}}, lineColor=  {0, 0, 255})}));
      end HydraulicConductor;

      connector HydraulicPort
        flow Real q;
        Real p;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={255,85,85},
                fillPattern=FillPattern.Solid,
                fillColor={255,85,85})}));
      end HydraulicPort;

      model HydraulicElastance
        Real V;
        parameter Real V0;
        parameter Real p0;
        parameter Real C;
        HydraulicPort qin annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}})));
      equation
        qin.p - p0 = if V < V0 then 0 else (V - V0) / C;
        qin.q = der(V);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(
                extent={{40,-40},{-42,40}},
                fillPattern=FillPattern.Solid,
                fillColor={255,255,170},
                lineColor={0,0,255})}));
      end HydraulicElastance;

      model HydraulicFlowSource
        HydraulicPort qout annotation(Placement(transformation(extent = {{58, -10}, {78, 10}}), iconTransformation(extent = {{58, -10}, {78, 10}})));
        Modelica.Blocks.Interfaces.RealInput desiredflow annotation(Placement(transformation(extent = {{-14, 24}, {26, 64}}), iconTransformation(extent = {{-11, -11}, {11, 11}}, rotation = 270, origin = {1, 31})));
      equation
        qout.q = -desiredflow;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-58, 20}, {58, -22}}, lineColor=  {0, 0, 255}), Polygon(points=  {{0, 12}, {0, -14}, {56, 0}, {58, 0}, {0, 12}}, lineColor=  {0, 0, 255}, smooth=  Smooth.None,
                  fillPattern=                                                                                                    FillPattern.Solid)}));
      end HydraulicFlowSource;

      model HydraulicContraPressure
        parameter Real contrapressure;
        HydraulicPort qin annotation(Placement(transformation(extent = {{42, -10}, {62, 10}}), iconTransformation(extent = {{42, -10}, {62, 10}})));
      equation
        qin.p = contrapressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{42, -16}, {-60, 24}}, lineColor=  {0, 0, 255}), Line(points=  {{0, 30}, {40, 30}, {20, 46}}, color=  {0, 0, 255}, smooth=  Smooth.None), Line(points=  {{40, 32}, {22, 16}}, color=  {0, 0, 255}, smooth=  Smooth.None), Text(extent=  {{-4, 62}, {14, 30}}, lineColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "P")}));
      end HydraulicContraPressure;

      model HeartFlow
        Cardiovascular.Examples.MultidomainExample.HydraulicPort qout
          annotation (Placement(
            visible=true,
            transformation(
              origin={38,0},
              extent={{-10,-10},{10,10}},
              rotation=0),
            iconTransformation(
              origin={38,0},
              extent={{-10,-10},{10,10}},
              rotation=0)));
        discrete Real T0, TD2, HP;
        Boolean b(start = false);
        parameter Real TD1 = 0.07, HR = 1.2, QP = 0.000424;
        Real tc "relative time in cardiac cycle";
        //  parameter Real TD1 = 0.07 "relative time of start of systole";
        //  discrete Real TD2 "relative time of end of systole";
        //  parameter Real QP = 0.000424 "peak volume flowrate";
      equation
        b = time - pre(T0) >= pre(HP) "true if new cardiac cycle begins";
        when {initial(), b} then
          T0 = time "set begining of cardiac cycle";
          HP = 1 / HR "update length of carciac cycle";
          TD2 = TD1 + 2 / 5 * HP "compute end time of systole";
        end when;
        tc = time - T0 "relative time in carciac cycle";
        qout.q = if tc > TD1 and tc < TD2 then sin((tc - TD1) / (TD2 - TD1) * Modelica.Constants.pi) * QP else 0
          "zero before and after systole, otherwise sin up to peak flow";
        annotation(Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2})), Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2}), graphics={  Polygon(origin=  {1, 4.16}, fillColor=  {255, 85, 127},
                  fillPattern=                                                                                                    FillPattern.Solid, points=  {{-0.995659, 31.8363}, {-10.9957, 39.8363}, {-28.9957, 39.8363}, {-42.9957, 29.8363}, {-40.9957, 3.83634}, {-0.995659, -62.1637}, {39.0043, 3.83634}, {43.0043, 29.8363}, {27.0043, 39.8363}, {11.0043, 39.8363}, {1.00434, 31.8363}, {-0.995659, 31.8363}}, smooth=  Smooth.Bezier)}));
      end HeartFlow;

      model twoball
        Cardiovascular.Examples.MultidomainExample.HydraulicConductor systemicResistance
          annotation (Placement(visible=true, transformation(
              origin={0,0},
              extent={{-10,-10},{10,10}},
              rotation=0)));
        Cardiovascular.Examples.MultidomainExample.HydraulicElastance arteries
          annotation (Placement(visible=true, transformation(
              origin={-32,0},
              extent={{-10,-10},{10,10}},
              rotation=0)));
        Cardiovascular.Examples.MultidomainExample.HydraulicElastance veins
          annotation (Placement(visible=true, transformation(
              origin={32,0},
              extent={{-10,-10},{10,10}},
              rotation=0)));
      equation
        connect(arteries.qin, systemicResistance.qin) annotation (Line(
            points={{-32,0},{-9,0}},
            color={255,85,85},
            smooth=Smooth.None));
        connect(systemicResistance.qout, veins.qin) annotation (Line(
            points={{9,0},{32,0}},
            color={255,85,85},
            smooth=Smooth.None));
        annotation(Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2})), Diagram(coordinateSystem(extent={{-100,
                  -100},{100,100}},                                                                                                    preserveAspectRatio=false,  initialScale = 0.1, grid = {2, 2}),
              graphics));
      end twoball;

      connector MechanicalJoint
        Real y "position";
        flow Real F "force";
        annotation(Diagram(coordinateSystem(extent={{-100,-100},{100,100}},      preserveAspectRatio=false,  initialScale = 0.1, grid = {2, 2}),
              graphics={Polygon(
                points={{0,60},{-60,0},{0,-60},{60,0},{0,60}},
                lineColor={0,0,255},
                smooth=Smooth.None,
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255}), Text(
                extent={{-98,102},{100,60}},
                lineColor={0,0,255},
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid,
                textString="%name")}),                                                                                                    Icon(coordinateSystem(extent={{-100,
                  -100},{100,100}},                                                                                                    preserveAspectRatio=false,  initialScale = 0.1, grid = {2, 2}), graphics={Polygon(
                points={{0,100},{-100,0},{0,-100},{100,0},{0,100}},
                lineColor={0,0,255},
                smooth=Smooth.None,
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255}),                                                                                                    Text(origin={0,
                    3},                                                                                                    lineColor=  {255, 255, 255}, fillColor=  {255, 255, 255}, extent=  {{-78, 35}, {78, -35}}, textString=  "Joint")}));
      end MechanicalJoint;

      model MechanicalFix
        MechanicalJoint mechanicalJoint annotation (Placement(transformation(extent={{0,-100},
                  {20,-80}}),          iconTransformation(extent={{-20,-120},{
                  20,-80}})));
      equation
        mechanicalJoint.y=0;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                               graphics={Rectangle(
                extent={{-80,80},{80,-80}},
                lineColor={255,85,85},
                fillPattern=FillPattern.Solid,
                fillColor={255,85,85}), Text(
                extent={{-64,54},{64,-58}},
                lineColor={255,255,255},
                fillColor={255,85,85},
                fillPattern=FillPattern.Solid,
                textString="Fix")}));
      end MechanicalFix;

      model MechanicalSpring
        Real dy "displacement";
        parameter Real k= 10;

        MechanicalJoint upperJoint annotation (Placement(transformation(extent={{-10,90},
                  {10,110}}),iconTransformation(extent={{-10,90},{10,110}})));
        MechanicalJoint lowerJoint annotation (Placement(transformation(extent={{-10,-110},
                  {10,-90}}), iconTransformation(extent={{-10,-110},{10,-90}})));
      equation
         lowerJoint.F = -k * dy;
         upperJoint.F +lowerJoint.F = 0;
         dy = upperJoint.y - lowerJoint.y;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Line(
                points={{0,98},{-40,40},{40,30},{-40,20},{40,8},{-40,-6},{40,-18},{-40,
                    -30},{2,-36},{0,-98}},
                color={255,85,85},
                smooth=Smooth.Bezier)}));
      end MechanicalSpring;

      model MechanicalMass
        MechanicalJoint mechanicalJoint annotation (Placement(transformation(extent={{-10,90},
                  {10,110}}),        iconTransformation(extent={{-10,90},{10,
                  110}})));
        Real y "position of the mass";
        parameter Real initPos=0 "initial position";
        parameter Real m "mass";
        Real a "acceleration";
        Real v "velocity";
      initial equation
        y=initPos;
      equation
        mechanicalJoint.y = y;
        mechanicalJoint.F = m * a;
        v = der(y);
        a = der(v);
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                               graphics={Ellipse(
                extent={{88,90},{-88,-82}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,40},{100,-22}},
                lineColor={255,255,255},
                fillColor={255,85,85},
                fillPattern=FillPattern.Solid,
                textString="Mass")}));
      end MechanicalMass;

      model OneSpring
        MechanicalFix mechanicalFix
          annotation (Placement(transformation(extent={{-10,40},{10,60}})));
        MechanicalSpring mechanicalSpring
          annotation (Placement(transformation(extent={{-10,16},{10,36}})));
        MechanicalMass mechanicalMass(m=10, initPos=-5)
          annotation (Placement(transformation(extent={{-10,-8},{10,12}})));
      equation
        connect(mechanicalFix.mechanicalJoint, mechanicalSpring.upperJoint)
          annotation (Line(
            points={{0,40},{0,36}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalSpring.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{0,16},{0,12}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),        graphics));
      end OneSpring;

      model TwoSpring
        MechanicalFix mechanicalFix
          annotation (Placement(transformation(extent={{-10,40},{10,60}})));
        MechanicalSpring mechanicalSpring
          annotation (Placement(transformation(extent={{-10,16},{10,36}})));
        MechanicalMass mechanicalMass(m=10, initPos=-5)
          annotation (Placement(transformation(extent={{-10,-8},{10,12}})));
        MechanicalSpring mechanicalSpring1
          annotation (Placement(transformation(extent={{-10,-36},{10,-16}})));
        MechanicalMass mechanicalMass1(m=7)
          annotation (Placement(transformation(extent={{-10,-64},{10,-44}})));
      equation
        connect(mechanicalFix.mechanicalJoint, mechanicalSpring.upperJoint)
          annotation (Line(
            points={{0,40},{0,36}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalSpring.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{0,16},{0,12}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalMass1.mechanicalJoint, mechanicalSpring1.lowerJoint)
          annotation (Line(
            points={{0,-44},{0,-36}},
            color={0,0,255},
            smooth=Smooth.Bezier));
        connect(mechanicalSpring1.upperJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{0,-16},{-10,-16},{-10,-16},{-18,-16},{-18,12},{0,12}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end TwoSpring;

      model MechanicalDamper
        Real v "velocity";
      //  parameter Real k= 10;
        parameter Real c= 0.5;
        MechanicalJoint upperJoint annotation (Placement(transformation(extent={{-10,80},
                  {10,100}}),iconTransformation(extent={{-10,80},{10,100}})));
        MechanicalJoint lowerJoint annotation (Placement(transformation(extent={{-10,
                  -100},{10,-80}}),
                              iconTransformation(extent={{-10,-100},{10,-80}})));
      equation
         //lowerJoint.F = -k * dy;
         upperJoint.F +lowerJoint.F = 0;
         v = der(upperJoint.y - lowerJoint.y);
         lowerJoint.F = - v * c;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Line(
                points={{0,82},{0,40},{-20,40},{-20,0},{-18,0},{-18,36},{18,36},{18,0},
                    {20,0},{20,40},{0,40}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{0,-80},{0,18}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-14,18},{14,18}},
                color={0,0,255},
                smooth=Smooth.None)}));
      end MechanicalDamper;

      model OneSpringDamper
        MechanicalFix mechanicalFix
          annotation (Placement(transformation(extent={{-10,58},{10,78}})));
        MechanicalSpring mechanicalSpring
          annotation (Placement(transformation(extent={{-18,32},{2,52}})));
        MechanicalDamper mechanicalDamper(c=2)
          annotation (Placement(transformation(extent={{0,32},{20,52}})));
        MechanicalMass mechanicalMass(initPos=-5, m=10)
          annotation (Placement(transformation(extent={{-8,4},{12,24}})));
      equation
        connect(mechanicalFix.mechanicalJoint, mechanicalSpring.upperJoint)
          annotation (Line(
            points={{0,58},{0,52},{-8,52}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalFix.mechanicalJoint, mechanicalDamper.upperJoint)
          annotation (Line(
            points={{0,58},{0,51},{10,51}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{10,33},{2,33},{2,24}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalSpring.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{-8,32},{2,32},{2,24}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end OneSpringDamper;

      model TwoSpringDamper
        MechanicalFix mechanicalFix
          annotation (Placement(transformation(extent={{-10,58},{10,78}})));
        MechanicalSpring mechanicalSpring
          annotation (Placement(transformation(extent={{-18,32},{2,52}})));
        MechanicalDamper mechanicalDamper(c=0.5)
          annotation (Placement(transformation(extent={{0,32},{20,52}})));
        MechanicalMass mechanicalMass(initPos=-5, m=10)
          annotation (Placement(transformation(extent={{-8,4},{12,24}})));
        MechanicalSpring mechanicalSpring1(k=7)
          annotation (Placement(transformation(extent={{-14,-32},{6,-12}})));
        MechanicalDamper mechanicalDamper1(c=0.01)
          annotation (Placement(transformation(extent={{-2,-32},{18,-12}})));
        MechanicalMass mechanicalMass1(initPos=-3, m=3.14159265)
          annotation (Placement(transformation(extent={{-8,-64},{12,-44}})));
        MechanicalDamper mechanicalDamper2(c=0.04)
          annotation (Placement(transformation(extent={{28,-4},{78,46}})));
      equation
        connect(mechanicalFix.mechanicalJoint, mechanicalSpring.upperJoint)
          annotation (Line(
            points={{0,58},{0,52},{-8,52}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalFix.mechanicalJoint, mechanicalDamper.upperJoint)
          annotation (Line(
            points={{0,58},{0,51},{10,51}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{10,33},{2,33},{2,24}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalSpring.lowerJoint, mechanicalMass.mechanicalJoint)
          annotation (Line(
            points={{-8,32},{2,32},{2,24}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalMass.mechanicalJoint, mechanicalSpring1.upperJoint)
          annotation (Line(
            points={{2,24},{-4,24},{-4,22},{-10,22},{-10,-6},{2,-6},{2,-12},{-4,
                -12}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper1.upperJoint, mechanicalSpring1.upperJoint)
          annotation (Line(
            points={{8,-13},{8,-12},{-4,-12}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalSpring1.lowerJoint, mechanicalMass1.mechanicalJoint)
          annotation (Line(
            points={{-4,-32},{2,-32},{2,-44}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper1.lowerJoint, mechanicalMass1.mechanicalJoint)
          annotation (Line(
            points={{8,-31},{6,-31},{6,-30},{2,-30},{2,-44}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper2.upperJoint, mechanicalFix.mechanicalJoint)
          annotation (Line(
            points={{53,43.5},{25.5,43.5},{25.5,58},{0,58}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mechanicalDamper2.lowerJoint, mechanicalSpring1.upperJoint)
          annotation (Line(
            points={{53,-1.5},{0,-1.5},{0,-12},{-4,-12}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end TwoSpringDamper;
    end MultidomainExample;

    package Physiomodel

      model PulsatileHeart
      import Physiomodel;
         extends Physiolibrary.Icons.Heart;
         extends Cardiovascular.ControlInterfaces.HeartControl;
      //    Abasic_Diastole=0.00026,
      //    Abasic_Systole=3.53,
      //    MaxContractionCompliance(displayUnit="ml/mmHg") = 1.5001231516913e-08,
      //    Cond1=60000000,
      //    Cond2=60000000,
       //   MaxContractionCompliance(displayUnit="ml/mmHg") = 3.0002463033826e-09,
         // Abasic_Diastole=0.00051,
      //    Cond1(displayUnit="ml/(mmHg.min)") = 0.0075006157584566,
      //    Cond2(displayUnit="ml/(mmHg.min)") = 0.0075006157584566,
      Physiomodel.Nerves.SA_Node SA_node
        annotation (Placement(transformation(extent={{-58,76},{-38,96}})));
        Physiomodel.Hormones.ANP atriopeptin
          annotation (Placement(transformation(extent={{72,76},{92,96}})));
        Modelica.Blocks.Math.Add avePressure(k1=0.5, k2=0.5)
          annotation (Placement(transformation(extent={{-68,48},{-56,60}})));
        Physiomodel.Nerves.BaroReceptorAdaptation
                                     lowPressureReceptors(
          PressureChangeOnNA={{-4.0,0.0,0},{0.0,1.0,0.3},{12.0,4.0,0}},
        AdaptivePressure(displayUnit="mmHg") = 799.93432449,
        Tau(displayUnit="d") = 2592000)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-32,66})));
        HeartControlPhysiomodel heartControl
          annotation (Placement(transformation(extent={{2,-52},{52,-6}})));
      equation
        connect(SA_node.Rate, busConnector.HeartVentricleRate) annotation (Line(
            points={{-38.2,86},{-98,86},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(busConnector.BetaPool_Effect,SA_node. BetaPool_Effect)
          annotation (Line(
            points={{-98,86},{-98,76},{-96,76},{-96,92},{-58,92}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.BetaBlocade_Effect,SA_node. BetaBlockade_Effect)
          annotation (Line(
            points={{-98,86},{-98,76},{-96,76},{-96,88},{-58,88}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.VagusNerve_NA_Hz, SA_node.VagusNerve_NA_Hz)
          annotation (Line(
            points={{-98,86},{-98,76},{-96,76},{-96,80},{-58,80}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.GangliaGeneral_NA, SA_node.GangliaGeneral_NA)
          annotation (Line(
            points={{-98,86},{-98,76},{-96,76},{-96,84},{-58,84}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector,atriopeptin. busConnector)
                                                annotation (Line(
            points={{-98,86},{-98,76},{74,76},{74,80}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(avePressure.y,lowPressureReceptors. pressure) annotation (Line(
            points={{-55.4,54},{-38,54},{-38,66},{-22,66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.rightAtrium_TMP,avePressure. u1) annotation (Line(
            points={{-98,86},{-98,86},{-98,57.6},{-69.2,57.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.leftAtrium_TMP,avePressure. u2) annotation (Line(
            points={{-98,86},{-98,86},{-98,50.4},{-69.2,50.4}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(lowPressureReceptors.NA, busConnector.AtrialLowPressureReceptors_NA)
        annotation (Line(
          points={{-42,66},{-98,66},{-98,86}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
        connect(heartControl.busConnector, busConnector) annotation (Line(
            points={{7,-45.1},{-98,-45.1},{-98,86}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));

        connect(heartControl.rightHeartInflow, rightHeartInflow) annotation (
            Line(
            points={{2.5,-33.6},{-20,-33.6},{-20,40},{-100,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heartControl.leftHeartInflow, leftHeartInflow) annotation (Line(
            points={{52,-24.4},{76,-24.4},{76,-20},{100,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heartControl.rightHeartOutflow, rightHeartOutflow) annotation (
            Line(
            points={{2,-24.4},{2,40},{100,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heartControl.leftHeartOutflow, leftHeartOutflow) annotation (
            Line(
            points={{52,-33.14},{52,-64},{-100,-64},{-100,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                  -100},{100,100}}),       graphics), Icon(coordinateSystem(
                preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
              graphics),
          Documentation(info="<html>
<p>Calculates hearth pumping (left and right atria and ventricles, as wel as coronary circulation). By pressure-flow connectors communicate with pulmonary and systemic circulation.</p>
<p>Blood volume (and pressure) distributions between </p>
<p><ul>
<li>right/left atrium and</li>
<li>right/left ventricle.</li>
</ul></p>
<p>Generate average blood flow throught ventricles.</p>
<p>On the contrary of Tom Coleman models: coronary circulation outflows to right atrium, average blood volume in the hearth are calculated more simple (with the same results in steady state).</p>
</html>", revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak, Jiri Kofranek</p></td>
</tr>
<tr>
<td><p>Design:</p></td>
<td><p>Zuzana Rubaninska</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p>GPL 3.0</p></td>
</tr>
<tr>
<td><p>By:</p></td>
<td><p>Charles University, Prague</p></td>
</tr>
<tr>
<td><p>Date of:</p></td>
<td><p>january 2009, August 2010</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td><p>Tom Coleman: QHP 2008 beta 3,, Physiomodel 2010, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak</p><br/>

</html>"));
      end PulsatileHeart;

      model HeartControlPhysiomodel
        extends Model.Burkhoff.Variants.Parts.HeartControl;
      equation
        connect(bloodFlowMeasurement.volumeFlow, busConnector.CardiacOutput)
          annotation (Line(
            points={{-86,-28},{-90,-28},{-90,86},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics));
      end HeartControlPhysiomodel;

      model CVS_Dynamic
        import Physiomodel;
        extends Physiolibrary.Icons.CardioVascular;
      //  extends Physiomodel.Library.Utilities.DynamicState(stateName="BloodVol.Vol", initType=Library.Utilities.Init.NoInit);
      PulsatileHeart                 heart
          annotation (Placement(transformation(extent={{0,-2},{26,24}})));
        PulmonaryCirculation                                                 pulmonaryCirculation
          annotation (Placement(transformation(extent={{2,50},{30,78}})));
        SystemicCirculationFullDynamic
          systemicCirculation
          annotation (Placement(transformation(extent={{-2,-68},{32,-34}})));
      Physiolibrary.Types.BusConnector busConnector
          "signals of organ bood flow resistence"
                                                annotation (Placement(
            transformation(extent={{-38,-8},{-16,14}}), iconTransformation(extent=
               {{-100,60},{-60,100}})));
        Physiomodel.CardioVascular.BlooodVolume.RedCells2 redCells(
            RBCBaseSecretionRate(k(displayUnit="m3/s")))
          annotation (Placement(transformation(extent={{-34,26},{-54,46}})));
        Physiomodel.CardioVascular.BlooodVolume.BloodPropertiesBase bloodProperties
          annotation (Placement(transformation(extent={{-36,-34},{-56,-14}})));
      /*initial equation 
  if STEADY then
     bloodProperties.feedback.y = 0;
  end if;
*/
      equation
        connect(busConnector, pulmonaryCirculation.busConnector) annotation (
            Line(
            points={{-27,3},{-26,3},{-26,71},{2,71}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, systemicCirculation.busConnector) annotation (
            Line(
            points={{-27,3},{-26,3},{-26,-44.2},{-2.34,-44.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, redCells.busConnector)    annotation (Line(
            points={{-27,3},{-26,3},{-26,42.8},{-36.2,42.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, bloodProperties.busConnector) annotation (Line(
            points={{-27,3},{-26,3},{-26,-17.2},{-36.6,-17.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, heart.busConnector) annotation (Line(
            points={{-27,3},{-25.5,3},{-25.5,1.9},{2.6,1.9}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
      //  stateValue = bloodProperties.BloodVolume1.y;
        connect(heart.rightHeartOutflow, pulmonaryCirculation.q_in) annotation (
           Line(
            points={{0,13.6},{-2,13.6},{-2,14},{-6,14},{-6,64},{1.72,64}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryCirculation.q_out, heart.leftHeartInflow) annotation (
            Line(
            points={{30,64},{38,64},{38,13.6},{26,13.6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heart.leftHeartOutflow, systemicCirculation.q_in) annotation (
            Line(
            points={{26,8.66},{32,8.66},{32,8},{38,8},{38,-51},{32,-51}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemicCirculation.q_out, heart.rightHeartInflow) annotation (
            Line(
            points={{-2,-51},{-6,-51},{-6,8.4},{0.26,8.4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                  -100},{100,100}}),       graphics), Documentation(info="<html>
<p><h4><font color=\"#008000\">Cardiovascular system</font></h4></p>
<p><font style=\"color: #008000; \">Connect heart with pulmonary and systemic part. This connection contains pressures and blood flows before and after heart.</font></p>
<p><font style=\"color: #008000; \">Output signal variables about blood volume between lungs capilaries and systemic tissue capilaries are used in gass transport submodels like O2 or CO2.</font></p>
<p><font style=\"color: #008000; \">Output signal Vesseles_V0 is used for systemic veins collapsing in massive blood lost.</font></p>
<p><font style=\"color: #008000; \">The blood properties convert known variables values to another meanings (haematocrit, viscosity, ..).</font></p>
<p><font style=\"color: #008000; \">Red cells contains volume, loss and gains all red blood cells.</font></p>
</html>",   revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td>GPL 3.0</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak</p><br/>

</html>"),Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-116,-96},{126,-130}},
                lineColor={0,0,255},
                textString="%name")}));
      end CVS_Dynamic;

      package test
        extends Modelica.Icons.UnderConstruction;
        model CardioVascularSystem
          import Physiomodel;
          extends Physiolibrary.Icons.CardioVascular;
        //  extends Physiomodel.Library.Utilities.DynamicState(stateName="BloodVol.Vol", initType=Library.Utilities.Init.NoInit);
        replaceable Model.Burkhoff.Variants.Parts.HeartControl heart
            constrainedby ControlInterfaces.HeartControl
            annotation (Placement(transformation(extent={{2,-4},{28,22}})));
        Physiomodel.CardioVascular.Circulation.PulmonaryCirculation pulmonaryCirculation
            annotation (Placement(transformation(extent={{2,50},{30,78}})));
        Physiomodel.CardioVascular.Circulation.SystemicCirculationFullDynamic systemicCirculation
            annotation (Placement(transformation(extent={{-2,-68},{32,-34}})));
        Physiolibrary.Types.BusConnector busConnector
            "signals of organ bood flow resistence"
                                                  annotation (Placement(
              transformation(extent={{-38,-8},{-16,14}}), iconTransformation(extent=
                 {{-100,60},{-60,100}})));
        Physiomodel.CardioVascular.Blood.RedCells2 redCells(RBCBaseSecretionRate(
                k(displayUnit="m3/s")))
            annotation (Placement(transformation(extent={{-34,26},{-54,46}})));
        Physiomodel.CardioVascular.Blood.BloodPropertiesBase bloodProperties
            annotation (Placement(transformation(extent={{-36,-34},{-56,-14}})));
        /*initial equation 
  if STEADY then
     bloodProperties.feedback.y = 0;
  end if;
*/
        equation
          connect(busConnector, pulmonaryCirculation.busConnector) annotation (
              Line(
              points={{-27,3},{-26,3},{-26,71},{2,71}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(busConnector, systemicCirculation.busConnector) annotation (
              Line(
              points={{-27,3},{-26,3},{-26,-44.2},{-2.34,-44.2}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(busConnector, redCells.busConnector)    annotation (Line(
              points={{-27,3},{-26,3},{-26,42.8},{-36.2,42.8}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(busConnector, bloodProperties.busConnector) annotation (Line(
              points={{-27,3},{-26,3},{-26,-17.2},{-36.6,-17.2}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
          connect(busConnector, heart.busConnector) annotation (Line(
              points={{-27,3},{-25.5,3},{-25.5,-0.1},{4.6,-0.1}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None));
        //  stateValue = bloodProperties.BloodVolume1.y;
          connect(systemicCirculation.q_out, heart.rightHeartInflow) annotation (
              Line(
              points={{-2,-51},{-2,6.4},{2.26,6.4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heart.rightHeartOutflow, pulmonaryCirculation.q_in) annotation (
             Line(
              points={{2,11.6},{-2,11.6},{-2,64},{1.72,64}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryCirculation.q_out, heart.leftHeartInflow) annotation (
              Line(
              points={{30,64},{32,64},{32,11.6},{28,11.6}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heart.leftHeartOutflow, systemicCirculation.q_in) annotation (
              Line(
              points={{28,6.66},{30,6.66},{30,4},{32,4},{32,-51}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                    -100},{100,100}}),       graphics), Documentation(info="<html>
<p><h4><font color=\"#008000\">Cardiovascular system</font></h4></p>
<p><font style=\"color: #008000; \">Connect heart with pulmonary and systemic part. This connection contains pressures and blood flows before and after heart.</font></p>
<p><font style=\"color: #008000; \">Output signal variables about blood volume between lungs capilaries and systemic tissue capilaries are used in gass transport submodels like O2 or CO2.</font></p>
<p><font style=\"color: #008000; \">Output signal Vesseles_V0 is used for systemic veins collapsing in massive blood lost.</font></p>
<p><font style=\"color: #008000; \">The blood properties convert known variables values to another meanings (haematocrit, viscosity, ..).</font></p>
<p><font style=\"color: #008000; \">Red cells contains volume, loss and gains all red blood cells.</font></p>
</html>",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td>GPL 3.0</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak</p><br/>

</html>"),  Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},{
                    100,100}}), graphics={Text(
                  extent={{-116,-96},{126,-130}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end CardioVascularSystem;
      end test;

      model HeartControl
        extends ControlInterfaces.HeartControl;
        extends Cardiovascular.Model.Burkhoff.Parts2.HeartOld(
          redeclare Types.Constants.FrequencyControl heartRate,
          ventricularElastance(useEs_extInput=true),
          atrialElastance1(useEs_extInput=false),
          ventricularElastance1(useEs_extInput=true),
          AOV(_Goff(displayUnit="ml/(mmHg.s)"), useLimitationInputs=true));
        Modelica.Blocks.Math.Sum sum1(nin=4)
          annotation (Placement(transformation(extent={{58,6},{78,26}})));
      equation
        connect(ventricularElastance.Es_ext, busConnector.rvcompliance) annotation (
            Line(
            points={{21.4,78.2},{28,78.2},{28,86},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(ventricularElastance1.Es_ext, busConnector.lvcompliance) annotation (
            Line(
            points={{-37.4,3.4},{82,3.4},{82,86},{-98,86}},
            color={128,255,0},
            smooth=Smooth.None,
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(RV.volume, sum1.u[1]) annotation (Line(
            points={{32,32},{32,14.5},{56,14.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.volume, sum1.u[2]) annotation (Line(
            points={{-44,32},{-46,32},{-46,15.5},{56,15.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.volume, sum1.u[3]) annotation (Line(
            points={{-22,-50},{-22,-72},{56,-72},{56,16.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LA.volume, sum1.u[4]) annotation (Line(
            points={{46,-50},{46,-58},{56,-58},{56,17.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
            points={{79,16},{82,16},{82,86},{-98,86}},
            color={127,255,0},
            smooth=Smooth.None,
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(AOV.Goff, busConnector.avbackflowconductance) annotation (
            Line(
            points={{-58,-50},{-98,-50},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(AOV.Gon, busConnector.avoutflowresistance) annotation (Line(
            points={{-46,-50},{-46,-56},{-98,-56},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(heartRate.c, busConnector.HeartVentricleRate) annotation (Line(
            points={{-94.5,15},{-94.5,49.5},{-98,49.5},{-98,86}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end HeartControl;

      model Physiomodel_Main "Main model"
        import Physiomodel;
        extends Physiolibrary.Icons.Golem;

      CVS_Dynamic               cardioVascularSystem
          annotation (Placement(transformation(extent={{58,74},{78,96}})));
        Physiomodel.Metabolism.NutrientsAndMetabolism nutrientsAndMetabolism
          annotation (Placement(transformation(extent={{-90,66},{-70,86}})));
        Physiomodel.Electrolytes.Electrolytes electrolytes
          annotation (Placement(transformation(extent={{74,-28},{94,-8}})));
        Physiomodel.Hormones.Hormones
                          hormones
          annotation (Placement(transformation(extent={{40,12},{60,32}})));
        Physiomodel.Nerves.Nerves       nerves
          annotation (Placement(transformation(extent={{74,44},{94,64}})));
        Physiomodel.Setup.IO_Bus.InputFromFile
                                          setup
          annotation (Placement(transformation(extent={{-10,-92},{10,-72}})));
        Physiomodel.Water.Water3 water
          annotation (Placement(transformation(extent={{-86,0},{-66,20}})));
        Physiomodel.Proteins.Proteins
                          proteins
          annotation (Placement(transformation(extent={{-48,-22},{-28,-2}})));
        Physiomodel.Status.TissuesFitness status
          annotation (Placement(transformation(extent={{42,-74},{62,-54}})));
        Physiomodel.Gases.Gases          gases(oxygen(tissuesO2(skeletalMuscleO2(
                  O2Tissue(
                  a(start=0.518),
                  pCO2(displayUnit="mmHg"),
                  sO2CO(start=0.367),
                  pO2(start=5332.8954966, displayUnit="mmHg"))))))
          annotation (Placement(transformation(extent={{-76,-60},{-56,-40}})));
        Physiomodel.Heat.Heat2 heat
          annotation (Placement(transformation(extent={{-28,36},{-48,56}})));
      equation

        connect(setup.busConnector, hormones.busConnector) annotation (Line(
            points={{0,-82},{0,27.9},{43.9,27.9}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(setup.busConnector, proteins.busConnector) annotation (Line(
            points={{0,-82},{0,-3.7},{-31.7,-3.7}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(setup.busConnector, cardioVascularSystem.busConnector)
                                                      annotation (Line(
            points={{0,-82},{0,93.8},{60,93.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(setup.busConnector, nutrientsAndMetabolism.busConnector)
          annotation (Line(
            points={{0,-82},{0,84},{-72,84}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(setup.busConnector, water.busConnector) annotation (Line(
            points={{0,-82},{0,17},{-69,17}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(setup.busConnector, nerves.busConnector) annotation (Line(
            points={{0,-82},{0,61.6},{76.2,61.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(status.busConnector, setup.busConnector)         annotation (Line(
            points={{43.2,-54.8},{0,-54.8},{0,-82}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(electrolytes.busConnector, setup.busConnector) annotation (Line(
            points={{74,-14},{0,-14},{0,-82}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(gases.busConnector, setup.busConnector) annotation (Line(
            points={{-58,-42},{0,-42},{0,-82}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(heat.busConnector, setup.busConnector) annotation (Line(
            points={{-28.6,55.6},{0,55.6},{0,-82}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                  -100},{100,100}}),      graphics), Documentation(info="<html>
<p><h4><font color=\"#008000\">QHP Golem Edition</font></h4></p>
<p>Signal bus connect all submodels with their signal inputs/outputs variables.</p>
</html>",     revisions="<html>
<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p>GPL 3.0</p></td>
</tr>
<tr>
<td><p>By:</p></td>
<td><p>Charles University, Prague</p></td>
</tr>
<tr>
<td><p>Date of:</p></td>
<td><p>2008-2014</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td><p>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</p></td>
</tr>
<tr>
<td></td>
<td><p><br>Siggaard Andersen: OSA (2005), University of Copenhagen</p></td>
</tr>
<tr>
<td></td>
<td><p><br>Noriaki Ikeda: A model of overall regulation of body fluids (1979), Kitasato University</p></td>
</tr>
</table>
<br>
<p>Copyright &copy; 2014 Marek Matejak </p>
<br>
<pre>

    This file is part of Physiomodel.

    Physiomodel is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License 3.0 as published by
    the Free Software Foundation.

    Physiomodel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Physiomodel.  If not, see <a href=\"http://www.gnu.org/licenses/\">http://www.gnu.org/licenses/</a>.</pre>
</html>"),Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                  100}}),
              graphics),
          experiment(StopTime=3.1536e+007, Tolerance=0.001),
          experimentSetupOutput,
          Commands(file="view.mos" "view"));
      end Physiomodel_Main;

      model SystemicCirculationFullDynamic
        import Physiomodel;
        extends Physiolibrary.Icons.SystemicCirculation;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in "Blood inflow"
        annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent=
                {{90,-10},{110,10}}), iconTransformation(extent={{90,-10},{110,
                10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out "Blood outflow"
        annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent=
                {{-110,-10},{-90,10}}), iconTransformation(extent={{-110,-10},{
                -90,10}})));
        /*
  Library.PressureFlow.NegativePressureFlow fromSystemicVeins annotation (
      Placement(transformation(extent={{-110,-10},{-90,10}}),iconTransformation(
          extent={{-112,44},{-92,64}})));
  Library.PressureFlow.PositivePressureFlow systemicArteries 
    annotation (Placement(transformation(extent={{88,-10},{108,10}}),
        iconTransformation(extent={{90,46},{110,66}})));
*/
      Physiolibrary.Hydraulic.Components.ElasticVessel systemicArtys(
        stateName="SystemicArtys.Vol",
        useV0Input=true,
        useComplianceInput=false,
        volume_start=0.00100036,
        Compliance=1.1625954425608e-08,
        useExternalPressureInput=false,
        ExternalPressure=0)
        annotation (Placement(transformation(extent={{65,-10},{86,11}})));
      Physiolibrary.Types.Constants.VolumeConst               V0_artys(k=0.00085)
        annotation (Placement(transformation(extent={{98,18},{88,28}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst
        SystemicVeinsCompliance(k=6.645545561992547e-007)
        annotation (Placement(transformation(extent={{-27,10},{-35,18}})));
        Physiomodel.CardioVascular.OrganFlow.PeripheralFlow peripheral
          annotation (Placement(transformation(extent={{-2,-14},{26,14}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeCorrections(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,24},{-42,38}})));
        Physiomodel.CardioVascular.OrganFlow.SystemicVeins veins(
            BaseConductance(displayUnit="ml/(mmHg.min)") = 1.0700878482065e-07)
          "scaled to coronary vessels reorganisation"
          annotation (Placement(transformation(extent={{-72,-8},{-56,8}})));
        Physiomodel.CardioVascular.VascularCompartments.SystemicVeinsElacticBloodCompartment
          systemicVeinsElacticBloodCompartment
          annotation (Placement(transformation(extent={{-54,-10},{-34,10}})));
      Physiolibrary.Types.Constants.PressureConst SystemicVeinsExternalPressure(
          k=0)
        annotation (Placement(transformation(extent={{-36,16},{-43,23}})));
      Physiolibrary.Types.BusConnector busConnector
          "signals of organ bood flow resistence"
                                                annotation (Placement(
            transformation(extent={{36,40},{56,60}}), iconTransformation(extent=
               {{-110,32},{-94,48}})));
        Physiomodel.CardioVascular.OrganFlow.CollapsingVeins collapsedVeins
          annotation (Placement(transformation(
              extent={{10,10.5},{-10,-10.5}},
              rotation=180,
              origin={-84.5,0})));
      Physiolibrary.Hydraulic.Components.HydrostaticColumn
        gravityHydrostaticDifference(useExternalG=true, useHeightInput=true)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={61,35})));
      Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
        annotation (Placement(transformation(
            extent={{8.5,-8.5},{-8.5,8.5}},
            rotation=0,
            origin={78.5,45.5})));
        Modelica.Blocks.Math.Gain G(k=9.81) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={34,26})));
        Physiomodel.CardioVascular.OrganFlow.LeftHeart leftCororaryCirculation(
            BasicLargeVeselsConductance(displayUnit="ml/(mmHg.min)")=
            6.2505131320471e-09, BasicSmallVeselsConductance(displayUnit=
                "ml/(mmHg.min)") = 2.7502257781007e-10)
          "scaled to normal pressure gradient 94 mmHg"
          annotation (Placement(transformation(extent={{-10,76},{10,96}})));
        Physiomodel.CardioVascular.OrganFlow.RightHeart rightCororaryCirculation(
            BasicLargeVeselsConductance(displayUnit="ml/(mmHg.min)")=
            1.2501026264094e-09, BasicSmallVeselsConductance(displayUnit=
                "ml/(mmHg.min)") = 5.0004105056377e-11)
          "scaled to normal pressure gradient 94 mmHg"
          annotation (Placement(transformation(extent={{-42,62},{-22,82}})));
         Physiomodel.CardioVascular.OrganFlow.SplanchnicCirculation splanchnicCirculation
          annotation (Placement(transformation(extent={{-8,-44},{30,-6}})));
      Physiolibrary.Hydraulic.Components.Conductor legsArtys(Conductance=
            5.0004105056377e-09)
        annotation (Placement(transformation(extent={{80,-86},{64,-70}})));
      Physiolibrary.Types.Constants.PressureConst const8(k=0)
        annotation (Placement(transformation(extent={{93,-68},{86,-61}})));
      Physiolibrary.Hydraulic.Components.HydrostaticColumn
        hydrostaticDifference(useExternalG=true, useHeightInput=true)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={54,-72})));
        Physiomodel.CardioVascular.VascularCompartments.SequesteredBlood sequesteredBlood(
          data={{0,0,10^(-10)},{50,97,1.0},{200,150,0.5}},
          pressureControledCompartment(stateName="BVSeqArtys.Vol"),
          initialVol=5.00044e-05)
          annotation (Placement(transformation(extent={{80,-88},{100,-68}})));
        Physiomodel.CardioVascular.VascularCompartments.SequesteredBlood sequesteredBlood1(
          data={{0,-100,2.00},{150,11,0.11},{600,50,0.15}},
          pressureControledCompartment(stateName="BVSeqVeins.Vol"),
          initialVol=0.000120691)
          annotation (Placement(transformation(extent={{-62,-82},{-44,-64}})));
      Physiolibrary.Hydraulic.Components.Conductor legsVeins(Conductance=
            1.2501026264094e-08)
        annotation (Placement(transformation(extent={{-42,-80},{-28,-66}})));
      Physiolibrary.Hydraulic.Components.HydrostaticColumn
        hydrostaticDifference1(
        useExternalG=true,
        useHeightInput=true,
        usePumpEffect=true)
        annotation (Placement(transformation(extent={{-5,-78},{-25,-58}})));
      Physiolibrary.Types.Constants.PressureConst             const12(k=0)
        annotation (Placement(transformation(extent={{-52,-60},{-59,-53}})));
      Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{76,-38},{96,-18}})));
      equation
      connect(systemicArtys.zeroPressureVolume, V0_artys.y) annotation (Line(
          points={{67.1,8.9},{67.1,23},{86.75,23}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(busConnector, peripheral.busConnector)          annotation (
            Line(
            points={{46,50},{46,2.66},{21.66,2.66}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(veins.busConnector,busConnector)           annotation (
           Line(
            points={{-58.48,1.52},{-60,1.52},{-60,50},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(SystemicVeinsCompliance.y, systemicVeinsElacticBloodCompartment.Compliance)
          annotation (Line(
            points={{-36,14},{-38.2,14},{-38.2,10},{-38,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector,systemicVeinsElacticBloodCompartment. busConnector)
          annotation (Line(
            points={{46,50},{-26,50},{-26,6.1},{-34.2,6.1}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.referencePoint,volumeCorrections. q_out)
          annotation (Line(
            points={{-44,0},{-46,0},{-46,31},{-42,31}},
            color={0,0,0},
            smooth=Smooth.None,
            thickness=1));
        connect(systemicVeinsElacticBloodCompartment.ExternalPressure,
          SystemicVeinsExternalPressure.y)
          annotation (Line(
            points={{-44,10},{-44,19.5},{-43.875,19.5}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.BloodVolume_change, volumeCorrections.solutionFlow)
        annotation (Line(
          points={{46,50},{-35,50},{-35,35.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
        connect(collapsedVeins.ExternalPressure, busConnector.Thorax_AvePressure)
          annotation (Line(
            points={{-78.5,2.1},{-80,2.1},{-80,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinus_Pressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(gravityHydrostaticDifference.height, busConnector.CarotidSinusHeight)
          annotation (Line(
            points={{55,35},{46,35},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(gravityHydrostaticDifference.q_down, systemicArtys.q_in)
        annotation (Line(
          points={{69,29},{69,0.5},{75.5,0.5}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(gravityHydrostaticDifference.q_up, pressureMeasure.q_in)
          annotation (Line(
            points={{69,39},{80,39},{80,40.4},{81.9,40.4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinusArteryPressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.Pressure, busConnector.SystemicVeins_Pressure)
          annotation (Line(
            points={{-40,-10},{-40,-28},{46,-28},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(systemicVeinsElacticBloodCompartment.V0, busConnector.SystemicVeins_V0)
          annotation (Line(
            points={{-50.8,10},{-50.8,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(V0_artys.y, busConnector.SystemicArtys_V0) annotation (Line(
            points={{86.75,23},{70,23},{70,22},{46,22},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(q_out, q_out) annotation (Line(
            points={{-100,0},{-100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(q_in, systemicArtys.q_in) annotation (Line(
          points={{100,0},{99.75,0},{99.75,0.5},{75.5,0.5}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(collapsedVeins.q_out, q_out) annotation (Line(
            points={{-94.5,-1.22465e-015},{-96.25,-1.22465e-015},{-96.25,0},{
              -100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(busConnector.Gravity_Gz, G.u) annotation (Line(
            points={{46,50},{46,38},{34,38},{34,30.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(G.y, gravityHydrostaticDifference.G) annotation (Line(
            points={{34,21.6},{34,16},{61,16},{61,25}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(rightCororaryCirculation.busConnector, busConnector)
                                                                annotation (
            Line(
            points={{-25.1,73.9},{46,73.9},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(leftCororaryCirculation.busConnector, busConnector)
                                                               annotation (Line(
            points={{6.9,87.9},{46,87.9},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(leftCororaryCirculation.BloodFlow, busConnector.leftHeart_BloodFlow)
          annotation (Line(
            points={{7,81},{46,81},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(rightCororaryCirculation.BloodFlow, busConnector.rightHeart_BloodFlow)
          annotation (Line(
            points={{-25,67},{22,67},{22,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(leftCororaryCirculation.BloodFlow, busConnector.LeftHeart_BloodFlow)
          annotation (Line(
            points={{7,81},{46,81},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(rightCororaryCirculation.BloodFlow, busConnector.RightHeart_BloodFlow)
          annotation (Line(
            points={{-25,67},{22,67},{22,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(splanchnicCirculation.busConnector, busConnector) annotation (
            Line(
            points={{-8,-15.5},{-8,50},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
      connect(splanchnicCirculation.q_in, systemicArtys.q_in) annotation (Line(
          points={{30,-25},{62,-25},{62,0.5},{75.5,0.5}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(splanchnicCirculation.q_out,
          systemicVeinsElacticBloodCompartment.referencePoint) annotation (Line(
            points={{-8,-25},{-22,-25},{-22,0},{-44,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(peripheral.q_in, systemicArtys.q_in) annotation (Line(
          points={{26,1.77636e-015},{52,1.77636e-015},{52,0.5},{75.5,0.5}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(peripheral.q_out, systemicVeinsElacticBloodCompartment.referencePoint)
          annotation (Line(
            points={{-2,1.77636e-015},{-24,1.77636e-015},{-24,0},{-44,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(rightCororaryCirculation.q_out, q_out) annotation (Line(
            points={{-42,72},{-60,72},{-60,86},{-100,86},{-100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftCororaryCirculation.q_out, q_out) annotation (Line(
            points={{-10,86},{-100,86},{-100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftCororaryCirculation.q_in, q_in) annotation (Line(
            points={{10,86},{100,86},{100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.referencePoint, veins.q_in)
          annotation (Line(
            points={{-44,0},{-56,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(veins.q_out, collapsedVeins.q_in) annotation (Line(
            points={{-72,0},{-73.25,0},{-73.25,1.22465e-015},{-74.5,
              1.22465e-015}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(rightCororaryCirculation.q_in, q_in) annotation (Line(
            points={{-22,72},{36,72},{36,86},{100,86},{100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(legsArtys.q_in,sequesteredBlood. referencePoint) annotation (Line(
            points={{80,-78},{90,-78}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(sequesteredBlood.ExternalPressure,const8. y) annotation (Line(
            points={{81,-68},{81,-64.5},{85.125,-64.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(legsArtys.q_out,hydrostaticDifference. q_down) annotation (Line(
            points={{64,-78},{62,-78}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(hydrostaticDifference.q_up, systemicArtys.q_in) annotation (Line(
          points={{62,-68},{62,0},{75.5,0},{75.5,0.5}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(sequesteredBlood1.ExternalPressure,const12. y) annotation (Line(
            points={{-61.1,-64},{-61.1,-56.5},{-59.875,-56.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood1.referencePoint,legsVeins. q_in) annotation (
            Line(
            points={{-53,-73},{-42,-73}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(legsVeins.q_out,hydrostaticDifference1. q_down) annotation (
            Line(
            points={{-28,-73},{-28,-74},{-23,-74}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(hydrostaticDifference1.q_up,
          systemicVeinsElacticBloodCompartment.referencePoint) annotation (Line(
            points={{-23,-64},{-23,0},{-44,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(hydrostaticDifference1.height, busConnector.LowerTorsoVeinHeight)
          annotation (Line(
            points={{-9,-68},{46,-68},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(hydrostaticDifference1.pumpEffect, busConnector.Exercise_MusclePump_Effect)
          annotation (Line(
            points={{-15,-58},{46,-58},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(hydrostaticDifference.height, busConnector.LowerTorsoArtyHeight)
          annotation (Line(
            points={{48,-72},{46,-72},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood1.Vol, busConnector.LegVeins_DeoxygenatedBloodVolume)
          annotation (Line(
            points={{-56.6,-82},{-58,-82},{-58,-90},{46,-90},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood.Vol, busConnector.LegArtys_OxygenatedBloodVolume)
          annotation (Line(
            points={{86,-88},{86,-90},{46,-90},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(G.y,hydrostaticDifference1. G) annotation (Line(
            points={{34,21.6},{34,-90},{-15,-90},{-15,-78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(G.y,hydrostaticDifference. G) annotation (Line(
            points={{34,21.6},{34,-90},{54,-90},{54,-82}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(systemicArtys.volume, busConnector.SystemicArtys_OxygenatedBloodVolume)
        annotation (Line(
          points={{81.8,-10},{72,-10},{72,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(systemicVeinsElacticBloodCompartment.Vol, busConnector.SystemicVeins_DeoxygenatedBloodVolume)
        annotation (Line(
          points={{-48,-10},{-48,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(systemicArtys.q_in, pressureMeasure1.q_in) annotation (Line(
          points={{75.5,0.5},{82,0.5},{82,-34}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(pressureMeasure1.pressure, busConnector.SystemicArtys_Pressure)
        annotation (Line(
          points={{92,-32},{98,-32},{98,-42},{46,-42},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
       annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                -100},{100,100}}),   graphics={Text(
                extent={{42,46},{74,46}},
                lineColor={0,0,255},
                textString="Carotid Artery Pressure")}),
                                       Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-104,-54},{110,-76}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td>GPL 3.0</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak</p><br/>

</html>", info="<html>
<p>Blood volume (and pressure) distributions between </p>
<p><ul>
<li>systemic arteries, </li>
<li>systemic veins and</li>
<li>portal (splanchnic) vein.</li>
</ul></p>
<p>Blood flow throught: </p>
<p><ul>
<li>GIT, hepatic artery, liver</li>
<li>Kidney</li>
<li>CNS</li>
<li>Skeletal muscle</li>
<li>Respiratory muscle</li>
<li>Skin</li>
<li>Bones</li>
<li>Adipose tissue</li>
<li>Other tissue</li>
</ul></p>
</html>"));
      end SystemicCirculationFullDynamic;

      model PulmonaryCirculation
        import Physiomodel;
         extends Physiolibrary.Icons.PulmonaryCirculation;
        //Can not be one port, because for example whole periferal resistance is taken as ResistorBases, but blood can accumulate inside
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in "Blood inflow"
        annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent=
                {{-112,-10},{-92,10}}), iconTransformation(extent={{-112,-10},{
                -92,10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out "Blood outflow"
        annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent=
                {{90,-10},{110,10}}), iconTransformation(extent={{90,-10},{110,
                10}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel pulmCapys(
        stateName="PulmCapys.Vol",
        useComplianceInput=true,
        useExternalPressureInput=true,
        useV0Input=true,
        volume_start=0.000200141) "pulmonary capilaries"
        annotation (Placement(transformation(extent={{-22,-10},{-2,10}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel pulmArty(
        stateName="PulmArty.Vol",
        useComplianceInput=true,
        useExternalPressureInput=true,
        useV0Input=true,
        volume_start=0.000200488)
        annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel pulmVeins(
        stateName="PulmVeins.Vol",
        useComplianceInput=true,
        useExternalPressureInput=true,
        useV0Input=true,
        volume_start=0.000210463) "pulmonary veins"
        annotation (Placement(transformation(extent={{38,-10},{58,10}})));
      Physiolibrary.Hydraulic.Components.Conductor pulmArtyConductance(
          Conductance=1.6876385456527e-07)
        annotation (Placement(transformation(extent={{-61,-11},{-39,11}})));
      Physiolibrary.Types.Constants.VolumeConst ArtysV0(k=0.00011)
        annotation (Placement(transformation(extent={{-94,16},{-86,24}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst ArtysCompliance(k=
            3.975326351982e-08)
        annotation (Placement(transformation(extent={{-54,16},{-62,24}})));
      Physiolibrary.Types.Constants.VolumeConst               CapysV0(k=0.00014)
        annotation (Placement(transformation(extent={{-28,16},{-20,24}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst CapysCompliance(k=
            3.450283248890036e-008)
        annotation (Placement(transformation(extent={{4,16},{-4,24}})));
      Physiolibrary.Hydraulic.Components.Conductor pulmCapysConductance(
          Conductance=2.250184727537e-07)
        annotation (Placement(transformation(extent={{2,-11},{24,11}})));
      Physiolibrary.Types.Constants.VolumeConst               VeinsV0(k=0.00015)
        annotation (Placement(transformation(extent={{30,16},{38,24}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst VeinsCompliance(k=
            4.50036945507396e-008)
        annotation (Placement(transformation(extent={{66,14},{58,22}})));
      Physiolibrary.Hydraulic.Components.Conductor pulmVeinsConductance(
          Conductance=6.7505541826109e-07)
        annotation (Placement(transformation(extent={{62,-11},{84,11}})));
      Physiolibrary.Types.BusConnector busConnector
          "signals of organ bood flow resistence"
                                                annotation (Placement(
            transformation(extent={{18,66},{38,86}}), iconTransformation(extent=
               {{-108,42},{-92,58}})));
        Physiomodel.CardioVascular.VascularCompartments.LungBloodFlow lungBloodFlow
          annotation (Placement(transformation(extent={{-26,74},{-6,94}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-42,-10},{-22,10}})));
        Modelica.Blocks.Math.Sum sum1(nin=3)
          annotation (Placement(transformation(extent={{-28,28},{-20,36}})));
        Modelica.Blocks.Math.Sum sum2(nin=2)
          annotation (Placement(transformation(extent={{50,-38},{42,-30}})));
      Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
        annotation (Placement(transformation(extent={{-8,-26},{12,-6}})));
      equation
      connect(pulmArty.q_in, pulmArtyConductance.q_in) annotation (Line(
          points={{-76,0},{-61,0}},
          color={0,0,0},
          smooth=Smooth.None,
          thickness=1));
        connect(pulmArty.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
            points={{-68,8},{-68,14},{28,14},{28,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pulmCapys.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
            points={{-4,8},{-4,14},{28,14},{28,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pulmVeins.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
            points={{56,8},{56,14},{28,14},{28,76}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pulmArty.zeroPressureVolume, ArtysV0.y) annotation (Line(
          points={{-84,8},{-84,20},{-85,20}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(pulmArty.compliance, ArtysCompliance.y)
                                                annotation (Line(
            points={{-76,8},{-76,20},{-63,20}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(CapysV0.y, pulmCapys.zeroPressureVolume) annotation (Line(
          points={{-19,20},{-20,20},{-20,8}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(CapysCompliance.y,pulmCapys.compliance)
                                                 annotation (Line(
            points={{-5,20},{-12,20},{-12,8}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pulmCapys.q_in, pulmCapysConductance.q_in) annotation (Line(
          points={{-12,0},{2,0}},
          color={0,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(pulmCapysConductance.q_out, pulmVeins.q_in) annotation (Line(
          points={{24,0},{48,0}},
          color={0,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(pulmVeins.zeroPressureVolume, VeinsV0.y) annotation (Line(
          points={{40,8},{40,20},{39,20}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(VeinsCompliance.y,pulmVeins.compliance)
                                                 annotation (Line(
            points={{57,18},{48,18},{48,8}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pulmVeins.q_in, pulmVeinsConductance.q_in) annotation (Line(
          points={{48,0},{62,0}},
          color={0,0,0},
          smooth=Smooth.None,
          thickness=1));
        connect(lungBloodFlow.AlveolarVentilated, busConnector.AlveolarVentilated_BloodFlow)
          annotation (Line(
            points={{-6,90},{28,90},{28,76}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(pulmArtyConductance.q_out, flowMeasure.q_in) annotation (Line(
            points={{-39,0},{-42,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(flowMeasure.q_out, pulmCapys.q_in) annotation (Line(
          points={{-22,0},{-12,0}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(flowMeasure.volumeFlow, lungBloodFlow.CardiacOutput)
          annotation (Line(
            points={{-32,12},{-32,90},{-26,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ArtysV0.y, sum1.u[1]) annotation (Line(
            points={{-85,20},{-82,20},{-82,32},{-28,32},{-28,31.4667},{-28.8,
                31.4667}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(CapysV0.y, sum1.u[2]) annotation (Line(
            points={{-19,20},{-18,20},{-18,26},{-80,26},{-80,32},{-28.8,32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(VeinsV0.y, sum1.u[3]) annotation (Line(
            points={{39,20},{42,20},{42,26},{-78,26},{-78,32.5333},{-28.8,
                32.5333}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pulmCapys.volume, sum2.u[1]) annotation (Line(
          points={{-6,-10},{-6,-42},{54,-42},{54,-34.4},{50.8,-34.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pulmVeins.volume, sum2.u[2]) annotation (Line(
          points={{54,-10},{54,-20},{54,-20},{54,-33.6},{50.8,-33.6}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(sum1.y, busConnector.PulmonaryCirculation_V0) annotation (Line(
            points={{-19.6,32},{28,32},{28,76}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(pulmArty.volume, busConnector.PulmonaryCirculation_DeoxygenatedBloodVolume)
        annotation (Line(
          points={{-70,-10},{-70,-28},{28,-28},{28,76}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-16},{6,-16}}));
        connect(busConnector.PulmonaryCirculation_OxygenatedBloodVolume, sum2.y)
          annotation (Line(
            points={{28,76},{28,-34},{41.6,-34}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(q_in, pulmArty.q_in) annotation (Line(
          points={{-102,0},{-76,0}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(pulmVeinsConductance.q_out, q_out) annotation (Line(
            points={{84,0},{100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(pulmCapys.q_in, pressureMeasure.q_in) annotation (Line(
          points={{-12,0},{-8,0},{-8,-22},{-2,-22}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.PulmCapys_Pressure)
        annotation (Line(
          points={{8,-20},{28,-20},{28,76}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                -100},{100,100}}),         graphics), Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-108,-48},{106,-70}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>

<tr>
<td>License:</td>
<td>GPL 3.0</td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak</p><br/>

</html>", info="<html>
<p>Blood volume (and pressures) distribution between </p>
<p><ul>
<li>pulmonary arteries, </li>
<li>pulmonary veins and </li>
<li>pulmonary capilaries.</li>
</ul></p>
<p>Blood flow through ventilated alveoli.</p>
</html>"));
      end PulmonaryCirculation;
    end Physiomodel;
  end Examples;
  extends Modelica.Icons.Package;
  package Hydraulic
    extends Modelica.Icons.Package;
    package Components
      extends Modelica.Icons.Package;
      model CardiacValve
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -12}, {-90, 8}}), iconTransformation(extent = {{-108, -12}, {-88, 8}})));
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput backflowConductance
          "conductance of backflow in case of insufficiency"                                                                        annotation(Placement(transformation(extent = {{-26, -18}, {14, 22}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-74, 76})));
        Physiolibrary.Hydraulic.Components.IdealValve outflowValve(_Gon(displayUnit = "ml/(mmHg.min)") = 0.012501026264094, _Goff(displayUnit = "ml/(mmHg.min)") = 1.2501026264094e-012) annotation(Placement(transformation(extent = {{-44, 32}, {-24, 52}})));
        Physiolibrary.Hydraulic.Components.IdealValve inflowValve(open(start = false)) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-36, -38})));
        Physiolibrary.Hydraulic.Components.Conductor outflowBloodResistor(useConductanceInput = true)
          "from Conductor"                                                                                             annotation(Placement(transformation(extent = {{26, 28}, {46, 48}})));
        Physiolibrary.Hydraulic.Components.Conductor variableBloodConductor(useConductanceInput = true) annotation(Placement(transformation(extent = {{54, -56}, {18, -34}})));
        Types.RealIO.HydraulicResistanceInput outflowResistance
          "resistance of flow in normal direction"                                                       annotation(Placement(transformation(extent = {{-38, 54}, {2, 94}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {52, 88})));
        Types.RealIO.HydraulicResistanceToConductance hydraulicresistancetoconductance annotation(Placement(transformation(extent = {{16, 70}, {24, 78}})));
      equation
        connect(variableBloodConductor.cond, backflowConductance) annotation(Line(points = {{36, -38.4}, {36, -38.4}, {36, 2}, {-6, 2}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
        connect(outflowResistance, hydraulicresistancetoconductance.hydraulicresistance) annotation(Line(points = {{-18, 74}, {6, 74}, {6, 74.40000000000001}, {15.2, 74.40000000000001}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
        connect(hydraulicresistancetoconductance.y, outflowBloodResistor.cond) annotation(Line(points = {{25, 74}, {36, 74}, {36, 44}}, color = {0, 0, 127}, smooth = Smooth.Bezier));
        connect(outflowValve.q_in, inflow) annotation(Line(points = {{-44, 42}, {-72, 42}, {-72, -2}, {-100, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        connect(outflowValve.q_out, outflowBloodResistor.q_in) annotation(Line(points = {{-24, 42}, {2, 42}, {2, 38}, {26, 38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        connect(outflowBloodResistor.q_out, outflow) annotation(Line(points = {{46, 38}, {74, 38}, {74, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        connect(outflow, variableBloodConductor.q_in) annotation(Line(points = {{100, 0}, {78, 0}, {78, -45}, {54, -45}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        connect(variableBloodConductor.q_out, inflowValve.q_in) annotation(Line(points = {{18, -45}, {-4, -45}, {-4, -38}, {-26, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        connect(inflowValve.q_out, inflow) annotation(Line(points = {{-46, -38}, {-74, -38}, {-74, -2}, {-100, -2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.Bezier));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{-72, 66}, {-72, -82}, {38, -10}, {38, 12}, {-62, 68}, {-72, 82}, {-72, 66}}, lineColor=  {0, 0, 127}, smooth=  Smooth.None, fillColor=  {255, 85, 85},
                  fillPattern=                                                                                                    FillPattern.Sphere), Rectangle(extent=  {{44, 96}, {72, -94}}, lineColor=  {0, 0, 127}, fillColor=  {255, 85, 85},
                  fillPattern=                                                                                                    FillPattern.Sphere), Text(extent=  {{-194, -106}, {206, -136}}, lineColor=  {0, 0, 127}, textString=  "%name"), Rectangle(extent=  {{-64, 50}, {-14, 42}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                  fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{4, 1}, {-4, 7}, {-4, -7}, {4, 1}}, lineColor=  {0, 0, 127}, smooth=  Smooth.None, fillColor=  {255, 255, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-70, 47}, rotation=  180), Polygon(points=  {{-4, 1}, {4, 7}, {4, -7}, {-4, 1}}, lineColor=  {0, 0, 127}, smooth=  Smooth.None, fillColor=  {255, 255, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {68, 63}, rotation=  180), Rectangle(extent=  {{10, 68}, {60, 60}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                  fillPattern=                                                                                                    FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end CardiacValve;

      model AortaFlowMeasurement
        "measures flow, diastolic, systolic and mean pressure"
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-80, -98})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, -98})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, -98})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 13300);
        Pressure Pmax;
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
        Pmean:=q_in.pressure;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = der(q_in.pressure) > 0;
        when {b and not pre(b)} then
          T0 = time "initial time of current cardiac cycle";
          HP = if pre(T0) > 0 then time - pre(T0) else 1;
          Pmean = max(Pd,SumPressure / pre(HP)) "mean pressure";
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                  -100},{100,100}}),                                                                        graphics={  Ellipse(fillColor=  {245, 245, 245},
                  fillPattern=                                                                                                    FillPattern.Solid, extent=  {{-70, -70}, {70, 70}}), Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-79, -72}, rotation=  90, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-58, -71}, rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-36, -53}, rotation=  90, textString=  "Pmean"), Line(points=  {{0, 70}, {0, 40}}), Line(points=  {{22.9, 32.8}, {40.2, 57.3}}), Line(points=  {{-22.9, 32.8}, {-40.2, 57.3}}), Line(points=  {{37.6, 13.7}, {65.8, 23.9}}), Line(points=  {{-37.6, 13.7}, {-65.8, 23.9}}), Ellipse(lineColor=  {64, 64, 64}, fillColor=  {255, 255, 255}, extent=  {{-12, -12}, {12, 12}}), Polygon(origin=  {0, 0}, rotation=  -17.5, fillColor=  {64, 64, 64}, pattern=  LinePattern.None,
                  fillPattern=                                                                                                    FillPattern.Solid, points=  {{-5.0, 0.0}, {-2.0, 60.0}, {0.0, 65.0}, {2.0, 60.0}, {5.0, 0.0}}), Ellipse(fillColor=  {64, 64, 64}, pattern=  LinePattern.None,
                  fillPattern=                                                                                                    FillPattern.Solid, extent=  {{-7, -7}, {7, 7}}), Line(points=  {{70, 0}, {100, 0}}, color=  {0, 128, 255}), Line(points=  {{-100, 0}, {-70, 0}}, color=  {0, 128, 255}), Line(points=  {{66.4, -20.3}, {38.2, -10.1}}), Line(points=  {{39.1, -57.2}, {21.8, -32.7}}), Line(points=  {{0, -40}, {0, -70}})}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end AortaFlowMeasurement;

      model AtrialFlowMeasurement
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        Physiolibrary.Types.RealIO.FrequencyInput HR "Heart rate " annotation(Placement(transformation(extent = {{-36, 28}, {4, 68}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 68})));
        Physiolibrary.Types.RealIO.PressureOutput Ps
          "Systolic pressure during heart cycle"                                            annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-80, -30})));
        Physiolibrary.Types.RealIO.PressureOutput Pd
          "Diastolic pressure during heart cycle"                                            annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, -30})));
        Physiolibrary.Types.RealIO.PressureOutput Pmean
          "Mean pressure during heart cycle"                                               annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, -30})));
        Physiolibrary.Types.RealIO.VolumeOutput SV "systolic volume" annotation(Placement(transformation(extent = {{22, -42}, {42, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {30, -30})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput CO "Cardiac output" annotation(Placement(transformation(extent = {{50, -40}, {70, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {50, -30})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Physiolibrary.Types.Pressure Pmin;
        Physiolibrary.Types.Pressure Pmax;
        Physiolibrary.Types.Volume Volume "sum of volume through cyrdiac cycle";
        Boolean b "event condition";
        Physiolibrary.Types.Time T0;
        discrete Physiolibrary.Types.Time HP "length of cardiac cycle";
      initial algorithm
        CO := 0;
        SV := 0;
        Ps := q_in.pressure;
        Pmin := q_in.pressure;
        Pmax := q_in.pressure;
        Pd := q_in.pressure;
        Pmean := q_in.pressure;
      equation
        //    q_out.pressure = q_in.pressure;
        //  actualFlow = q_in.q;
        //  Inflow.q + Outflow.q = 0;
        //  Inflow.pressure = 0;//Outflow.pressure;
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
        when {b} then
          T0 = time "initial time of current cardiac cycle";
          HP = 1 / HR "calculation od time lenght of current cardiac cycle";
          SV = Volume
            "systolic volume is equal of total volume passed through this block";
          CO = SV * HR
            "cardiac output calculation from systolic volume and heart rate (l/min)";
          Pmean = SumPressure / pre(HP)
            "mean pressure (torr) = summ pressure through cardiac cycle divided by length of previous cardiac cycle";
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          reinit(Volume, 0) "reinitialisation of volume";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, Pmean)
            "reinitialisation of maximal pressure to mean pressure";
          reinit(Pmin, Pmean)
            "reinitialisation minimal pressure to mean pressure";
        end when;
        der(Volume) = q_in.q;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-32, 46}, {26, 32}}, lineColor=  {0, 128, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-77, 30}, rotation=  90, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-56, 31}, rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-32, 35}, rotation=  90, textString=  "Pmean"), Text(extent=  {{-29, 12}, {29, -12}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {34, 7}, rotation=  90, textString=  "SV"), Text(extent=  {{-30, 11}, {30, -11}}, lineColor=  {0, 0, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {55, 8}, rotation=  90, textString=  "CO")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end AtrialFlowMeasurement;

      partial model PulmonaryCirculation_V
        import Cardiovascular;
        extends Cardiovascular.Interfaces.PulmonaryCirculation;
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60})));
      end PulmonaryCirculation_V;

      partial model SystemicCirculation_V
        import Cardiovascular;
        extends Cardiovascular.Interfaces.SystemicCirculation;
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {50, -90})));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end SystemicCirculation_V;

      partial model Heart_V
        import Cardiovascular;
        extends Cardiovascular.Interfaces.Heart;
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {10, -90}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-4, -50})));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end Heart_V;

      model PulseFlowMeasurement
        "measures flow, diastolic, systolic and mean pressure"
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-80, -30})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, -30})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, -30})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 13300);
        Pressure Pmax;
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
        discrete Types.RealIO.BooleanInput b annotation(Placement(transformation(extent = {{-78, 14}, {-58, 34}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, 90})));
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        when {b} then
          T0 = time "initial time of current cardiac cycle";
          HP = time - pre(T0);
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean = if pre(HP) > 0 then SumPressure / pre(HP) else pre(Pd) * 2 / 3 + pre(Ps) * 1 / 3
            "mean pressure";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {255, 255, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-77, -2}, rotation=  90, textStyle=  {TextStyle.Bold}, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {255, 255, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-58, -1}, rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {255, 255, 255}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-34, 19}, rotation=  90, textString=  "Pmean")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end PulseFlowMeasurement;

      model BloodFlowMeasurement
        "measures flow, diastolic, systolic and mean pressure"
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-82, -102})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-62, -102})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-42, -102})));
        Physiolibrary.Types.RealIO.VolumeOutput SV "systolic volume" annotation(Placement(transformation(extent = {{22, -42}, {42, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {32, -100})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput CO "Cardiac output" annotation(Placement(transformation(extent = {{50, -40}, {70, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {52, -100})));
        Physiolibrary.Types.Volume Volume(start = 0)
          "sum of volume through cyrdiac cycle";
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 133000);
        Pressure Pmax(start = 0);
        discrete Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP "length of cardiac cycle";
        Boolean b;
        Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-14, 58}, {26, 98}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 100})));
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
        Pmean := q_in.pressure;
        HP := 1 / HR;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
        when {b} then
          T0 = time "initial time of current cardiac cycle";
          HP = 1 / HR;
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean = if pre(HP) > 0 then SumPressure / pre(HP) else pre(Pd) * 2 / 3 + pre(Ps) * 1 / 3
            "mean pressure";
          SV = Volume
            "systolic volume is equal of total volume passed through this block";
          CO = SV / HP
            "cardiac output calculation from systolic volume and heart period";
          reinit(Volume, 0) "reinitialisation of volume";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(Volume) = q_in.q;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-52, 11}, {52, -11}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {-83, -76}, rotation = 90, textStyle = {TextStyle.Bold}, textString = "Ps"), Text(extent = {{-53, 10}, {53, -10}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {-62, -75}, rotation = 90, textString = "Pd"), Text(extent = {{-55, 12}, {55, -12}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {-40, -55}, rotation = 90, textString = "Pmean"), Text(extent = {{-84, 78}, {-34, 62}}, lineColor = {0, 0, 0}, pattern = LinePattern.Dash,
                  lineThickness =                                                                                                   1, textString = "HR"), Text(extent = {{-55, 12}, {55, -12}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {54, -73}, rotation = 90, textString = "CO"), Text(extent = {{-55, 12}, {55, -12}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {32, -73}, rotation = 90, textString = "SV")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end BloodFlowMeasurement;

      model VolumeContainer
        "Volume container for blood vessels, bladder, lumens"
        //extends Physiolibrary.SteadyStates.Interfaces.SteadyState(state_start=
        //    volume_start, storeUnit="ml");
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{-14, -14}, {14, 14}})));
        parameter Physiolibrary.Types.Volume volume_start = 1e-11
          "Volume start value"                                                         annotation(Dialog(group = "Initialization"));
        //default = 1e-5 ml
        parameter Boolean useExternalPressureInput = false
          "=true, if external pressure input is used"                                                  annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
        parameter Physiolibrary.Types.Pressure ExternalPressure = 0
          "External pressure. Set zero if internal pressure is relative to external. Valid only if useExternalPressureInput=false."
                                                                                                              annotation(Dialog(enable = not useExternalPressureInput));
        Physiolibrary.Types.RealIO.PressureInput externalPressure(start = ExternalPressure) = ep if useExternalPressureInput annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {80, 80})));
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -100})));
      protected
        Physiolibrary.Types.Pressure ep;
      public
        Physiolibrary.Types.RealIO.VolumeInput volume1 annotation(Placement(transformation(extent = {{-94, 48}, {-54, 88}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 80})));
      initial algorithm
        volume := volume1;
      equation
        if not useExternalPressureInput then
          ep = ExternalPressure;
        end if;
        q_in.pressure = ep;
        //then: normal physiological state
        //else: abnormal collapsing state
        //state = volume;
        der(volume) = q_in.q;
        //change = q_in.q;
        // assert(volume>=-Modelica.Constants.eps,"Collapsing of vessels are not supported!");
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-240, -150}, {238, -110}}, textString=  "%name", lineColor=  {0, 0, 255}), Bitmap(extent=  {{-92, 72}, {92, -80}}, fileName=  "modelica://Cardiovascular/Resources/Icons/sequerestedVolume.png")}), Documentation(revisions = "<html>
<p><i>2009-2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info = "<html>
<p>Pressure can be generated by an elastic tissue surrounding some accumulated volume. Typically there is a threshold volume, below which the relative pressure is equal to external pressure and the wall of the blood vessels is not stressed. But if the volume rises above this value, the pressure increases proportionally. The slope in this pressure-volume characteristic is called &ldquo;Compliance&rdquo;.</p>
<ul>
<li>Increassing volume above ZeroPressureVolume (V0) generate positive pressure (greater than external pressure) lineary dependent on excess volume.</li>
<li>Decreasing volume below CollapsingPressureVolume (V00) generate negative pressure (lower than external pressure) logarithmicaly dependent on volume.</li>
<li>Otherwise external pressure is presented as pressure inside ElasticVessel.</li>
</ul>
<p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ElasticVessel_PV.png\"/></p>
</html>"));
      end VolumeContainer;

      model Degradation "Prescribed half-time of volume degradation"
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in
          "estimated flow from volume compartment based on degradation halftime"
                                                                                                              annotation(Placement(transformation(extent = {{-114, -14}, {-86, 14}}), iconTransformation(extent = {{-114, -14}, {-86, 14}})));
        Physiolibrary.Types.RealIO.VolumeInput V0 "volume which is degraded" annotation(Placement(transformation(extent = {{6, 46}, {46, 86}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 70})));
        parameter Physiolibrary.Types.Time t12 = 1 "half-life";
        Real lambda;
      equation
        lambda = log(2) / t12;
        q_in.q = V0 * lambda;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-100, -50}, {100, 50}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                  fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 127},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-150, -94}, {150, -54}}, textString=  "%name", lineColor=  {0, 0, 255})}), Documentation(revisions = "<html>
<ul>
<li><i>Oct 2014</i> by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>", info = "<html>
<p>Volume degradation defined by halftime of degradation and following equation:</p>
<p><img src=\"modelica://Cardiovascular/Images/equations/equation-BlFLxpsc.png\" alt=\"V(t) = V0 * (1/2)^(t/halftime)\"/></p>
<p>So when <img src=\"modelica://Cardiovascular/Images/equations/equation-n5tpACD3.png\" alt=\"t=halftime\"/> then <img src=\"modelica://Cardiovascular/Images/equations/equation-hEZYqPD7.png\" alt=\"V=0.5*V_0\"/> and the flow of the pump is estimated as difference of volumes in 1 s thus:</p>
<p><img src=\"modelica://Cardiovascular/Images/equations/equation-kUwAH1R5.png\" alt=\"q = V_0 - V_0*(1/2)^(1/halftime)\"/> </p>
<p>This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only <b>hydraulic volume flow</b> variable, which is set to value of input signal variable. </p>
</html>"));
      end Degradation;

      model ElasticVesselNorm
        extends Physiolibrary.Hydraulic.Components.ElasticVessel(final Compliance = 1/Elastance);
        parameter Physiolibrary.Types.HydraulicElastance Elastance
          "Elastance if useComplianceInput=false";
      end ElasticVesselNorm;

      model Resistor
        extends Physiolibrary.Hydraulic.Components.Conductor(final Conductance = 1/Resistance);
        parameter Physiolibrary.Types.HydraulicResistance Resistance(displayUnit="(mmHg.s)/ml")
          "Hydraulic conductance if useConductanceInput=false";
      end Resistor;

      model IdealValveNorm
        extends Physiolibrary.Hydraulic.Components.IdealValve(final _Gon=1/R_on);
        parameter Physiolibrary.Types.HydraulicResistance R_on(displayUnit="(mmHg.s)/ml") = 79.993432449
          "forward state resistance";
      end IdealValveNorm;

      model ElasticVesselSV
        extends ElasticVesselNorm;
        Physiolibrary.Types.RealIO.VolumeOutput stressedVolume annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-90,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-78,-100})));
      equation
                  stressedVolume = volume - zpv;
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics), Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
      end ElasticVesselSV;

      model ConductorWithMeasurement
        "Hydraulic resistor, where conductance=1/resistance"
       extends Physiolibrary.Hydraulic.Interfaces.OnePort;
       extends Physiolibrary.Icons.HydraulicResistor;
        parameter Boolean useConductanceInput = false
          "=true, if external conductance value is used"
          annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Physiolibrary.Types.HydraulicConductance Conductance=0
          "Hydraulic conductance if useConductanceInput=false"
          annotation (Dialog(enable=not useConductanceInput));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput cond(start=Conductance) if useConductanceInput annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,60})));
        Physiolibrary.Hydraulic.Components.Conductor conductor(useConductanceInput=true)
          annotation (Placement(transformation(extent={{26,-22},{70,22}})));
        AortaFlowMeasurement aortaFlowMeasurement
          annotation (Placement(transformation(extent={{-52,-22},{-8,22}})));
        Physiolibrary.Types.RealIO.PressureOutput
                       Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent={{-24,-64},
                  {-4,-44}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={-70,-88})));
        Physiolibrary.Types.RealIO.PressureOutput
                       Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent={{-24,-52},
                  {-4,-32}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={-50,-88})));
        Physiolibrary.Types.RealIO.PressureOutput
                       Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent={{-24,-40},
                  {-4,-20}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={-28,-88})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput
                                          volumeFlow "Actual volume flow rate"
                               annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=180,
              origin={-62,44}),iconTransformation(
              extent={{-11,-11},{11,11}},
              rotation=270,
              origin={11,-91})));
      equation
      //  q_in.q = c * (q_in.pressure - q_out.pressure);
        connect(conductor.q_out, q_out) annotation (Line(
            points={{70,0},{100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      //  if useConductanceInput then
          connect(conductor.cond, cond) annotation (Line(
            points={{48,13.2},{48,34},{0,34},{0,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(q_in, aortaFlowMeasurement.q_in) annotation (Line(
            points={{-100,0},{-72,0},{-72,4.44089e-16},{-52,4.44089e-16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aortaFlowMeasurement.q_out, conductor.q_in) annotation (Line(
            points={{-8,4.44089e-16},{2,4.44089e-16},{2,0},{26,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aortaFlowMeasurement.Pmean, Pmean) annotation (Line(
            points={{-38.36,-21.56},{-38.36,-30},{-14,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Pd, aortaFlowMeasurement.Pd) annotation (Line(
            points={{-14,-42},{-43.2,-42},{-43.2,-21.56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Ps, aortaFlowMeasurement.Ps) annotation (Line(
            points={{-14,-54},{-32,-54},{-32,-50},{-47.6,-50},{-47.6,-21.56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(aortaFlowMeasurement.volumeFlow, volumeFlow) annotation (Line(
            points={{-30,26.4},{-28,26.4},{-28,44},{-62,44}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                         graphics={Text(
                extent={{-210,50},{210,10}},
                lineColor={0,0,255},
                fillColor={58,117,175},
                fillPattern=FillPattern.Solid,
                textString="%name"),                                                                                                    Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -71,-62},                                                                                                    rotation=  90, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -52,-63},                                                                                                    rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -28,-39},                                                                                                    rotation=  90, textString=  "Pmean"),
                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=
                    {0,0,0},                                                                                                    fillColor=
                    {85,170,255},
                  fillPattern=FillPattern.Solid,                                                                                                    origin={12,
                    -53},                                                                                                    rotation=  90,
                textString="flow")}),
          Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>",   info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"),Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}), graphics));
      end ConductorWithMeasurement;

      model ConductorPressureMeasurement
        extends Physiolibrary.Hydraulic.Components.Conductor;
      end ConductorPressureMeasurement;

      model AortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,70})));
        discrete PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,50})));
        discrete PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmax,Pmin;
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
      //protected
        Pressure PmeanA "approximation of mean pressure";
        Pressure Pmean2 "approximation of mean pressure";
      /*initial algorithm

  Ps := q_in.pressure;
  Pd := q_in.pressure;
  Pmean:=q_in.pressure;*/
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        PmeanA =  (2/3)*Pmin+(1/3)*Pmax;
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {initial(),edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 1;
          Ps =   pre(Pmax)
            "systolic pressure = maximum pressure during cardiac cycle";
          Pd =   pre(Pmin)
            "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean2 =  pre(SumPressure) / pre(HP) "mean pressure";
          Pmean = if (Pmean2<Pd) then max(Pd,PmeanA) else Pmean2;
      //    Pmean =  max(Pd,(SumPressure / pre(HP))) "mean pressure";
                   //if ((SumPressure / pre(HP))<Pd) then PmeanA else
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
          reinit(Pmax,  q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin,  q_in.pressure) "reinitialisation minimal pressure";
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                         graphics={                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pmean"),
                                                                                                    Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={48,
                    49},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pd"),
                                                                                                    Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={47,
                    70},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Ps")}));
      end AortaPressureMeasurement;

      model ResistorWithMeasurement
        extends Resistor;
        extends Cardiovascular.Hydraulic.Components.PressureFlowMeasurement;
        annotation (Icon(graphics));
      end ResistorWithMeasurement;

      partial model PressureFlowMeasurement
      import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-80, -98})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, -98})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, -98})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 13300);
        Pressure Pmax;
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in;
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput
                                          volumeFlow "Actual volume flow rate"
                               annotation (Placement(transformation(extent={{-20,-20},
                  {20,20}},
              rotation=180,
              origin={-62,44}),iconTransformation(
              extent={{-11,-11},{11,11}},
              rotation=270,
              origin={7,-99})));
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
        Pmean:=q_in.pressure;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = der(q_in.pressure) > 0;
        when {b and not pre(b)} then
          T0 = time "initial time of current cardiac cycle";
          HP = if pre(T0) > 0 then time - pre(T0) else 1;
          Pmean = max(Pd,SumPressure / pre(HP)) "mean pressure";
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(SumPressure) = q_in.pressure;
        volumeFlow = q_in.q;
        annotation (Icon(graphics={                                                                                                    Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -79,-74},                                                                                                    rotation=  90, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -60,-75},                                                                                                    rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={
                    -38,-49},                                                                                                    rotation=  90, textString=  "Pmean"),
                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=
                    {0,0,0},                                                                                                    fillColor=
                    {85,170,255},
                  fillPattern=FillPattern.Solid,                                                                                                    origin={6,
                    -63},                                                                                                    rotation=  90,
                textString="flow")}));
      end PressureFlowMeasurement;

      model MeanAortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Pmean(start=11300)
          "Mean pressure during heart cycle"                                          annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 6300) "sum of pressure of cardiac cycle";
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 0.75) "length of cardiac cycle";
      //protected
      equation
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 0.75;
          Pmean =  SumPressure / HP "mean pressure";
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}),
                         graphics={                                                                                                    Text(extent = {{-55, 12}, {55, -12}}, lineColor = {0, 0, 0}, fillColor = {85, 170, 255},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString = "Pmean")}));
      end MeanAortaPressureMeasurement;

      model ElasticVesselComplianceAdditive
        extends Physiolibrary.Hydraulic.Components.ElasticVessel;
        Physiolibrary.Types.RealIO.HydraulicComplianceInput complianceadd(start=0)=c-Compliance if
                                                                                  useComplianceInput
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-36,80})));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end ElasticVesselComplianceAdditive;

      model ElasticVesselComplianceAdd2
        "Elastic container for blood vessels, bladder, lumens"
       extends Physiolibrary.Icons.ElasticBalloon;
       extends Physiolibrary.SteadyStates.Interfaces.SteadyState(state_start=
              volume_start, storeUnit="ml");
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in
          annotation (Placement(transformation(extent={{-14,-14},{14,14}})));
        parameter Physiolibrary.Types.Volume volume_start=1e-11
          "Volume start value" annotation (Dialog(group="Initialization"));            //default = 1e-5 ml
        Physiolibrary.Types.Volume excessVolume
          "Additional volume, that generate pressure";

         parameter Boolean useV0Input = false
          "=true, if zero-pressure-volume input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

         parameter Physiolibrary.Types.Volume ZeroPressureVolume=1e-11
          "Maximal volume, that does not generate pressure if useV0Input=false"
          annotation (Dialog(enable=not useV0Input)); //default = 1e-5 ml

          parameter Physiolibrary.Types.Volume CollapsingPressureVolume=1e-12
          "Maximal volume, which generate negative collapsing pressure"; //default = 1e-6 ml

         Physiolibrary.Types.RealIO.VolumeInput zeroPressureVolume(start=
              ZeroPressureVolume)=zpv if useV0Input annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-80,80})));
        parameter Boolean useComplianceInput = false
          "=true, if compliance input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Physiolibrary.Types.HydraulicCompliance Compliance=1
          "Compliance if useComplianceInput=false";

        Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance(start=0)=
          c - Compliance if useComplianceInput annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,80})));
        parameter Boolean useExternalPressureInput = false
          "=true, if external pressure input is used"
          annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
        parameter Physiolibrary.Types.Pressure ExternalPressure=0
          "External pressure. Set zero if internal pressure is relative to external. Valid only if useExternalPressureInput=false."
          annotation (Dialog(enable=not useExternalPressureInput));
        parameter Physiolibrary.Types.Pressure MinimalCollapsingPressure=-101325;
        Physiolibrary.Types.RealIO.PressureInput externalPressure(start=
              ExternalPressure)=ep if useExternalPressureInput annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={80,80})));

        Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-100}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,-100})));

      protected
        Physiolibrary.Types.Volume zpv;
        Physiolibrary.Types.HydraulicCompliance c;
        Physiolibrary.Types.Pressure ep;
        parameter Physiolibrary.Types.Pressure a=MinimalCollapsingPressure/log(
            Modelica.Constants.eps);

      equation
        if not useV0Input then
          zpv=ZeroPressureVolume;
        end if;
        if not useComplianceInput then
          c=Compliance;
        end if;
        if not useExternalPressureInput then
          ep=ExternalPressure;
        end if;
        excessVolume = max( 0, volume - zpv);
        q_in.pressure =
        smooth(0,
          if noEvent(volume>CollapsingPressureVolume) then
            (excessVolume/c + ep)
          else
            (a*log(max(Modelica.Constants.eps,volume/CollapsingPressureVolume)) + ep));
        //then: normal physiological state
        //else: abnormal collapsing state

        //Collapsing state: the max function prevents the zero or negative input to logarithm, the logarithm brings more negative pressure for smaller volume
        //However this collapsing is limited with numerical precission, which is reached relatively soon.

        state = volume; // der(volume) =  q_in.q;
        change = q_in.q;
       // assert(volume>=-Modelica.Constants.eps,"Collapsing of vessels are not supported!");
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-318,-140},{160,-100}},
                textString="%name",
                lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2014 - </i>Marek Matejak, Charles University, Prague, Czech Republic</p>
<ul>
<li>initial implementation </li>
</ul>
<p>4.5.2015 - Tom&aacute;&scaron; Kulh&aacute;nek, Charles University, Prague, Czech Republic</p>
<ul>
<li>fix of external pressure</li>
</ul>
</html>",   info="<html>
<p>Pressure can be generated by an elastic tissue surrounding some accumulated volume. Typically there is a threshold volume, below which the relative pressure is equal to external pressure and the wall of the blood vessels is not stressed. But if the volume rises above this value, the pressure increases proportionally. The slope in this pressure-volume characteristic is called &ldquo;Compliance&rdquo;.</p>
<ul>
<li>Increassing volume above ZeroPressureVolume (V0) generate positive pressure (greater than external pressure) lineary dependent on excess volume.</li>
<li>Decreasing volume below CollapsingPressureVolume (V00) generate negative pressure (lower than external pressure) logarithmicaly dependent on volume.</li>
<li>Otherwise external pressure is presented as pressure inside ElasticVessel.</li>
</ul>
<p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ElasticVessel_PV.png\"/></p>
</html>"));
      end ElasticVesselComplianceAdd2;
    end Components;
  end Hydraulic;

  package Osmotic
    extends Modelica.Icons.Package;
    package Components
      extends Modelica.Icons.Package;
      model OsmoticContainer "Solvent container"

        Physiolibrary.Osmotic.Interfaces.OsmoticPort_a          q_in
          "Flux to/from osmotic compartment"                                                   annotation(Placement(transformation(extent = {{-10, 12}, {10, 32}}), iconTransformation(extent = {{-10, 12}, {10, 32}})));
        parameter Boolean useImpermeableSolutesInput = false
          "=true, if impermeable substance amount as an input"                                                    annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
        parameter Physiolibrary.Types.AmountOfSubstance ImpermeableSolutes = 0
          "Amount of impermeable substance if useImpermeableSolutesInput=false"
                                                                                                              annotation(Dialog(enable = not useImpermeableSolutesInput));
        Physiolibrary.Types.RealIO.AmountOfSubstanceInput impermeableSolutes(start = ImpermeableSolutes) = is if useImpermeableSolutesInput
          "Amount of impermeable solutes in compartment"                                                                                                     annotation(Placement(transformation(extent = {{-100, 40}, {-60, 80}})));
        //   parameter Physiolibrary.Types.Osmolarity InitialOsmolarity=0
        /*                                                              annotation (Dialog(enable=not useImpermeableSolutesInput));
                                            Physiolibrary.Types.RealIO.OsmolarityInput initialOsmolarity(start=InitialOsmolarity) if useImpermeableSolutesInput 
                                            "Initial concentration"                                                                                    annotation (Placement(transformation(extent={{-100,40},
                                                    {-60,80}})));*/
        Physiolibrary.Types.RealIO.VolumeInput volume1 annotation(Placement(transformation(extent = {{-100, 0}, {-60, 40}}), iconTransformation(extent = {{-100, 0}, {-60, 40}})));
      protected
        Physiolibrary.Types.AmountOfSubstance is
          "Current amount of impermeable solutes";
      public
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -84}, {10, -64}}), iconTransformation(extent = {{-24, -24}, {24, 24}}, rotation = 270, origin = {2, -124})));
      initial algorithm
        volume := volume1;
      equation
        if not useImpermeableSolutesInput then
          is = ImpermeableSolutes;
        end if;
        q_in.o = is / volume;
        der(volume) = q_in.q;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-70, 108}, {70, -68}}, fileName = "modelica://Cardiovascular/Resources/Icons/sequerestedVolume.png"), Text(extent = {{-168, -52}, {174, -100}}, lineColor = {0, 0, 255}, textString = "%name")}));
      end OsmoticContainer;

      model OsmoticCellExtInit
        extends Physiolibrary.Osmotic.Components.OsmoticCell(final volume_start=0);
        Physiolibrary.Types.RealIO.VolumeInput initialVolume(start=0.003) annotation (Placement(
              transformation(extent={{-100,-80},{-60,-40}}), iconTransformation(
                extent={{-100,-80},{-60,-40}})));
      initial algorithm

        state_start := initialVolume;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics));
      end OsmoticCellExtInit;
    end Components;
  end Osmotic;

  package Blocks
    extends Modelica.Icons.Package;
    package Interpolation
      extends Modelica.Icons.Package;
      model Curve
        "2D natural cubic interpolation spline defined with (x,y,slope) points"
        //workaround for openmodelica error: Cyclically dependent constants or parameters found in scope Physiolibrary.Blocks.Interpolation.Curve: {data,x}, {data,y}, {data,slope}.
        //Error: Error occurred while flattening model Physiolibrary.Blocks.Interpolation.Curve
        parameter Real x[:] "x coordinations of interpolating points";
        parameter Real y[:] "y coordinations of interpolating points";
        parameter Real slope[:] "slopes at interpolating points";
        Modelica.Blocks.Interfaces.RealInput u annotation(Placement(transformation(extent = {{-120, -20}, {-80, 20}})));
        Modelica.Blocks.Interfaces.RealOutput val annotation(Placement(transformation(extent = {{80, -20}, {120, 20}})));
      protected
        parameter Real a[:, :] = Physiolibrary.Blocks.Interpolation.SplineCoefficients(x, y, slope)
          "cubic polynom coefficients of curve segments between interpolating points";
      equation
        val = Physiolibrary.Blocks.Interpolation.Spline(x, a, u);
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-100, 100}, {100, -100}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                  fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-70, -76}, {-20, -48}, {0, 12}, {34, 62}, {76, 72}}, color=  {0, 0, 127}, smooth=  Smooth.Bezier), Line(points=  {{-48, -82}, {-48, 90}, {-48, 90}}, color=  {0, 0, 127}, smooth=  Smooth.Bezier, arrow=  {Arrow.None, Arrow.Filled}), Line(points=  {{-72, -74}, {68, -74}, {68, -74}}, color=  {0, 0, 127}, smooth=  Smooth.Bezier, arrow=  {Arrow.None, Arrow.Filled})}));
      end Curve;
    end Interpolation;
  end Blocks;

  package Types
    extends Modelica.Icons.Package;
    package RealIO
      extends Modelica.Icons.Package;
      connector HydraulicElastanceInput = input
          Physiolibrary.Types.HydraulicElastance
        "input HydraulicElastance as connector"                                                                                annotation(defaultComponentName = "hydraulicelastance", Icon(graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 127},
                fillPattern=                                                                                                    FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)), Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 127},
                fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-10, 85}, {-10, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html> 
                                                         <p> 
                                                         Connector with one input signal of type HydraulicElastance. 
                                                         </p> 
                                                         </html>"));
      connector HydraulicElastanceOutput = output
          Physiolibrary.Types.HydraulicElastance
        "output HydraulicElastance as connector"                                                                                  annotation(defaultComponentName = "hydraulicelastance", Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                fillPattern=                                                                                                    FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{30, 110}, {30, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html>
                                                       <p>
                                                       Connector with one output signal of type HydraulicElastance.
                                                       </p>
                                                       </html>"));
      connector HydraulicResistanceInput = input
          Physiolibrary.Types.HydraulicResistance
        "input HydraulicResistance as connector"                                                                                  annotation(defaultComponentName = "hydraulicresistance", Icon(graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 127},
                fillPattern=                                                                                                    FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)), Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 127},
                fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-10, 85}, {-10, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html> 
                                                         <p> 
                                                         Connector with one input signal of type HydraulicResistance. 
                                                         </p> 
                                                         </html>"));
      connector HydraulicResistanceOutput = output
          Physiolibrary.Types.HydraulicResistance
        "output HydraulicResistance as connector"                                                                                    annotation(defaultComponentName = "hydraulicresistance", Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                fillPattern=                                                                                                    FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics = {Polygon(points=  {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255}, fillPattern=  FillPattern.Solid), Text(extent=  {{30, 110}, {30, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html>
                                                       <p>
                                                       Connector with one output signal of type HydraulicResistance.
                                                       </p>
                                                       </html>"));
      block HydraulicElastanceToCompliance
        "Reciprocal value of hydraulic compliance"
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput y
          "HydraulicCompliance output"                                                      annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Types.RealIO.HydraulicElastanceInput hydraulicelastance
          "HydraulicElastance input"                                                       annotation(Placement(transformation(extent = {{-68, -28}, {-28, 12}}), iconTransformation(extent = {{-54, -14}, {-28, 12}})));
      equation
        y = 1 / hydraulicelastance;
        annotation(defaultComponentName = "hydrauliccompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{-28, 3}, {20, -4}},
                  lineThickness=                                                                                                    1, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Polygon(points=  {{24, 10}, {24, -10}, {36, 0}, {36, 0}, {24, 10}},
                  lineThickness=                                                                                                    1, smooth=  Smooth.None, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-16, 30}, {12, 2}}, lineColor=  {0, 0, 255}, fillColor=  {255, 240, 234},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "1"), Text(extent=  {{-22, -10}, {16, -32}}, lineColor=  {0, 0, 255}, fillColor=  {255, 240, 234},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "E")}));
      end HydraulicElastanceToCompliance;

      block HydraulicResistanceToConductance
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput y
          "HydraulicConductance constant"                                                       annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Types.RealIO.HydraulicResistanceInput hydraulicresistance annotation(Placement(transformation(extent = {{-68, -16}, {-28, 24}}), iconTransformation(extent = {{-68, -16}, {-28, 24}})));
      equation
        y = 1 / hydraulicresistance;
        //"signal from HydraulicResistance to HydraulicConductance parameter"
        annotation(defaultComponentName = "hydraulicresistancetoconductance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-40, 10}, {40, -10}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  ""), Rectangle(extent=  {{-24, 7}, {2, 2}},
                  lineThickness=                                                                                                    1, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Polygon(points=  {{28, 14}, {28, -6}, {40, 4}, {40, 4}, {28, 14}},
                  lineThickness=                                                                                                    1, smooth=  Smooth.None, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-26, 34}, {4, 8}}, lineColor=  {0, 0, 127}, textString=  "1"), Text(extent=  {{-26, -10}, {8, -40}}, lineColor=  {0, 0, 127}, textString=  "R"), Rectangle(extent=  {{6, 14}, {20, 10}}, lineColor=  {0, 0, 127},
                  fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {0, 0, 255}), Rectangle(extent=  {{6, -2}, {20, -6}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid)}));
      end HydraulicResistanceToConductance;

      connector BooleanOutput = output Boolean "output Boolean as connector" annotation(defaultComponentName = "acceleration", Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                fillPattern=                                                                                                    FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics = {Polygon(points=  {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255}, fillPattern=  FillPattern.Solid), Text(extent=  {{30, 110}, {30, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html>
                                              <p>
                                              Connector with one output signal of type Real.
                                              </p>
                                              </html>"));
      connector BooleanInput = input Boolean "input Boolean as connector" annotation(defaultComponentName = "acceleration", Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                fillPattern=                                                                                                    FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points=  {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 255},
                fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{30, 110}, {30, 60}}, lineColor=  {0, 0, 127}, textString=  "%name")}), Documentation(info = "<html>
                                              <p>
                                              Connector with one output signal of type Real.
                                              </p>
                                              </html>"));
    end RealIO;

    package Constants
      extends Modelica.Icons.Package;
      block HydraulicElastanceConst
        parameter Physiolibrary.Types.HydraulicElastance k
          "Hydraulic elastance";
        Cardiovascular.Types.RealIO.HydraulicElastanceOutput y(displayUnit = "mmHg/ml", nominal = 133.322387415 / 1e-006)
          "HydraulicElastance constant"                                                                                                     annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation(defaultComponentName = "hydraulicElastance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{-40, 10}, {40, -10}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "Const")}), Documentation(info = "<html>
  <p>Please use the reciprocal value of hydraulic elastance, wich is called hydraulic compliance for the compatibility with other blocks and models!</p>
  <p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Physiolibrary.Blocks.Math.Reciprocal) before connecting to library components!</p>
  </html>"));
      end HydraulicElastanceConst;

      block HydraulicComplianceControl
        "Constant signal of type HydraulicCompliance"

        Physiolibrary.Types.RealIO.HydraulicComplianceOutput y
          "HydraulicCompliance constant"                                                      annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput c(start=k) annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.HydraulicCompliance k;
        //ignored for this component
      equation
        y = c;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
      end HydraulicComplianceControl;

      block HydraulicConductanceControl
        "External signal of type HydraulicConductance"

        Physiolibrary.Types.RealIO.HydraulicConductanceOutput y
          "HydraulicCompliance constant"                                                       annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput c(start=k) annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.HydraulicConductance k;
        //ignored for this component
        //TODO add switch between constant default signal and input control signal
      equation
        y = c;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
      end HydraulicConductanceControl;

      block FrequencyControl "External signal of type Frequency"
        Physiolibrary.Types.RealIO.FrequencyOutput y
          "HydraulicCompliance constant"                                            annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Physiolibrary.Types.RealIO.FrequencyInput c annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.Frequency k;
        //ignored for this component
        //TODO add switch between constant default signal and input control signal
      equation
        y = c;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "%name")}));
      end FrequencyControl;

      block HydraulicElastanceToComplianceFactorConst
        "Constant signal of type HydraulicCompliance from HydraulicElastance constant"
        parameter Physiolibrary.Types.HydraulicElastance k
          "Reciprocal constant value of hydraulic compliance";
        parameter Real factor = 1;
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput y
          "HydraulicCompliance constant"                                                      annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1 / k * factor;
        annotation(defaultComponentName = "hydraulicElastance2Compliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{-40, 12}, {40, -8}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "Const"), Text(extent=  {{-18, -10}, {22, -26}}, lineColor=  {0, 0, 255}, textString=  "*"), Text(extent=  {{-18, -24}, {20, -32}}, lineColor=  {0, 0, 255}, textString=  "%factor")}));
      end HydraulicElastanceToComplianceFactorConst;

      block HydraulicResistanceToConductanceFactorConst
        "Constant signal of type HydraulicConductance from HydraulicResistance parameter"
        parameter Physiolibrary.Types.HydraulicResistance k
          "Reciprocal constant value of hydraulic conductance";
        parameter Real factor = 1;
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput y
          "HydraulicConductance constant"                                                       annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1 / k * factor;
        annotation(defaultComponentName = "hydraulicResistance2conductance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{-40, 10}, {40, -10}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "Const"), Text(extent=  {{-14, -20}, {24, -28}}, lineColor=  {0, 0, 255}, textString=  "%factor"), Text(extent=  {{-16, -8}, {24, -24}}, lineColor=  {0, 0, 255}, textString=  "*")}));
      end HydraulicResistanceToConductanceFactorConst;

      block VolumeFactorConst "Constant signal of type Volume"
        parameter Physiolibrary.Types.Volume k "Constant Volume output value";
        parameter Real factor = 1;
        Physiolibrary.Types.RealIO.VolumeOutput y "Volume constant" annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k * factor;
        annotation(defaultComponentName = "volume", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{-40, 10}, {40, -10}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "Const"), Text(extent=  {{-18, -8}, {22, -24}}, lineColor=  {0, 0, 255}, textString=  "*"), Text(extent=  {{-18, -20}, {20, -28}}, lineColor=  {0, 0, 255}, textString=  "%factor")}));
      end VolumeFactorConst;

      block HydraulicResistanceFactorConst
        "Obsolete, please use HydraulicConductance instead!"
        parameter Physiolibrary.Types.HydraulicResistance k
          "Hydraulic resistance";
        parameter Real factor = 1;
        Modelica.Blocks.Interfaces.RealOutput y(final quantity = "HydraulicConductance", final unit = "(Pa.s)/m3", displayUnit = "(mmHg.min)/ml", nominal = 1000000.0 * 133.322387415 * 60)
          "HydraulicResistance constant"                                                                                                     annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k * factor;
        annotation(defaultComponentName = "hydraulicResistance", Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{-40, 10}, {40, -10}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "Const"), Text(extent=  {{-18, -8}, {22, -24}}, lineColor=  {0, 0, 255}, textString=  "*"), Text(extent=  {{-16, -20}, {22, -28}}, lineColor=  {0, 0, 255}, textString=  "%factor")}), Documentation(info = "<html>
  <p>Please use the reciprocal value of hydraulic resistance, wich is called hydraulic conductance for the compatibility with other blocks and models!</p>
  <p>Because zero hydraulic conductance means zero volumetric flow, it is much better to use this reciprocal value of hydraulic resistance.</p>
  <p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Physiolibrary.Blocks.Math.Reciprocal) before connecting to library components!</p>
  </html>"));
      end HydraulicResistanceFactorConst;

      block HydraulicConductanceFaktorControl
        "External signal of type HydraulicConductance"
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput y
          "HydraulicCompliance constant"                                                       annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Modelica.Blocks.Interfaces.RealInput c annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.HydraulicConductance k;
        //TODO add switch between constant default signal and input control signal
      equation
        y = c * k;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
      end HydraulicConductanceFaktorControl;

    block VolumeFlowRateConst "Constant signal of type VolumeFlowRate"
     parameter Physiolibrary.Types.VolumeFlowRate k
          "Constant VolumeFlowRate output value";
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput y
          "VolumeFlowRate constant"
                                  annotation (Placement(transformation(extent={{40,-10},
                {60,10}}), iconTransformation(extent={{40,-10},{60,10}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput f(start=k) annotation (Placement(
            transformation(extent={{-40,-16},{0,24}}), iconTransformation(extent={{-40,
                -16},{0,24}})));
    equation
          y=f;
      annotation (defaultComponentName="volumeFlowRate",
                 Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}, preserveAspectRatio=false),
                graphics={
            Rectangle(extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
                  radius=10,
              fillColor={236,236,236},
                              fillPattern=FillPattern.Solid),
            Text( extent={{-100,-44},{100,-64}},
              lineColor={0,0,0},
                      fillColor={236,236,236},
              fillPattern=FillPattern.Solid,
                  textString="%name")}));
    end VolumeFlowRateConst;
    end Constants;
  end Types;

  package Test
    extends Modelica.Icons.Package;
    model SystemVolume
      extends System;
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {-23, 31}), iconTransformation(extent = {{-8, -8}, {8, 8}}, rotation = 180, origin = {-28, 28})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a catheter annotation(Placement(transformation(extent = {{-26, -8}, {-10, 8}}), iconTransformation(extent = {{-50, -8}, {-32, 10}})));
    equation
      connect(catheter, heart.rightHeartInflow) annotation(Line(points={{-18,0},
              {-14,0},{-14,-1.6},{-9.84,-1.6}},                                                                           color = {190, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics={  Line(points = {{-32, 2}, {-14, 2}}, color = {190, 0, 0}, thickness = 1)}), Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics={  Text(origin=  {1.362, 6.77779}, lineColor=  {190, 0, 0},
                lineThickness=                                                                                                    1, extent=  {{-30, 22}, {-16, 12}}, textString=  "volume=pulmonary.volume
  +heart.volume
  +systemic.volume", fontSize=  5, fontName=  "Courier New",
                horizontalAlignment=                                               TextAlignment.Right)}));
    end SystemVolume;

    model SimpleVolumeControl
      extends Cardiovascular.Test.VolumeControl;
      Control1.VolumeControl.BloodPump bloodTransfusionHemorrhage
        annotation (Placement(transformation(extent={{66,-2},{92,32}})));
      Control1.VolumeControl.DesiredFlowrate volumeControl(flowtime(displayUnit=
             "s"), enabled=false)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Physiolibrary.Types.Constants.VolumeConst desiredVolume(k = 0.005) annotation(Placement(transformation(extent = {{28, 14}, {40, 20}})));
    equation
      connect(desiredVolume.y, volumeControl.desiredVolume) annotation(Line(points = {{41.5, 17}, {43.2, 17}, {43.2, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeControl.volumeflowrate, bloodTransfusionHemorrhage.volumeflowrate) annotation(Line(points={{59.9,
              2.5},{66.95,2.5},{66.95,27.58},{86.3667,27.58}},                                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
      connect(currentVolume, volumeControl.volume) annotation(Line(points = {{51, 27}, {51, 16.5}, {51.4, 16.5}, {51.4, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(bloodTransfusionHemorrhage.port_b, desiredflow) annotation(Line(points = {{93.3, -0.3}, {93.79, -0.3}, {93.79, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-28, 2}, {-24, -32}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{26, 4}, {30, -32}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{2, 2}, {2, -6}, {4, -8}, {8, -14}, {6, -16}, {8, -20}, {10, -22}, {12, -24}, {10, -26}, {8, -30}, {10, -32}, {14, -34}, {16, -36}, {18, -42}, {20, -44}, {24, -48}, {30, -50}, {36, -54}, {44, -58}, {50, -60}, {56, -62}, {60, -62}, {76, -64}, {80, -50}, {92, -22}, {100, -8}, {100, 12}, {70, -60}, {60, -58}, {58, -58}, {52, -54}, {42, -52}, {36, -48}, {32, -46}, {26, -44}, {22, -38}, {20, -36}, {18, -32}, {14, -28}, {18, -22}, {12, -18}, {12, -14}, {14, -12}, {8, -6}, {6, -2}, {6, 2}, {2, 2}}, lineColor=  {127, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.Bezier, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-32, 92}, {30, 86}}, lineColor=  {0, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-32, 86}, {30, 62}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                lineThickness=                                                                                                    1), Rectangle(extent=  {{-32, 66}, {30, 0}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Line(points=  {{-24, 80}, {-24, 68}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.Bezier), Line(points=  {{-18, 76}, {-18, 70}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{-8, 74}, {-2, 74}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{2, 74}, {4, 74}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{10, 76}, {10, 72}, {10, 72}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Text(extent=  {{-94, 94}, {-36, 76}}, lineColor=  {127, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, textString=  "Const")}));
    end SimpleVolumeControl;

    model SystemVolumeControl
      replaceable SystemVolume systemVolume annotation(Placement(transformation(extent = {{0, -38}, {42, 42}})));
      replaceable VolumeControl volumeControl annotation(Placement(transformation(extent = {{-36, -6}, {-16, 14}})));
    equation
      connect(volumeControl.currentVolume, systemVolume.volume) annotation(Line(points={{-17.2,
              11},{-12.6,11},{-12.6,30},{8.4,30}},                                                                                           color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeControl.desiredflow, systemVolume.catheter) annotation(Line(points = {{-16, 4}, {-8, 4}, {-8, 3}, {-0.7, 3}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-10, 36}, {50, -38}},
                imageSource=                                                                                                    "" + "" + "" + "" + "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" + "" + "" + "", fileName=  "modelica://Cardiovascular/Resources/Icons/cvsconcept.png"), Line(points=  {{-8, -4}, {4, 0}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Ellipse(extent=  {{-12, 8}, {-6, -6}}, lineColor=  {127, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0})}));
    end SystemVolumeControl;

    model VariableVolumeControl
      extends VolumeControl;
      Physiolibrary.Types.Volume desiredVolume(start = 0.004);
      Control1.VolumeControl.BloodPump bloodTransfusionHemorrhage
        annotation (Placement(transformation(extent={{66,-2},{92,32}})));
      Control1.VolumeControl.DesiredFlowrate volumeControl(flowtime(displayUnit=
             "s"), enabled=false)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
    equation
      desiredVolume = 0.004 + div(time, 60) * 0.001;
      //each 60 seconds add 1 l
      volumeControl.desiredVolume = desiredVolume;
      connect(volumeControl.volumeflowrate, bloodTransfusionHemorrhage.volumeflowrate) annotation(Line(points={{59.9,
              2.5},{66.95,2.5},{66.95,27.58},{86.3667,27.58}},                                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
      connect(currentVolume, volumeControl.volume) annotation(Line(points = {{51, 27}, {51, 16.5}, {51.4, 16.5}, {51.4, 7.2}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(bloodTransfusionHemorrhage.port_b, desiredflow) annotation(Line(points = {{93.3, -0.3}, {93.79, -0.3}, {93.79, 0}, {100, 0}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{10, 28}, {42, 10}}, lineColor=  {127, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, textString=  "desired volume = 1 l
each 60 seconds add 1 l")}), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-100, 80}, {-34, 0}},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {255, 255, 170}, pattern=  LinePattern.None), Rectangle(extent=  {{-28, 2}, {-24, -32}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{26, 4}, {30, -32}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{2, 2}, {2, -6}, {4, -8}, {8, -14}, {6, -16}, {8, -20}, {10, -22}, {12, -24}, {10, -26}, {8, -30}, {10, -32}, {14, -34}, {16, -36}, {18, -42}, {20, -44}, {24, -48}, {30, -50}, {36, -54}, {44, -58}, {50, -60}, {56, -62}, {60, -62}, {76, -64}, {80, -50}, {92, -22}, {100, -8}, {100, 12}, {70, -60}, {60, -58}, {58, -58}, {52, -54}, {42, -52}, {36, -48}, {32, -46}, {26, -44}, {22, -38}, {20, -36}, {18, -32}, {14, -28}, {18, -22}, {12, -18}, {12, -14}, {14, -12}, {8, -6}, {6, -2}, {6, 2}, {2, 2}}, lineColor=  {127, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.Bezier, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-32, 92}, {30, 86}}, lineColor=  {0, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-32, 86}, {30, 62}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                lineThickness=                                                                                                    1), Rectangle(extent=  {{-32, 66}, {30, 0}}, lineColor=  {0, 0, 0},
                lineThickness=                                                                                                    1,
                fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Line(points=  {{-24, 80}, {-24, 68}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.Bezier), Line(points=  {{-18, 76}, {-18, 70}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{-8, 74}, {-2, 74}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{2, 74}, {4, 74}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{10, 76}, {10, 72}, {10, 72}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Line(points=  {{-98, 2}, {-88, 2}, {-86, 20}, {-70, 20}, {-68, 40}, {-52, 40}, {-50, 60}, {-38, 60}, {-36, 80}}, color=  {127, 0, 0}, thickness=  1, smooth=  Smooth.None), Text(extent=  {{-106, 56}, {-56, 48}}, pattern=  LinePattern.None,
                lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "volume", lineColor=  {0, 0, 0}), Text(extent=  {{-90, -2}, {-34, -10}}, pattern=  LinePattern.None,
                lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "time", lineColor=  {0, 0, 0})}));
    end VariableVolumeControl;

    partial model VolumeControl
      Physiolibrary.Types.RealIO.VolumeInput currentVolume annotation(Placement(transformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {51, 27}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 180, origin = {88, 70})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b desiredflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end VolumeControl;

    package Decorator
      model System_ControlDecorator
        extends System;
        replaceable System system;
      equation
        pulmonaryCirculation = system.pulmonaryCirculation;
        heart = system.heart;
        systemicCirculation = system.systemicCirculation;
      end System_ControlDecorator;

      model System_VolumeDecorator
        extends System_ControlDecorator;
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30})));
      equation
        volume = pulmonaryCirculation.volume + heart.volume + systemicCirculation.volume;
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-40, -40}, {20, 40}}), graphics));
      end System_VolumeDecorator;
    end Decorator;

    model HeartByParts
      extends Cardiovascular.Interfaces.Heart;
      replaceable LeftHeart leftHeart annotation(Placement(transformation(extent = {{-20, -42}, {34, 18}})));
      Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-46, -46})));
      replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-58, 36}, extent = {{-6, -5}, {6, 5}}, rotation = 0)));
      replaceable RightHeart rightHeart annotation(Placement(visible = true, transformation(origin = {-36, -10}, extent = {{-30, -32}, {30, 32}}, rotation = 0)));
      Cardiovascular.Hydraulic.Components.BloodFlowMeasurement aortaFlowMeasurement annotation(Placement(visible = true, transformation(origin = {40, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(leftHeart.outflow, aortaFlowMeasurement.q_in) annotation(Line(points = {{-3.8, 15.6}, {22, 12}, {30, 12}}, thickness = 1));
      connect(rightHeart.outflow, rightHeartOutflow) annotation(Line(points = {{-25.8, 11.12}, {-68.5, 11.12}, {-68.5, 20}, {-100, 20}}, thickness = 1));
      connect(rightHeartInflow, rightHeart.inflow) annotation(Line(points = {{-100, -20}, {-50, -20}, {-50, -8.72}, {-39.6, -8.72}}, thickness = 1));
      connect(Pth.y, rightHeart.PTH) annotation(Line(points = {{-38.5, -46}, {-38.5, -48.4}, {-24, -48.4}}, color = {0, 0, 127}));
      connect(Pth.y, leftHeart.PTH) annotation(Line(points = {{-38.5, -46}, {-3.8, -46}, {-3.8, -48}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(HeartRate.y, rightHeart.HR) annotation(Line(points = {{-50.5, 36}, {-24, 36}, {-24, 28.4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(HeartRate.y, leftHeart.HR) annotation(Line(points = {{-50.5, 36}, {-9.2, 36}, {-9.2, 24}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(leftHeartOutflow, aortaFlowMeasurement.q_out) annotation(Line(points = {{100, 20}, {76, 20}, {76, 12}, {50, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(HeartRate.y, aortaFlowMeasurement.HR) annotation(Line(points = {{-50.5, 36}, {40, 36}, {40, 21.4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(leftHeartInflow, leftHeart.inflow) annotation(Line(points = {{100, -20}, {5.92, -20}, {5.92, -6}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics));
    end HeartByParts;

    model LeftHeart
      extends Physiolibrary.Icons.LeftHeart;
      //  extends SideOfHeart;
      //  replaceable SideOfHeart sideOfHeart;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-14, 10}, {6, 30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{-50, 82}, {-30, 102}})));
      Physiolibrary.Types.RealIO.PressureInput PTH "intrathoracic pressure" annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {100, 54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-40, -120})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 120})));
      replaceable ObsoleteInterfaces.SideOfHeart sideOfHeart
        annotation (Placement(transformation(extent={{-40,-20},{22,42}})));
    equation
      connect(HR, sideOfHeart.HR) annotation(Line(points = {{-104, 52}, {-57, 52}, {-57, 47.58}, {-9, 47.58}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(PTH, sideOfHeart.PTH) annotation(Line(points = {{100, 54}, {58, 54}, {58, 52}, {4, 52}, {4, -13.8}, {-8.38, -13.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(inflow, sideOfHeart.inflow) annotation(Line(points = {{-100, 0}, {-54, 0}, {-54, 10.38}, {-9, 10.38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(outflow, sideOfHeart.outflow) annotation(Line(points = {{100, 0}, {46, 0}, {46, 35.8}, {-9, 35.8}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(lineColor=  {0, 0, 255}, extent=  {{-38, -86}, {-20, -100}}, textString=  "PTH"), Text(extent=  {{-86, 100}, {-58, 90}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end LeftHeart;

    model RightHeart
      extends Physiolibrary.Icons.RightHeart;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-22, -6}, {-2, 14}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{24, 56}, {44, 76}})));
      Physiolibrary.Types.RealIO.PressureInput PTH "intrathoracic pressure" annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {100, 54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {40, -120})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {40, 120})));
      replaceable ObsoleteInterfaces.SideOfHeart sideOfHeart
        annotation (Placement(transformation(extent={{-32,-16},{30,46}})));
    equation
      connect(HR, sideOfHeart.HR) annotation(Line(points = {{-104, 52}, {-52, 52}, {-52, 51.58}, {-1, 51.58}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(PTH, sideOfHeart.PTH) annotation(Line(points = {{100, 54}, {52, 54}, {52, -9.8}, {-0.38, -9.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(inflow, sideOfHeart.inflow) annotation(Line(points = {{-100, 0}, {-50, 0}, {-50, 14.38}, {-1, 14.38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(outflow, sideOfHeart.outflow) annotation(Line(points = {{100, 0}, {8, 0}, {8, 39.8}, {-1, 39.8}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(lineColor=  {0, 0, 255}, extent=  {{30, -86}, {48, -100}}, textString=  "PTH"), Text(extent=  {{26, 94}, {54, 84}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end RightHeart;

    model CollapsingCVS
      Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-16, 6}, {4, 26}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(volume_start = 0.0001, Compliance = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{22, 8}, {42, 28}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance = 1.2501026264094e-10) annotation(Placement(transformation(extent = {{60, 8}, {80, 28}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1(volume_start = 0.0001, Compliance = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{62, -42}, {82, -22}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance = 1.2501026264094e-10) annotation(Placement(transformation(extent = {{26, -42}, {46, -22}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel2(volume_start = 0.0008, Compliance = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{-50, -44}, {-30, -24}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor2(Conductance = 1.2501026264094e-10) annotation(Placement(transformation(extent = {{-84, -44}, {-64, -24}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel3(volume_start = 0.0012, Compliance = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{-84, 2}, {-64, 22}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor3(Conductance = 1.2501026264094e-10) annotation(Placement(transformation(extent = {{-52, 4}, {-32, 24}})));
      Examples.pulses pulses(TD1(displayUnit = "s")) annotation(Placement(transformation(extent = {{-32, 30}, {-12, 50}})));
    equation
      connect(pump.q_out, elasticVessel.q_in) annotation(Line(points = {{4, 16}, {18, 16}, {18, 18}, {32, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel.q_in, conductor.q_in) annotation(Line(points = {{32, 18}, {60, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor.q_out, elasticVessel1.q_in) annotation(Line(points = {{80, 18}, {82, 18}, {82, -32}, {72, -32}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel1.q_in, conductor1.q_out) annotation(Line(points = {{72, -32}, {46, -32}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor1.q_in, elasticVessel2.q_in) annotation(Line(points = {{26, -32}, {-8, -32}, {-8, -34}, {-40, -34}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel2.q_in, conductor2.q_out) annotation(Line(points = {{-40, -34}, {-64, -34}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor2.q_in, elasticVessel3.q_in) annotation(Line(points = {{-84, -34}, {-86, -34}, {-86, 12}, {-74, 12}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel3.q_in, conductor3.q_in) annotation(Line(points = {{-74, 12}, {-64, 12}, {-64, 14}, {-52, 14}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor3.q_out, pump.q_in) annotation(Line(points = {{-32, 14}, {-24, 14}, {-24, 16}, {-16, 16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulses.volumeflowrate, pump.solutionFlow) annotation(Line(points = {{-13, 40}, {-6, 40}, {-6, 20}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end CollapsingCVS;

    model ClearanceVsDegradation
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(volume_start = 0.001) annotation(Placement(transformation(extent = {{-44, 38}, {-24, 58}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{2, 38}, {22, 58}})));
      Modelica.Blocks.Math.Gain degradation(k = Modelica.Math.log(2) / 120 * (1 / (1440 * 60)))
        "RBC half time = 120 days"                                                                                         annotation(Placement(transformation(extent = {{-6, 20}, {2, 28}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1(volume_start = 0.001) annotation(Placement(transformation(extent = {{-38, -28}, {-18, -8}})));
      Hydraulic.Components.Degradation degradation1(t12(displayUnit = "d") = 10368000) annotation(Placement(transformation(extent = {{14, -28}, {34, -8}})));
    equation
      connect(elasticVessel.q_in, unlimitedOutflowPump.q_in) annotation(Line(points = {{-34, 48}, {2, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel.volume, degradation.u) annotation(Line(points={{-28,38},
              {-28,24},{-6.8,24}},                                                                              color = {0, 0, 127}, smooth = Smooth.None));
      connect(degradation.y, unlimitedOutflowPump.solutionFlow) annotation(Line(points={{2.4,24},
              {30,24},{30,62},{12,62},{12,55}},                                                                                               color = {0, 0, 127}, smooth = Smooth.None));
      connect(elasticVessel1.volume, degradation1.V0) annotation(Line(points={{-22,-28},
              {-22,-46},{66,-46},{66,0},{24,0},{24,-11}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
      connect(elasticVessel1.q_in, degradation1.q_in) annotation(Line(points = {{-28, -18}, {14, -18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-94, 78}, {88, 70}}, lineColor=  {0, 0, 255}, textString=  "degradation - 120 days half time by clearance")}));
    end ClearanceVsDegradation;

    model ClearanceVsDegradation2
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(volume_start = 0.001) annotation(Placement(transformation(extent = {{-44, 38}, {-24, 58}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{2, 38}, {22, 58}})));
      Modelica.Blocks.Math.Gain degradation(k = Modelica.Math.log(2) / 120 * (1 / (1440 * 60)))
        "RBC half time = 120 days"                                                                                         annotation(Placement(transformation(extent = {{-6, 20}, {2, 28}})));
    equation
      connect(elasticVessel.q_in, unlimitedOutflowPump.q_in) annotation(Line(points = {{-34, 48}, {2, 48}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel.volume, degradation.u) annotation(Line(points={{-28,38},
              {-28,24},{-6.8,24}},                                                                              color = {0, 0, 127}, smooth = Smooth.None));
      connect(degradation.y, unlimitedOutflowPump.solutionFlow) annotation(Line(points={{2.4,24},
              {30,24},{30,62},{12,62},{12,55}},                                                                                               color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-94, 78}, {88, 70}}, lineColor=  {0, 0, 255}, textString=  "degradation - 120 days half time by clearance")}));
    end ClearanceVsDegradation2;

    model ClearanceVsDegradation3
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1(volume_start = 0.001) annotation(Placement(transformation(extent = {{-38, -28}, {-18, -8}})));
      Hydraulic.Components.Degradation degradation1(t12(displayUnit = "d") = 10368000) annotation(Placement(transformation(extent = {{12, -28}, {32, -8}})));
    equation
      connect(elasticVessel1.volume, degradation1.V0) annotation(Line(points={{-22,-28},
              {-22,-46},{66,-46},{66,0},{22,0},{22,-11}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
      connect(elasticVessel1.q_in, degradation1.q_in) annotation(Line(points = {{-28, -18}, {12, -18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-94, 78}, {88, 70}}, lineColor=  {0, 0, 255}, textString=  "degradation - 120 days half time by clearance")}));
    end ClearanceVsDegradation3;

    model RedBloodCells
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={70,-88}),    iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 180, origin = {80, 78})));
      Physiolibrary.Types.RealIO.VolumeInput bloodVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 0, origin={-85,-85}),    iconTransformation(extent = {{100, 20}, {60, 60}})));
      Hydraulic.Components.VolumeContainer RBCVolume annotation(Placement(transformation(extent = {{-12, -68}, {8, -48}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump transfusion(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, 12}, {-38, 32}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump hemorrhage(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{36, 12}, {56, 32}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump RBCProduction(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, -38}, {-38, -18}})));
      Hydraulic.Components.Degradation RBCDegradation(t12(displayUnit = "d") = 10368000) annotation(Placement(transformation(extent = {{34, -38}, {54, -18}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RBCBaseSecretionRate(k = 2.3148333333333e-10) annotation(Placement(transformation(extent = {{-86, 0}, {-64, 16}})));
      Physiolibrary.Blocks.Factors.SplineLag splineLag(data = {{0.0, 0.0, 0}, {1.3, 1.0, 1.0}, {4.0, 4.0, 0}}, Xscale = 1000, HalfTime = 259200) annotation(Placement(transformation(extent = {{-58, -22}, {-38, -2}})));
      Physiolibrary.Types.Constants.FractionConst initialHematocrit(k = 0.4) annotation(Placement(transformation(extent = {{-88, -66}, {-70, -48}})));
      Modelica.Blocks.Math.Product RBCInitialVolume annotation(Placement(transformation(extent = {{-52, -88}, {-32, -68}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RBCTransfusionRate(k = 0) annotation(Placement(transformation(extent = {{-80, 44}, {-58, 62}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RBCHemorrhageRate(k = 0) annotation(Placement(transformation(extent = {{10, 44}, {32, 62}})));
      Model.Control.BloodVolume.Erythropoetin erythropoetin annotation (
          Placement(transformation(
            extent={{-11,-10},{11,10}},
            rotation=0,
            origin={-79,-18})));
      Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-112, -54}, {-84, -26}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {80, -40})));
      Physiolibrary.Types.RealIO.VolumeInput ecfVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-65, -35}), iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-80, 80})));
      Physiolibrary.Types.RealIO.FractionOutput hematocrit
        annotation (Placement(transformation(extent={{30,-98},{50,-78}})));
      Modelica.Blocks.Math.Division division
        annotation (Placement(transformation(extent={{0,-98},{20,-78}})));
    initial algorithm
    equation
      connect(RBCProduction.q_out, RBCVolume.q_in) annotation(Line(points = {{-38, -28}, {-2, -28}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(RBCDegradation.q_in, RBCVolume.q_in) annotation(Line(points = {{34, -28}, {-2, -28}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(hemorrhage.q_in, transfusion.q_out) annotation(Line(points = {{36, 22}, {-38, 22}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(transfusion.q_out, RBCVolume.q_in) annotation(Line(points = {{-38, 22}, {-2, 22}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(splineLag.y, RBCProduction.solutionFlow) annotation(Line(points={{-48,-16},
              {-48,-21}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
      connect(bloodVolume, RBCInitialVolume.u2) annotation(Line(points={{-85,-85},
              {-69,-85},{-69,-84},{-54,-84}},                                                                              color = {0, 0, 127}, smooth = Smooth.None));
      connect(initialHematocrit.y, RBCInitialVolume.u1) annotation(Line(points = {{-67.75, -57}, {-64, -57}, {-64, -72}, {-54, -72}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(RBCTransfusionRate.y, transfusion.solutionFlow) annotation(Line(points={{-55.25,
              53},{-48,53},{-48,29}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
      connect(RBCHemorrhageRate.y, hemorrhage.solutionFlow) annotation(Line(points={{34.75,
              53},{46,53},{46,29}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
      connect(splineLag.yBase, RBCBaseSecretionRate.y) annotation(Line(points = {{-48, -10}, {-48, 8}, {-61.25, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(RBCInitialVolume.y, RBCVolume.volume1) annotation(Line(points = {{-31, -78}, {-20, -78}, {-20, -50}, {-10, -50}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(erythropoetin.concentration, splineLag.u) annotation(Line(points = {{-71.3, -17.7}, {-68, -17.7}, {-68, -12}, {-56, -12}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(erythropoetin.kidney_po2, kidney_po2) annotation(Line(points={{
              -86.6154,-26},{-86.6154,-33},{-98,-33},{-98,-40}},                                                                         color = {0, 0, 127}, smooth = Smooth.None));
      connect(ecfVolume, erythropoetin.ecf_volume) annotation(Line(points={{-65,-35},
              {-81.5385,-35},{-81.5385,-26}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
      connect(RBCVolume.volume, RBCDegradation.V0) annotation(Line(points = {{-2, -68}, {66, -68}, {66, -14}, {44, -14}, {44, -21}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volume, RBCDegradation.V0) annotation (Line(
          points={{70,-88},{64,-88},{64,-68},{66,-68},{66,-14},{44,-14},{44,-21}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(hematocrit, division.y) annotation (Line(
          points={{40,-88},{21,-88}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(division.u1, RBCVolume.volume) annotation (Line(
          points={{-2,-82},{-2,-68}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(division.u2, RBCInitialVolume.u2) annotation (Line(
          points={{-2,-94},{-64,-94},{-64,-84},{-54,-84}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-78, 102}, {80, -56}}, fileName=  "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"), Text(extent=  {{-98, -64}, {98, -98}}, lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end RedBloodCells;

    model WindkesselSimplification
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(Compliance = 7.5006157584566e-10) annotation(Placement(transformation(extent = {{-72, 50}, {-52, 70}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(displayUnit = "ml/(mmHg.s)") = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{-46, 50}, {-26, 70}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1(Compliance = 1.2751046789376e-08) annotation(Placement(transformation(extent = {{-18, 48}, {2, 68}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance(displayUnit = "ml/(mmHg.s)") = 7.5006157584566e-09) annotation(Placement(transformation(extent = {{16, 48}, {36, 68}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(useSolutionFlowInput = true, SolutionFlow = 8.3333333333333e-05) annotation(Placement(transformation(extent = {{-96, 50}, {-76, 70}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {62, 58})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump1(useSolutionFlowInput = true, SolutionFlow = 8.3333333333333e-05) annotation(Placement(transformation(extent = {{-96, -6}, {-76, 14}})));
      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel2(Compliance = 1.3501108365222e-08) annotation(Placement(transformation(extent = {{-62, -6}, {-42, 14}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor2(Conductance(displayUnit = "ml/(mmHg.s)") = 9.7508004859935e-09) annotation(Placement(transformation(extent = {{-22, -8}, {-2, 12}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume1 annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {40, 2})));
      Examples.pulses pulses annotation(Placement(transformation(extent = {{-110, 14}, {-90, 34}})));
    equation
      connect(unlimitedPump.q_out, elasticVessel.q_in) annotation(Line(points = {{-76, 60}, {-62, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel.q_in, conductor.q_in) annotation(Line(points = {{-62, 60}, {-46, 60}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor.q_out, elasticVessel1.q_in) annotation(Line(points = {{-26, 60}, {-18, 60}, {-18, 58}, {-8, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel1.q_in, conductor1.q_in) annotation(Line(points = {{-8, 58}, {16, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor1.q_out, unlimitedVolume.y) annotation(Line(points = {{36, 58}, {52, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(unlimitedPump1.q_out, elasticVessel2.q_in) annotation(Line(points = {{-76, 4}, {-52, 4}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(elasticVessel2.q_in, conductor2.q_in) annotation(Line(points = {{-52, 4}, {-38, 4}, {-38, 2}, {-22, 2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(conductor2.q_out, unlimitedVolume1.y) annotation(Line(points = {{-2, 2}, {30, 2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(pulses.volumeflowrate, unlimitedPump1.solutionFlow) annotation(Line(points = {{-91, 24}, {-88, 24}, {-88, 8}, {-86, 8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(pulses.volumeflowrate, unlimitedPump.solutionFlow) annotation(Line(points = {{-91, 24}, {-88, 24}, {-88, 64}, {-86, 64}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end WindkesselSimplification;

    model Flat2
      extends Model.Meurs.HemodynamicsMeurs_flat(PulmonaryArteries(useV0Input = true, useComplianceInput = true, useExternalPressureInput = true));
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-280, -140}, {280, 180}}), graphics));
    end Flat2;

    package Control1
      package VolumeControl
        model BloodPump
          // Physiolibrary.Types.RealIO.VolumeFlowRateInput volumerate(start=0.00004);
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent = {{-4, -34}, {16, -14}}), iconTransformation(extent = {{56, -100}, {76, -80}})));
          Physiolibrary.Types.RealIO.VolumeFlowRateInput volumeflowrate annotation(Placement(transformation(extent = {{-92, -76}, {-52, -36}}), iconTransformation(extent = {{-26, -26}, {26, 26}}, rotation = 180, origin = {34, 74})));
        equation
          port_b.q = -volumeflowrate;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-60, -100}, {60, 100}}), graphics={  Rectangle(extent=  {{-54, 36}, {8, -30}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Rectangle(extent=  {{-50, -28}, {-46, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{4, -26}, {8, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{-20, -30}, {-20, -38}, {-18, -40}, {-14, -46}, {-16, -48}, {-14, -52}, {-12, -54}, {-10, -56}, {-12, -58}, {-14, -62}, {-12, -64}, {-8, -66}, {-6, -68}, {-4, -74}, {-2, -76}, {2, -80}, {8, -82}, {14, -86}, {22, -90}, {28, -92}, {34, -94}, {38, -94}, {54, -96}, {62, -96}, {62, -96}, {60, -94}, {54, -92}, {48, -92}, {38, -90}, {36, -90}, {30, -86}, {20, -84}, {14, -80}, {10, -78}, {4, -76}, {0, -70}, {-2, -68}, {-4, -64}, {-8, -60}, {-4, -54}, {-10, -50}, {-10, -46}, {-8, -44}, {-14, -38}, {-16, -34}, {-16, -30}, {-20, -30}}, lineColor=  {127, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.None, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-54, 62}, {8, 56}}, lineColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-54, 56}, {8, 32}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                    lineThickness=                                                                                                    1)}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-60, -100}, {60, 100}}), graphics));
        end BloodPump;

        model DesiredFlowrate "control total blood volume"
          parameter Physiolibrary.Types.Time flowtime = 0.1;
          parameter Boolean enabled = true;
          Physiolibrary.Types.RealIO.VolumeInput volume annotation(Placement(transformation(extent = {{16, 60}, {56, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {14, 72})));
          Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-72, 56}, {-32, 96}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-68, 72})));
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeflowrate annotation(Placement(transformation(extent = {{88, 18}, {108, 38}}), iconTransformation(extent = {{82, 8}, {116, 42}})));
        equation
          volumeflowrate = if enabled then (desiredVolume - volume) / flowtime else 0;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-98, 56}, {98, -8}}, lineColor = {0, 0, 255},
                    fillPattern =                                                                                                   FillPattern.Solid, fillColor = {170, 213, 255}), Ellipse(extent = {{-10, 52}, {46, 0}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170},
                    fillPattern =                                                                                                   FillPattern.Solid), Rectangle(extent = {{-92, 46}, {-38, 8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170},
                    fillPattern =                                                                                                   FillPattern.Solid), Rectangle(extent = {{-32, 30}, {-14, 24}}, lineColor = {0, 0, 255}, fillColor = {0, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid), Rectangle(extent = {{56, 36}, {74, 30}}, lineColor = {0, 0, 255}, fillColor = {0, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid), Rectangle(extent = {{56, 24}, {74, 18}}, lineColor = {0, 0, 255}, fillColor = {0, 0, 0},
                    fillPattern =                                                                                                   FillPattern.Solid)}));
        end DesiredFlowrate;

        model VolumeRefill
          DesiredFlowrate desiredFlowrate annotation(Placement(transformation(extent = {{-22, 6}, {-2, 26}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent = {{28, -26}, {48, -6}}), iconTransformation(extent = {{82, -100}, {102, -80}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeRefill(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-20, -28}, {0, -8}})));
          Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-36, 24}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-20, 80})));
          Physiolibrary.Types.RealIO.VolumeInput currentVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 180, origin = {12, 36}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {20, 80})));
          Physiolibrary.Types.RealIO.VolumeFlowRateInput maxflowrate annotation(Placement(transformation(extent = {{-11, -11}, {11, 11}}, rotation = 0, origin={-37,5}),    iconTransformation(extent = {{-11, -11}, {11, 11}}, rotation = 180, origin = {46, -34})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(displayUnit = "m3/(Pa.s)") = 1) annotation(Placement(transformation(extent = {{8, -26}, {28, -6}})));
        equation
          if desiredFlowrate.volumeflowrate < 0 then
            volumeRefill.solutionFlow = -max(0, min(-desiredFlowrate.volumeflowrate, -maxflowrate));
          else
            volumeRefill.solutionFlow = desiredFlowrate.volumeflowrate;
          end if;
          connect(desiredFlowrate.desiredVolume, desiredVolume) annotation(Line(points = {{-18.8, 23.2}, {-18.8, 24}, {-36, 24}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(desiredFlowrate.volume, currentVolume) annotation(Line(points = {{-10.6, 23.2}, {-3.3, 23.2}, {-3.3, 36}, {12, 36}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(port_b, conductor.q_out) annotation(Line(points = {{38, -16}, {28, -16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(volumeRefill.q_out, conductor.q_in) annotation(Line(points = {{0, -18}, {4, -18}, {4, -16}, {8, -16}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-28, 36}, {34, -30}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Rectangle(extent=  {{-24, -28}, {-20, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{30, -26}, {34, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{6, -30}, {6, -38}, {8, -40}, {12, -46}, {10, -48}, {12, -52}, {14, -54}, {16, -56}, {14, -58}, {12, -62}, {14, -64}, {18, -66}, {20, -68}, {22, -74}, {24, -76}, {28, -80}, {34, -82}, {40, -86}, {48, -90}, {54, -92}, {60, -94}, {64, -94}, {80, -96}, {88, -96}, {88, -96}, {86, -94}, {80, -92}, {74, -92}, {64, -90}, {62, -90}, {56, -86}, {46, -84}, {40, -80}, {36, -78}, {30, -76}, {26, -70}, {24, -68}, {22, -64}, {18, -60}, {22, -54}, {16, -50}, {16, -46}, {18, -44}, {12, -38}, {10, -34}, {10, -30}, {6, -30}}, lineColor=  {127, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.None, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-28, 62}, {34, 56}}, lineColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-28, 56}, {34, 32}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                    lineThickness=                                                                                                    1)}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end VolumeRefill;
      end VolumeControl;
      extends Modelica.Icons.Package;
      model CVS_VolumeControl
        replaceable ObsoleteInterfaces.System_VER_Control system_V
          annotation (Placement(transformation(extent={{0,-68},{72,32}})));
        replaceable Model.Control.BloodVolume.Plasma plasma
          annotation (Placement(transformation(extent={{-86,-14},{-48,20}})));
        replaceable Model.Control.BloodVolume.RedBloodCells redBloodCells
          annotation (Placement(transformation(extent={{-82,-86},{-48,-54}})));
        Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent = {{-34, -18}, {-14, 2}})));
        replaceable Model.Control.Baroreceptor baroreceptor(activationDelay(
              displayUnit="s") = 2)
          annotation (Placement(transformation(extent={{106,-52},{180,16}})));
        replaceable
          Physiolibrary.Types.Constants.HydraulicElastanceToComplianceConst           EITHV(k(displayUnit = "Pa/m3") = 2426467.450953) annotation(Placement(transformation(origin = {172, -37}, extent = {{-4, -3}, {4, 3}}, rotation = 180)));
      equation
        connect(add.y, system_V.desiredVolume) annotation(Line(points={{-13,-8},{
                12,-8}},                                                                                         color = {0, 0, 127}, smooth = Smooth.None));
        connect(redBloodCells.volume, add.u2) annotation(Line(points={{-51.0909,
                -57.52},{-44,-57.52},{-44,-14},{-36,-14}},                                                                          color = {0, 0, 127}, smooth = Smooth.None));
        connect(redBloodCells.bloodVolume, system_V.volume) annotation(Line(points={{
                -51.0909,-63.6},{-8,-63.6},{-8,10},{12,10},{12,19.5}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
        connect(plasma.bloodVolume, system_V.volume) annotation(Line(points = {{-51.8, 10.14}, {12, 10.14}, {12, 19.5}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(plasma.plasmaVolume, add.u1) annotation(Line(points = {{-51.8, 16.6}, {-36, 16.6}, {-36, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(plasma.ecfVolume, redBloodCells.ecfVolume) annotation(Line(points={{-82.2,
                -17.4},{-82.2,-36.7},{-75.8182,-36.7},{-75.8182,-57.2}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
        connect(system_V.Pmean, baroreceptor.PAo) annotation(Line(points = {{84, -60.5}, {98, -60.5}, {98, -66}, {114.88, -66}, {114.88, -45.88}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(baroreceptor.HR, system_V.HR) annotation(Line(points = {{113.03, 7.5}, {98, 7.5}, {98, -29.25}, {80.4, -29.25}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(baroreceptor.RS, system_V.RSP) annotation(Line(points = {{114.88, -26.16}, {102, -26.16}, {102, -48}, {80.4, -48}, {80.4, -46.75}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(baroreceptor.evenacava, system_V.EVC) annotation(Line(points = {{114.14, -37.72}, {92, -37.72}, {92, -11.75}, {80.4, -11.75}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(baroreceptor.evright, system_V.ERMAX) annotation(Line(points = {{114.88, -14.6}, {94, -14.6}, {94, 5.75}, {80.4, 5.75}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(baroreceptor.evleft, system_V.ELMAX) annotation(Line(points = {{113.4, -3.72}, {100, -3.72}, {100, 23.25}, {80.4, 23.25}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(EITHV.y, baroreceptor.ECV0) annotation(Line(points = {{167, -37}, {161.5, -37}, {161.5, -36.36}, {152.62, -36.36}}, color = {0, 0, 127}, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {180, 100}}), graphics), Icon(coordinateSystem(extent = {{-100, -100}, {180, 100}})));
      end CVS_VolumeControl;

      package MeursControl
        model Meurs_Bleeding
          replaceable ObsoleteInterfaces.System_V_Control system_V_Control(
            redeclare Model.Meurs.Parts.PulmonaryCirculation pulmonaryCirculation,
            redeclare Model.Meurs.Parts.Heart heart,
            redeclare Model.Meurs.Parts.SystemicCirculation systemicCirculation)
            annotation (Placement(transformation(extent={{0,0},{48,62}})));
          Modelica.Blocks.Sources.Ramp ramp(startTime = 10, duration = 240, offset = 0.005, height = -0.002) annotation(Placement(transformation(extent = {{-36, 28}, {-16, 48}})));
        equation
          system_V_Control.volume = system_V_Control.pulmonaryCirculation.PulmonaryArteries.volume + system_V_Control.pulmonaryCirculation.PulmonaryVeins.volume + system_V_Control.heart.leftHeart.atrium.volume + system_V_Control.heart.leftHeart.ventricle.volume + system_V_Control.heart.rightHeart.atrium.volume + system_V_Control.heart.rightHeart.ventricle.volume + system_V_Control.systemicCirculation.IntraThoracicArteries.volume + system_V_Control.systemicCirculation.ExtrathoracicArteries.volume + system_V_Control.systemicCirculation.PeripheralVessels.volume + system_V_Control.systemicCirculation.ExtrathoracicVeins.volume + system_V_Control.systemicCirculation.IntraThoracicVeins.volume;
          connect(ramp.y, system_V_Control.desiredVolume) annotation(Line(points = {{-15, 38}, {-4, 38}, {-4, 37.2}, {8, 37.2}}, color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end Meurs_Bleeding;

        model Meurs_V_Control
          extends Cardiovascular.ObsoleteInterfaces.System_V_Control(
            redeclare replaceable Model.Meurs.Parts2.PulmonaryCirculation
              pulmonaryCirculation,
            redeclare replaceable Model.Meurs.Parts2.Heart heart,
            redeclare replaceable Model.Meurs.Parts2.SystemicCirculation
              systemicCirculation);
          //  extends Cardiovascular.Model.Meurs.HemodynamicsMeurs;
        equation
          volume = pulmonaryCirculation.PulmonaryArteries.volume + pulmonaryCirculation.PulmonaryVeins.volume + heart.leftHeart.atrium.volume + heart.leftHeart.ventricle.volume + heart.rightHeart.atrium.volume + heart.rightHeart.ventricle.volume + systemicCirculation.IntraThoracicArteries.volume + systemicCirculation.ExtrathoracicArteries.volume + systemicCirculation.PeripheralVessels.volume + systemicCirculation.ExtrathoracicVeins.volume + systemicCirculation.IntraThoracicVeins.volume;
        end Meurs_V_Control;

        model Meurs_ER_Control
          //  extends Cardiovascular.Model.Meurs.HemodynamicsMeurs;
          extends Cardiovascular.ObsoleteInterfaces.System_ER_Control(
                                                              redeclare
              Adapter.MeursHeart_PV                                                           heart, redeclare
              Adapter.MeursSystemic_PV                                                                                                  systemicCirculation,
            redeclare Model.Meurs.Parts2.PulmonaryCirculation
              pulmonaryCirculation);
        end Meurs_ER_Control;

        model Meurs_VER_Control
          extends Cardiovascular.ObsoleteInterfaces.System_VER_Control(
            redeclare Model.Meurs.Parts2.PulmonaryCirculation
              pulmonaryCirculation,                                                                                                   redeclare
              Adapter.MeursHeart_PV                                                                                                     heart, redeclare
              Adapter.MeursSystemic_PV                                                                                                     systemicCirculation);
          extends Cardiovascular.Test.Control1.MeursControl.Meurs_V_Control;
          /*    extends Cardiovascular.Control.MeursControl.MeursSystem_V_Control(
                                              redeclare MeursHeart_PV heart, redeclare MeursSystemic_PV
                                              systemicCirculation);*/
        end Meurs_VER_Control;

        model Meurs_VER_Model
          extends CVS_VolumeControl(baroreceptor(PAOmedia = 12974.934743228, HR0Param = 1.2, EV0right = 65327969.83335, EV0left = 533289549.66, EV0venacava = 4.120838297696e-07, RS0 = 106657909.932, activationDelay(displayUnit = "s") = 30), redeclare
              Meurs_VER_Control                                                                                                     system_V, plasma(lymphatic(SolutionFlow = 1.8666666666667e-08)));
          parameter Real MaxPo2 = 6000;
        equation
          redBloodCells.kidney_po2 = MaxPo2 * (atan(((-system_V.systemicCirculation.SmallVenuleConductance.q_out.q) - 0.00008333) / 0.00003333) + Modelica.Constants.pi / 2) / Modelica.Constants.pi;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {180, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {180, 100}}), graphics={  Text(extent=  {{-44, -68}, {-2, -84}}, lineColor=  {0, 0, 255}, textString=  "~ atan(flowrate)")}));
        end Meurs_VER_Model;

        model Meurs_VER_Bleeding
          extends Meurs_VER_Model(system_V(systemicCirculation(IntraThoracicVeins(volume_start = 0.00148))), baroreceptor(activationDelay = 2), plasma(hemorrhage(SolutionFlow = 3.3333333333333e-06)));
        end Meurs_VER_Bleeding;

        package Adapter
          model MeursHeart_PV
            extends Model.Meurs.Parts2.Heart(
                                            redeclare
                Types.Constants.FrequencyControl                                       HeartRate, redeclare
                MeursRightHeart_PV                                                                                             rightHeart, redeclare
                MeursLeftHeart_PV                                                                                                     leftHeart);
            extends Cardiovascular.ObsoleteInterfaces.Heart_EHR_Control;
          equation
            connect(HRin, HeartRate.c) annotation(Line(points = {{-112, 62}, {-74, 62}, {-74, 36}, {-61, 36}}, color = {0, 0, 127}, smooth = Smooth.None));
            connect(aortaFlowMeasurement.Pmean, Pmean) annotation(Line(points = {{35.8, 1.8}, {35.8, -42}, {56, -42}}, color = {0, 0, 127}, smooth = Smooth.None));
            connect(ERMaxIn, rightHeart.cmax) annotation(Line(points = {{-40, 80}, {-40, 52}, {-18.6, 52}, {-18.6, 28.4}}, color = {0, 0, 127}, smooth = Smooth.None));
            connect(leftHeart.cmax, ELMaxIn) annotation(Line(points = {{22.66, 24}, {22.66, 44}, {40, 44}, {40, 80}}, color = {0, 0, 127}, smooth = Smooth.None));
            annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -60}, {100, 80}}), graphics));
          end MeursHeart_PV;

          partial model MeursSideOfHeart_PV
            extends Model.Meurs.Parts2.SideOfHeart(redeclare
                Model.Meurs.Parts2.VentricularElastance_new ventricularElastance);
            Physiolibrary.Types.RealIO.HydraulicComplianceInput cmax annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 0, origin = {-32, 82}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {58, 120})));
          equation
            connect(cmax, ventricularElastance.cmax) annotation(Line(points = {{-32, 82}, {-3.8, 82}, {-3.8, 39}}, color = {0, 0, 127}, smooth = Smooth.None));
            annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
          end MeursSideOfHeart_PV;

          model MeursLeftHeart_PV
            extends Physiolibrary.Icons.LeftHeart;
            extends
              Cardiovascular.Test.Control1.MeursControl.Adapter.MeursSideOfHeart_PV(
              VxAU(k=3e-005),
              VxVU(k=6e-005),
              RxAOutflow(k=399967.162245),
              RxVOutflow(k=1066579.09932),
              ventricularElastance(EMIN=11999014.86735, EMAX=533289549.66),
              atrialElastance(EMIN=15998686.4898, EMAX=37330268.4762),
              atrium(volume_start=9.31e-005),
              ventricle(volume_start=0.000144),
              atrioVentricleValve(Pknee=0),
              ventricleArteryValve(Pknee=0));
            annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
          end MeursLeftHeart_PV;

          model MeursRightHeart_PV
            extends Physiolibrary.Icons.RightHeart;
            extends
              Cardiovascular.Test.Control1.MeursControl.Adapter.MeursSideOfHeart_PV(
              atrialElastance(EMIN=6666119.37075, EMAX=19998358.11225),
              ventricularElastance(EMIN=7599376.082655, EMAX=65327969.83335),
              VxAU(k=3e-005),
              RxAOutflow(k=399967.162245),
              VxVU(k=4e-005),
              RxVOutflow(k=399967.162245),
              atrium(volume_start=0.000135),
              ventricle(volume_start=0.000131),
              atrioVentricleValve(Pknee=0),
              ventricleArteryValve(Pknee=0));
            annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points=  {{32, 60}, {18, 64}, {6, 64}, {6, 76}, {18, 76}, {30, 72}, {44, 64}, {36, 58}, {32, 60}}, smooth=  Smooth.None,
                      fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {58, 117, 175}, pattern=  LinePattern.None, lineColor=  {0, 0, 0})}));
          end MeursRightHeart_PV;

          model MeursSystemic_PV
            extends Cardiovascular.Model.Meurs.Parts2.SystemicCirculation(
                                                                         redeclare
                Types.Constants.HydraulicComplianceControl                                                                    EITHV, redeclare
                Types.Constants.HydraulicConductanceControl                                                                                                     RSP);
            extends ObsoleteInterfaces.SystemicCirculation_ER_Control;
          equation
            connect(ECVin, EITHV.c) annotation(Line(points = {{-112, 46}, {-74, 46}, {-74, 23}, {-66, 23}}, color = {0, 0, 127}, smooth = Smooth.None));
            connect(RPSin, RSP.c) annotation(Line(points = {{-38, 50}, {-8, 50}, {-8, 48}, {19.5, 48}, {19.5, -9}}, color = {0, 0, 127}, smooth = Smooth.None));
            annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
          end MeursSystemic_PV;
        end Adapter;

        package Test
          model MeursSystem_PV
            extends ObsoleteInterfaces.System_ER_Control(
                                                 redeclare
                Adapter.MeursHeart_PV                                            heart, redeclare
                Adapter.MeursSystemic_PV                                                                                   systemicCirculation,
              redeclare Model.Meurs.Parts2.PulmonaryCirculation
                pulmonaryCirculation);
            annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-40, -40}, {20, 40}}), graphics));
          end MeursSystem_PV;
        end Test;

        model Meurs_V_Bleeding
          Meurs_V_Control meurs_V_Control annotation(Placement(transformation(extent = {{0, -46}, {52, 28}})));
          Modelica.Blocks.Sources.Ramp ramp(startTime = 10, duration = 240, offset = 0.005, height = -0.002) annotation(Placement(transformation(extent = {{-52, -14}, {-32, 6}})));
        equation
          connect(ramp.y, meurs_V_Control.desiredVolume) annotation(Line(points={{-31,-4},
                  {-12,-4},{-12,-1.6},{8.66667,-1.6}},                                                                                  color = {0, 0, 127}, smooth = Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end Meurs_V_Bleeding;

        model Meurs_VER_Bleeding2
          extends Meurs_VER_Model(plasma(hemorrhage(SolutionFlow = 3.3333333333333e-06)));
        end Meurs_VER_Bleeding2;
      end MeursControl;

      model RedBloodCells_Delay
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {10, -88}), iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 180, origin = {80, 78})));
        Physiolibrary.Types.RealIO.VolumeInput bloodVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 0, origin = {-81, -85}), iconTransformation(extent = {{100, 20}, {60, 60}})));
        Hydraulic.Components.VolumeContainer RBCVolume annotation(Placement(transformation(extent = {{-12, -68}, {8, -48}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump transfusion(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, 22}, {-38, 42}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump hemorrhage(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{36, 12}, {56, 32}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump RBCProduction(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-58, -38}, {-38, -18}})));
        Hydraulic.Components.Degradation RBCDegradation(t12(displayUnit = "d") = 10368000) annotation(Placement(transformation(extent = {{34, -38}, {54, -18}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst RBCBaseSecretionRate(k = 2.3148333333333e-10) annotation(Placement(transformation(extent = {{-92, -2}, {-70, 14}})));
        Physiolibrary.Types.Constants.FractionConst initialHematocrit(k = 0.4) annotation(Placement(transformation(extent = {{-88, -66}, {-70, -48}})));
        Modelica.Blocks.Math.Product RBCInitialVolume annotation(Placement(transformation(extent = {{-52, -88}, {-32, -68}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst RBCTransfusionRate(k = 0) annotation(Placement(transformation(extent = {{-80, 44}, {-58, 62}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst RBCHemorrhageRate(k = 0) annotation(Placement(transformation(extent = {{10, 44}, {32, 62}})));
        Model.Control.BloodVolume.Erythropoetin erythropoetin annotation (
            Placement(transformation(
              extent={{-11,-10},{11,10}},
              rotation=0,
              origin={-79,-18})));
        Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-112, -54}, {-84, -26}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {80, -40})));
        Physiolibrary.Types.RealIO.VolumeInput ecfVolume annotation(Placement(transformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-65, -35}), iconTransformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-80, 80})));
        Physiolibrary.Blocks.Factors.Spline spline(data = {{0.0, 0.0, 0}, {1300, 1.0, 1.0}, {4000, 4.0, 0}}) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-46, 6})));
        Modelica.Blocks.Nonlinear.FixedDelay fixedDelay(delayTime(displayUnit = "d") = 259200) annotation(Placement(transformation(extent = {{-32, 0}, {-20, 12}})));
        Physiolibrary.Blocks.Math.Log10AsEffect logEffect annotation(Placement(transformation(extent = {{-62, -18}, {-50, -6}})));
      initial algorithm
      equation
        connect(RBCProduction.q_out, RBCVolume.q_in) annotation(Line(points = {{-38, -28}, {-2, -28}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RBCDegradation.q_in, RBCVolume.q_in) annotation(Line(points = {{34, -28}, {-2, -28}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(hemorrhage.q_in, transfusion.q_out) annotation(Line(points = {{36, 22}, {-2, 22}, {-2, 32}, {-38, 32}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(transfusion.q_out, RBCVolume.q_in) annotation(Line(points = {{-38, 32}, {-2, 32}, {-2, -58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RBCVolume.volume, volume) annotation(Line(points = {{-2, -68}, {-2, -88}, {10, -88}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(bloodVolume, RBCInitialVolume.u2) annotation(Line(points = {{-81, -85}, {-69, -85}, {-69, -84}, {-54, -84}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(initialHematocrit.y, RBCInitialVolume.u1) annotation(Line(points = {{-67.75, -57}, {-64, -57}, {-64, -72}, {-54, -72}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RBCTransfusionRate.y, transfusion.solutionFlow) annotation(Line(points={{-55.25,
                53},{-48,53},{-48,39}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
        connect(RBCHemorrhageRate.y, hemorrhage.solutionFlow) annotation(Line(points={{34.75,
                53},{46,53},{46,29}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(RBCInitialVolume.y, RBCVolume.volume1) annotation(Line(points = {{-31, -78}, {-20, -78}, {-20, -50}, {-10, -50}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(erythropoetin.kidney_po2, kidney_po2) annotation(Line(points={{
                -86.6154,-26},{-86.6154,-33},{-98,-33},{-98,-40}},                                                                         color = {0, 0, 127}, smooth = Smooth.None));
        connect(ecfVolume, erythropoetin.ecf_volume) annotation(Line(points={{-65,-35},
                {-81.5385,-35},{-81.5385,-26}},                                                                               color = {0, 0, 127}, smooth = Smooth.None));
        connect(RBCVolume.volume, RBCDegradation.V0) annotation(Line(points = {{-2, -68}, {66, -68}, {66, -14}, {44, -14}, {44, -21}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(RBCBaseSecretionRate.y, spline.yBase) annotation(Line(points = {{-67.25, 6}, {-48, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(spline.y, fixedDelay.u) annotation(Line(points = {{-42, 6}, {-33.2, 6}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(fixedDelay.y, RBCProduction.solutionFlow) annotation(Line(points={{-19.4,6},
                {-6,6},{-6,-16},{-48,-16},{-48,-21}},                                                                                        color = {0, 0, 127}, smooth = Smooth.None));
        connect(erythropoetin.concentration, logEffect.u) annotation(Line(points = {{-71.3, -17.7}, {-68, -17.7}, {-68, -12}, {-63.2, -12}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(logEffect.y, spline.u) annotation(Line(points = {{-49.4, -12}, {-46, -12}, {-46, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-78, 102}, {80, -56}}, fileName=  "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"), Text(extent=  {{-98, -64}, {98, -98}}, lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-120, -100}, {100, 100}}), graphics));
      end RedBloodCells_Delay;
    end Control1;

    package Control2
      model MeursVolumeControl
        extends Cardiovascular.System(
          redeclare Model.Meurs.Parts2.PulmonaryCirculation pulmonaryCirculation,
          redeclare Model.Meurs.Parts2.Heart heart,
          redeclare Model.Meurs.Parts2.SystemicCirculation systemicCirculation);
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-40, 20}, {-20, 40}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30})));
        Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-60, -6}, {-20, 34}}), iconTransformation(extent = {{-40, 6}, {-20, 26}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump transfusion(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-40, -30}, {-32, -22}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump hemorrhage(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-32, -22}, {-40, -14}})));
        parameter Physiolibrary.Types.Time flowtime = 1;
      equation
        //count of volume from all parts
        volume = pulmonaryCirculation.PulmonaryArteries.volume + pulmonaryCirculation.PulmonaryVeins.volume + heart.leftHeart.atrium.volume + heart.leftHeart.ventricle.volume + heart.rightHeart.atrium.volume + heart.rightHeart.ventricle.volume + systemicCirculation.IntraThoracicArteries.volume + systemicCirculation.ExtrathoracicArteries.volume + systemicCirculation.PeripheralVessels.volume + systemicCirculation.ExtrathoracicVeins.volume + systemicCirculation.IntraThoracicVeins.volume;
        if desiredVolume > volume then
          transfusion.solutionFlow = (desiredVolume - volume) / flowtime;
          hemorrhage.solutionFlow = 0;
        else
          if systemicCirculation.IntraThoracicVeins.volume > Modelica.Constants.eps then
            hemorrhage.solutionFlow = (volume - desiredVolume) / flowtime;
          else
            hemorrhage.solutionFlow = 0
              "cannot bleed more than it is in the veins";
          end if;
          transfusion.solutionFlow = 0;
        end if;
        connect(transfusion.q_out, systemicCirculation.q_out) annotation(Line(points = {{-32, -26}, {-10, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(hemorrhage.q_in, heart.rightHeartInflow) annotation(Line(points={{-32,-18},
                {-14,-18},{-14,-3.42857},{-9.84,-3.42857}},                                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics={  Text(extent=  {{-42, 0}, {-16, -20}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "if (desiredVolume>volume) 
   then tranfusion
   else  hemorrhage
")}),   Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}})));
      end MeursVolumeControl;

      model BurkhoffVolumeControl
        extends Cardiovascular.System(
          redeclare Model.Burkhoff.Parts2.PulmonaryCirculation
            pulmonaryCirculation,
          redeclare Model.Burkhoff.Parts2.Heart heart,
          redeclare Model.Burkhoff.Parts2.SystemicCirculation systemicCirculation);
        Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-40, 20}, {-20, 40}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30})));
        Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-60, -6}, {-20, 34}}), iconTransformation(extent = {{-40, 6}, {-20, 26}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump transfusion(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-40, -30}, {-32, -22}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump hemorrhage(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-32, -22}, {-40, -14}})));
        parameter Physiolibrary.Types.Time flowtime = 1;
      equation
        //count of volume from all parts
        volume = pulmonaryCirculation.arteryProximal.volume + pulmonaryCirculation.artery.volume + pulmonaryCirculation.veins.volume + systemicCirculation.AortaProximal.volume + systemicCirculation.SystemicArteries.volume + systemicCirculation.SystemicVeins.volume + heart.leftHeart.atrium.volume + heart.leftHeart.ventricle.volume + heart.rightHeart.atrium.volume + heart.rightHeart.ventricle.volume;
        if desiredVolume > volume then
          transfusion.solutionFlow = (desiredVolume - volume) / flowtime;
          hemorrhage.solutionFlow = 0;
        else
          if systemicCirculation.SystemicVeins.volume > Modelica.Constants.eps then
            hemorrhage.solutionFlow = (volume - desiredVolume) / flowtime;
          else
            hemorrhage.solutionFlow = 0
              "cannot bleed more than it is in the veins";
          end if;
          transfusion.solutionFlow = 0;
        end if;
        connect(transfusion.q_out, systemicCirculation.q_out) annotation(Line(points = {{-32, -26}, {-10, -26}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(hemorrhage.q_in, heart.rightHeartInflow) annotation(Line(points={{-32,-18},
                {-14,-18},{-14,-1.6},{-9.84,-1.6}},                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics={  Text(extent=  {{-44, 0}, {-18, -20}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "if (desiredVolume>volume) 
   then tranfusion
   else  hemorrhage
")}),   Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}})));
      end BurkhoffVolumeControl;
    end Control2;

    package Experiment
      model MeursVariableVolume
        extends Cardiovascular.Test.SystemVolumeControl(redeclare
            Cardiovascular.Test.VariableVolumeControl                                                       volumeControl(volumeControl(enabled = true)),
            redeclare Cardiovascular.Model.Meurs.Test.HemodynamicsMeursVolume
            systemVolume);
      end MeursVariableVolume;

      model BurkhoffVariableVolume
        extends Cardiovascular.Test.SystemVolumeControl(redeclare
            Cardiovascular.Test.VariableVolumeControl                                                       volumeControl(volumeControl(enabled = true)),
            redeclare Model.Burkhoff.Test.HemodynamicsBurkhoffVolumeControl systemVolume);
        annotation(experiment(StopTime = 2000, __Dymola_NumberOfIntervals = 50000), __Dymola_experimentSetupOutput);
      end BurkhoffVariableVolume;
    end Experiment;

    model Elastances1
      extends TestHeartElastance;
      extends TestHeartIntervals;
    equation
      Tsyst = Tasyst;
      annotation ();
    end Elastances1;

    partial model TestHeartElastance
      "Elastance of heart atria and ventricules by Burkhoff"
      //  extends BurkhoffModel.Parts.EtTimingBurkhoff;
      Physiolibrary.Types.RealIO.VolumeInput Vs(start=0.0001) "Stressed volume"
                                                                                annotation(Placement(visible = true, transformation(origin = {-163.397, -51.3719}, extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = 0), iconTransformation(origin = {-90, -30}, extent = {{-9.999980000000001, -10}, {10, 9.99995}}, rotation = 0)));
      parameter Real Alpha=0.024
        "coefficient of end diastolic pressure-volume curve";
      parameter Real Beta=0.34
        "coefficient of end diastolic pressure-volume curve";
      parameter Boolean useEs_extInput = false
        "=true, if external elastance/compliance value is used"
        annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Physiolibrary.Types.HydraulicElastance Ees = 33330596.85375
        "coefficient of end-systolic elastance"
            annotation (Dialog(enable=not useEs_extInput));
      Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{94.0, 16.0}, {114.0, 36.0}}, origin = {0.0, 0.0}, rotation = 0), iconTransformation(extent = {{100.0, 20.0}, {120.0, 40.0}}, origin = {2, 40}, rotation = 0), visible = true));
      Physiolibrary.Types.HydraulicElastance Et "Elastance";
      Physiolibrary.Types.Time Tsyst;
      //need to define in extended model
      parameter Physiolibrary.Types.Time Tmax= 0.125 "duration of systole ";
      parameter Physiolibrary.Types.Time Tau= 0.02
        "time constant of myocardial relaxation ";
      Real Et0 "Relative elastance value (Elastance/End-Systolic Elastance)";
    Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
       annotation (
          Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,80})));
    protected
       Physiolibrary.Types.HydraulicElastance es_int;
       Real X,Y,Z;
    equation
      if not useEs_extInput then
        es_int=Ees;
      end if;
      if Tsyst <= 3 / 2 * Tmax then
        Et0 = 0.5 * (sin(Modelica.Constants.pi / Tmax * Tsyst - Modelica.Constants.pi / 2) + 1);
      else
        Et0 = 0.5 * exp(-(Tsyst - 3 * Tmax / 2) / Tau);
      end if;
      //1e+6 and 133.322368 are recalculation in SI units - as the original equation comes in torr and ml.
      //  Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 1e+6) * 133.322368 * 1e+6 + Et0 * Ees;
      X = exp(Alpha * Vs * 1e+6) - 1;
      Y = exp(Alpha * time) - 1;
      Z = exp(Alpha * time);
      Et = (1 - Et0) * Beta * (X) / Vs * 133.322368 + Et0 * es_int;
      Ct = 1 / Et;
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-52, 94}, {94, -76}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid), Line(points=  {{-42, 90}, {-42, -60}, {82, -60}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -58}, {26, -56}, {50, -54}, {66, -52}, {72, -50}, {78, -48}, {82, -46}, {86, -44}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -60}, {4, 88}}, color=  {0, 0, 0}, smooth=  Smooth.None), Line(points=  {{-38, -60}, {84, 56}}, color=  {255, 0, 0}, smooth=  Smooth.None), Polygon(points=  {{72, 48}, {68, 56}, {76, 52}, {72, 48}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{0, -4}, {-4, 4}, {4, 0}, {0, -4}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid, origin=  {80, 45}, rotation=  180), Text(extent=  {{-92, -26}, {-38, -42}}, lineColor=  {0, 0, 255}, fillColor=  {255, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "Vs"), Text(extent=  {{50, 90}, {104, 52}}, lineColor=  {0, 0, 255}, fillColor=  {255, 0, 0},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct"), Text(extent=  {{-100, -108}, {100, -124}}, lineColor=  {0, 0, 255}, fillColor=  {170, 213, 255},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
    end TestHeartElastance;

    model TestHeartIntervals
      discrete Physiolibrary.Types.Time HP(start = 0)
        "heart period - duration of cardiac cycle";
      Boolean b(start = false);
      Physiolibrary.Types.RealIO.FrequencyInput HR(start=1) annotation(Placement(transformation(extent = {{-134.0, 8.0}, {-94.0, 48.0}}, origin = {1.3363, -48.0}, rotation = 0), iconTransformation(extent = {{-73.7009, 4.4}, {-51.7009, 26.4}}, origin = {-26.2991, 67.6}, rotation = 0), visible = true));
      Physiolibrary.Types.Time Tasyst
        "time elapsed from the beginning of atrial systole";
      Physiolibrary.Types.Time Tvsyst
        "time elapsed from the beginning of ventricular systole";
      parameter Physiolibrary.Types.Time AVDelay = 0.160 "AV interval";
      Physiolibrary.Types.Time T0 "start time of cardiac cycle";
      Physiolibrary.Types.Time EDTV "Ventricular end Diastolic Time";
    equation
      b = time - pre(T0) >= pre(HP);
      when {initial(), b} then
        T0 = time;
        HP = 1 / HR;
        EDTV = T0 + AVDelay;
      end when;
      Tasyst = time - T0;
      if time - T0 < AVDelay then
        Tvsyst = 0;
      else
        Tvsyst = time - (T0 + AVDelay);
      end if;
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(visible=  true, origin=  {-18.5625, 68}, lineColor=  {0, 0, 255}, extent=  {{-73.4375, 6.00004}, {-23.4375, 24}}, textString=  "HR", fontName=  "Arial")}));
    end TestHeartIntervals;

    model TestElastances2
      Elastances1 elastances1_1(
        Ees=33330596.85375,
        Tmax(displayUnit="ms") = 0.125,
        Tau(displayUnit="ms") = 0.02,
        AVDelay(displayUnit="ms"))
        annotation (Placement(transformation(extent={{-76,-30},{-56,-10}})));
    end TestElastances2;
  end Test;

  package ObsoleteInterfaces
      extends Modelica.Icons.InterfacesPackage;
    partial model SystemicCirculation_ER_Control
      "interface to control elasticity and resistance"
      extends Interfaces.SystemicCirculation;
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ECVin annotation(Placement(transformation(extent = {{-132, 26}, {-92, 66}}), iconTransformation(extent = {{-12, -12}, {12, 12}}, rotation = 270, origin = {-54, 60})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput RPSin annotation(Placement(transformation(extent = {{-58, 30}, {-18, 70}}), iconTransformation(extent = {{-11, -11}, {11, 11}}, rotation = 270, origin = {1, 63})));
      annotation(Documentation(info = "<html>
<p>Interface to control elastance(compliance) of vena cava and resistance(conductance) of peripheral vessels.</p>
</html>"));
    end SystemicCirculation_ER_Control;

    model System_ER_Control
      "interface to control elasticity,resistance and volume"
      extends System(redeclare replaceable Heart_EHR_Control heart, redeclare replaceable
          ObsoleteInterfaces.SystemicCirculation_ER_Control
          systemicCirculation);
      Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{12, -6}, {22, 4}}), iconTransformation(extent = {{20, -44}, {40, -24}})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput EVC annotation(Placement(transformation(extent = {{-10, -16}, {-4, -10}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 5})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMAX annotation(Placement(transformation(extent = {{-10, 10}, {-4, 16}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 19})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMAX annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 180, origin = {7, 15}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, 33})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-3, -3}, {3, 3}}, rotation = 180, origin = {17, 11}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, -9})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput RSP annotation(Placement(transformation(extent = {{-4, -16}, {4, -8}}), iconTransformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {27, -23})));
    equation
      connect(heart.ERMaxIn, ERMAX) annotation(Line(points={{-4.88,5.12},{-4.88,
              9.06},{-7,9.06},{-7,13}},                                                                            color = {0, 0, 127}, smooth = Smooth.None));
      connect(ELMAX, heart.ELMaxIn) annotation(Line(points={{7,15},{-1.52,15},{
              -1.52,5.92}},                                                                         color = {0, 0, 127}, smooth = Smooth.None));
      connect(systemicCirculation.ECVin, EVC) annotation(Line(points = {{-5.4, -20}, {-5.4, -16.5}, {-7, -16.5}, {-7, -13}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.HRin, HR) annotation(Line(points={{1.44,5.2},{1.44,11},{17,
              11}},                                                                         color = {0, 0, 127}, smooth = Smooth.None));
      connect(heart.Pmean, Pmean) annotation(Line(points={{6.8,1.12},{9.35,1.12},
              {9.35,-1},{17,-1}},                                                                             color = {0, 0, 127}, smooth = Smooth.None));
      connect(systemicCirculation.RPSin, RSP) annotation(Line(points = {{0.1, -19.7}, {0.1, -15.85}, {0, -15.85}, {0, -12}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Placement(transformation(extent = {{-38, -36}, {-18, -16}})), Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end System_ER_Control;

    model Heart_EHR_Control
      extends Interfaces.Heart;
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ERMaxIn annotation(Placement(transformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {-40, 80}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {-36, 64})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput ELMaxIn annotation(Placement(transformation(extent = {{20, -20}, {-20, 20}}, rotation = 90, origin = {40, 80}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 270, origin = {6, 74})));
      Physiolibrary.Types.RealIO.FrequencyInput HRin annotation(Placement(transformation(extent = {{-132, 42}, {-92, 82}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 270, origin = {43, 65})));
      Physiolibrary.Types.RealIO.PressureOutput Pmean annotation(Placement(transformation(extent = {{46, -52}, {66, -32}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 14})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{50, 0}, {122, -16}}, lineColor=  {0, 0, 255}, textString=  "Pmean")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end Heart_EHR_Control;

    model System_V_Control
      "interface to control elasticity,resistance and volume"
      extends System;
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-30, 30})));
      Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-12, -12}, {12, 12}}, rotation = 0, origin = {-32, 6}), iconTransformation(extent = {{-40, -2}, {-20, 18}})));
      Test.Control1.VolumeControl.VolumeRefill volumeRefill
        annotation (Placement(transformation(extent={{-40,-24},{-20,-4}})));
    equation
      //  desiredFlowrate =  (desiredVolume - volume)/flowtime;
      /*if ( (-desiredFlowrate) > systemicCirculation.q_out.q) then
                                  catheter.q = - systemicCirculation.q_out.q;
                                else*/
      //    catheter.q = - desiredFlowrate;
      //then: only what flows from systemicCirculation can be pumped out
      //else: desired flow can be pumped in/out
      //  end if;
      //  catheter.pressure = systemicCirculation.q_out.pressure;
      connect(desiredVolume, volumeRefill.desiredVolume) annotation(Line(points = {{-32, 6}, {-32, -6}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(flowMeasure.volumeFlow, volumeRefill.maxflowrate) annotation(Line(points = {{-16.4, -6}, {-24, -6}, {-24, -17.4}, {-25.4, -17.4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeRefill.currentVolume, volume) annotation(Line(points = {{-28, -6}, {-30, -6}, {-30, 30}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(flowMeasure.q_out, volumeRefill.port_b) annotation(Line(points = {{-14, -4}, {-20.8, -4}, {-20.8, -23}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end System_V_Control;

    model System_VER_Control
      extends ObsoleteInterfaces.System_V_Control;
      extends ObsoleteInterfaces.System_ER_Control;
    end System_VER_Control;

    partial model V_Control
      "interface to control elasticity,resistance and volume"
      Physiolibrary.Types.RealIO.VolumeOutput volume annotation(Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {-34, 12}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-28, 18})));
      Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 0, origin = {-37, -1}), iconTransformation(extent = {{-40, -2}, {-20, 18}})));
      Test.Control1.VolumeControl.VolumeRefill volumeRefill
        annotation (Placement(transformation(extent={{-40,-24},{-20,-4}})));
    equation
      //  desiredFlowrate =  (desiredVolume - volume)/flowtime;
      /*if ( (-desiredFlowrate) > systemicCirculation.q_out.q) then
                                  catheter.q = - systemicCirculation.q_out.q;
                                else*/
      //    catheter.q = - desiredFlowrate;
      //then: only what flows from systemicCirculation can be pumped out
      //else: desired flow can be pumped in/out
      //  end if;
      //  catheter.pressure = systemicCirculation.q_out.pressure;
      connect(desiredVolume, volumeRefill.desiredVolume) annotation(Line(points = {{-37, -1}, {-32, -1}, {-32, -6}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(volumeRefill.currentVolume, volume) annotation(Line(points = {{-28, -6}, {-28, 12}, {-34, 12}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Diagram(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics), Icon(coordinateSystem(extent = {{-40, -40}, {20, 40}}, preserveAspectRatio = false), graphics));
    end V_Control;

    partial model HeartWith2Sides
      extends Physiolibrary.Icons.Heart;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent = {{-110, -30}, {-90, -10}}), iconTransformation(extent = {{-110, -36}, {-90, -16}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent = {{-110, 10}, {-90, 30}}), iconTransformation(extent = {{-110, 42}, {-90, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent = {{90, -30}, {110, -10}}), iconTransformation(extent = {{90, 42}, {110, 62}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent = {{90, 10}, {110, 30}}), iconTransformation(extent = {{90, -34}, {110, -14}})));
      replaceable SideOfHeart leftHeart annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-26,0})));
      replaceable SideOfHeart rightHeart annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-2,0})));
      replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-50, 34}, extent = {{-6, -5}, {6, 5}}, rotation = 0)));
      replaceable Physiolibrary.Types.Constants.PressureConst Pth(k = -533.28954966) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-46, -30})));
    equation
      connect(rightHeartInflow, sideOfHeart.inflow) annotation(Line(points = {{-100, -20}, {-64, -20}, {-64, -0.2}, {-26, -0.2}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart.outflow, rightHeartOutflow) annotation(Line(points = {{-26, 8}, {-62, 8}, {-62, 20}, {-100, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart1.outflow, leftHeartOutflow) annotation(Line(points = {{-2, 8}, {48, 8}, {48, 20}, {100, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(sideOfHeart1.inflow, leftHeartInflow) annotation(Line(points = {{-2, -0.2}, {48, -0.2}, {48, -20}, {100, -20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
      connect(HeartRate.y, sideOfHeart.HR) annotation(Line(points = {{-42.5, 34}, {-26, 34}, {-26, 11.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(HeartRate.y, sideOfHeart1.HR) annotation(Line(points = {{-42.5, 34}, {-2, 34}, {-2, 11.8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(Pth.y, sideOfHeart.PTH) annotation(Line(points = {{-38.5, -30}, {-25.8, -30}, {-25.8, -8}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(Pth.y, sideOfHeart1.PTH) annotation(Line(points = {{-38.5, -30}, {-1.8, -30}, {-1.8, -8}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-162, -44}, {156, -82}}, lineColor=  {190, 0, 0},
                lineThickness=                                                                                                    1, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end HeartWith2Sides;

    partial model SideOfHeart
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-10, -12}, {10, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{-10, 70}, {10, 90}})));
      Physiolibrary.Types.RealIO.PressureInput PTH "intrathoracic pressure" annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {100, 54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {2, -80})));
      Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-124, 32}, {-84, 72}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 118})));
      annotation(Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics={  Text(lineColor=  {0, 0, 255}, extent=  {{-26, -62}, {-8, -76}}, textString=  "PTH"), Text(extent=  {{-14, 98}, {14, 88}}, lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Ellipse(extent=  {{-20, 90}, {22, -20}}, lineColor=  {0, 0, 255})}), Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {2, 2}), graphics));
    end SideOfHeart;
  end ObsoleteInterfaces;
  annotation(Documentation(info = "<html>
<p>Cardiovascular is package extending the Physiolibrary <a href=\"http://www.physiolibrary.org\">http://www.physiolibrary.org</a> containing blocks and models which are useful to model cardiovascular system and related parts.  The blocks are in development stage and some of them may appear in Physiolibrary in future.</p>
</html>", revisions = "<html>
  <p>Licensed by Tomas Kulhanek under the Modelica License 2</p>
  <p>Copyright &copy; 2014, Tomas Kulhanek, Charles University in Prague.</p>
  <p><br/><i>This Modelica package is&nbsp;<u>free</u>&nbsp;software and the use is completely at&nbsp;<u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see&nbsp;<a href=\"modelica://Physiolibrary.UsersGuide.ModelicaLicense2\">Physiolibrary.UsersGuide.ModelicaLicense2</a>&nbsp;or visit&nbsp;<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i></p>
  </html>"), uses(Modelica(version = "3.2.1"),                                        CardiovascularSimple(version = "1"),
      Physiolibrary(version="2.3.0"),
      Physiomodel(version="1.0.0")),                                                                                        version = "2", conversion(from(version = "1", script = "ConvertFromCardiovascular_1.mos", version = "")));
end Cardiovascular;
