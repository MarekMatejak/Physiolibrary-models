within ;
package Cardiovascular
  model System

    replaceable Interfaces.Heart heart
      annotation (Placement(transformation(extent={{-10,-8},{6,8}})));
    replaceable Interfaces.Systemic systemicCirculation
      annotation (Placement(transformation(extent={{-10,-36},{10,-16}})));
    replaceable Interfaces.Pulmonary pulmonaryCirculation
      annotation (Placement(transformation(extent={{-10,12},{10,32}})));
  equation
    connect(systemicCirculation.q_out, heart.rightHeartInflow) annotation(Line(points={{-10,-26},
            {-14,-26},{-14,-1.6},{-9.84,-1.6}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(systemicCirculation.q_in, heart.leftHeartOutflow) annotation(Line(points={{10,-26},
            {12,-26},{12,-1.44},{6,-1.44}},                                                                                                   color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.leftHeartInflow, pulmonaryCirculation.q_out) annotation(Line(points={{6,1.6},
            {12,1.6},{12,21.4},{9.8,21.4}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    connect(heart.rightHeartOutflow, pulmonaryCirculation.q_in) annotation(Line(points={{-10,1.6},
            {-10,2},{-14,2},{-14,21.8},{-9.8,21.8}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
    annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-20, -40}, {20, 40}}), graphics), Icon(coordinateSystem(extent={{-20,-40},
              {20,40}},                                                                                                    preserveAspectRatio=false),   graphics={  Bitmap(extent = {{-40, 40}, {40, -40}},
              imageSource =                                                                                                    "" + "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" + "" + "" + "" + "", fileName = "modelica://Cardiovascular/Resources/Icons/cvsconcept.png"), Text(
            extent={{-40,-40},{40,-48}},
            lineColor={0,0,255},
            textString="%name")}),                                                                                                    Documentation(info="<html>
<p>Architectural model of cardiovascular subsystems.</p>
</html>"));
  end System;

  package UsersGuide "User's Guide"
    extends Modelica.Icons.Information;
  class Overview "Overview of Physiolibrary"
    extends Modelica.Icons.Information;
   annotation (Documentation(info="<html>
<p>The Cardiovascular library consists of the following main sub-libraries: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td><p align=\"center\"><h4>Library Components</h4></p></td>
<td><p align=\"center\"><h4>Description</h4></p></td>
</tr>
<tr>
<td valign=\"top\"><p>Interfaces</p></td>
<td valign=\"middle\"><p>Contains abstract representation (partial models) of pure cardiovascular system which should be implemented by the concrete instances of cardiovascular system.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>ControlInterfaces</p></td>
<td valign=\"middle\"><p>Contains controlled extension to the Interfaces. </p></td>
</tr>
<tr>
<td valign=\"top\"><p>Model</p></td>
<td valign=\"middle\"><p>Contains exemplar model implementation of cardiovascular system based on published work.</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Examples</p></td>
<td valign=\"middle\"><p>Contains examples which are already part of other packages and libraries (Physiolibrary)</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Hydraulic</p></td>
<td valign=\"middle\"><p>Contains extension components of Physiolibrary.Hydraulic domain</p></td>
</tr>
<tr>
<td valign=\"top\"><p>Osmotic</p></td>
<td valign=\"middle\"><p>Contains extension components of Physiolibrary.Osmotic domain</p></td>
</tr>
</table>
</html>"));
  end Overview;

    class ModelicaLicense2 "Modelica License 2"
      annotation (Documentation(info="<html>
<p>All files in this directory (Cardiovascular) and in all subdirectories, especially all files that build package &QUOT;Cardiovascular&QUOT; are licensed by <u><b>Tomas Kulhanek</b></u> under the <u><b>Modelica License 2 </b></u>(with exception of files &QUOT;Resources/*&QUOT;). </p>
<h4>Licensor:</h4>
<p>Tom&aacute;&scaron; Kulh&aacute;nek, Mol&aacute;kova 596, 18600 Praha 8 Karl&iacute;n</p>
<p>Charles University in Prague, Czech Republic</p>
<p><br>email: tomas.kulhanek@matfyz.cz</p>
<h4>Copyright notices of the files:</h4>
<p>Copyright &copy; 2008-2015, Tomas Kulhanek, Charles University in Prague, First Faculty of Medicine, Institute of Pathological Physiology</p>
<p><br>This package with all of its subpackages is released under the &ldquo;Modelica License 2&rdquo; (if not explicitly noted otherwise). </p>
<p><br><a href=\"#The_Modelica_License_2-outline\">The Modelica License 2</a></p>
<p><br><a href=\"#How_to_Apply_the_Modelica_License_2-outline\">How to Apply the Modelica License 2</a></p>
<p><br><a href=\"#Frequently_Asked_Questions-outline\">Frequently Asked Questions</a></p>
<p><br><b><font style=\"color: #008000; \">The Modelica License 2</font></b> </p>
<p><b><font style=\"font-size: 10pt; \">Preamble.</b> The goal of this license is that Modelica related model libraries, software, images, documents, data files etc. can be used freely in the original or a modified form, in open source and in commercial environments (as long as the license conditions below are fulfilled, in particular sections 2c) and 2d). The Original Work is provided free of charge and the use is completely at your own risk. Developers of free Modelica packages are encouraged to utilize this license for their work. </p>
<p>The Modelica License applies to any Original Work that contains the following licensing notice adjacent to the copyright notice(s) for this Original Work: </p>
<p><b>Licensed by Tomas Kulhanek under the Modelica License 2</b> </p>
<h4>1. Definitions.</h4>
<p>&ldquo;License&rdquo; is this Modelica License. </p>
<p>&ldquo;Original Work&rdquo; is any work of authorship, including software, images, documents, data files, that contains the above licensing notice or that is packed together with a licensing notice referencing it. </p>
<p>&ldquo;Licensor&rdquo; is the provider of the Original Work who has placed this licensing notice adjacent to the copyright notice(s) for the Original Work. The Original Work is either directly provided by the owner of the Original Work, or by a licensee of the owner. </p>
<p>&ldquo;Derivative Work&rdquo; is any modification of the Original Work which represents, as a whole, an original work of authorship. For the matter of clarity and as examples: </p>
<p>Derivative Work shall not include work that remains separable from the Original Work, as well as merely extracting a part of the Original Work without modifying it. </p>
<p>Derivative Work shall not include (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. </p>
<p>Derivative Work shall include classes that are copied from the Original Work where declarations, equations or the documentation are modified. </p>
<p>Derivative Work shall include executables to simulate the models that are generated by a Modelica translator based on the Original Work (of a Modelica package). </p>
<p>&ldquo;Modified Work&rdquo; is any modification of the Original Work with the following exceptions: (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. </p>
<p>&QUOT;Source Code&QUOT; means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. </p>
<p>&ldquo;You&rdquo; means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. </p>
<p>&ldquo;Modelica package&rdquo; means any Modelica library that is defined with the &ldquo;<b>package</b>&nbsp;&LT;Name&GT;&nbsp;...&nbsp;end&nbsp;&LT;Name&GT;;&rdquo; Modelica language element. </p>
<p><b>2. Grant of Copyright License.</b> Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following: </p>
<p>To reproduce the Original Work in copies, either alone or as part of a collection. </p>
<p>To create Derivative Works according to Section 1d) of this License. </p>
<p>To distribute or communicate to the public copies of the <u>Original Work</u> or a <u>Derivative Work</u> under <u>this License</u>. No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged under this License. Furthermore, a verbatim copy of this License must be included in any copy of the Original Work or a Derivative Work under this License.</p>
<p>For the matter of clarity, it is permitted A) to distribute or communicate such copies as part of a (possible commercial) collection where other parts are provided under different licenses and a license fee is charged for the other parts only and B) to charge for mere printing and shipping costs. </p>
<p>To distribute or communicate to the public copies of a <u>Derivative Work</u>, alternatively to Section 2c), under <u>any other license</u> of your choice, especially also under a license for commercial/proprietary software, as long as You comply with Sections 3, 4 and 8 below. </p>
<p>For the matter of clarity, no restrictions regarding fees, either as to a copyright-license fee or as to a selling fee for the copy as such apply. </p>
<p>To perform the Original Work publicly. </p>
<p>To display the Original Work publicly. </p>
<p><b>3. Acceptance.</b> Any use of the Original Work or a Derivative Work, or any action according to either Section 2a) to 2f) above constitutes Your acceptance of this License. </p>
<p><b>4. Designation of Derivative Works and of Modified Works. </b>The identifying designation of Derivative Work and of Modified Work must be different to the corresponding identifying designation of the Original Work. This means especially that the (root-level) name of a Modelica package under this license must be changed if the package is modified (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g. a binary representation). </p>
<p><b>5. Grant of Patent License.</b> Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, under patent claims owned by the Licensor or licensed to the Licensor by the owners of the Original Work that are embodied in the Original Work as furnished by the Licensor, for the duration of the patents, to make, use, sell, offer for sale, have made, and import the Original Work and Derivative Works under the conditions as given in Section 2. For the matter of clarity, the license regarding Derivative Works covers patent claims to the extent as they are embodied in the Original Work only. </p>
<p><b>6. Provision of Source Code.</b> Licensor agrees to provide You with a copy of the Source Code of the Original Work but reserves the right to decide freely on the manner of how the Original Work is provided.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For the matter of clarity, Licensor might provide only a binary representation of the Original Work. In that case, You may (a) either reproduce the Source Code from the binary representation if this is possible (e.g., by performing a copy of an encrypted Modelica package, if encryption allows the copy operation) or (b) request the Source Code from the Licensor who will provide it to You. </p>
<p><b>7. Exclusions from License Grant.</b> Neither the names of Licensor, nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as otherwise expressly stated in this License and in particular in Sections 2 and 5, nothing in this License grants any license to Licensor&rsquo;s trademarks, copyrights, patents, trade secrets or any other intellectual property, and no patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No license is granted to the trademarks of Licensor even if such trademarks are included in the Original Work, except as expressly stated in this License. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license. </p>
<p><b>8. Attribution Rights.</b> You must retain in the Source Code of the Original Work and of any Derivative Works that You create, all author, copyright, patent, or trademark notices, as well as any descriptive text identified therein as an &QUOT;Attribution Notice&QUOT;. The same applies to the licensing notice of this License in the Original Work. For the matter of clarity, &ldquo;author notice&rdquo; means the notice that identifies the original author(s). </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work. </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In case the Original Work or Derivative Work is not provided in Source Code, the Attribution Notices shall be appropriately displayed, e.g., in the documentation of the Derivative Work. </p>
<h4>9. Disclaimer of Warranty. </h4>
<p><u>The Original Work is provided under this License on an &QUOT;as is&QUOT; basis and without warranty, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. The entire risk as to the quality of the Original Work is with You.</u> This disclaimer of warranty constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer. </p>
<p><b>10. Limitation of Liability.</b> Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor, the owner or a licensee of the Original Work be liable to anyone for any direct, indirect, general, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation. </p>
<p><b>11. Termination.</b> This License conditions your rights to undertake the activities listed in Section 2 and 5, including your right to create Derivative Works based upon the Original Work, and doing so without observing these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations. This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to observe the conditions of this license. </p>
<p><b>12. Termination for Patent Action.</b> This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor, any owners of the Original Work or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement through combinations of the Original Work under combination with other software or hardware. </p>
<p><b>13. Jurisdiction.</b> Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License. </p>
<p><b>14. Attorneys&rsquo; Fees.</b> In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys&apos; fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License. </p>
<p><b>15. Miscellaneous.</b> </p>
<p>If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. </p>
<p>No verbal ancillary agreements have been made. Changes and additions to this License must appear in writing to be valid. This also applies to changing the clause pertaining to written form. </p>
<p>You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You. </p>
<p><br><b></font><font style=\"color: #008000; \">How to Apply the Modelica License 2</font></b> </p>
<p><font style=\"font-size: 10pt; \">At the top level of your Modelica package and at every important subpackage, add the following notices in the info layer of the package: </p>
<p>Licensed by &LT;Licensor&GT; under the Modelica License 2</p>
<p>Copyright &copy; &LT;year1&GT;-&LT;year2&GT;, &LT;name of copyright holder(s)&GT;. </p>
<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i> </p>
<p>Include a copy of the Modelica License 2 under <b>&LT;library&GT;.UsersGuide.ModelicaLicense2</b> (use <a href=\"http://www.modelica.org/licenses/ModelicaLicense2.mo\">http://www.modelica.org/licenses/ModelicaLicense2.mo</a>). Furthermore, add the list of authors and contributors under <b>&LT;library&GT;.UsersGuide.Contributors</b> or <b>&LT;library&GT;.UsersGuide.Contact</b>. </p>
<p>For example, sublibrary Modelica.Blocks of the Modelica Standard Library may have the following notices: </p>
<p>Licensed by Modelica Association under the Modelica License 2</p>
<p>Copyright &copy; 1998-2008, Modelica Association. </p>
<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the disclaimer of warranty) see <a href=\"modelica://Modelica.UsersGuide.ModelicaLicense2\">Modelica.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.</i> </p>
<p>For C-source code and documents, add similar notices in the corresponding file. </p>
<p>For images, add a &ldquo;readme.txt&rdquo; file to the directories where the images are stored and include a similar notice in this file. </p>
<p>In these cases, save a copy of the Modelica License 2 in one directory of the distribution, e.g., <a href=\"http://www.modelica.org/licenses/ModelicaLicense2.html\">http://www.modelica.org/licenses/ModelicaLicense2.html</a> in directory <b>&LT;library&GT;/Resources/Documentation/ModelicaLicense2.html</b>. </p>
<p><br><b><font style=\"font-size: 6pt; color: #008000; \">Frequently Asked Questions</font></b></p>
<p><font style=\"font-size: 10pt; \">This section contains questions/answer to users and/or distributors of Modelica packages and/or documents under Modelica License 2. Note, the answers to the questions below are not a legal interpretation of the Modelica License 2. In case of a conflict, the language of the license shall prevail. </p>
<p><b></font><font style=\"color: #008000; \">Using or Distributing a Modelica <u>Package</u> under the Modelica License 2</font></b> </p>
<p><b><font style=\"font-size: 10pt; \">What are the main differences to the previous version of the Modelica License?</b></p>
<ol>
<li>Modelica License 1 is unclear whether the licensed Modelica package can be distributed under a different license. Version 2 explicitly allows that &ldquo;Derivative Work&rdquo; can be distributed under any license of Your choice, see examples in Section 1d) as to what qualifies as Derivative Work (so, version 2 is clearer). </li>
<li>If You modify a Modelica package under Modelica License 2 (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g., a binary representation), you must rename the root-level name of the package for your distribution. In version 1 you could keep the name (so, version 2 is more restrictive). The reason of this restriction is to reduce the risk that Modelica packages are available that have identical names, but different functionality. </li>
<li>Modelica License 1 states that &ldquo;It is not allowed to charge a fee for the original version or a modified version of the software, besides a reasonable fee for distribution and support&rdquo;. Version 2 has a similar intention for all Original Work under <u>Modelica License 2</u> (to remain free of charge and open source) but states this more clearly as &ldquo;No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged&rdquo;. Contrary to version 1, Modelica License 2 has no restrictions on fees for Derivative Work that is provided under a different license (so, version 2 is clearer and has fewer restrictions). </li>
<li>Modelica License 2 introduces several useful provisions for the licensee (articles 5, 6, 12), and for the licensor (articles 7, 12, 13, 14) that have no counter part in version 1. </li>
<li>Modelica License 2 can be applied to all type of work, including documents, images and data files, contrary to version 1 that was dedicated for software only (so, version 2 is more general). </li>
</ol>
<h4>Can I distribute a Modelica package (under Modelica License 2) as part of my commercial Modelica modeling and simulation environment?</h4>
<p>Yes, according to Section 2c). However, you are not allowed to charge a fee for this part of your environment. Of course, you can charge for your part of the environment. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license?</h4>
<p>No. The license of an unmodified Modelica package cannot be changed according to Sections 2c) and 2d). This means that you cannot <u>sell</u> copies of it, any distribution has to be free of charge. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license when I first encrypt the package?</h4>
<p>No. Merely encrypting a package does not qualify for Derivative Work and therefore the encrypted package has to stay under Modelica License 2. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) under a different license when I first add classes to the package?</h4>
<p>No. The package itself remains unmodified, i.e., it is Original Work, and therefore the license for this part must remain under Modelica License 2. The newly added classes can be, however, under a different license. </p>
<p><b>Can I copy a class out of a Modelica package (under Modelica License 2) and include it <u>unmodified</u> in a Modelica package under a <u>commercial/proprietary license</u>?</b></p>
<p>No, according to article 2c). However, you can include model, block, function, package, record and connector classes in your Modelica package under <u>Modelica License 2</u>. This means that your Modelica package could be under a commercial/proprietary license, but one or more classes of it are under Modelica License 2.</p>
<p>Note, a &ldquo;type&rdquo; class (e.g., type Angle = Real(unit=&rdquo;rad&rdquo;)) can be copied and included unmodified under a commercial/proprietary license (for details, see the next question). </p>
<p><b>Can I copy a type class or <u>part</u> of a model, block, function, record, connector class, out of a Modelica package (under Modelica License 2) and include it modified or unmodified in a Modelica package under a <u>commercial/proprietary</u> license</b></p>
<p>Yes, according to article 2d), since this will in the end usually qualify as Derivative Work. The reasoning is the following: A type class or part of another class (e.g., an equation, a declaration, part of a class description) cannot be utilized &ldquo;by its own&rdquo;. In order to make this &ldquo;usable&rdquo;, you have to add additional code in order that the class can be utilized. This is therefore usually Derivative Work and Derivative Work can be provided under a different license. Note, this only holds, if the additional code introduced is sufficient to qualify for Derivative Work. Merely, just copying a class and changing, say, one character in the documentation of this class would be no Derivative Work and therefore the copied code would have to stay under Modelica License 2. </p>
<p><b>Can I copy a class out of a Modelica package (under Modelica License 2) and include it in <u>modified </u>form in a <u>commercial/proprietary</u> Modelica package?</b></p>
<p>Yes. If the modification can be seen as a &ldquo;Derivative Work&rdquo;, you can place it under your commercial/proprietary license. If the modification does not qualify as &ldquo;Derivative Work&rdquo; (e.g., bug fixes, vendor specific annotations), it must remain under Modelica License 2. This means that your Modelica package could be under a commercial/proprietary license, but one or more parts of it are under Modelica License 2. </p>
<h4>Can I distribute a &ldquo;save total model&rdquo; under my commercial/proprietary license, even if classes under Modelica License 2 are included?</h4>
<p>Your classes of the &ldquo;save total model&rdquo; can be distributed under your commercial/proprietary license, but the classes under Modelica License 2 must remain under Modelica License 2. This means you can distribute a &ldquo;save total model&rdquo;, but some parts might be under Modelica License 2. </p>
<h4>Can I distribute a Modelica package (under Modelica License 2) in encrypted form?</h4>
<p>Yes. Note, if the encryption does not allow &ldquo;copying&rdquo; of classes (in to unencrypted Modelica source code), you have to send the Modelica source code of this package to your customer, if he/she wishes it, according to article&nbsp;6. </p>
<h4>Can I distribute an executable under my commercial/proprietary license, if the model from which the executable is generated uses models from a Modelica package under Modelica License 2?</h4>
<p>Yes, according to article 2d), since this is seen as Derivative Work. The reasoning is the following: An executable allows the simulation of a concrete model, whereas models from a Modelica package (without pre-processing, translation, tool run-time library) are not able to be simulated without tool support. By the processing of the tool and by its run-time libraries, significant new functionality is added (a model can be simulated whereas previously it could not be simulated) and functionality available in the package is removed (e.g., to build up a new model by dragging components of the package is no longer possible with the executable). </p>
<h4>Is my modification to a Modelica package (under Modelica License 2) a Derivative Work?</h4>
<p>It is not possible to give a general answer to it. To be regarded as &QUOT;an original work of authorship&QUOT;, a derivative work must be different enough from the original or must contain a substantial amount of new material. Making minor changes or additions of little substance to a preexisting work will not qualify the work as a new version for such purposes. </p>
<p><b></font><font style=\"color: #008000; \">Using or Distributing a Modelica <u>Document</u> under the Modelica License 2</font></b> </p>
<p><font style=\"font-size: 10pt; \">This section is devoted especially for the following applications:</p>
<p>A Modelica tool extracts information out of a Modelica package and presents the result in form of a &ldquo;manual&rdquo; for this package in, e.g., html, doc, or pdf format. </p>
<p>The Modelica language specification is a document defining the Modelica language. It will be licensed under Modelica License 2. </p>
<p>Someone writes a book about the Modelica language and/or Modelica packages and uses information which is available in the Modelica language specification and/or the corresponding Modelica package. </p>
<h4>Can I sell a manual that was basically derived by extracting information automatically from a Modelica package under Modelica License 2 (e.g., a &ldquo;reference guide&rdquo; of the Modelica Standard Library):</h4>
<p>Yes. Extracting information from a Modelica package, and providing it in a human readable, suitable format, like html, doc or pdf format, where the content is significantly modified (e.g. tables with interface information are constructed from the declarations of the public variables) qualifies as Derivative Work and there are no restrictions to charge a fee for Derivative Work under alternative 2d). </p>
<p><b>Can I copy a text passage out of a Modelica document (under Modelica License 2) and use it <u>unmodified</u> in my document (e.g. the Modelica syntax description in the Modelica Specification)?</b></p>
<p>Yes. In case you distribute your document, the copied parts are still under Modelica License 2 and you are not allowed to charge a license fee for this part. You can, of course, charge a fee for the rest of your document. </p>
<p><b>Can I copy a text passage out of a Modelica document (under Modelica License 2) and use it in <u>modified</u> form in my document?</b></p>
<p>Yes, the creation of Derivative Works is allowed. In case the content is significantly modified this qualifies as Derivative Work and there are no restrictions to charge a fee for Derivative Work under alternative 2d). </p>
<h4>Can I sell a printed version of a Modelica document (under Modelica License 2), e.g., the Modelica Language Specification?</h4>
<p>No, if you are not the copyright-holder, since article 2c) does not allow a selling fee for a (in this case physical) copy. However, mere printing and shipping costs may be recovered.</p>
</html>"));
    end ModelicaLicense2;

  package ReleaseNotes "Release notes"
    extends Modelica.Icons.ReleaseNotes;
  class Version_1_0 "Version 1.0.0 (Jul 01, 2015)"
    extends Modelica.Icons.ReleaseNotes;
  annotation (Documentation(info="<html>
<p><ul>
<li>migration to GITHub https://github.com/TomasKulhanek/Physiolibrary.models/Cardiovascular</li>
<li><font style=\"color: #333333; \">The library uses the Modelica Standard Library (MSL) version 3.2. and Physiolibrary version 3.2</font></li>
<li><font style=\"color: #333333; \">Contains nice cardiovascular icons.</font></li>
</ul></p>
</html>"));
  end Version_1_0;
   annotation (Documentation(info="<html>
<p>This section summarizes the changes that have been performed on the Cardiovascular. </p>
</html>"));
  end ReleaseNotes;

  class NewRealease "Publishing new release"
    extends Modelica.Icons.Information;
   annotation (Documentation(info="<html>
<p><br>New release must be numbered by Semantic Versioning 2.0, see <a href=\"http://semver.org/\">semver.org</a>. </p>
<p><br>If minor version, then the conversion script must be written and connected with package Physiolibrary using &QUOT;annotation(conversion(from(version=..)))&QUOT;! </p>
<p><br>To clean the code from dummy annotations try to use script <a href=\"https://github.com/dietmarw/trimtrailingwhitespaces\">ttws</a>. </p>
<p><br>Update version number to &QUOT;X.Y.Z&QUOT;: </p>
<ul>
<li>At package Physiolibrary annotation: (version=&QUOT;X.Y.Z&QUOT;) together with &QUOT;versionBuild&QUOT;, &QUOT;versionDate&QUOT; and &QUOT;dateModified&QUOT; attribute </li>
<li>At head of package Physiolibrary &QUOT;Physiological domains library (version X.Y.Z)&QUOT; </li>
<li>At file &QUOT;./Physiolibrary/libraryinfo.mos&QUOT; </li>
</ul>
<p><br>Update release notes: </p>
<ul>
<li>At UsersGuide.ReleaseNotes</li>
<li>At file &QUOT;./README.md&QUOT;, together with update of &QUOT;Current release&QUOT; section.</li>
</ul>
<p><br>Publish release in GitHub: </p>
<ul>
<li>Prepare release in &QUOT;master&QUOT; branch</li>
<li>Install, Check, Test, Test, Test (stop-time of examples).. </li>
<li>Delete branch &QUOT;release&QUOT; </li>
<li>Create new branch &QUOT;release&QUOT; from &QUOT;master&QUOT; branch </li>
<li>Rename directory &QUOT;Physiolibrary&QUOT; in release branch to directory &QUOT;Physiolibrary X.Y.Z&QUOT; </li>
<li>Commint and Push </li>
<li>Draft a new release from &QUOT;release&QUOT; branch with number &QUOT;vX.Y.Z&QUOT; and with release notes. </li>
</ul>
</html>"));
  end NewRealease;

  class Contact "Contact"
    extends Modelica.Icons.Contact;
   annotation (Documentation(info="<html>
<p>Tomas Kulhanek</p>
<p>email: tomas.kulhanek@matfyz.cz</p>
</html>"));
  end Contact;
  annotation (__Dymola_DocumentationClass=true, Documentation(info="<html>
<p>Package Cardiovascular is a modelica package for <b>Human Physiology</b> that provides constants, types, connectors, partial models and model components fitted for physiological models of cardiovascular system and some control mechanism. </p>
<p>It contains complementar models to the cardiovascular system in complex parametric model of human physiology Physiomodel.</p>
</html>"));
  end UsersGuide;

  package Interfaces
    extends Modelica.Icons.InterfacesPackage;
    partial model Heart "Abstract heart circulation submodel"

      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rightHeartInflow annotation(Placement(transformation(extent={{-110,30},
                {-90,50}}),                                                                                                    iconTransformation(extent={{-108,
                -30},{-88,-10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b rightHeartOutflow annotation(Placement(transformation(extent={{90,30},
                {110,50}}),                                                                                                    iconTransformation(extent={{-110,10},
                {-90,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a leftHeartInflow annotation(Placement(transformation(extent={{90,-30},
                {110,-10}}),                                                                                                    iconTransformation(extent={{90,10},
                {110,30}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b leftHeartOutflow annotation(Placement(transformation(extent={{-110,
                -30},{-90,-10}}),                                                                                                    iconTransformation(extent={{90,-28},
                {110,-8}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                        graphics={Bitmap(
                extent={{-86,106},{82,-104}},
              imageSource=
                  "",
              fileName=
                  "modelica://Cardiovascular/Resources/Icons/heartPict.png"),                                         Text(extent={{
                  -98,-78},{102,-112}},                                                                                                    lineColor = {190, 0, 0},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));

    end Heart;

    partial model Systemic "Abstract systemic circulation submodel"
      extends Physiolibrary.Icons.SystemicCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}),                                                                           graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}}),                                                                                                  graphics={  Text(extent = {{-158, -50}, {160, -82}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}));
    end Systemic;

    partial model Pulmonary "Abstract pulmonary circulation submodel"
      extends Physiolibrary.Icons.PulmonaryCirculation;
      //  extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation(Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-108, -12}, {-88, 8}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b q_out annotation(Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{88, -16}, {108, 4}})));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-156, -38}, {156, -64}}, lineColor = {0, 0, 255},
                lineThickness =                                                                                                   1, textString = "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
    end Pulmonary;
  end Interfaces;

  package Controlled
    extends Modelica.Icons.InterfacesPackage;
    partial model System
      "Interface for cardiovascular system controlled by short-term(baroreflex), long-term(blood volume) and pathologies(stenosis)"
      extends Cardiovascular.System(
        redeclare replaceable Pulmonary pulmonaryCirculation constrainedby
          Controlled.Pulmonary,
        redeclare replaceable Heart heart constrainedby Controlled.Heart,
        redeclare replaceable Systemic systemicCirculation constrainedby
          Controlled.Systemic);

      replaceable ShortTermControl shortTermControl
        annotation (Placement(transformation(extent={{-52,16},{-36,32}})));
      replaceable LongTermControl longTermControl
        annotation (Placement(transformation(extent={{-50,-12},{-30,8}})));
      replaceable ScenarioControl scenarioControl
        annotation (Placement(transformation(extent={{-50,-36},{-30,-16}})));
    equation
      connect(pulmonaryCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-8,25.2},{-14,25.2},{-14,26},{-18,26},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculation.busConnector, heart.busConnector) annotation (
          Line(
          points={{-7.6,-29},{-18,-29},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(shortTermControl.busConnector, heart.busConnector) annotation (Line(
          points={{-37.6,31.2},{-18,31.2},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(longTermControl.busConnector, heart.busConnector) annotation (Line(
          points={{-41.8,0.4},{-18,0.4},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(longTermControl.port_a, heart.rightHeartInflow) annotation (Line(
          points={{-30.6,-8},{-14,-8},{-14,-1.6},{-9.84,-1.6}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(scenarioControl.busConnector, heart.busConnector) annotation (Line(
          points={{-32,-17},{-18,-17},{-18,-5.6},{-8.4,-5.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-60,-40},
                {20,40}}), graphics));
    end System;

    model Pulmonary "Abstract controlled pulmonary circulation submodel"
      extends Cardiovascular.Interfaces.Pulmonary;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-100,12},{-60,52}})));
    end Pulmonary;

    partial model Heart "Abstract controlled heart circulation submodel"
      extends Cardiovascular.Interfaces.Heart;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-118,66},{-78,106}}),
                                                       iconTransformation(
              extent={{-100,-90},{-60,-50}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics));
    end Heart;

    model Systemic "Abstract controlled systemic circulation submodel"
      extends Cardiovascular.Interfaces.Systemic;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-100,14},{-60,54}}),
                                                       iconTransformation(
              extent={{-96,-50},{-56,-10}})));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics));
    end Systemic;

    partial model LongTermControl
      "Abstract submodel of long-term volume control"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{0,-8},{40,32}}), iconTransformation(
              extent={{-38,4},{2,44}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a
        annotation (Placement(transformation(extent={{84,-70},{104,-50}}),
            iconTransformation(extent={{84,-70},{104,-50}})));
      Model.Control.BloodVolume.VolumeRefill2 volumeRefill
        annotation (Placement(transformation(extent={{46,-38},{86,6}})));
    equation
      connect(volumeRefill.busConnector, busConnector) annotation (Line(
          points={{63.6,-7.64},{20,-7.64},{20,12}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(volumeRefill.port_b, port_a) annotation (Line(
          points={{84.4,-35.8},{94,-35.8},{94,-60}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics), Icon(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(extent={{-80,80},{82,
                  -80}},
              imageSource=
                  "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",
              fileName=
                  "modelica://Physiolibrary/Resources/Icons/bloodProperties.png"),
              Text(
              extent={{-100,-62},{100,-100}},
              lineColor={0,0,255},
              textString="%name")}));
    end LongTermControl;

    partial model ShortTermControl
      "Abstract submodel of short-term CVS parameters values"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-28,14},{12,54}}), iconTransformation(
              extent={{60,70},{100,110}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent=
               {{-100,-100},{100,100}}), graphics={Bitmap(extent={{-80,80},
                  {80,-80}},
              imageSource="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",
              fileName="modelica://Physiolibrary/Resources/Icons/baroreflex.png"),
              Text(
              extent={{-100,-80},{100,-118}},
              lineColor={0,0,255},
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics));

    end ShortTermControl;

    model ScenarioControl "Abstract submodel of possible scenarios"

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{60,70},{100,110}}),iconTransformation(
              extent={{60,70},{100,110}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),       graphics={
            Rectangle(
              extent={{-96,80},{98,-60}},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Text(
              extent={{-100,-60},{100,-98}},
              lineColor={0,0,255},
              textString="%name"),
            Line(
              points={{-96,96},{-96,-60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{-96,-60},{98,-60}},
              color={0,0,255},
              smooth=Smooth.None,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-42,-62},{40,-68}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="time")}),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics));
    end ScenarioControl;
  end Controlled;

  package Model
    extends Modelica.Icons.ExamplesPackage;
    package Meurs
        extends Modelica.Icons.ExamplesPackage;
      model HemodynamicsMeurs_shallow

        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryArteries(useV0Input = false,                                   useComplianceInput = false,
          volume_start=0.000106,
          ZeroPressureVolume=5e-05,
          Compliance=3.2185142219537e-08,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-94, 84}, {-68, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryArteriesResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 6.818059724437e-08) annotation(Placement(transformation(extent = {{-56, 85}, {-22, 111}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PulmonaryVeins(useV0Input = false,                                                                                          useComplianceInput = false,
          volume_start=0.000518,
          ZeroPressureVolume=0.00035,
          Compliance=1.6486353437088e-07,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-10, 86}, {14, 110}})));
        Physiolibrary.Hydraulic.Components.Conductor PulmonaryVeinResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{26, 86}, {56, 110}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=9.31e-05,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{74, 50}, {102, 78}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel LeftVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000144,
          ZeroPressureVolume=6e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{148, 48}, {178, 78}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-07, _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false) annotation(Placement(transformation(extent = {{184, 76}, {208, 52}})));
        Parts.AtrialElastance atrialElastance(EMIN=15998686.4898,
            EMAX=37330268.4762)
          annotation (Placement(transformation(extent={{80,94},{118,126}})));
        Parts.VentricularElastance ventricularElastance(EMIN=
              11999014.86735, EMAX=533289549.66)
          annotation (Placement(transformation(extent={{164,92},{200,124}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve(_Gon(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06, useLimitationInputs = false, _Goff(displayUnit = "ml/(mmHg.s)") = 0) annotation(Placement(visible = true, transformation(origin = {127, 64}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicArteries(useV0Input = false,                                                                                          useComplianceInput = false,
          useExternalPressureInput=true,
          volume_start=0.000204,
          ZeroPressureVolume=0.00014,
          Compliance=5.2429304151611e-09,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{168, 6}, {190, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicArteries(volume_start(displayUnit = "ml") = 0.000526, useV0Input = false, useExternalPressureInput = false,                               useComplianceInput = false,
          ZeroPressureVolume=0.00037,
          Compliance=1.3493607749463e-08)                                                                                                     annotation(Placement(transformation(extent = {{58, 6}, {84, 32}})));
        Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
            volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={134,18})));
        Physiolibrary.Hydraulic.Components.Conductor ArteryResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 1.2526028316622e-07) annotation(Placement(transformation(extent = {{94, 8}, {114, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor SystemicArterioralConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 9.3757696980707e-09) annotation(Placement(transformation(extent = {{11, -9}, {-11, 9}}, rotation = 0, origin = {23, 17})));
        Physiolibrary.Hydraulic.Components.Conductor SmallVenuleConductance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-08) annotation(Placement(transformation(extent = {{14, -9}, {-14, 9}}, rotation = 0, origin = {-60, 17})));
        Physiolibrary.Hydraulic.Components.ElasticVessel PeripheralVessels(useV0Input = false, useExternalPressureInput = false, useComplianceInput = false,
          volume_start=0.000283,
          ZeroPressureVolume=0.000185,
          Compliance=2.8652352197304e-08)                                                                                                     annotation(Placement(transformation(extent={{-26,10},
                  {-6,30}})));
        Physiolibrary.Hydraulic.Components.Conductor VeinsResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.3256834918868e-08) annotation(Placement(transformation(extent = {{-120, 6}, {-148, 28}})));
        Physiolibrary.Hydraulic.Components.Conductor CentralVenousResistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 2.4999552322936e-06) annotation(Placement(transformation(extent = {{-208, 8}, {-232, 28}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel IntraThoracicVeins(useV0Input = false,                                   useComplianceInput = false,
          useExternalPressureInput=true,
          volume_start=0.00148,
          ZeroPressureVolume=0.00119,
          Compliance=4.1178380513927e-07,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-192, 4}, {-164, 32}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel ExtrathoracicVeins(useV0Input = false, useExternalPressureInput = false,                                                     useComplianceInput = false,
          volume_start=0.00153,
          ZeroPressureVolume=0.001,
          Compliance=4.4403645290063e-07)                                                                                                     annotation(Placement(transformation(extent = {{-116, 4}, {-90, 30}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel RightAtrium(useComplianceInput = true, useV0Input = false,
          volume_start=0.000135,
          ZeroPressureVolume=3e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-242, 44}, {-214, 72}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false,
          volume_start=0.000131,
          ZeroPressureVolume=4e-05,
          useExternalPressureInput=true,
          ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent = {{-168, 42}, {-138, 72}})));
        Physiolibrary.Hydraulic.Components.IdealValve ventricleArteryValve1(                                                         _Goff(displayUnit = "ml/(mmHg.s)") = 0, useLimitationInputs = false,
          _Gon(displayUnit="ml/(mmHg.s)") = 2.4999552322936e-06)                                                                                                     annotation(Placement(transformation(extent = {{-132, 70}, {-108, 46}})));
        Parts.AtrialElastance atrialElastance1(EMIN=6666119.37075,
            EMAX=19998358.11225)
          annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
        Parts.VentricularElastance ventricularElastance1(EMIN=
              7599376.082655, EMAX=65327969.83335)
          annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
        Physiolibrary.Hydraulic.Components.IdealValve atrioVentricleValve1(_Gon(displayUnit = "ml/(mmHg.s)") = 2.497705047566e-06, _Goff = 0, useLimitationInputs = false) annotation(Placement(visible = true, transformation(origin = {-189, 58}, extent = {{-13, 12}, {13, -12}}, rotation = 0)));
        replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(
              extent={{-9,-6},{9,6}},
              rotation=0,
              origin={-123,118})));
      equation
        connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation(Line(points = {{-81, 97}, {-68.5, 97}, {-68.5, 98}, {-56, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation(Line(points = {{-22, 98}, {2, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation(Line(points = {{2, 98}, {26, 98}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftAtrium.q_in, atrioVentricleValve.q_in) annotation(Line(points = {{88, 64}, {114, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, atrioVentricleValve.q_out) annotation(Line(points = {{163, 63}, {151.5, 63}, {151.5, 64}, {140, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.q_in, ventricleArteryValve.q_in) annotation(Line(points = {{163, 63}, {173.5, 63}, {173.5, 64}, {184, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LeftVentricle.compliance, ventricularElastance.Ct) annotation(Line(points={{163,75},
                {163,82},{212,82},{212,111.68},{203.42,111.68}},                                                                                                color = {0, 0, 127}, smooth = Smooth.None));
        connect(PulmonaryVeinResistance.q_out, LeftAtrium.q_in) annotation(Line(points = {{56, 98}, {74, 98}, {74, 64}, {88, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{94, 18}, {80, 18}, {80, 19}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ArteryResistance.q_out, inertia.q_out) annotation(Line(points={{114,18},
                {124,18}},                                                                              color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(inertia.q_in, IntraThoracicArteries.q_in) annotation(Line(points={{144,18},
                {162,18},{162,17},{179,17}},                                                                                     color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicArteries.q_in, ventricleArteryValve.q_out) annotation(Line(points = {{179, 17}, {216, 17}, {216, 64}, {208, 64}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_out, PeripheralVessels.q_in) annotation(Line(points={{12,17},
                {-2,17},{-2,20},{-16,20}},                                                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PeripheralVessels.q_in, SmallVenuleConductance.q_in) annotation(Line(points={{-16,20},
                {-32,20},{-32,17},{-46,17}},                                                                                                color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(SystemicArterioralConductance.q_in, ExtrathoracicArteries.q_in) annotation(Line(points = {{34, 17}, {71, 17}, {71, 19}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation(Line(points = {{-208, 18}, {-178, 18}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation(Line(points = {{-178, 18}, {-164, 18}, {-164, 17}, {-148, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation(Line(points = {{-120, 17}, {-103, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(ExtrathoracicVeins.q_in, SmallVenuleConductance.q_out) annotation(Line(points = {{-103, 17}, {-74, 17}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.q_in, atrioVentricleValve1.q_in) annotation(Line(points = {{-228, 58}, {-202, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, atrioVentricleValve1.q_out) annotation(Line(points = {{-153, 57}, {-164.5, 57}, {-164.5, 58}, {-176, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation(Line(points = {{-153, 57}, {-142.5, 57}, {-142.5, 58}, {-132, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(CentralVenousResistance.q_out, RightAtrium.q_in) annotation(Line(points = {{-232, 18}, {-250, 18}, {-250, 58}, {-228, 58}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RightAtrium.compliance, atrialElastance1.Ct) annotation(Line(points = {{-228, 69.2}, {-228, 92}, {-202.39, 92}, {-202.39, 101.84}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricleArteryValve1.q_out, PulmonaryArteries.q_in) annotation(Line(points = {{-108, 58}, {-92, 58}, {-92, 97}, {-81, 97}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(rightVentricle.compliance, ventricularElastance1.Ct) annotation(Line(points = {{-153, 69}, {-153, 80}, {-126, 80}, {-126, 108.91}, {-147.15, 108.91}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(LeftAtrium.compliance, atrialElastance.Ct) annotation(Line(points={{88,75.2},
                {88,86},{122,86},{122,96},{121.61,96},{121.61,109.84}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(HeartRate.y, atrialElastance1.HR) annotation(Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance1.HR, HeartRate.y) annotation(Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}, smooth = Smooth.None));
        connect(atrialElastance.HR, HeartRate.y) annotation(Line(points={{99,
                122.8},{99,128.5},{-229.25,128.5}},                                                                     color = {0, 0, 127}, smooth = Smooth.None));
        connect(ventricularElastance.HR, HeartRate.y) annotation(Line(points={{182,
                120.8},{182,128.5},{-229.25,128.5}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryArteries.externalPressure)
          annotation (Line(
            points={{-111.75,118},{-70.6,118},{-70.6,107.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{-111.75,118},{11.6,118},{11.6,107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LeftAtrium.externalPressure, PulmonaryVeins.externalPressure)
          annotation (Line(
            points={{99.2,75.2},{99.2,84},{76,84},{76,120},{11.6,120},{11.6,
                107.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, rightVentricle.externalPressure)
          annotation (Line(
            points={{-111.75,118},{-104,118},{-104,76},{-141,76},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(RightAtrium.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-216.8,69.2},{-216.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicVeins.externalPressure, rightVentricle.externalPressure)
          annotation (Line(
            points={{-166.8,29.2},{-166.8,78},{-141,78},{-141,69}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicArteries.externalPressure, LeftVentricle.externalPressure)
          annotation (Line(
            points={{187.8,25.8},{187.8,84},{175,84},{175,75}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-280,-140},{280,180}},      preserveAspectRatio=false),   graphics), Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics),
          experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeurs_shallow;

      model HemodynamicsMeurs
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
            Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeurs;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PulmonaryArteries(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000106,
            ZeroPressureVolume=5e-05,
            ExternalPressure=-533.28954966,
            Elastance=31064116.267695)
            annotation (Placement(transformation(extent={{-82,-12},{-58,12}})));
          Physiolibrary.Hydraulic.Components.Resistor PulmonaryArteriesResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 14665462.61565)
            annotation (Placement(transformation(extent={{-38,-14},{-10,14}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PulmonaryVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000518,
            ZeroPressureVolume=0.00035,
            ExternalPressure=-533.28954966,
            Elastance=6066168.6273825)
            annotation (Placement(transformation(extent={{8,-12},{32,12}})));
          Physiolibrary.Hydraulic.Components.Resistor PulmonaryVeinResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{46,-12},{70,12}})));
        equation
          connect(q_in, PulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-70,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteries.q_in, PulmonaryArteriesResistance.q_in) annotation (
             Line(
              points={{-70,0},{-38,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryArteriesResistance.q_out, PulmonaryVeins.q_in) annotation (
              Line(
              points={{-10,0},{4,0},{4,2.22045e-16},{20,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeins.q_in, PulmonaryVeinResistance.q_in) annotation (Line(
              points={{20,0},{46,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PulmonaryVeinResistance.q_out, q_out) annotation (Line(
              points={{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance IntraThoracicArteries(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000204,
            ZeroPressureVolume=0.00014,
            ExternalPressure=-533.28954966,
            Elastance=190651014.00345)
            annotation (Placement(transformation(extent={{78,-6},{92,8}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit = "mmHg.s2/ml") = 93325.6711905,
              volumeFlow_start(displayUnit="ml/min") = 2.1666666666667e-05)                                                                                                  annotation(Placement(transformation(extent={{-6,-5},
                    {6,5}},                                                                                                    rotation = 180, origin={70,1})));
          Physiolibrary.Hydraulic.Components.Resistor  ArteryResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 7999343.2449)
            annotation (Placement(transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={55,1})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance ExtrathoracicArteries(
            volume_start(displayUnit="ml") = 0.000526,
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            ZeroPressureVolume=0.00037,
            Elastance=74127247.40274)
            annotation (Placement(transformation(extent={{38,-22},{54,-6}})));
          Physiolibrary.Hydraulic.Components.Resistor  SystemicArterioralResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 106657909.932)
            annotation (Placement(transformation(
                extent={{9,-8},{-9,8}},
                rotation=0,
                origin={27,-14})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance PeripheralVessels(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.000283,
            ZeroPressureVolume=0.000185,
            Elastance=34930465.50273)
            annotation (Placement(transformation(extent={{2,-36},{16,-22}})));
          Physiolibrary.Hydraulic.Components.Resistor  SmallVenuleResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 26664477.483)
            annotation (Placement(transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={-7,-29})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance ExtrathoracicVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00153,
            ZeroPressureVolume=0.001,
            Elastance=2253148.3473135)
            annotation (Placement(transformation(extent={{-32,-22},{-14,-6}})));
          Physiolibrary.Hydraulic.Components.Resistor  VeinsResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 11999014.86735)
            annotation (Placement(transformation(extent={{-32,-22},{-48,-6}})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance IntraThoracicVeins(
            useV0Input=false,
            useExternalPressureInput=false,
            useComplianceInput=false,
            volume_start=0.00148,
            ZeroPressureVolume=0.00119,
            ExternalPressure=-533.28954966,
            Elastance=2426467.450953)
            annotation (Placement(transformation(extent={{-66,-8},{-48,8}})));
          Physiolibrary.Hydraulic.Components.Resistor  CentralVenousResistance(
              useConductanceInput=false, Resistance(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{-74,-8},{-90,8}})));
        equation
          connect(VeinsResistance.q_in, ExtrathoracicVeins.q_in) annotation (Line(
              points={{-32,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{76,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ArteryResistance.q_in, inertia.q_out) annotation (Line(
              points={{62,1},{64,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, SystemicArterioralResistance.q_in)
            annotation (Line(
              points={{46,-14},{36,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_out, CentralVenousResistance.q_out) annotation (Line(
              points={{-100,0},{-90,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(CentralVenousResistance.q_in, IntraThoracicVeins.q_in) annotation (
              Line(
              points={{-74,0},{-57,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IntraThoracicVeins.q_in, VeinsResistance.q_out) annotation (Line(
              points={{-57,0},{-48,0},{-48,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, q_in) annotation (Line(
              points={{100,0},{95,0},{95,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(q_in, IntraThoracicArteries.q_in) annotation (Line(
              points={{100,0},{92,0},{92,1},{85,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_out, ExtrathoracicVeins.q_in) annotation (
              Line(
              points={{-14,-29},{-14,-14},{-23,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.q_in, ArteryResistance.q_out) annotation (Line(
              points={{46,-14},{46,1},{48,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SmallVenuleResistance.q_in, PeripheralVessels.q_in) annotation (Line(
              points={{0,-29},{9,-29}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PeripheralVessels.q_in, SystemicArterioralResistance.q_out)
            annotation (Line(
              points={{9,-29},{9,-14},{18,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Systemic;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.ElasticVessel rightAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000135,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-68,8},
                    {-40,36}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance atrioVentricleValve1(
            _Goff=0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
                visible=true, transformation(
                origin={-14,22},
                extent={{-12,12},{12,-12}},
                rotation=0)));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000131,
            ZeroPressureVolume=4e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{8,8},{
                    36,36}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance ventricleArteryValve1(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245)
            annotation (Placement(transformation(extent={{42,34},{66,10}})));
          VentricularElastance ventricularElastance1(EMIN=7599376.082655, EMAX=
                65327969.83335)
            annotation (Placement(transformation(extent={{-20,54},{10,88}})));
          AtrialElastance atrialElastance1(EMIN=6666119.37075, EMAX=
                19998358.11225)
            annotation (Placement(transformation(extent={{-94,54},{-56,86}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin={59,92},         extent={{-7,-6},
                    {7,6}},                                                                                                    rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftAtrium(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=9.31e-05,
            ZeroPressureVolume=3e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{50,-86},
                    {78,-58}})));
          AtrialElastance atrialElastance(EMIN=15998686.4898, EMAX=
                37330268.4762)
            annotation (Placement(transformation(extent={{8,-50},{46,-18}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance atrioVentricleValve(
            useLimitationInputs=false,
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
                visible=true, transformation(
                origin={24,-72},
                extent={{-12,12},{12,-12}},
                rotation=180)));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(useComplianceInput = true, useV0Input = false, useExternalPressureInput = false,
            volume_start=0.000144,
            ZeroPressureVolume=6e-05,
            ExternalPressure=-533.28954966)                                                                                                     annotation(Placement(transformation(extent={{-30,-86},
                    {-2,-58}})));
          VentricularElastance ventricularElastance(EMIN=11999014.86735, EMAX=
                533289549.66) annotation (Placement(transformation(extent={{-66,
                    -46},{-30,-14}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance ventricleArteryValve(
            _Goff(displayUnit="ml/(mmHg.s)") = 0,
            useLimitationInputs=false,
            _Ron(displayUnit="(mmHg.s)/ml") = 1066579.09932) annotation (Placement(
                transformation(
                extent={{-12,12},{12,-12}},
                rotation=180,
                origin={-58,-72})));
        equation
          connect(rightHeartInflow, rightAtrium.q_in) annotation (Line(
              points={{-100,40},{-70,40},{-70,22},{-54,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightAtrium.q_in, atrioVentricleValve1.q_in) annotation (Line(
              points={{-54,22},{-26,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve1.q_out, rightVentricle.q_in) annotation (
              Line(
              points={{-2,22},{22,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, ventricleArteryValve1.q_in) annotation (
              Line(
              points={{22,22},{42,22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve1.q_out, rightHeartOutflow) annotation (
              Line(
              points={{66,22},{82,22},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, leftAtrium.q_in) annotation (Line(
              points={{100,-20},{82,-20},{82,-72},{64,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftAtrium.q_in, atrioVentricleValve.q_in) annotation (Line(
              points={{64,-72},{36,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrioVentricleValve.q_out, leftVentricle.q_in) annotation (
              Line(
              points={{12,-72},{-16,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, ventricleArteryValve.q_in) annotation (
              Line(
              points={{-16,-72},{-46,-72}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricleArteryValve.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-70,-72},{-84,-72},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(atrialElastance1.Ct, rightAtrium.compliance) annotation (Line(
              points={{-52.39,69.84},{-52.39,48.92},{-54,48.92},{-54,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, rightVentricle.compliance)
            annotation (Line(
              points={{12.85,74.91},{22,74.91},{22,33.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, HeartRate.y) annotation (Line(
              points={{-75,82.8},{-75,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.HR, HeartRate.y) annotation (Line(
              points={{-5,84.6},{-5,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, HeartRate.y) annotation (Line(
              points={{-48,-17.2},{-48,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.HR, HeartRate.y) annotation (Line(
              points={{27,-21.2},{27,-12},{36,-12},{36,92},{50.25,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Ct, leftAtrium.compliance) annotation (Line(
              points={{49.61,-34.16},{64,-34.16},{64,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, leftVentricle.compliance)
            annotation (Line(
              points={{-26.58,-26.32},{-16,-26.32},{-16,-60.8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Meurs")}));
        end Heart;

        model AtrialElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct "compliance" annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
          Physiolibrary.Types.HydraulicElastance Et "elasticity";
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance";
        parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          if time - T0 < Tas then
            Et = EMIN + (es_int - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas);
          else
            Et = EMIN;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-100, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent={{
                      -98,82},{98,24}},                                                                                                    lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Atrial elastance"), Line(points=  {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{72, 4}, {102, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;

        model VentricularElastance
          extends HeartIntervals;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput Ct
            "ventricular elasticity"                                                       annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
          Modelica.Blocks.Interfaces.RealOutput Et0
            "normalized ventricular elasticity (0..1)"                                         annotation(Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
          Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation(Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
          Physiolibrary.Types.HydraulicElastance Et;
          parameter Physiolibrary.Types.HydraulicElastance EMIN
            "Diastolic elastance ";
          constant Real Kn = 0.57923032735652;
          //Kn is always = 0.5792303273565197
          //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
          //Equation to calculate normalized elastance ET0 was:
          //Et0=EMIN+(EMAX-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
        parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance EMAX
            "Maximum systolic elastance"         annotation (Dialog(enable=not useEs_extInput));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/EMAX)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-80,80})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=EMAX;
          end if;
          HeartInterval = time - T0;
          Et = EMIN + (es_int - EMIN) * Et0;
          if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
            Et0 = (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn;
          else
            Et0 = 0;
          end if;
          Ct = 1 / Et "reciprocal value of elastance";
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 82}, {100, -100}}, pattern=  LinePattern.None,
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 255}), Text(extent=  {{-82, 82}, {80, 24}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ventricular elastance"), Line(points=  {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color=  {0, 0, 255}, smooth=  Smooth.Bezier), Text(extent=  {{-220, -102}, {200, -120}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"), Text(extent=  {{96, -32}, {68, -8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Et0"), Text(extent=  {{42, -72}, {88, -84}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Heart interval"), Text(extent=  {{62, 30}, {96, 8}}, lineColor=  {0, 0, 255},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Ct")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time Tas, T0, Tvs;
          parameter Physiolibrary.Types.Time Tav(displayUnit = "s") = 0.01
            "atrioventricular delay";
          discrete Modelica.SIunits.Time HP(start = 0) "heart period";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent = {{-12, 68}, {28, 108}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80})));
        equation
          b = time - pre(T0) >= pre(HP) "true if new pulse occurs";
          when {initial(), b} then
            T0 = time "start time of cardiac cycle";
            HP = 1 / HR "update heart period per heart rate";
            Tas = 0.03 + 0.09 * HP "duration of atrial systole";
            Tvs = 0.16 + 0.2 * HP "duration of ventricular systole";
          end when;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent={{
                      -64,102},{-6,78}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "HR")}));
        end HeartIntervals;
      end Parts;

      model HemodynamicsMeursBVControl
        extends Cardiovascular.Controlled.System(
          redeclare replaceable ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl heart,
          redeclare replaceable ControlledParts.SystemicControl
            systemicCirculation,
          redeclare replaceable ControlledParts.Baroreflex
            shortTermControl,
          redeclare replaceable Cardiovascular.Model.Control.BloodVolumeControl
            longTermControl);
      /*    redeclare CardiovascularDevel.Model.Meurs.Variants.Parts.Stenosis
      stenosisControl(aorticstenosis(InitialResistance(displayUnit="(mmHg.s)/ml")=
             1066579.09932, FinalResistance(displayUnit="(mmHg.s)/ml") = 1066579.09932),
        AVBackFlowConductance(k=1.2501026264094e-15)),*/

        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000),
            Documentation(info="<html>
<p>Cardiovascular model implemented per description of Meurs et al.</p>
<p>[9] J. A. Goodwin, W. L. van Meurs, C. D. S a Couto, J. E. W. Beneken, S. A. Graves, A Model for Educational Simulation of Infant Cardiovascular Physiology, Anesthesia &AMP; Analgesia 99 (6) (2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</p>
<p>[10] C. D. S a Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen, A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</p>
<p>[11] W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</p>
</html>"));
      end HemodynamicsMeursBVControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;
        model PulmonaryControl
          extends Parts.Pulmonary;
          extends Controlled.Pulmonary;
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,26})));
        equation
          connect(PulmonaryArteries.volume, add.u1) annotation (Line(
              points={{-62.8,-12},{-62,-12},{-62,-26},{-6,-26},{-6,20},{-14,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PulmonaryVeins.volume, add.u2) annotation (Line(
              points={{27.2,-12},{28,-12},{28,-24},{34,-24},{34,32},{-14,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{-37,26},{-58,26},{-58,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Parts.Systemic(
            SmallVenuleResistance(useConductanceInput=true),
            IntraThoracicArteries(
              useV0Input=false,
              useExternalPressureInput=false,
              useComplianceInput=false),
            IntraThoracicVeins(useComplianceInput=true));
          extends Controlled.Systemic;
          Modelica.Blocks.Math.Sum sum1(nin=5) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=180,
                origin={-61,-39})));
          Cardiovascular.Model.Control.MeanAortaPressureMeasurement aortaPressureMeasurement
            annotation (Placement(transformation(extent={{70,10},{90,30}})));
        equation
          connect(IntraThoracicVeins.volume, sum1.u[1]) annotation (Line(
              points={{-51.6,-8},{-55,-8},{-55,-38.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.systemicBloodVolume) annotation (Line(
              points={{-66.5,-39},{-68,-39},{-68,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aortaPressureMeasurement.q_in, inertia.q_in) annotation (Line(
              points={{76,14},{76,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ExtrathoracicVeins.volume, sum1.u[2]) annotation (Line(
              points={{-17.6,-22},{-16,-22},{-16,-38.6},{-55,-38.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PeripheralVessels.volume, sum1.u[3]) annotation (Line(
              points={{13.2,-36},{14,-36},{14,-39},{-55,-39}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ExtrathoracicArteries.volume, sum1.u[4]) annotation (Line(
              points={{50.8,-22},{52,-22},{52,-39.4},{-55,-39.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(IntraThoracicArteries.volume, sum1.u[5]) annotation (Line(
              points={{89.2,-6},{88,-6},{88,-40},{-55,-40},{-55,-39.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(SmallVenuleResistance.cond, busConnector.peripheralconductance)
            annotation (Line(
              points={{-7,-24.8},{-7,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(IntraThoracicVeins.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-57,6.4},{-57,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{87,23},{96,23},{96,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl
          extends Parts.Heart(
            ventricularElastance1(useEs_extInput=true),
            ventricularElastance(useEs_extInput=true),
            redeclare Types.Constants.FrequencyControl HeartRate,
            ventricleArteryValve(useLimitationInputs=false));
          extends Controlled.Heart;
          Modelica.Blocks.Math.Sum sum1(nin=4)
            annotation (Placement(transformation(extent={{-80,-8},{-94,6}})));
        equation
          connect(rightAtrium.volume, sum1.u[1]) annotation (Line(
              points={{-45.6,8},{-64,8},{-64,-2.05},{-78.6,-2.05}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.volume, sum1.u[2]) annotation (Line(
              points={{30.4,8},{32,8},{32,-1.35},{-78.6,-1.35}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, sum1.u[3]) annotation (Line(
              points={{-7.6,-86},{-6,-86},{-6,-0.65},{-78.6,-0.65}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftAtrium.volume, sum1.u[4]) annotation (Line(
              points={{72.4,-86},{72,-86},{72,0.05},{-78.6,0.05}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
              points={{-94.7,-1},{-98,-1},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance1.Es_ext, busConnector.rvcompliance)
            annotation (Line(
              points={{-17,84.6},{-68,84.6},{-68,88},{-98,88},{-98,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance.Es_ext, busConnector.lvcompliance)
            annotation (Line(
              points={{-62.4,-17.2},{-62.4,-14},{-62,-14},{-62,-10},{-98,-10},{
                  -98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(HeartRate.c, busConnector.heartrate) annotation (Line(
              points={{62.5,92},{74,92},{74,102},{-98,102},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end HeartControl;

        model Baroreflex
          extends Model.Control.Baroreflex(baroreceptor(
              activationDelay=1,
              PAOmedia=12974.201470097,
              HR0Param=1.2,
              EV0right=65327969.83335,
              EV0left=533289549.66,
              EV0venacava=4.1215883592719e-07,
              RS0=26664477.483));
        end Baroreflex;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=2426467.450953, FinalElastance=2426467.450953),
            aorticstenosis(InitialResistance(displayUnit="(mmHg.s)/ml")=
                1066579.09932, FinalResistance(displayUnit="(mmHg.s)/ml")=
                1066579.09932),
            mitralvalvestenosis(InitialResistance=399967.162245,
                FinalResistance=399967.162245));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(ventricleArteryValve(useLimitationInputs=true));
        equation
          connect(ventricleArteryValve.Gon, busConnector.avoutflowresistance)
            annotation (Line(
              points={{-50.8,-60},{-50.8,-54},{-98,-54},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricleArteryValve.Goff, busConnector.avbackflowconductance)
            annotation (Line(
              points={{-65.2,-60},{-65.2,-54},{-98,-54},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsMeursBVControl(redeclare
            ControlledParts.AorticValveStenosisScenario scenarioControl(
              aorticstenosis(FinalResistance(displayUnit="(mmHg.s)/ml")=
                10665790.9932)), redeclare
            ControlledParts.AorticValveHeartControl heart);
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model Bleeding
        extends HemodynamicsMeursBVControl(redeclare
            Scenario.BleedingTransfusionScenario scenarioControl(
            BloodTrans=0,
            Tbd=300,
            BloodLoss=0.0005,
            Tts=1200,
            Ttd=600), longTermControl(redeclare
              Control.BloodVolume.PlasmaBleeding plasma(hemorrhage(
                  useSolutionFlowInput=true)), redeclare
              Control.BloodVolume.RBCBleeding redBloodCells));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Meurs;

    package Burkhoff
        extends Modelica.Icons.ExamplesPackage;
      model HemodynamicsBurkhoff_shallow
        //Cardiovascular.Hydraulic.Components.Resistor
        //Cardiovascular.Hydraulic.Components.IdealValveNorm
        import Physiolibrary.Hydraulic.Components.*;
        ElasticVessel Cvs(
          volume_start=0.002701,
          ZeroPressureVolume=0.00223,
          Compliance=5.2504310309196e-07)                                                                                                     annotation(Placement(transformation(extent = {{-72, 12}, {-52, 32}})));
      Resistor Ras(Resistance=
              99991790.56125)
          annotation (Placement(transformation(extent={{-28,12},{-48,32}})));
        ElasticVessel Cas(
          volume_start=0.000834,
          ZeroPressureVolume=0.0007,
          Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent = {{-24, 12}, {-4, 32}})));
        Resistor Rcs(Resistance=
              3199737.29796)
          annotation (Placement(transformation(extent={{18,12},{-2,32}})));
        ElasticVessel Caprox(
          volume_start=3.8e-05,
          ZeroPressureVolume=3e-05,
          Compliance=7.5006157584566e-10,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{20, 12}, {40, 32}})));
        Resistor Rcprox(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{62,12},{42,32}})));
        IdealValveResistance AOV(_Ron=
              266644.77483) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-4})));
        Parts.ElasticVesselWithSVandP LV(
          useComplianceInput=true,
          volume_start=0.000125,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{92,-14},{112,6}})));
        IdealValveResistance MV(_Ron=
              333305.9685375) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={122,-4})));
        Parts.ElasticVesselWithSVandP LA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=8.1e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{158,-14},{178,6}})));
        Resistor Rvp(Resistance=
              1999835.811225)
          annotation (Placement(transformation(extent={{206,-2},{186,18}})));
        Resistor Rvs(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{-84,-50},{-64,-30}})));
        Parts.ElasticVesselWithSVandP RA(
          useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=7.3e-05,
          ZeroPressureVolume=5e-06)
          annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
        IdealValveResistance TV(_Ron(
              displayUnit="(mmHg.s)/ml") = 333305.9685375) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={4,-40})));
        Parts.ElasticVesselWithSVandP RV(
          useComplianceInput=true,
          ExternalPressure=0,
          volume_start=0.000112,
          ZeroPressureVolume=5e-06,
          useExternalPressureInput=true)
          annotation (Placement(transformation(extent={{16,-50},{36,-30}})));
        IdealValveResistance PV(_Ron=
              266644.77483) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={50,-40})));
        Resistor Rcsp(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
        ElasticVessel Cap(
          volume_start=0.000802,
          ZeroPressureVolume=0.0006,
          Compliance=1.5001231516913e-07,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{144, -48}, {164, -28}})));
        Resistor Rcp(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{122,-48},{142,-28}})));
        ElasticVessel Cvp(
          volume_start=0.000154,
          ZeroPressureVolume=0.0001,
          Compliance=5.2504310309196e-08,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{184, -48}, {204, -28}})));
        ElasticVessel Capprox(
          volume_start=3e-05,
          ZeroPressureVolume=2e-05,
          Compliance=7.5006157584566e-09,
          useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{98, -48}, {118, -28}})));
        Resistor Rap(Resistance=
              2666447.7483)
          annotation (Placement(transformation(extent={{164,-48},{184,-28}})));
        Parts.AtrialElastance RAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=26664477.483)
          annotation (Placement(transformation(extent={{-56,-18},{-32,2}})));
        Parts.VentricularElastance RVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=50662507.2177)
          annotation (Placement(transformation(extent={{14,-14},{36,6}})));
        Parts.AtrialElastance LAElastance(
          Tmax(displayUnit="ms") = 0.125,
          Tau(displayUnit="ms") = 0.02,
          Beta(displayUnit="mmHg") = 39.9967162245,
          Alpha=40000,
          Ees=33330596.85375) annotation (Placement(transformation(
              extent={{-9,-8},{9,8}},
              rotation=0,
              origin={167,32})));
        Parts.VentricularElastance LVElastance(
          Tmax(displayUnit="ms") = 0.2,
          Tau(displayUnit="ms") = 0.03,
          AVDelay(displayUnit="s"),
          Beta(displayUnit="mmHg") = 45.3296117211,
          Alpha=24000,
          Ees=205316476.6191)
          annotation (Placement(transformation(extent={{88,16},{112,36}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
              1.3333333333333)                                                      annotation(Placement(transformation(extent={{-86,34},
                  {-78,42}})));
        Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=180,
              origin={-13,-55})));
        Modelica.Blocks.Math.Add3 add
                                     annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-30,-32})));
        Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=0,
              origin={139,-19})));
        Modelica.Blocks.Math.Add3 add1
                                      annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={176,14})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
          annotation (Placement(transformation(extent={{100,-22},{112,-12}})));
        Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
          annotation (Placement(transformation(
              extent={{7,-5},{-7,5}},
              rotation=0,
              origin={19,-53})));
        Modelica.Blocks.Math.Add add2 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={35,-25})));
        Modelica.Blocks.Math.Add add3 annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={109,11})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=0)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={50,-4})));
      equation
        connect(AOV.q_in, LV.q_in) annotation(Line(points={{90,-4},{102,-4}},    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LV.q_in, MV.q_out) annotation(Line(points={{102,-4},{112,-4}},                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(TV.q_out, RV.q_in) annotation(Line(points = {{14, -40}, {26, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(RV.q_in, PV.q_in) annotation(Line(points = {{26, -40}, {40, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(PV.q_out, Rcsp.q_in) annotation(Line(points = {{60, -40}, {70, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcsp.q_out, Capprox.q_in) annotation(Line(points = {{90, -40}, {98, -40}, {98, -38}, {108, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Capprox.q_in, Rcp.q_in) annotation(Line(points = {{108, -38}, {122, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rcp.q_out, Cap.q_in) annotation(Line(points = {{142, -38}, {154, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cap.q_in, Rap.q_in) annotation(Line(points = {{154, -38}, {164, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Rap.q_out, Cvp.q_in) annotation(Line(points = {{184, -38}, {194, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(heartRate.y, RAElastance.HR) annotation (Line(
            points={{-77,38},{-74,38},{-74,6},{-66,6},{-66,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.HR, RAElastance.HR) annotation (Line(
            points={{15.21,4.3},{-2,4.3},{-2,6},{-58,6},{-58,0.3},{-54.68,0.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.HR, heartRate.y) annotation (Line(
            points={{158.99,38.64},{128,38.64},{128,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.HR, heartRate.y) annotation (Line(
            points={{89.32,34.3},{62,34.3},{62,38},{-77,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.StressedVolume, RAElastance.Vs) annotation (Line(
            points={{-54.4,-29.8},{-54.4,-19.9},{-54.32,-19.9},{-54.32,-16.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.StressedVolume, LVElastance.Vs) annotation (Line(
            points={{97.6,6.2},{97.6,16},{89.68,16},{89.68,17.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LA.StressedVolume, LAElastance.Vs) annotation (Line(
            points={{163.6,6.2},{159.26,6.2},{159.26,24.96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RA.q_in, TV.q_in) annotation(Line(points = {{-50, -40}, {-6, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(LA.q_in, MV.q_in) annotation(Line(points={{168,-4},{132,-4}},                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
        connect(Cvp.q_in, Rvp.q_in) annotation (Line(
            points={{194,-38},{206,-38},{206,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvp.q_out, LA.q_in) annotation (Line(
            points={{186,8},{186,-4},{168,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(AOV.q_out, Rcprox.q_in) annotation (Line(
            points={{70,-4},{70,22},{62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
            points={{42,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_in, Caprox.q_in) annotation (Line(
            points={{18,22},{30,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rcs.q_out, Cas.q_in) annotation (Line(
            points={{-2,22},{-14,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cas.q_in, Ras.q_in) annotation (Line(
            points={{-14,22},{-28,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ras.q_out, Cvs.q_in) annotation (Line(
            points={{-48,22},{-62,22}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Cvs.q_in, Rvs.q_in) annotation (Line(
            points={{-62,22},{-84,22},{-84,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rvs.q_out, RA.q_in) annotation (Line(
            points={{-64,-40},{-50,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RAVGain.y, add.u1) annotation (Line(
            points={{-18.5,-55},{-18.5,-35.2},{-25.2,-35.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVElastance.Ct, LV.compliance) annotation (Line(
            points={{103.6,17.4},{103.6,17.21},{102,17.21},{102,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LAElastance.Ct, LA.compliance) annotation (Line(
            points={{169.7,25.12},{169.7,18},{168,18},{168,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Ct, RV.compliance) annotation (Line(
            points={{28.3,-12.6},{28.3,-25.79},{26,-25.79},{26,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Ct, RA.compliance) annotation (Line(
            points={{-40.4,-16.6},{-40.4,-26},{-50,-26},{-50,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.StressedVolume, RVElastance.Vs) annotation (Line(
            points={{21.6,-29.8},{21.6,-24.9},{15.54,-24.9},{15.54,-12.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LV.q_in, pressureMeasure.q_in) annotation (Line(
            points={{102,-4},{103.6,-4},{103.6,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.q_in, RV.q_in) annotation (Line(
            points={{21.8,-56},{24,-56},{24,-40},{26,-40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pressureMeasure1.pressure, RAVGain.u) annotation (Line(
            points={{14.8,-55},{-7,-55}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.u3, add1.u3) annotation (Line(
            points={{172.8,18.8},{172.8,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RVElastance.Pt, add2.u2) annotation (Line(
            points={{34.02,-12.6},{34.02,-18.9},{33.2,-18.9},{33.2,-21.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RV.externalPressure, add2.y) annotation (Line(
            points={{34,-32},{34,-28.3},{35,-28.3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, RA.externalPressure) annotation (Line(
            points={{-34.4,-32},{-42,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RAElastance.Pt, add.u3) annotation (Line(
            points={{-34.16,-16.6},{-34.16,-26},{-20,-26},{-20,-28.8},{-25.2,
                -28.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LV.externalPressure, add3.y) annotation (Line(
            points={{110,4},{110,7.7},{109,7.7}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LA.externalPressure, add1.y) annotation (Line(
            points={{176,4},{176,9.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pressureMeasure.pressure, LAVGain.u) annotation (Line(
            points={{109.6,-19},{120.8,-19},{120.8,-19},{133,-19}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LAVGain.y, add1.u1) annotation (Line(
            points={{144.5,-19},{184,-19},{184,18.8},{179.2,18.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Caprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,30},{38,30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add3.u2) annotation (Line(
            points={{55,-4},{66,-4},{66,14.6},{107.2,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(LVElastance.Pt, add3.u1) annotation (Line(
            points={{109.84,17.4},{109.84,16.7},{110.8,16.7},{110.8,14.6}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add1.u2, LAElastance.Pt) annotation (Line(
            points={{176,18.8},{176,25.12},{174.38,25.12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add1.u3) annotation (Line(
            points={{55,-4},{66,-4},{66,24},{172.8,24},{172.8,18.8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, Capprox.externalPressure) annotation (
            Line(
            points={{55,-4},{66,-4},{66,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cap.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{162,-30},{162,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(Cvp.externalPressure, Capprox.externalPressure) annotation (
            Line(
            points={{202,-30},{202,-26},{116,-26},{116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, add2.u1) annotation (Line(
            points={{55,-4},{66,-4},{66,-21.4},{36.8,-21.4}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(add.u2, Capprox.externalPressure) annotation (Line(
            points={{-25.2,-32},{-16,-32},{-16,-18},{66,-18},{66,-26},{116,-26},
                {116,-30}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                  -100},{220,100}}),                                                                           graphics), Icon(coordinateSystem(extent = {{-100, -100}, {220, 100}})),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoff_shallow;

      model HemodynamicsBurkhoff
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare replaceable Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001), Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoff;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
          import Physiolibrary.Hydraulic.Components.*;
        Resistor Rcsp(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-84,-10},{-64,10}})));
        ElasticVessel      Capprox(
            volume_start=3e-05,
            ZeroPressureVolume=2e-05,
            Compliance=7.5006157584566e-09)                                                                                               annotation(Placement(transformation(extent={{-56,-10},
                    {-36,10}})));
        Resistor Rcp(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));
        ElasticVessel      Cap(
            volume_start=0.000802,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07)                                                                                                annotation(Placement(transformation(extent={{-8,-10},
                    {12,10}})));
        Resistor Rap(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{12,-10},{32,10}})));
        ElasticVessel      Cvp(
            volume_start=0.000154,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08)                                                                                                annotation(Placement(transformation(extent={{34,-10},
                    {54,10}})));
        Resistor Rvp(Resistance(
                displayUnit="(mmHg.s)/ml") = 1999835.811225)
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        equation
          connect(q_in, Rcsp.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcsp.q_out, Capprox.q_in) annotation (Line(
              points={{-64,2.22045e-16},{-46,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Capprox.q_in, Rcp.q_in) annotation (Line(
              points={{-46,2.22045e-16},{-32,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcp.q_out, Cap.q_in) annotation (Line(
              points={{-12,2.22045e-16},{2,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cap.q_in, Rap.q_in) annotation (Line(
              points={{2,2.22045e-16},{12,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rap.q_out, Cvp.q_in) annotation (Line(
              points={{32,2.22045e-16},{44,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvp.q_in, Rvp.q_in) annotation (Line(
              points={{44,2.22045e-16},{60,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvp.q_out, q_out) annotation (Line(
              points={{80,2.22045e-16},{88,2.22045e-16},{88,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
            import Physiolibrary.Hydraulic.Components.*;
        Resistor Rcprox(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{86,-10},{66,10}})));
        ElasticVessel Caprox(
            volume_start=3.8e-05,
            ZeroPressureVolume=3e-05,
            Compliance=7.5006157584566e-10)                                                                                                     annotation(Placement(transformation(extent={{44,-10},
                    {64,10}})));
        Resistor Rcs(Resistance(
                displayUnit="(mmHg.s)/ml") = 3199737.29796)
            annotation (Placement(transformation(extent={{42,-10},{22,10}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cas(
            volume_start=0.000834,
            ZeroPressureVolume=0.0007,
            Compliance=1.2751046789376e-08)                                                                                                     annotation(Placement(transformation(extent={{0,-10},
                    {20,10}})));
        Resistor Ras(Resistance(
                displayUnit="(mmHg.s)/ml") = 99991790.56125)
            annotation (Placement(transformation(extent={{-2,-10},{-22,10}})));
        ElasticVessel Cvs(
            volume_start=0.002701,
            ZeroPressureVolume=0.00223,
            useComplianceInput=false,
            Compliance=5.2504310309196e-07)
            annotation (Placement(transformation(extent={{-48,-10},{-28,10}})));
        Resistor Rvs(Resistance(
                displayUnit="(mmHg.s)/ml") = 2666447.7483)
            annotation (Placement(transformation(extent={{-56,-10},{-76,10}})));
        equation
          connect(Rcprox.q_in, q_in) annotation (Line(
              points={{86,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcprox.q_out, Caprox.q_in) annotation (Line(
              points={{66,0},{54,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Caprox.q_in, Rcs.q_in) annotation (Line(
              points={{54,0},{42,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rcs.q_out, Cas.q_in) annotation (Line(
              points={{22,0},{10,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cas.q_in, Ras.q_in) annotation (Line(
              points={{10,0},{-2,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ras.q_out, Cvs.q_in) annotation (Line(
              points={{-22,0},{-38,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvs.q_in, Rvs.q_in) annotation (Line(
              points={{-38,0},{-56,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvs.q_out, q_out) annotation (Line(
              points={{-76,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(graphics={Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Systemic;

        model Heart "heart with modified elastance"
          extends Cardiovascular.Interfaces.Heart;
        Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{30,-50},{50,-30}})));
        Parts.AtrialElastance atrialElastance1(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-17,-13},{17,13}},
                rotation=0,
                origin={31,3})));
          Physiolibrary.Hydraulic.Components.IdealValve MV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-6,-40})));
        Parts.VentricularElastance ventricularElastance1(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{-52,-20},{-18,6}})));
        Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true) annotation (Placement(transformation(
                  extent={{-38,-50},{-18,-30}})));
          Physiolibrary.Hydraulic.Components.IdealValve AOV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin={-52,-40})));
          Physiolibrary.Hydraulic.Components.IdealValve PV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.7503078792283e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={50,42})));
        Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            useExternalPressureInput=true,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{16,32},{36,52}})));
        Parts.VentricularElastance ventricularElastance(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Alpha=24000,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{16,64},{50,92}})));
          Physiolibrary.Hydraulic.Components.IdealValve TV(_Gon(displayUnit = "ml/(mmHg.s)") = 3.0002463033826e-06) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={4,42})));
        Parts.AtrialElastance atrialElastance(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Alpha=40000,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-80,62},{-48,92}})));
        Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{-60,32},{-40,52}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       heartRate(k=
                1.3333333333333)                                                      annotation(Placement(transformation(extent={{-98,8},
                    {-84,22}})));
          Control.BloodFlowMeasurement bloodFlowMeasurement annotation (
              Placement(transformation(extent={{-76,-50},{-96,-30}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={51,-21})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={-41,59})));
          Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={-22,66})));
          Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={62,-8})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{18,52},{4,64}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
            annotation (Placement(transformation(extent={{-14,-58},{0,-48}})));
        equation
          connect(rightHeartInflow, RA.q_in) annotation (Line(
              points={{-100,40},{-74,40},{-74,42},{-50,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation (Line(
              points={{-50,42},{-6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(TV.q_out, RV.q_in) annotation (Line(
              points={{14,42},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RV.q_in, PV.q_in) annotation (Line(
              points={{26,42},{40,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(PV.q_out, rightHeartOutflow) annotation (Line(
              points={{60,42},{82,42},{82,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftHeartInflow, LA.q_in) annotation (Line(
              points={{100,-20},{84,-20},{84,-18},{64,-18},{64,-40},{40,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LA.q_in, MV.q_in) annotation (Line(
              points={{40,-40},{4,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(MV.q_out, LV.q_in) annotation (Line(
              points={{-16,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(LV.q_in, AOV.q_in) annotation (Line(
              points={{-28,-40},{-42,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularElastance1.Ct, LV.compliance) annotation (Line(
              points={{-29.9,-18.18},{-28,-18.18},{-28,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.Ct, RV.compliance) annotation (Line(
              points={{38.1,65.96},{38.1,63.65},{26,63.65},{26,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, atrialElastance.HR) annotation (Line(
              points={{-82.25,15},{-82.25,89.45},{-78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, atrialElastance.Vs) annotation (Line(
              points={{-54.4,52.2},{-54.4,56},{-77.76,56},{-77.76,63.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, ventricularElastance.Vs) annotation (Line(
              points={{21.6,52.2},{21.6,54},{18.38,54},{18.38,65.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, ventricularElastance1.Vs) annotation (Line(
              points={{-32.4,-29.8},{-32.4,-24},{-49.62,-24},{-49.62,-18.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, atrialElastance1.Vs) annotation (Line(
              points={{35.6,-29.8},{35.6,-26},{16.38,-26},{16.38,-8.44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, ventricularElastance1.HR) annotation (Line(
              points={{-82.25,15},{-82.25,3.79},{-50.13,3.79}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance.HR, atrialElastance.HR) annotation (Line(
              points={{17.87,89.62},{-46,89.62},{-46,96},{-82,96},{-82,89.45},{
                  -78.24,89.45}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_in, AOV.q_out) annotation (Line(
              points={{-76,-40},{-62,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.q_out, leftHeartOutflow) annotation (
              Line(
              points={{-96,-40},{-100,-40},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(bloodFlowMeasurement.HR, heartRate.y) annotation (Line(
              points={{-80,-30},{-82,-30},{-82,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularElastance1.Pt, LV.externalPressure) annotation (
              Line(
              points={{-21.06,-18.18},{-20,-18.18},{-20,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.externalPressure, add.y) annotation (Line(
              points={{48,-32},{50,-32},{50,-26.5},{51,-26.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.HR, heartRate.y) annotation (Line(
              points={{15.87,13.79},{15.87,15},{-82.25,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance.Pt, add1.u2) annotation (Line(
              points={{-50.88,64.1},{-44,64.1},{-44,65}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, RA.externalPressure) annotation (Line(
              points={{-41,53.5},{-41,53.75},{-42,53.75},{-42,50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u1, RAVGain.y) annotation (Line(
              points={{-38,65},{-38,66},{-28.6,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u1, LAVGain.y) annotation (Line(
              points={{54,-15},{54,-12},{54,-8},{55.4,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure1.q_in, LV.q_in) annotation (Line(
              points={{-9.8,-56},{-24,-56},{-24,-40},{-28,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.pressure, LAVGain.u) annotation (Line(
              points={{-2.8,-55},{69.2,-55},{69.2,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.q_in, RV.q_in) annotation (Line(
              points={{13.8,54.4},{14,54.4},{14,46},{26,46},{26,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, RAVGain.u) annotation (Line(
              points={{6.8,55.6},{6.8,66},{-14.8,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.compliance, atrialElastance.Ct) annotation (Line(
              points={{-50,50},{-50,58},{-59.2,58},{-59.2,64.1}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(atrialElastance1.Pt, add.u2) annotation (Line(
              points={{44.94,-8.18},{44.94,-11.09},{48,-11.09},{48,-15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.compliance, atrialElastance1.Ct) annotation (Line(
              points={{40,-32},{38,-32},{38,-8.18},{36.1,-8.18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.externalPressure, ventricularElastance.Pt) annotation (
              Line(
              points={{34,50},{34,56},{46.94,56},{46.94,65.96}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Burkhoff")}));
        end Heart;

        model ElasticVesselWithSVandP
          "elastic vessel computes aditionally stressed volume and pressure"
          extends Physiolibrary.Hydraulic.Components.ElasticVessel;
          Physiolibrary.Types.RealIO.VolumeOutput StressedVolume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-88, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-44, 102})));
        equation
          StressedVolume = volume - zpv;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end ElasticVesselWithSVandP;

        partial model HeartElastance
          "Elastance of heart atria and ventricules by Burkhoff"
          import Physiolibrary.Types.*;
          RealIO.VolumeInput Vs "Stressed volume" annotation(Placement(visible = true, transformation(origin = {-163.397, -51.3719}, extent = {{-20.0, -20.0}, {20.0, 20.0}}, rotation = 0), iconTransformation(origin={-86,-88},    extent = {{-9.999980000000001, -10}, {10, 9.99995}}, rotation=90)));
          parameter Real Alpha( final unit="1/m3")
            "coefficient of end diastolic pressure-volume curve";
          parameter Pressure Beta
            "coefficient of end diastolic pressure-volume curve";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter HydraulicElastance Ees
            "coefficient of end-systolic elastance"
                annotation (Dialog(enable=not useEs_extInput));
          HydraulicElastance Et "Elastance";
          Time Tsyst;
          //need to define in extended model
          parameter Time Tmax "duration of systole ";
          parameter Time Tau "time constant of myocardial relaxation ";
          Real Et0
            "Relative elastance value (Elastance/End-Systolic Elastance)";
          RealIO.PressureOutput Pt "peak isovolumic pressure" annotation (Placement(
                transformation(extent={{64,-78},{84,-58}}),iconTransformation(
                  extent={{-10,-10},{10,10}},
                rotation=270,
                origin={82,-86})));
          RealIO.HydraulicComplianceOutput Ct annotation (Placement(
                transformation(extent={{52,-76},{72,-56}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-86})));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Ees)=1/mes if useEs_extInput annotation (
              Placement(transformation(extent={{64,56},{104,96}}), iconTransformation(
                extent={{-13,-13},{13,13}},
                rotation=180,
                origin={87,67})));
        protected
         HydraulicElastance mes;
        equation
          if not useEs_extInput then
            mes = Ees;
          end if;
          if Tsyst <= 3 / 2 * Tmax then
            Et0 = 0.5 * (sin(Modelica.Constants.pi / Tmax * Tsyst - Modelica.Constants.pi / 2) + 1);
          else
            Et0 = 0.5 * exp(-(Tsyst - 3 * Tmax / 2) / Tau);
          end if;
          //1e+6 and 133.322368 are recalculation in SI units - as the original equation comes in torr and ml.
          //  Et = (1 - Et0) * Beta * (exp(Alpha * Vs * 1e+6) - 1) / Vs * 1e+6) * 133.322368 * 1e+6 + Et0 * Ees;
          Et = Modelica.Constants.eps + Et0 * mes;
          Pt = (1 - Et0) * Beta * (exp(Alpha * Vs) - 1);
          Ct = 1 / Et;
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={  Rectangle(extent={{
                      -100,100},{100,-76}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Line(points={{
                      -38,94},{-38,-36},{86,-36}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-34},{30,-32},{54,-30},{70,-28},{76,-26},{82,-24},{86,-22},{90,
                      -20}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-36},{4,94}},                                                                                                    color=  {0, 0, 0}, smooth=  Smooth.None), Line(points={{
                      -34,-36},{88,80}},                                                                                                    color=  {255, 0, 0}, smooth=  Smooth.None), Polygon(points={{
                      76,72},{72,80},{80,76},{76,72}},                                                                                                    lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Polygon(points=  {{0, -4}, {-4, 4}, {4, 0}, {0, -4}}, lineColor=  {255, 0, 0}, smooth=  Smooth.None, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, origin={84,
                      69},                                                                                                    rotation=  180), Text(extent={{
                      -110,-52},{-64,-76}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {255, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "Vs"), Text(extent={{6,
                      -50},{52,-76}},                                                                                                    lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ct"),                                                                                                    Text(extent={{
                      -100,120},{100,104}},                                                                                                    lineColor=  {0, 0, 255}, fillColor=  {170, 213, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name"),
                                                                                                    Text(extent={{
                      58,-50},{100,-78}},                                                                                                  lineColor=
                      {0,0,255},                                                                                                    fillColor=
                      {255,0,0},
                    fillPattern=FillPattern.Solid,
                  textString="Ped")}));
        end HeartElastance;

        model VentricularElastance
          extends HeartIntervals;
          //produces tvsyst and tasyst
          extends HeartElastance;
          //consumes tsyst from above
        equation
          Tsyst = Tvsyst;
        end VentricularElastance;

        model HeartIntervals
          discrete Physiolibrary.Types.Time HP(start = 0)
            "heart period - duration of cardiac cycle";
          Boolean b(start = false);
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-134.0, 8.0}, {-94.0, 48.0}}, origin = {1.3363, -48.0}, rotation = 0), iconTransformation(extent = {{-73.7009, 4.4}, {-51.7009, 26.4}}, origin = {-26.2991, 67.6}, rotation = 0), visible = true));
          Physiolibrary.Types.Time Tasyst
            "time elapsed from the beginning of atrial systole";
          Physiolibrary.Types.Time Tvsyst
            "time elapsed from the beginning of ventricular systole";
          parameter Physiolibrary.Types.Time AVDelay(displayUnit = "s")= 0.160
            "AV interval";
          Physiolibrary.Types.Time T0 "start time of cardiac cycle";
          Physiolibrary.Types.Time EDTV "Ventricular end Diastolic Time";
        equation
          b = time - pre(T0) >= pre(HP);
          when {initial(), b} then
            T0 = time;
            HP = 1 / HR;
            EDTV = T0 + AVDelay;
          end when;
          Tasyst = time - T0;
          if time - T0 < AVDelay then
            Tvsyst = 0;
          else
            Tvsyst = time - (T0 + AVDelay);
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(visible=  true, origin=  {-18.5625, 68}, lineColor=  {0, 0, 255}, extent=  {{-73.4375, 6.00004}, {-23.4375, 24}}, textString=  "HR", fontName=  "Arial")}));
        end HeartIntervals;

        model AtrialElastance
          extends HeartIntervals;
          extends HeartElastance;
        equation
          Tsyst = Tasyst;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end AtrialElastance;
      end Parts;

      model HemodynamicsBurkhoffBVControl
        extends Controlled.System(
          redeclare replaceable ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl
            heart(MV(useLimitationInputs=false), AOV(useLimitationInputs=false)),
          redeclare replaceable ControlledParts.SystemicControl
            systemicCirculation(Ras(useConductanceInput=false)),
          redeclare Model.Control.Baroreflex shortTermControl(
              baroreceptor(
              PAOmedia=11585.715466364,
              EV0right=50662507.2177,
              EV0left=205316476.6191,
              EV0venacava=5.2504310309196e-07,
              activationDelay=10)),
          redeclare replaceable Model.Control.BloodVolumeControl
            longTermControl);
      /*    redeclare Control.StenosisControl simulationControl(venacavastenosis(
          InitialElastance=1906510.1400345, FinalElastance=
            1906510.1400345),                                aorticstenosis(
          InitialResistance(displayUnit="(mmHg.s)/ml") = 266644.77483,
          FinalResistance(displayUnit="(mmHg.s)/ml") = 266644.77483),
      mitralvalvestenosis(InitialResistance=333305.9685375, FinalResistance=333305.9685375)));*/
        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001), Documentation(info="<html>
<p>Cardiovascular model implemented per description of Burkhoff et al.</p>
<p>[5] W. P. Santamore, D. Burkhoff, Hemodynamic Consequences of Ventricular Interaction as Assessed by Model Analysis., The American Journal of Physiology 260 (1 Pt 2) (1991) H146&ndash;H157.</p>
<p>[6] D. Burkhoff, J. V. Tyberg, Why does Pulmonary Venous Pressure Rise after onset of LV Dysfunction: A Theoretical Analysis., The American Journal of Physiology 265 (5 Pt 2) (1993) H1819&ndash;H1828.</p>
<p>[7] D. Morley, K. Litwak, P. Ferber, P. Spence, R. Dowling, B. Meyns, B. Griffith, D. Burkhoff, Hemodynamic Effects of Partial Ventricular Support in Chronic Heart Failure: Results of Simulation Validated with In Vivo Data, The Journal of Thoracic and Cardiovascular Surgery 133 (1) (2007) 21&ndash;28.e4. doi:10.1016/j.jtcvs.2006.07.037. URL http://linkinghub.elsevier.com/retrieve/pii/S0022522306015728</p>
<p>[8] Harvi - interactive simulation-based digital textbook of cardiovascular physiology and hemodynamics. URL http://www.pvloops.com</p>
</html>"));
      end HemodynamicsBurkhoffBVControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;

        model PulmonaryControl
          extends Controlled.Pulmonary;
          extends Parts.Pulmonary;
          Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                transformation(extent={{-36,22},{-56,42}})));
        equation
          connect(Capprox.volume, add3_1.u3) annotation (Line(
              points={{-40,-10},{-40,-16},{-34,-16},{-34,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Cap.volume, add3_1.u2) annotation (Line(
              points={{8,-10},{10,-10},{10,-16},{16,-16},{16,32},{-34,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Cvp.volume, add3_1.u1) annotation (Line(
              points={{50,-10},{52,-10},{52,-16},{56,-16},{56,40},{-34,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.y, busConnector.pulmonaryBloodVolume) annotation (
              Line(
              points={{-57,32},{-68,32},{-68,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Controlled.Systemic;
          extends Parts.Systemic(Cvs(
                useComplianceInput=true), Caprox(useComplianceInput=false));
          Modelica.Blocks.Math.Add3 add3_1 annotation (Placement(
                transformation(
                extent={{-7,-7},{7,7}},
                rotation=180,
                origin={-65,-23})));
          Cardiovascular.Model.Control.MeanAortaPressureMeasurement aortaPressureMeasurement
            annotation (Placement(transformation(extent={{32,12},{52,32}})));
        equation
          connect(add3_1.u3, Cvs.volume) annotation (Line(
              points={{-56.6,-17.4},{-32,-17.4},{-32,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.u2, Cas.volume) annotation (Line(
              points={{-56.6,-23},{16,-23},{16,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.u1, Caprox.volume) annotation (Line(
              points={{-56.6,-28.6},{60,-28.6},{60,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3_1.y, busConnector.systemicBloodVolume) annotation (
              Line(
              points={{-72.7,-23},{-80,-23},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Rcs.q_in, aortaPressureMeasurement.q_in) annotation (Line(
              points={{42,0},{42,16},{38,16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{49,25},{62,25},{62,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Cvs.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-38,8},{-38,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl
          extends Controlled.Heart;
          extends Parts.Heart(
            redeclare Types.Constants.FrequencyControl heartRate,
            ventricularElastance(useEs_extInput=true),
            atrialElastance1(useEs_extInput=false),
            ventricularElastance1(useEs_extInput=true),
            AOV(_Goff(displayUnit="ml/(mmHg.s)"), useLimitationInputs=false),
            MV(useLimitationInputs=false));

          Modelica.Blocks.Math.Sum sum1(nin=4)
            annotation (Placement(transformation(extent={{58,6},{78,26}})));
        equation
          connect(heartRate.c, busConnector.heartrate) annotation (Line(
              points={{-94.5,15},{-94.5,49.5},{-98,49.5},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance.Es_ext, busConnector.rvcompliance) annotation (
              Line(
              points={{47.79,87.38},{28,87.38},{28,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularElastance1.Es_ext, busConnector.lvcompliance) annotation (
              Line(
              points={{-20.21,1.71},{82,1.71},{82,86},{-98,86}},
              color={128,255,0},
              smooth=Smooth.None,
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(RV.volume, sum1.u[1]) annotation (Line(
              points={{32,32},{32,14.5},{56,14.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.volume, sum1.u[2]) annotation (Line(
              points={{-44,32},{-46,32},{-46,15.5},{56,15.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.volume, sum1.u[3]) annotation (Line(
              points={{-22,-50},{-22,-72},{56,-72},{56,16.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.volume, sum1.u[4]) annotation (Line(
              points={{46,-50},{46,-58},{56,-58},{56,17.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sum1.y, busConnector.heartBloodVolume) annotation (Line(
              points={{79,16},{82,16},{82,86},{-98,86}},
              color={127,255,0},
              smooth=Smooth.None,
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end HeartControl;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=1906510.1400345, FinalElastance=
                  1906510.1400345),
            aorticstenosis(
              InitialResistance(displayUnit="(mmHg.s)/ml") = 266644.77483,
              FinalResistance(displayUnit="(mmHg.s)/ml") = 10665790.9932,
              duration=60),
            mitralvalvestenosis(InitialResistance=333305.9685375,
                FinalResistance=333305.9685375));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(AOV(useLimitationInputs=true));
        equation
          connect(AOV.Goff, busConnector.avbackflowconductance) annotation (
              Line(
              points={{-58,-50},{-58,-60},{-98,-60},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(AOV.Gon, busConnector.avoutflowresistance) annotation (Line(
              points={{-46,-50},{-46,-60},{-98,-60},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsBurkhoffBVControl(redeclare
            ControlledParts.AorticValveStenosisScenario scenarioControl(
              aorticstenosis(duration=60)), redeclare
            ControlledParts.AorticValveHeartControl heart);
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model StenosisAorticValveWithoutControl
        extends StenosisAorticValve(shortTermControl(baroreceptor(
                activationDelay=1000)));
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValveWithoutControl;

      model Bleeding
        extends HemodynamicsBurkhoffBVControl(redeclare
            Scenario.BleedingTransfusionScenario scenarioControl(
            BloodTrans=0,
            Tbs=600,
            Tbd=300,
            BloodLoss=0.0005,
            Tts=1200,
            Ttd=600), longTermControl(redeclare
              Control.BloodVolume.PlasmaBleeding plasma, redeclare
              Control.BloodVolume.RBCBleeding redBloodCells));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Burkhoff;

    package Smith2004
        extends Modelica.Icons.ExamplesPackage;
      model HemodynamicsSmith_shallow
        import Physiolibrary.Hydraulic.Components.*;
      ElasticVesselElastance aorta(
          ZeroPressureVolume=0,
          volume_start=0.0001241,
          Elastance=92165766.41999)
          annotation (Placement(transformation(extent={{-130,-30},{-110,-10}})));
      ElasticVesselElastance venaCava(
          ZeroPressureVolume=0,
          volume_start=0.0002952,
          Elastance(displayUnit="Pa/m3") = 786602.0857485)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
      IdealValveResistance aorticValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2399802.97347)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-10}})));
      Resistor Rsys(Resistance(displayUnit=
               "(mmHg.s)/ml") = 145054757.50752) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-120,6})));
      IdealValveResistance tricuspidValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-62,24},{-42,44}})));
      Inertia Lav(
            I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
              displayUnit="m3/s") = -1.4e-8)                           annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-44,-20})));
      Inertia Lpv(
            I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
              displayUnit="m3/s") = -1.9e-9)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
      IdealValveResistance pulmonaryValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{62,24},{82,44}})));
          ElasticVesselElastance pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=3.904e-05,
          Elastance(displayUnit="Pa/m3") = 49195960.956135)
          annotation (Placement(transformation(extent={{102,24},{122,44}})));
      Resistor Rpul(Resistance(displayUnit=
               "(mmHg.s)/ml") = 20691634.526808) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={114,4})));
      ElasticVesselElastance pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          volume_start=0.0008269,
          Elastance(displayUnit="Pa/m3") = 973253.4281295)
          annotation (Placement(transformation(extent={{104,-30},{124,-10}})));
      IdealValveResistance mitralValve(Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{56,-30},{36,-10}})));
      Inertia Ltc(
            I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
              displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-106,24},{-86,44}})));
      Inertia Lmt(
            I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
              displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={78,-20})));
        Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
          annotation (Placement(transformation(extent={{-44,0},{-28,14}})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(extent={{38,12},{50,20}})));
      Parts.VentricularInteraction_flat ventricularInteraction_flat(
          lambdalv=33000,
          lambdaperi=30000,
          lambdas(displayUnit="1/m3") = 435000,
          lambdarv(displayUnit="1/m3") = 23000,
          Essept(displayUnit="mmHg/ml") = 6499999676.0309,
          V0peri=0.0002,
          Pi0sept=148.00118226939,
          Pi0rv=28.757638965416,
          Pi0lv=16.038683206025,
          Pi0peri=66.701190423724,
          Esrv=77993596.637775,
          Eslv=383941811.27772)
          annotation (Placement(transformation(extent={{-18,-12},{20,28}})));
      equation
        connect(aorta.q_in, Rsys.q_in) annotation (Line(
            points={{-120,-20},{-120,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rsys.q_out, venaCava.q_in) annotation (Line(
            points={{-120,16},{-120,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArteries.q_in) annotation (Line(
            points={{82,34},{112,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
            points={{112,34},{114,34},{114,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
            points={{114,-6},{114,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, aorta.q_in) annotation (Line(
            points={{-82,-20},{-120,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(venaCava.q_in, Ltc.q_in) annotation (Line(
            points={{-120,34},{-106,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, Lmt.q_in) annotation (Line(
            points={{114,-20},{88,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lav.q_out, aorticValve.q_in) annotation (Line(
            points={{-54,-20},{-62,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Ltc.q_out,tricuspidValve. q_in) annotation (Line(
            points={{-86,34},{-62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{52,34},{62,34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_in, Lmt.q_out) annotation (Line(
            points={{56,-20},{68,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(tricuspidValve.q_out, ventricularInteraction_flat.rvflow)
          annotation (Line(
            points={{-42,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(Lpv.q_in, ventricularInteraction_flat.rvflow) annotation (Line(
            points={{32,34},{0.62,34},{0.62,28}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(ventricularInteraction_flat.lvflow, Lav.q_in) annotation (Line(
            points={{1,-12},{2,-12},{2,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, Lav.q_in) annotation (Line(
            points={{36,-20},{-34,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(HR.y, ventricularInteraction_flat.HR) annotation (Line(
            points={{-26,7},{-22,7},{-22,8},{-14.2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y, ventricularInteraction_flat.Pth)
          annotation (Line(
            points={{51.5,16},{58,16},{58,8},{16.58,8}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryArteries.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{120,42},{120,46},{86,46},{86,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(pulmonaryVeins.externalPressure, IntraThoracicPressure.y)
          annotation (Line(
            points={{122,-12},{122,16},{51.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                  -100},{160,100}}),      graphics), Icon(coordinateSystem(extent={{-160,
                  -100},{160,100}})),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Smith et al.</p>
<p>[12] B. W. Smith, J. G. Chase, R. I. Nokes, G. M. Shaw, G. Wake, Minimal Haemodynamic System Model Including Ventricular Interaction and Valve Dynamics., Medical Engineering &AMP; Physics 26 (2) (2004) 131&ndash;139. doi:10.1016/j.medengphy.2003.10.001.</p>
<p>[13] CellML implementation at URL:  http://models.cellml.org/exposure/9d046663ba5cac5c8a61ac146183614b/smith_chase_nokes_shaw_wake_2004.cellml/view</p>
</html>"));
      end HemodynamicsSmith_shallow;

      model HemodynamicsSmith
        extends Cardiovascular.System(
          redeclare Parts.Pulmonary pulmonaryCirculation,
          redeclare Parts.Heart heart,
          redeclare Parts.Systemic systemicCirculation);
        annotation (experiment(StopTime=5, __Dymola_NumberOfIntervals=5000));
      end HemodynamicsSmith;

      package Parts
        extends Modelica.Icons.UtilitiesPackage;

        model VentricularInteraction_flat
            import Physiolibrary.Types.*;
            Volume Vsept(start=0.000002),Vrv(start=0.0001042),Vlv(start=0.0001042),Vperi;
            parameter Volume V0sept=0.000002,V0peri;
            Pressure Psept,Pperi;
            parameter Pressure Pi0sept,Pi0rv,Pi0lv,Pi0peri
            "peak isovolumic pressure";
            parameter HydraulicElastance Essept,Esrv,Eslv
            "elastance of systole";
            parameter Real A=1,B=80,CC=0.375;
            Time tm;
            discrete Time HP "heart period";
            discrete Time t0 "time of beginning of the cardiac cycle";
            discrete Time ts "duration of systole";
            parameter HydraulicLambda lambdas;
            parameter HydraulicLambda lambdarv;
            parameter HydraulicLambda lambdalv;
            parameter HydraulicLambda lambdaperi;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-12,90},{8,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          RealIO.FrequencyInput HR annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={82,0})));
        equation
          //timing
          tm = time - pre(t0);
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          //  septum
          Psept = lvflow.pressure-rvflow.pressure;
          Psept = (Vsept-V0sept)*A*exp(-B*(tm-CC)^2)*Essept
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0sept*(exp(lambdas*Vsept)-1);
          // rightventricle
          rvflow.pressure - Pperi = (Vrv+Vsept)*A*exp(-B*(tm-CC)^2)*Esrv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0rv*(exp(lambdarv*(Vrv+Vsept))-1);
          der(Vrv) = rvflow.q;
          //leftventricle
          lvflow.pressure - Pperi = (Vlv-Vsept)*A*exp(-B*(tm-CC)^2)*Eslv
                        +(1-A*exp(-B*(tm-CC)^2))*Pi0lv*(exp(lambdalv*(Vlv-Vsept))-1);
          der(Vlv) = lvflow.q;
          //pericardium
          Vperi = Vrv+Vlv;
          Pperi=Pth+ Pi0peri*(exp(lambdaperi*(Vperi-V0peri))-1);
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{102,-32},{76,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-100,-22},{-74,-34}},
                  lineColor={0,0,255},
                  textString="HR"),
                Rectangle(extent={{-20,80},{20,-60}}, lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,255}),
                Text(
                  extent={{-100,-60},{100,-80}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end VentricularInteraction_flat;

        model Septum

          Physiolibrary.Hydraulic.Sensors.PressureMeasure rvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-12,40})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-23,23})));
        TimeVaryingElastance septumdrv(
            lambda=435000,
            Es=6499999676.0309,
            Pi0=148.00118226939) annotation (Placement(transformation(
                extent={{-10,-12},{10,12}},
                rotation=0,
                origin={-58,12})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure lvpressure
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-14})));
        ElasticWall elasticWall(volume(
                start=2e-06), V0=2e-06)
            annotation (Placement(transformation(extent={{-28,-8},{18,22}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume(start=2e-06)
            annotation (Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-84,-10}), iconTransformation(extent={{80,-10},{100,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,-28},{16,-8}}),
                iconTransformation(extent={{-10,-40},{10,-20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
             Placement(transformation(rotation=0, extent={{-4,32},{16,52}}),
                iconTransformation(extent={{-10,6},{10,26}})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-94,10},{-74,30}}),
                iconTransformation(extent={{-100,-10},{-80,10}})));
        equation
          connect(elasticWall.compliance, septumdrv.C) annotation (Line(
              points={{-27.08,7.9},{-32,7.9},{-32,13.68},{-47.25,13.68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septumdrv.Pi, add1.u2) annotation (Line(
              points={{-47.25,19.92},{-33.625,19.92},{-33.625,20},{-29,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, elasticWall.prv) annotation (Line(
              points={{-17.5,23},{-13.74,23},{-13.74,7.9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(elasticWall.volume, septumdrv.V) annotation (Line(
              points={{-27.08,-1.4},{-44,-1.4},{-44,7.2},{-48,7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(volume, elasticWall.volume) annotation (Line(points={{-84,-10},
                  {-27.08,-10},{-27.08,-1.4}}, color={0,0,127}));
          connect(HR, septumdrv.HR) annotation (Line(points={{-84,20},{-68,20},
                  {-68,19.2}}, color={0,0,127}));
          connect(lvpressure.pressure, elasticWall.plv) annotation (Line(
              points={{-16,-8},{-16,-0.5},{-16.96,-0.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rvpressure.q_in, rvflow) annotation (Line(
              points={{-18,44},{-6,44},{-6,42},{6,42}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rvpressure.pressure, add1.u1) annotation (Line(
              points={{-16,34},{-34,34},{-34,26},{-29,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lvflow, lvpressure.q_in) annotation (Line(
              points={{6,-18},{-14,-18}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(
                coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Polygon(
                  points={{-100,-20},{-40,0},{-6,6},{8,6},{40,0},{100,-20},{98,
                      -20},{-100,-20}},
                  lineColor={167,167,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-100,-20},{-78,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{80,-20},{100,-40}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="V"),
                Text(
                  extent={{-80,-20},{76,0}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Septum;

        model Ventricle

          TimeVaryingElastance drive(
            lambda=23000,
            useEs_extInput=false,
            Es=77993596.637775,
            Pi0=28.757638965416)
            annotation (Placement(transformation(extent={{-32,-4},{-12,22}})));
        ElasticVesselWithSVandP ventricle(
            useComplianceInput=true,
            useExternalPressureInput=true,
            useV0Input=true,
            volume_start=0.0001042,
            Elastance=133322387.415)
            annotation (Placement(transformation(extent={{16,-22},{36,-2}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={34,6})));
          Modelica.Blocks.Interfaces.RealInput Pext annotation (Placement(
                transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={50,12}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={30,30})));
          Modelica.Blocks.Interfaces.RealInput V0 annotation (Placement(
                transformation(
                rotation=0,
                extent={{-10,-10},{10,10}},
                origin={0,-4}),iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-20,-10})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in annotation (
              Placement(transformation(rotation=0, extent={{36,-22},{56,-2}}),
                iconTransformation(extent={{-50,-20},{-30,0}})));
          Physiolibrary.Types.RealIO.VolumeOutput stressedVolume annotation (
              Placement(transformation(
                rotation=180,
                extent={{-10,-10},{10,10}},
                origin={-26,-10}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-10})));
          Physiolibrary.Types.RealIO.FrequencyInput HR annotation (Placement(
                transformation(rotation=0, extent={{-56,6},{-36,26}}),
                iconTransformation(extent={{-40,20},{-20,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-26,-28}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={6,-10})));
        equation
          connect(drive.C, ventricle.compliance) annotation (Line(
              points={{-11.25,10.82},{26,10.82},{26,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.externalPressure, add.y) annotation (Line(
              points={{34,-4},{34,1.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.Pi, add.u2) annotation (Line(
              points={{-11.25,17.58},{10,17.58},{10,18},{32,18},{32,10.8},{31.6,
                  10.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HR, drive.HR) annotation (Line(points={{-46,16},{-42,16},{-42,
                  16.8},{-32,16.8}}, color={0,0,127}));
          connect(add.u1, Pext) annotation (Line(
              points={{36.4,10.8},{47.2,10.8},{47.2,12},{50,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(V0, ventricle.zeroPressureVolume) annotation (Line(
              points={{0,-4},{18,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drive.V, stressedVolume) annotation (Line(
              points={{-12,3.8},{-8,3.8},{-8,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.q_in, q_in) annotation (Line(
              points={{26,-12},{46,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricle.volume, volume) annotation (Line(
              points={{32,-22},{32,-28},{-26,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricle.StressedVolume, stressedVolume) annotation (Line(
              points={{21.6,-1.8},{21.6,6},{-6,6},{-6,-10},{-26,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-60,-60},{60,40}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics={
                Bitmap(extent={{-34,44},{28,-24}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/heartVentricle.png"),
                Text(
                  extent={{-40,18},{-20,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="HR"),
                Text(
                  extent={{20,20},{42,0}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pext"),
                Text(
                  extent={{-16,0},{6,-20}},
                  lineColor={0,0,127},
                  pattern=LinePattern.Dash,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="V0"),
                Rectangle(extent={{-40,40},{40,-20}}, lineColor={0,0,127}),
                Text(
                  extent={{-60,60},{60,42}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}));
        end Ventricle;

        model VentricularInteraction
        //  Physiolibrary.Types.Pressure Plv,Plvf,Pperi,Prv,Prvf,Ppcd,Pth,Pspt;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a rvflow annotation (
              Placement(transformation(extent={{-48,20},{-28,40}}),
                iconTransformation(extent={{-10,90},{10,110}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a lvflow annotation (
             Placement(transformation(extent={{-46,-22},{-26,-2}}),
                iconTransformation(extent={{-10,-110},{10,-90}})));
          Physiolibrary.Types.RealIO.FrequencyInput frequency annotation (
              Placement(transformation(extent={{-78,-40},{-38,0}}),
                iconTransformation(extent={{-100,-12},{-60,28}})));
        Pericardium pericardium(
            lambda(displayUnit="1/m3") = 30000,
            V0=0.0002,
            P0=66.701190423724) annotation (Placement(transformation(
                extent={{13,26},{-13,-26}},
                rotation=180,
                origin={25,12})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-6,24},{14,44}}),  iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=180,
                origin={80,8})));
        replaceable Ventricle
                  rightVentricle(drive(
              lambda=23000,
              Es=77993596.637775,
              Pi0=28.757638965416)) annotation (Placement(transformation(rotation=0,
                  extent={{-20,26},{0,46}})));
        replaceable Ventricle
                  leftVentricle(drive(
              lambda=33000,
              useEs_extInput=false,
              Es=383941811.27772,
              Pi0=16.038683206025)) annotation (Placement(transformation(
                rotation=180,
                extent={{10,-10},{-10,10}},
                origin={-10,-16})));
        Septum septum annotation (
              Placement(transformation(rotation=0, extent={{-54,-6},{-14,26}})));
          Modelica.Blocks.Math.Gain gain(k=-1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=90,
                origin={-14,22})));
        equation
          /*Plv = Plvf+Pperi;
  Plvf=e*Peslvf+(1-e)*Pedlvf;

  Prv=Prvf+Pperi;
  Prvf=e*Pesrvf+(1-e)*Pedrvf;

  Pperi=Ppcd+Pth;

  Pspt=Plv-Prv;

Pspt=e*Pesspt+(1-e)*Pedspt;
*/
          //Pspt = leftVentricle.q_in.pressure - rightVentricle.q_in.pressure;
          connect(frequency,leftVentricle. HR) annotation (Line(
              points={{-58,-20},{-15,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.HR, frequency) annotation (Line(
              points={{-15,44},{-58,44},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.HR,    frequency) annotation (Line(
              points={{-52,10},{-58,10},{-58,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.stressedVolume, pericardium.Vrvfw) annotation (
             Line(
              points={{-5,36},{-5,19.54},{20.06,19.54}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(lvflow,leftVentricle. q_in) annotation (Line(
              points={{-36,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pericardium.pressure,leftVentricle. Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,-20},{-5,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Pth, pericardium.Pth) annotation (Line(
              points={{4,34},{20.06,34},{20.06,35.14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.pressure, rightVentricle.Pext) annotation (Line(
              points={{40.6,35.4},{44,35.4},{44,44},{-5,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.stressedVolume, pericardium.Vlvfw) annotation (
              Line(
              points={{-5,-12},{-4,-12},{-4,3.94},{20.06,3.94}},
              color={0,0,127},
              smooth=Smooth.Bezier));
          connect(septum.volume,leftVentricle. V0) annotation (Line(
              points={{-16,10},{-13.3333,10},{-13.3333,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(septum.volume, gain.u) annotation (Line(
              points={{-16,10},{-14,10},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pericardium.Vsept, gain.u) annotation (Line(
              points={{20.06,12.26},{-14,12.26},{-14,14.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, rightVentricle.V0) annotation (Line(
              points={{-14,28.6},{-14,28},{-13.3333,28},{-13.3333,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, rvflow) annotation (Line(
              points={{-16.6667,36},{-28,36},{-28,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.rvflow, rvflow) annotation (Line(
              points={{-34,12.56},{-34,30},{-38,30}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(septum.lvflow,leftVentricle. q_in) annotation (Line(
              points={{-34,5.2},{-34,-12},{-16.6667,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-102,-20},{-76,-32}},
                  lineColor={0,0,255},
                  textString="HR"),
                Text(
                  extent={{100,-32},{74,-20}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Bitmap(extent={{-92,84},{-4,-74}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceprava.png"),
                Bitmap(extent={{-18,102},{94,-72}}, fileName=
                      "modelica://Physiolibrary/Resources/Icons/srdceLeva.png"),
                Polygon(
                  points={{-18,48},{4,48},{6,30},{14,2},{16,-28},{16,-62},{18,
                      -64},{10,-72},{-6,-70},{-8,-52},{-10,-4},{-14,28},{-18,44},
                      {-18,46},{-18,48}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,205,205}),
                Polygon(
                  points={{-58,0},{-64,0},{-66,0},{-62,-12},{-56,-38},{-38,-60},
                      {-6,-76},{24,-72},{44,-50},{62,-18},{68,2},{60,4},{56,-10},
                      {46,-32},{34,-52},{20,-66},{4,-68},{-12,-64},{-44,-42},{
                      -42,-42},{-58,0}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{-98,-68},{98,-92}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,205,205},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                          extent={{-100,-100},{100,100}}), graphics));
        end VentricularInteraction;

        model TimeVaryingElastance
          //parameter Physiolibrary.Types.HydraulicElastance Ed "elastance of diastole";
          parameter Boolean useEs_extInput = false
            "=true, if external elastance/compliance value is used"
            annotation(Evaluate=true, HideResult=true, choices(__Dymola_checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicElastance Es
            "elastance of systole"                                                   annotation (Dialog(enable=not useEs_extInput));
          parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
          parameter HydraulicLambda lambda;
          Physiolibrary.Types.Time tm
            "relative time from the beginning of cardiac cycle";
          discrete Physiolibrary.Types.Time HP "heart period";
          discrete Physiolibrary.Types.Time t0
            "time of beginning of the cardiac cycle";
          discrete Physiolibrary.Types.Time ts "duration of systole";
          Real et;
          parameter Real A=1,B=80,CC=0.375;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation(Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,14})));
          Physiolibrary.Types.HydraulicElastance E;
          Physiolibrary.Types.RealIO.PressureOutput Pi annotation(Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent={{-14,-14},
                    {14,14}},                                                                                                    rotation=0,     origin={66,66})));
          Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation(Placement(transformation(extent={{76,58},
                    {116,98}}),                                                                                                    iconTransformation(extent={{-20,-20},
                    {20,20}},
                rotation=0,
                origin={-100,60})));
          Physiolibrary.Types.RealIO.VolumeInput V annotation (Placement(
                transformation(extent={{82,54},{122,94}}),     iconTransformation(
                  extent={{-20,-20},{20,20}},
                rotation=180,
                origin={60,-40})));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start=1/Es)=1/es_int if useEs_extInput
           annotation (
              Placement(transformation(extent={{60,60},{100,100}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=0,
                origin={-100,20})));
        protected
           Physiolibrary.Types.HydraulicElastance es_int;
        equation
          if not useEs_extInput then
            es_int=Es;
          end if;
          tm = time - pre(t0);
        /*  if tm < pre(ts) then
    a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
  else
    a = 0;
  end if;
  E = Ed + Es * a;
  C = 1 / E;
  //  Pi = Pi0 * a;
  */
          when {initial(), tm >= pre(HP)} then
            HP = 1 / HR;
            t0 = time;
            ts = 0.16 + 0.3 * HP;
          end when;
          et = A*exp(-B*(tm-CC)^2);//(5)
          E = et*es_int;//(derived (4)
          C = 1/E;
          Pi = (1-et)*Pi0*(exp(lambda*V)-1);//derived(4)
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{60,100}}),                                                                         graphics={  Rectangle(extent={{
                      -42,80},{50,-76}},                                                                                                    lineColor = {0, 0, 255}, fillColor = {170, 255, 255},
                    fillPattern =                                                                                                   FillPattern.Solid),                                                                                                    Text(extent={{
                      -96,82},{-32,58}},                                                                                                    lineColor = {0, 0, 255}, textString = "HR"), Text(extent={{
                      -16,28},{84,-2}},                                                                                                    lineColor = {0, 0, 255}, textString = "Et"), Text(extent={{8,
                      86},{58,56}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="P"),                                                                                                    Text(extent={{
                      -288,134},{260,78}},                                                                                                    lineColor=
                      {0,0,255},
                  textString="%name"),
                Text(
                  extent={{44,-52},{76,-80}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={255,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="V"),
                Line(
                  points={{-40,0},{-32,0},{-32,4},{-30,26},{-26,40},{-22,42},{-20,
                      38},{-18,22},{-16,0},{6,0},{8,24},{12,40},{16,42},{18,38},{
                      22,0},{44,0}},
                  color={0,0,255},
                  smooth=Smooth.None)}), Diagram(coordinateSystem(extent={{-100,
                    -100},{60,100}})));
        end TimeVaryingElastance;

        type HydraulicLambda = Real(final quantity="HydraulicLambda",final unit="1/m3", displayUnit="1/ml", nominal=(1e-5), min=0);
        model Pericardium
          parameter Physiolibrary.Types.Volume V0;
          parameter Physiolibrary.Types.Pressure P0;
          parameter HydraulicLambda lambda;
          Physiolibrary.Types.RealIO.VolumeInput Vsept annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,1})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-40,-10},{-20,10}}),iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=0,
                origin={50,90})));
          Physiolibrary.Types.RealIO.VolumeInput Vrvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,29})));
          Physiolibrary.Types.RealIO.VolumeInput Vlvfw annotation (Placement(
                transformation(extent={{40,-36},{80,4}}), iconTransformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-29,-31})));
                Physiolibrary.Types.Volume Vperi;
                Physiolibrary.Types.Pressure Pperi;
          Physiolibrary.Types.RealIO.VolumeOutput Vrv annotation (Placement(
                transformation(extent={{40,20},{60,40}}), iconTransformation(extent={{40,
                    20},{60,40}})));
          Physiolibrary.Types.RealIO.VolumeOutput Vlv annotation (Placement(
                transformation(extent={{36,20},{56,40}}), iconTransformation(extent={{40,
                    -40},{60,-20}})));
          Physiolibrary.Types.RealIO.PressureInput Pth annotation (Placement(
                transformation(extent={{-50,60},{-10,100}}), iconTransformation(extent={
                    {-40,78},{-18,100}})));
        equation
          Vperi = Vrvfw+Vlvfw;
          Vrv = Vrvfw+Vsept;
          Vlv= Vlvfw-Vsept;
          Pperi=P0*(exp(lambda*(Vperi-V0))-1); //orig equation in mmHg and ml
           pressure = Pth + Pperi;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-40,
                    -100},{60,100}}),
                                 graphics={
                Polygon(
                  points={{-18,90},{-18,-90},{-6,-80},{24,-44},{32,-16},{30,10},
                      {24,32},{0,68},{-18,92},{-18,90}},
                  smooth=Smooth.None,
                  lineColor={167,167,255},
                  fillPattern=FillPattern.Forward,
                  fillColor={227,227,255}),
                Polygon(
                  points={{30,4},{22,6},{-6,8},{-18,6},{-18,4},{-18,0},{-18,-4},
                      {-16,-4},{-8,-6},{24,-4},{30,-4},{30,4}},
                  lineColor={167,167,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Polygon(
                  points={{-18,102},{20,50},{36,14},{36,-30},{16,-62},{-18,-98},{-20,-88},
                      {12,-54},{28,-30},{28,14},{12,48},{-18,90},{-18,102}},
                  lineColor={0,0,255},
                  smooth=Smooth.Bezier,
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward),
                Text(
                  extent={{22,98},{40,80}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="p"),
                Text(
                  extent={{-16,14},{12,-10}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vsept"),
                Text(
                  extent={{-16,40},{10,14}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrvfw"),
                Text(
                  extent={{-18,-18},{8,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlvfw"),
                Text(
                  extent={{22,40},{38,22}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vrv"),
                Text(
                  extent={{20,-22},{40,-36}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="Vlv"),
                Text(
                  extent={{-10,98},{12,76}},
                  lineColor={0,0,255},
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Forward,
                  textString="Pth"),
                Text(
                  extent={{-40,120},{64,100}},
                  lineColor={0,0,127},
                  fillPattern=FillPattern.Forward,
                  textString="%name")}),
                                     Diagram(coordinateSystem(extent={{-40,-100},{60,100}}),
                graphics));
        end Pericardium;

        model Heart
          extends Cardiovascular.Interfaces.Heart;
          Physiolibrary.Hydraulic.Components.Inertia Ltc(
              I(displayUnit="mmHg.s2/ml") = 10678.18997523, volumeFlow_start(
                displayUnit="m3/s") = 0.0001372)
            annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance tricuspidValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 3159740.5817355)
            annotation (Placement(transformation(extent={{-48,30},{-28,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lpv(
              I(displayUnit="mmHg.s2/ml") = 19822.372560862, volumeFlow_start(
                displayUnit="m3/s") = -1.9e-9)
            annotation (Placement(transformation(extent={{42,30},{62,50}})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance pulmonaryValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 733273.1307825)
            annotation (Placement(transformation(extent={{66,30},{86,50}})));
          Physiolibrary.Hydraulic.Components.Inertia Lmt(
              I(displayUnit="mmHg.s2/ml") = 10261.557514558, volumeFlow_start(
                displayUnit="m3/s") = 0.0001141)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={78,-14})));
          Physiolibrary.Hydraulic.Components.IdealValveResistance mitralValve(
            Pknee=0,
           _Ron(displayUnit="(mmHg.s)/ml") = 2106493.721157)
            annotation (Placement(transformation(extent={{60,-24},{40,-4}})));
          Physiolibrary.Hydraulic.Components.Inertia Lav(
              I(displayUnit="mmHg.s2/ml") = 16250.665802014, volumeFlow_start(
                displayUnit="m3/s") = -1.4e-8)                           annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-40,-14})));
            Physiolibrary.Hydraulic.Components.IdealValveResistance  aorticValve(
            Pknee=0,
            _Ron(displayUnit="(mmHg.s)/ml") = 2399802.97347)
            annotation (Placement(transformation(extent={{-58,-24},{-78,-4}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst
                                                       HR(k=1.2)
            annotation (Placement(transformation(extent={{-52,8},{-36,22}})));
          replaceable VentricularInteraction
                                   ventricularInteraction
            annotation (Placement(transformation(extent={{-24,-14},{36,40}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{42,20},{52,30}})));
        equation
          connect(rightHeartInflow, Ltc.q_in) annotation (Line(
              points={{-100,40},{-90,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Ltc.q_out, tricuspidValve.q_in) annotation (Line(
              points={{-70,40},{-48,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tricuspidValve.q_out, ventricularInteraction.rvflow)
            annotation (Line(
              points={{-28,40},{6,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ventricularInteraction.rvflow, Lpv.q_in) annotation (Line(
              points={{6,40},{42,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lpv.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{62,40},{66,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, rightHeartOutflow) annotation (Line(
              points={{86,40},{100,40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, ventricularInteraction.Pth) annotation (Line(
              points={{53.25,25},{56,25},{56,15.16},{30,15.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ventricularInteraction.frequency, HR.y) annotation (Line(
              points={{-18,15.16},{-26,15.16},{-26,15},{-34,15}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Lmt.q_in, leftHeartInflow) annotation (Line(
              points={{88,-14},{94,-14},{94,-20},{100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lmt.q_out, mitralValve.q_in) annotation (Line(
              points={{68,-14},{60,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, ventricularInteraction.lvflow) annotation (
             Line(
              points={{40,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Lav.q_in, ventricularInteraction.lvflow) annotation (Line(
              points={{-30,-14},{6,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_in, Lav.q_out) annotation (Line(
              points={{-58,-14},{-50,-14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, leftHeartOutflow) annotation (Line(
              points={{-78,-14},{-84,-14},{-84,-20},{-100,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Heart;

        model Pulmonary
          extends Cardiovascular.Interfaces.Pulmonary;
        Physiolibrary.Hydraulic.Components.ElasticVesselElastance pulmonaryArteries(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=3.904e-05,
            Elastance=49195960.956135)
            annotation (Placement(transformation(extent={{-72,-18},{-34,18}})));
          Physiolibrary.Hydraulic.Components.Resistor Rpul(Resistance(displayUnit="(mmHg.s)/ml")=
                 20691634.526808) annotation (Placement(transformation(
                extent={{-15,-16},{15,16}},
                rotation=0,
                origin={-5,0})));
                  Physiolibrary.Hydraulic.Components.ElasticVesselElastance pulmonaryVeins(
            ZeroPressureVolume=0,
            useExternalPressureInput=true,
            volume_start=0.0008269,
            Elastance=973253.4281295)
            annotation (Placement(transformation(extent={{36,-18},{72,18}})));
          Physiolibrary.Types.Constants.PressureConst Pth(k=-533.28954966)
            annotation (Placement(transformation(extent={{-92,8},{-80,20}})));
        equation
          connect(q_in, pulmonaryArteries.q_in) annotation (Line(
              points={{-100,0},{-84,0},{-84,2.22045e-16},{-53,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArteries.q_in, Rpul.q_in) annotation (Line(
              points={{-53,2.22045e-16},{-42,2.22045e-16},{-42,4.44089e-16},{
                  -20,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rpul.q_out, pulmonaryVeins.q_in) annotation (Line(
              points={{10,4.44089e-16},{36,4.44089e-16},{36,2.22045e-16},{54,
                  2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, q_out) annotation (Line(
              points={{54,2.22045e-16},{80,2.22045e-16},{80,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Pth.y, pulmonaryArteries.externalPressure) annotation (Line(
              points={{-78.5,14},{-58,14},{-58,14.4},{-37.8,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmonaryArteries.externalPressure, pulmonaryVeins.externalPressure)
            annotation (Line(
              points={{-37.8,14.4},{16.1,14.4},{16.1,14.4},{68.4,14.4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Pulmonary;

        model Systemic
          extends Cardiovascular.Interfaces.Systemic;
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance aorta(
            ZeroPressureVolume=0,
            volume_start=0.0001241,
            Elastance=92165766.41999)
            annotation (Placement(transformation(extent={{36,-14},{68,18}})));
          Physiolibrary.Hydraulic.Components.Resistor Rsys(Resistance(displayUnit=
                 "(mmHg.s)/ml") = 145054757.50752) annotation (Placement(transformation(
                extent={{-16,-16},{16,16}},
                rotation=180,
                origin={-8,0})));
          Physiolibrary.Hydraulic.Components.ElasticVesselElastance venaCava(
            ZeroPressureVolume=0,
            volume_start=0.0002952,
            Elastance=786602.0857485)
            annotation (Placement(transformation(extent={{-72,-16},{-40,16}})));
        equation
          connect(aorta.q_in, q_in) annotation (Line(
              points={{52,2},{70,2},{70,0},{100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorta.q_in, Rsys.q_in) annotation (Line(
              points={{52,2},{20,2},{20,-2.22045e-15},{8,-2.22045e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rsys.q_out, venaCava.q_in) annotation (Line(
              points={{-24,1.77636e-15},{-40,1.77636e-15},{-40,2.22045e-16},{
                  -56,2.22045e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(venaCava.q_in, q_out) annotation (Line(
              points={{-56,2.22045e-16},{-80,2.22045e-16},{-80,0},{-100,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics), Icon(graphics={
                  Text(
                  extent={{-100,60},{100,100}},
                  lineColor={0,0,0},
                  textString="Smith")}));
        end Systemic;

        model ElasticWall
          Physiolibrary.Types.RealIO.PressureInput prv annotation (Placement(
                transformation(extent={{-26,32},{14,72}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-38,6})));
          Physiolibrary.Types.RealIO.PressureInput plv annotation (Placement(
                transformation(extent={{-26,-54},{14,-14}}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-52,-50})));
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{-2,-94},{18,-74}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={110,-46})));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(extent={{-112,-66},{-92,-46}}),
                                                           iconTransformation(extent={{-10,-10},
                    {10,10}},
                rotation=270,
                origin={-96,-56})));
                    parameter Physiolibrary.Types.Volume V0=0;
          Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance
            annotation (Placement(transformation(extent={{-24,42},{16,82}}),
                iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-96,6})));
        equation
          pressure = plv -prv;
          pressure = (volume-V0) /compliance;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                                 graphics={
                Text(
                  extent={{-30,26},{22,-4}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="prv"),
                Text(
                  extent={{-42,-38},{10,-68}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="plv"),
                Text(
                  extent={{26,-32},{102,-56}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="pressure"),
                Text(
                  extent={{-150,-26},{-70,-46}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="Volume"),
                Polygon(
                  points={{-100,-14},{-40,-34},{-6,-40},{8,-40},{40,-34},{100,
                      -14},{98,-14},{-100,-14}},
                  lineColor={0,0,255},
                  smooth=Smooth.None,
                  fillPattern=FillPattern.Forward,
                  fillColor={255,170,170}),
                Text(
                  extent={{-128,-10},{-60,-44}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Forward,
                  textString="compliance
"),             Text(
                  extent={{20,40},{166,-18}},
                  lineColor={0,0,255},
                  horizontalAlignment=TextAlignment.Left,
                  textString="  pressure = plv -prv;
  pressure = (volume-V0) /compliance;")}), Diagram(coordinateSystem(preserveAspectRatio=
                   false, extent={{-100,-100},{100,100}}), graphics));
        end ElasticWall;

        model ElasticVesselWithSVandP
          "elastic vessel computes aditionally stressed volume and pressure"
          extends Physiolibrary.Hydraulic.Components.ElasticVesselElastance;
          Physiolibrary.Types.RealIO.VolumeOutput StressedVolume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-88, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-44, 102})));
        equation
          StressedVolume = volume - zpv;
          annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end ElasticVesselWithSVandP;
      end Parts;

      model HemodynamicsSmithControl
        extends Controlled.System(
          redeclare ControlledParts.PulmonaryControl
            pulmonaryCirculation,
          redeclare replaceable ControlledParts.HeartControl
            heart,
          redeclare ControlledParts.SystemicControl
            systemicCirculation(venaCava(volume_start=0.0022952,
                ZeroPressureVolume=0.002), aorta(volume_start=0.0008841,
                ZeroPressureVolume=0.00076)),
          redeclare replaceable Model.Control.BloodVolumeControl
            longTermControl,
          redeclare ControlledParts.Baroreflex
            shortTermControl);
      /*    redeclare CardiovascularDevel.Model.Control.StenosisControl stenosisControl(
      venacavastenosis(InitialElastance=786602.0857485, FinalElastance=786602.0857485),
      AVBackFlowConductance(k(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-14),
      aorticstenosis(InitialResistance=2399802.97347, FinalResistance=2399802.97347)),*/

        annotation (experiment(
            StopTime=5,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=0.001));
      end HemodynamicsSmithControl;

      package ControlledParts
        extends Modelica.Icons.UtilitiesPackage;
        model PulmonaryControl
          extends Parts.Pulmonary(pulmonaryArteries(volume_start=5.904e-05,
                ZeroPressureVolume=2e-05), pulmonaryVeins(volume_start=
                  0.0015269, ZeroPressureVolume=0.0007));
          extends Controlled.Pulmonary;
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{72,-42},{92,-22}})));
        equation
          connect(pulmonaryArteries.volume, add.u2) annotation (Line(
              points={{-41.6,-18},{-40,-18},{-40,-38},{70,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmonaryVeins.volume, add.u1) annotation (Line(
              points={{64.8,-18},{66,-18},{66,-26},{70,-26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{93,-32},{92,-32},{92,24},{-80,24},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-25,58},{-25,58}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PulmonaryControl;

        model SystemicControl
          extends Parts.Systemic(venaCava(
                useComplianceInput=true), Rsys(useConductanceInput=true));
          extends Controlled.Systemic;
          Model.Control.AortaPressureMeasurement
            aortaPressureMeasurement
            annotation (Placement(transformation(extent={{4,10},{24,30}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                  extent={{72,-34},{92,-14}})));
        equation
          connect(venaCava.compliance, busConnector.venacavacompliance)
            annotation (Line(
              points={{-56,12.8},{-56,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Rsys.cond, busConnector.peripheralconductance) annotation (
              Line(
              points={{-8,-9.6},{-4,-9.6},{-4,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{5,1},{5,1}}));
          connect(Rsys.q_in, aortaPressureMeasurement.q_in) annotation (Line(
              points={{8,0},{8,8},{10,8},{10,14}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aortaPressureMeasurement.Pmean, busConnector.aortameanpressure)
            annotation (Line(
              points={{21,23},{26,23},{26,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aorta.volume, add.u1) annotation (Line(
              points={{61.6,-14},{64,-14},{64,-20},{70,-20},{70,-18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.u2, venaCava.volume) annotation (Line(
              points={{70,-30},{-46.4,-30},{-46.4,-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, busConnector.systemicBloodVolume) annotation (Line(
              points={{93,-24},{92,-24},{92,34},{-80,34}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-25,60},{-25,60}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end SystemicControl;

        model HeartControl

          extends Controlled.Heart;
          extends Parts.Heart(redeclare Types.Constants.FrequencyControl
                                               HR,
            redeclare VIVolume
              ventricularInteraction(rightVentricle(drive(useEs_extInput=true))),
            aorticValve(useLimitationInputs=false));
        equation
        //  connect(volume, busConnector.heartvolume);
          connect(HR.c, busConnector.heartrate) annotation (Line(
              points={{-48,15},{-54,15},{-54,18},{-66,18},{-66,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularInteraction.busConnector, busConnector) annotation (Line(
              points={{-9.6,27.04},{-9.6,86},{-98,86}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(ventricularInteraction.volume, busConnector.heartBloodVolume)
            annotation (Line(
              points={{17.4,26.5},{17.4,86},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));
        end HeartControl;

        model VIVolume
          extends Parts.VentricularInteraction(redeclare VentricleControlled
              rightVentricle(drive(useEs_extInput=true)), redeclare
              VentricleControlled leftVentricle(                        drive(
                  useEs_extInput=true)));
          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(extent={{34,-44},{54,-24}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={38,50})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{2,-40},{16,-26}})));
          Physiolibrary.Types.BusConnector busConnector annotation (Placement(
                transformation(extent={{-72,32},{-32,72}}), iconTransformation(extent={{
                    -72,32},{-32,72}})));
        equation
          connect(rightVentricle.volume, add.u2) annotation (Line(
              points={{-9,36},{-10,36},{-10,-37.2},{0.6,-37.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.volume, add.u1) annotation (Line(
              points={{-9,-12},{-9,-28.8},{0.6,-28.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, volume) annotation (Line(
              points={{16.7,-33},{26.35,-33},{26.35,-34},{44,-34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(leftVentricle.hydrauliccompliance, busConnector.lvcompliance)
            annotation (Line(
              points={{-15.5,-23.8},{-15.5,-40},{-52,-40},{-52,52}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(rightVentricle.hydrauliccompliance, busConnector.rvcompliance)
            annotation (Line(
              points={{-15.5,47.8},{-15.5,52},{-52,52}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={Text(
                  extent={{46,60},{98,42}},
                  lineColor={0,0,255},
                  textString="volume")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{-40,56},{24,52}},
                  lineColor={0,0,255},
                  textString="rvcompliance ->rightVentricle.drive.Es_ext"),
                Text(
                  extent={{-62,-42},{2,-46}},
                  lineColor={0,0,255},
                  textString="lvcompliance ->leftVentricle.drive.Es_ext")}));
        end VIVolume;

        model Baroreflex
          extends Model.Control.Baroreflex(baroreceptor(
              PAOmedia=12486.574838127,
              HR0Param=1.2,
              EV0right=77993596.637775,
              EV0left=383835153.36779,
              EV0venacava=1.2713543710584e-06,
              RS0=145054757.50752));
        end Baroreflex;

        model AorticValveStenosisScenario
          extends Model.Scenario.StenosisControl(venacavastenosis(
                InitialElastance=786602.0857485, FinalElastance=786602.0857485),
            aorticstenosis(
              duration=60,
              InitialResistance(displayUnit="(mmHg.s)/ml") = 2399802.97347,
              FinalResistance(displayUnit="(mmHg.s)/ml") = 10665790.9932),
            mitralvalvestenosis(InitialResistance=2106493.721157,
                FinalResistance=2106493.721157),
            AVgon(k(displayUnit="ml/(mmHg.s)") = 1.2000985213531e-12),
            mvgoff(k(displayUnit="ml/(mmHg.s)") = 1.2000985213531e-12));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveStenosisScenario;

        model AorticValveHeartControl
          extends HeartControl(aorticValve(useLimitationInputs=true));
        equation
          connect(aorticValve.Goff, busConnector.avbackflowconductance)
            annotation (Line(
              points={{-74,-4},{-74,2},{-98,2},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(aorticValve.Gon, busConnector.avoutflowresistance)
            annotation (Line(
              points={{-62,-4},{-62,6},{-98,6},{-98,86}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end AorticValveHeartControl;

        model VentricleControlled
          extends Parts.Ventricle(drive(useEs_extInput=true));
          Physiolibrary.Types.RealIO.HydraulicComplianceInput
            hydrauliccompliance annotation (Placement(transformation(extent={{
                    -12,18},{28,58}}), iconTransformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-33,49})));
        equation
          connect(drive.Es_ext, hydrauliccompliance) annotation (Line(
              points={{-32,11.6},{-56,11.6},{-56,38},{8,38}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                    {-60,-60},{60,40}}), graphics), Diagram(coordinateSystem(
                  preserveAspectRatio=false, extent={{-60,-60},{60,40}}),
                graphics));
        end VentricleControlled;
      end ControlledParts;

      model StenosisAorticValve
        extends HemodynamicsSmithControl(redeclare
            ControlledParts.AorticValveHeartControl heart, redeclare
            ControlledParts.AorticValveStenosisScenario scenarioControl(AVgon(k(
                  displayUnit="ml/(mmHg.s)"))));
        annotation (experiment(StopTime=120, __Dymola_NumberOfIntervals=5000));
      end StenosisAorticValve;

      model Bleeding
        extends HemodynamicsSmithControl(redeclare
            Scenario.BleedingTransfusionScenario scenarioControl(
            Tbd=300,
            BloodLoss=0.0005,
            Tts=600,
            Ttd=600,
            BloodTrans=0), longTermControl(redeclare
              Control.BloodVolume.RBCBleeding redBloodCells, redeclare
              Control.BloodVolume.PlasmaBleeding plasma));
        annotation (experiment(StopTime=3600, __Dymola_NumberOfIntervals=5000));
      end Bleeding;
    end Smith2004;

    package Control "models of control mechanism and additional components"
      extends Modelica.Icons.VariantsPackage;
      package EPO_Physiolibrary = Physiolibrary(Types(
        redeclare type Concentration = Real(quantity="EPO Concentration",unit="1/m3",displayUnit="iu/l"),
        redeclare type AmountOfSubstance = Real(quantity="EPO AmountOfSubstance",unit="1",displayUnit="iu"),
        redeclare type MolarFlowRate = Real(quantity="EPO Flow Rate",unit="1/s",displayUnit="iu/min"),
        redeclare type MolarEnergy = Real(quantity="EPO Internal Energy",unit="J",displayUnit="cal/iu")));

      model Baroreflex
        extends Cardiovascular.Controlled.ShortTermControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{60,70},{100,110}})));*/
        Baroreceptor baroreceptor(activationDelay(displayUnit="s"))
          annotation (Placement(transformation(extent={{18,-54},{80,18}})));
      equation
        connect(baroreceptor.RS, busConnector.peripheralconductance)
          annotation (Line(
            points={{25.44,-26.64},{-8,-26.64},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evright, busConnector.rvcompliance)
          annotation (Line(
            points={{25.44,-14.4},{-8,-14.4},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evleft, busConnector.lvcompliance) annotation (
           Line(
            points={{24.2,-2.88},{-8,-2.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.HR, busConnector.heartrate) annotation (Line(
            points={{23.89,9},{-8,9},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.PAo, busConnector.aortameanpressure)
          annotation (Line(
            points={{25.44,-47.52},{-8,-47.52},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(baroreceptor.evenacava, busConnector.venacavacompliance)
          annotation (Line(
            points={{24.82,-38.88},{-8,-38.88},{-8,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics),
                                       Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics));
      end Baroreflex;

      model Baroreceptor
        Modelica.Blocks.Continuous.TransferFunction H1(a = {15, 1}, b = {1});
        Modelica.Blocks.Continuous.TransferFunction H2(a = {15, 1}, b = {0.048});
        Modelica.Blocks.Continuous.TransferFunction H3(a = {15, 1}, b = {0.154});
        // from orign.mo(a={30,1}, b={0.194});
        Modelica.Blocks.Continuous.TransferFunction H4(a = {2, 1}, b = {0.1});
        Modelica.Blocks.Nonlinear.DeadZone deadZone(uMax = 0.1, uMin = -0.1);
        parameter Physiolibrary.Types.Pressure PAOmedia = 13465.561128915;
        parameter Physiolibrary.Types.Frequency HR0Param = 1.3333333333333 annotation(Dialog(enable = not useConductanceInput));
        parameter Boolean useHRInput = false
          "=true, if external HR value is used"                                    annotation(Evaluate = true, HideResult = true, choices(__Dymola_checkBox = true), Dialog(group = "External inputs/outputs"));
        Physiolibrary.Types.RealIO.FrequencyInput cond(start = HR0Param) = HR0 if useHRInput annotation(Placement(transformation(extent = {{-62, 36}, {-22, 76}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {26, 76})));
        Physiolibrary.Types.RealIO.PressureInput PAo "pressure in aorta" annotation(Placement(transformation(extent = {{2, -58}, {42, -18}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 0, origin = {-76, -82})));
        Physiolibrary.Types.RealIO.FrequencyOutput HR
          "heart rate - compatible with Const block"                                             annotation(Placement(transformation(extent = {{-76, 60}, {-56, 80}}), iconTransformation(extent = {{-15, -15}, {15, 15}}, rotation = 180, origin = {-81, 75})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evright annotation(Placement(transformation(extent = {{80, 22}, {100, 42}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, 10})));
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evleft annotation(Placement(transformation(extent = {{78, -18}, {98, 2}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-80, 42})));
        Physiolibrary.Types.HydraulicElastance evrightref;
        Physiolibrary.Types.HydraulicElastance evleftref;
        Physiolibrary.Types.RealIO.HydraulicComplianceOutput evenacava annotation(Placement(transformation(extent = {{78, -54}, {98, -34}}), iconTransformation(extent = {{-16, -16}, {16, 16}}, rotation = 180, origin = {-78, -58})));
        Physiolibrary.Types.RealIO.HydraulicConductanceOutput RS annotation(Placement(transformation(extent = {{80, -90}, {100, -70}}), iconTransformation(extent = {{-14, -14}, {14, 14}}, rotation = 180, origin = {-76, -24})));
        parameter Physiolibrary.Types.HydraulicElastance EV0right = 103991462.1837, EV0left = 106657909.932;
        parameter Physiolibrary.Types.HydraulicCompliance EV0venacava = 1.8751539396141e-006;
        parameter Physiolibrary.Types.HydraulicResistance RS0(displayUnit = "(mmHg.s)/ml") = 81793284.67910001;
        parameter Physiolibrary.Types.Time activationDelay = 15;
        //  parameter Physiolibrary.Types.HydraulicConductance Conductance=0
      protected
        Physiolibrary.Types.Frequency HR0;
      //  parameter Physiolibrary.Types.HydraulicCompliance ECV0;
      equation
        if not useHRInput then
          HR0 = HR0Param;
        end if;
        if time > activationDelay then
          deadZone.u = (PAOmedia - PAo) / 133.322387415 / 2;
        else
          deadZone.u = 0;
        end if;
        H1.u = deadZone.y;
        HR = (HR0 * 60 + H1.y) / 60;
        //recount to SI Hz
        H2.u = deadZone.y;
        evright = 1 / (EV0right + H2.y * 1000000.0 * 133.322387415);
        evrightref = 1 / evright;
        //recount to SI
        evleft = 1 / (EV0left + H2.y * 1000000.0 * 133.322387415);
        evleftref = 1 / evleft;
        //recount to SI
        H3.u = deadZone.y;
        evenacava = EV0venacava+H3.y * 1e-006 / 133.322387415;
        H4.u = deadZone.y;
        RS = 1 / (RS0 + H4.y * 1000000.0 * 133.322387415);
        //recount to conductance
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent=  {{28, 102}, {-68, -110}}, lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent={{
                    -66,74},{18,58}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "HR"), Text(extent={{
                    -58,12},{22,-2}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "EVright"), Text(extent={{
                    -62,44},{26,30}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {0, 0, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "EVleft"), Text(extent={{
                    -80,-60},{34,-72}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "ECV"), Text(extent={{
                    -62,-20},{16,-34}},                                                                                                    lineColor=  {0, 0, 127}, fillColor=  {255, 170, 170},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "RPS"), Text(extent={{
                    -60,-84},{-16,-94}},                                                                                                    lineColor=  {0, 0, 127}, textString=  "PAo"), Text(extent=  {{-98, -104}, {116, -120}}, lineColor=  {0, 0, 0},
                  lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end Baroreceptor;

      package BloodVolume
        extends Modelica.Icons.UtilitiesPackage;

        model KidneyPO2Estimate
          Physiolibrary.Types.RealIO.PressureOutput pressure annotation (Placement(
                transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{82,-10},
                    {102,10}})));
        parameter Real MaxPo2 = 60;
          Physiolibrary.Types.RealIO.FractionInput hematocrit annotation (
              Placement(transformation(extent={{-100,-20},{-60,20}}),
                iconTransformation(extent={{-100,-20},{-60,20}})));
          Physiolibrary.Blocks.Factors.Spline spline(
                       Yscale=101325/760, data=[0,0,0; 0.4,35,1; 0.6,60,0])
            annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
          Physiolibrary.Types.Constants.OneConst one
            annotation (Placement(transformation(extent={{-26,8},{-18,16}})));
        equation
          connect(hematocrit, spline.u) annotation (Line(
              points={{-80,0},{-12,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(spline.y, pressure) annotation (Line(
              points={{-4,-4},{-4,-6},{72,-6},{72,0},{92,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(one.y, spline.yBase) annotation (Line(
              points={{-17,12},{-4,12},{-4,2}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-80,80},{82,-60}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,255,167}),                                   Text(
                  extent={{-184,-58},{214,-94}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end KidneyPO2Estimate;

        model Erythropoetin
          EPO_Physiolibrary.Chemical.Components.Substance erythropoetin(useNormalizedVolume = false,
              solute_start(displayUnit="mol") = 79.5)                                                                                               annotation(Placement(transformation(extent = {{-30, 6}, {2, 40}})));
          EPO_Physiolibrary.Chemical.Sources.UnlimitedSolutePump secretion(useSoluteFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {144, 62})));
          EPO_Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure annotation(Placement(transformation(extent={{-21,-21},
                    {21,21}},
                rotation=90,
                origin={-15,81})));
          EPO_Physiolibrary.Types.RealIO.ConcentrationOutput concentration annotation(Placement(transformation(extent={{42,72},
                    {62,92}}),                                                                                                   iconTransformation(extent = {{-21, -21}, {21, 21}}, rotation = 0, origin = {121, 3})));
          Physiolibrary.Types.RealIO.PressureInput kidney_po2 annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 180, origin = {138, -2}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {-60, -80})));
          Physiolibrary.Blocks.Factors.Spline PO2Effect(data = {{0.0, 4.0, 0}, {35.0, 0.0, -0.14}, {60.0, -1.0, 0}}, Xscale = 101325 / 760) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {102, -2})));
          Physiolibrary.Blocks.Math.Power pow annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {98, 16})));
          Physiolibrary.Blocks.Factors.Normalization CounEffect annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 90, origin={58,46})));
          Physiolibrary.Blocks.Factors.Normalization FunctionEffect annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {78, 46})));
          Physiolibrary.Blocks.Factors.Normalization PO2Effect1 annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {98, 46})));
          Physiolibrary.Types.Constants.FractionConst Kidney_Nefron_Count_TotalxNormal(k=1)   annotation(Placement(transformation(extent={{26,16},
                    {42,26}})));
          Physiolibrary.Types.Constants.FractionConst KidneyFunctionEffect(k=1)   annotation(Placement(transformation(extent={{60,10},
                    {76,20}})));
          Physiolibrary.Types.RealIO.VolumeInput ecf_volume annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 0, origin = {-58, 70}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {0, -80})));
          Modelica.Blocks.Math.Gain VODIST(k = 0.4) annotation(Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-58, 46})));
          Physiolibrary.Types.Constants.FractionConst hormoneFlowFraction(k=1)   annotation(Placement(transformation(extent={{72,-28},
                    {88,-20}})));
          Cardiovascular.Model.Control.EPO_Physiolibrary.Types.Constants.MolarFlowRateConst
            molarFlowRate(k(displayUnit="mol/min") = 0.011166666666667)
            annotation (Placement(transformation(extent={{30,40},{44,50}})));
          EPO_Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                      clearance(
              useSoluteFlowInput=true)   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={2,-30})));
          Modelica.Blocks.Math.Gain K(k(unit="1/s")=0.00555/60) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={-4,-8})));
        equation
          connect(secretion.q_out, erythropoetin.q_out) annotation(Line(points = {{134, 62}, {8, 62}, {8, 23}, {-14, 23}}, color = {107, 45, 134}, thickness = 1, smooth = Smooth.None));
          connect(pow.y, PO2Effect1.u) annotation(Line(points = {{98, 22.6}, {98, 38}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(CounEffect.y, FunctionEffect.yBase) annotation(Line(points = {{62, 46}, {76, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(FunctionEffect.y, PO2Effect1.yBase) annotation(Line(points = {{82, 46}, {96, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(Kidney_Nefron_Count_TotalxNormal.y, CounEffect.u) annotation(Line(points={{44,21},
                  {58,21},{58,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(KidneyFunctionEffect.y, FunctionEffect.u) annotation(Line(points={{78,15},
                  {78,38}},                                                                                             color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.y, pow.exponent) annotation(Line(points = {{102, 2}, {102, 10}, {101.6, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(kidney_po2, PO2Effect.u) annotation(Line(points = {{138, -2}, {110, -2}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect.yBase, hormoneFlowFraction.y) annotation(Line(points={{102,-4},
                  {102,-24},{90,-24}},                                                                                 color = {0, 0, 127}, smooth = Smooth.None));
          connect(molarFlowRate.y, CounEffect.yBase) annotation(Line(points = {{45.75, 45}, {50.875, 45}, {50.875, 46}, {56, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(erythropoetin.solutionVolume, VODIST.y) annotation(Line(points = {{-20.4, 29.8}, {-20.4, 46}, {-51.4, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(PO2Effect1.y, secretion.soluteFlow) annotation(Line(points = {{102, 46}, {140, 46}, {140, 58}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(ecf_volume, VODIST.u) annotation(Line(points = {{-58, 70}, {-68, 70}, {-68, 46}, {-65.2, 46}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(concentrationMeasure.concentration, concentration) annotation (
              Line(
              points={{1.8,81},{4,81},{4,82},{52,82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.q_out, concentrationMeasure.q_in) annotation (Line(
              points={{-14,23},{-14,81},{-15,81}},
              color={107,45,134},
              thickness=1,
              smooth=Smooth.None));
          connect(clearance.q_in, erythropoetin.q_out) annotation (Line(
              points={{-8,-30},{-34,-30},{-34,23},{-14,23}},
              color={107,45,134},
              thickness=1,
              smooth=Smooth.None));
          connect(erythropoetin.solute, K.u) annotation (Line(
              points={{-4.4,6},{-4,6},{-4,-0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(K.y, clearance.soluteFlow) annotation (Line(
              points={{-4,-14.6},{6,-14.6},{6,-26}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                        graphics={  Text(extent=  {{-180, 98}, {200, 60}}, lineColor=  {0, 0, 255}, textString=  "%name"), Bitmap(
                  extent={{-88,62},{102,-80}},
                  imageSource=
                      ""
                       +
                      ""
                       +
                      ""
                       +
                      "0HZQZUEVZVIxnsewM/n6j+UwhecR3G7CNzuwE0tlN8iFEJuuDDxAqr+TFD6bwG6yJN+pscuPxASBpDTErijdjLPghKEzpNLKBLAX0u8c57A7r4+/NQHWeKMwTkWLcsfYWXmB7AIPEyG2i1jE0Z6NrirKrJDjYm7S284jeHgKr0df/7HkFfxiKn3AP+zLNkjqC6FNCxPPqWBWwqSEs0w+fpW0pmZHeJzJ+20PGgW4FhpNUVYUjlnjyCqZ/k5y2Qt+PK5/H2oCrPHGVYA7Y3h71WjsKukLrjfhYAovBstd26iQzYpL588Ung3gL58Kkf4mMC3h+wOp/u40hAwrLUfd3UQqwvLvKdPiUmzurzfE7Tkw4mltCDZQRgeopTKc5nAYw4fHcFivdNQEWOPNw+5EAknu9mUSXBpD05tdyQR5fC5T3jUjMtYIGR5N4a9eiATmN4lUwZO5HIc9W/py5RVh9j+EvbnIWlqekB1mNS52hRAdy/QQS+kZ/q9j+JvDr+691agJsMYbgnkOnxxJVXSzK4amWLI58faq5H3sT2Q67JipaT+UY/LPT/7xiENpCXf/dY7SD0eiJYxNP3Ajl1W3wFke4S9S+Ok5/NW+vF+jJsAabyguYiHBfkNS35qeHHttWyzxVxsieHZs6Rd2AvjPX8gQ5LcRSQmfX8DBHN5dkbzh1cCkzGlZfftiJC4xae1bVRNgjRqjVPqB39qE2yvi9uk7y/Rv15Z/Kw2PzsTo4Ld5dUxpyQ++SOHhULZCbEuGH7NcqsAaNQHWqAFIr+3RuQQh+Y7EXm74y0Dx0ljK7E1k8PHk4nfjeSktk95J/V9coybAGn8fZhl8tCdDg3kOt7qyIeLaIhQ+nML3d5b3qVHjdxT11mONX47AkWPwnZ746FnI0OP5UIYhdcZjjZoAa7wRvyXWFYuqGjVqAqxRo0aN323Y9UtQo0aNmgBr1KhRoybAGjVq1KgJsEaNGjVqAqxRo0aNmgBr1KhRoybAGjVq1KgJsEaNGjVqAqxRo0aNmgBr1KhRoybAGjVq1Pjtxv8BS93cFi44VmQAAABKelRYdHNvZnR3YXJlAAB42vPMTUxP9U1Mz0zOVjDTM9YzVzCw1Dcw0TewUAi0UMgoKSmw0tcvLy/Xy8xNTE/NTUzPTM7Wyy9KBwDYmhGYfnuzVgAAACF6VFh0VGh1bWI6OkRvY3VtZW50OjpQYWdlcwAAeNozBAAAMgAyDBLihAAAACF6VFh0VGh1bWI6OkltYWdlOjpoZWlnaHQAAHjaMzezAAABTACmAmIHcgAAACF6VFh0VGh1bWI6OkltYWdlOjpXaWR0aAAAeNozNDAyAQAB8ADI6yd/qAAAACJ6VFh0VGh1bWI6Ok1pbWV0eXBlAAB42svMTUxP1S/ISwcAEXsDeF85R+IAAAAgelRYdFRodW1iOjpNVGltZQAAeNozNDQ3M7QwMzKyBAALKAIMn+/EFwAAAB56VFh0VGh1bWI6OlNpemUAAHjaMzEy0rOwNMxOAgAJpgI2toGxfgAAAE96VFh0VGh1bWI6OlVSSQAAeNoFwTkOgDAMBMAfsaKgoechVmJgRXwoBCF+z8zOpisAmA882ULqgpcXUysFJczCbwhkxta/cfbIoA76lH78td4WuK/dBm4AAAAASUVORK5CYII=",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/320px-Erythropoietin.png")}),                                                            Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{160,100}}),                                                                                                    graphics));
        end Erythropoetin;

        model KidneyFluidBalance
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput urineoutflowrate annotation(Placement(transformation(extent = {{40, -80}, {60, -60}}), iconTransformation(extent = {{40, -80}, {60, -60}})));
          Physiolibrary.Types.RealIO.VolumeInput plasmaticVolume annotation(Placement(transformation(extent = {{46, -12}, {86, 28}}), iconTransformation(extent = {{-13, -13}, {13, 13}}, rotation = 180, origin = {47, -7})));
          parameter Physiolibrary.Types.VolumeFlowRate Kud = 4.6666666666667e-08; //dehydratation
          parameter Physiolibrary.Types.VolumeFlowRate Kuo = 3.4666666666667e-07; //overhydratation
          parameter Physiolibrary.Types.VolumeFlowRate Jun = 1.6666666666667e-08;
          discrete Physiolibrary.Types.Volume Vpn;
        equation
          when {initial()} then
              Vpn = plasmaticVolume;
          end when;
          if plasmaticVolume < Vpn then
            urineoutflowrate = Kud * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          else
            urineoutflowrate = Kuo * ((plasmaticVolume - Vpn) / Vpn) + Jun;
          end if;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-82, 82}, {80, -80}},
                  imageSource=
                      "",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/kidney.png")}));
        end KidneyFluidBalance;

        model RedBloodCells2
          Erythropoetin erythropoetin annotation (Placement(transformation(
                extent={{-11,-10},{11,10}},
                rotation=0,
                origin={-77,-4})));
          Physiolibrary.Population.Components.Population RBC
            annotation (Placement(transformation(extent={{-18,-26},{2,-6}})));
          Physiolibrary.Population.Sources.Growth erythropoiesis(useChangeInput=
               true) annotation (Placement(transformation(extent={{-46,-30},{
                    -26,-10}})));
          Physiolibrary.Population.Sources.Growth transfusion
            annotation (Placement(transformation(extent={{-38,14},{-18,34}})));
          Physiolibrary.Population.Components.Mortality degradation(LifeTime(
                displayUnit="d") = 10368000)
            annotation (Placement(transformation(extent={{6,-30},{26,-10}})));
          Physiolibrary.Population.Sources.Loss hemorrhage
            annotation (Placement(transformation(extent={{6,16},{26,36}})));
        Physiolibrary.Types.Constants.PopulationChangeConst RBCBaseSecretionRate(
            k=1.16e6) "13.7 ml/day (12e12 cells == 2.4 L)"
          annotation (Placement(transformation(extent={{-54,4},{-38,16}})));
          Physiolibrary.Blocks.Factors.SplineLag      EPOEffect(
            HalfTime=3*86400*Modelica.Math.log(2),
            data={{0.0,0.0,0},{1.3,1.0,1.0},{4.0,4.0,0}},
            stateName="[EPO]Delay.Effect",
          UsePositiveLog10=true,
          Xscale=1e3) "20 miu/ml = 20e3 iu/m3"
            annotation (Placement(transformation(extent={{-46,-14},{-26,6}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-118,10},{-78,50}})));
          Modelica.Blocks.Math.Gain RBCVol(k(unit="m3")=2.4e-3/12e12)
            "12e12 cells == 2.4 L"
          annotation (Placement(transformation(
              extent={{5,-5},{-5,5}},
              rotation=0,
              origin={-35,-41})));
          Modelica.Blocks.Math.Gain InitialPopulation(k=12e12/2.4e-3)
            "12e12 cells == 2.4 L" annotation (Placement(transformation(
                extent={{5,-5},{-5,5}},
                rotation=90,
                origin={-7,7})));
        initial algorithm
        equation
          connect(erythropoiesis.port_b, RBC.port) annotation (Line(
              points={{-26,-20},{-16,-20},{-16,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(transfusion.port_b, RBC.port) annotation (Line(
              points={{-18,24},{-18,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(degradation.port_a, RBC.port) annotation (Line(
              points={{6.2,-20},{4,-20},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.port_a, RBC.port) annotation (Line(
              points={{6,26},{4,26},{4,-16},{-8,-16}},
              color={0,127,127},
              thickness=1,
              smooth=Smooth.None));
          connect(erythropoiesis.populationChange, EPOEffect.y) annotation (
              Line(
              points={{-36,-16},{-36,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCBaseSecretionRate.y, EPOEffect.yBase) annotation (Line(
              points={{-36,10},{-36,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(EPOEffect.u, erythropoetin.concentration) annotation (Line(
              points={{-44,-4},{-64,-4},{-64,-3.7},{-69.3,-3.7}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(erythropoetin.kidney_po2, busConnector.Kidney_PO2)
            annotation (Line(
              points={{-84.6154,-12},{-96,-12},{-96,-20},{-98,-20},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{-9,-3},{-9,-3}}));
          connect(erythropoetin.ecf_volume, busConnector.ecfvolume) annotation (
             Line(
              points={{-79.5385,-12},{-79.5385,-24},{-98,-24},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{2,-6},{2,-6}}));
          connect(RBC.population, RBCVol.u) annotation (Line(
              points={{-2,-26},{-2,-41},{-29,-41}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RBCVol.y, busConnector.RBCVolume) annotation (Line(
              points={{-40.5,-41},{-98,-41},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialPopulation.u, busConnector.initialrbcvolume)
            annotation (Line(
              points={{-7,13},{-7,30},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                        graphics={  Bitmap(extent=  {{-78, 102}, {80, -56}},
                  imageSource=
                      "",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/redbloodcells3.png"),                                                                                                    Text(extent={{
                      -162,-36},{66,-66}},                                                                                                    lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-120,
                    -100},{100,100}}),                                                                                                    graphics));
        end RedBloodCells2;

        model Plasma2
          Physiolibrary.Osmotic.Sources.SolventInflux transfusion(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-44,-38},
                    {-24,-18}})));
          Physiolibrary.Osmotic.Sources.SolventOutflux hemorrhage(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation = 180, origin={-34,-54})));
          Physiolibrary.Osmotic.Sources.SolventInflux IVDrip(useSolutionFlowInput = false) annotation(Placement(transformation(extent={{-44,-48},
                    {-24,-28}})));
          Physiolibrary.Osmotic.Sources.SolventInflux FoodAndDrink(useSolutionFlowInput = false,
              SolutionFlow(displayUnit="l/day") = 2.4305555555556e-08)                                                                                       annotation(Placement(transformation(extent={{-10,-10},
                    {10,10}},                                                                                                    rotation=0,     origin={-34,-10})));
          Physiolibrary.Osmotic.Sources.SolventInflux Metabolism(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 3.4722222222222e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={26,-28})));
          Physiolibrary.Osmotic.Sources.SolventOutflux SkinAndLungsLoss(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.0416666666667e-08) annotation(Placement(transformation(extent={{-11,-11},
                    {11,11}},                                                                                                    rotation = 0, origin={53,-27})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Urine(SolutionFlow(displayUnit = "ml/day") = 1.7361111111111e-08, useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={0,-28})));
          Physiolibrary.Osmotic.Sources.SolventOutflux Feces(useSolutionFlowInput = false, SolutionFlow(displayUnit = "ml/day") = 1.1574074074074e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={0,-8})));
          Physiolibrary.Osmotic.Components.Membrane capillaryMembrane(
            HydraulicPressureIn(displayUnit="mmHg") = 2359.8062572455,
            cond(displayUnit="m3/(Pa.s)") = 3.7265559293265e-11,
            HydraulicPressureOut=-549.2882361498,
            T(displayUnit="K"))                                                                                                     annotation(Placement(transformation(extent={{4,-70},
                    {24,-50}})));
          Physiolibrary.Osmotic.Components.OsmoticCell interstitialFluid(
            NumberOfMembraneTypes=2,
            volume_start=0.01175,
            ImpermeableSolutes={0.0061,3.1})                                                                                  annotation(Placement(transformation(extent={{26,-68},
                    {46,-48}})));
          Modelica.Blocks.Math.Add add1          annotation(Placement(transformation(extent={{46,-76},
                    {56,-66}})));
          KidneyFluidBalance kidneyFluidBalance(
            Kud(displayUnit="ml/min"),
            Kuo(displayUnit="m3/s"),
            Jun(displayUnit="m3/s"))
            annotation (Placement(transformation(extent={{-10,-28},{48,24}})));
          Physiolibrary.Osmotic.Components.SolventFlux lymphatic(SolutionFlow(
                displayUnit="l/day") = 3.45e-08)                                                     annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin={11,-39})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{44,-24},{84,16}})));
          Physiolibrary.Osmotic.Components.OsmoticCell
                                                plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit,
            NumberOfMembraneTypes=2,
            ImpermeableSolutes(displayUnit="mmol") = {0.00356,0.82})
            annotation (Placement(transformation(extent={{-26,-70},{-6,-50}})));
        equation
          connect(capillaryMembrane.q_out, interstitialFluid.q_in[1]) annotation(Line(points={{24,-60},
                  {28,-60},{28,-58.5},{36,-58.5}},                                                                     color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(interstitialFluid.volume, add1.u1) annotation(Line(points={{42,-68},
                  {45,-68}},                                                                                     color = {0, 0, 127}, smooth = Smooth.None));
          connect(interstitialFluid.q_in[1], lymphatic.q_in) annotation(Line(points={{36,
                  -58.5},{36,-39},{18,-39}},                                                                             color = {127, 127, 0}, thickness = 1, smooth = Smooth.None));
          connect(kidneyFluidBalance.urineoutflowrate, Urine.solutionFlow)
            annotation (Line(
              points={{33.5,-20.2},{33.5,-21},{0,-21}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(plasma.q_in[1], capillaryMembrane.q_in) annotation (Line(
              points={{-16,-60.5},{-8,-60.5},{-8,-60},{4,-60}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(plasma.q_in[1], transfusion.q_out) annotation (Line(
              points={{-16,-60.5},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(lymphatic.q_out, transfusion.q_out) annotation (Line(
              points={{4,-39},{-16,-39},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(IVDrip.q_out, transfusion.q_out) annotation (Line(
              points={{-28,-38},{-16,-38},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(hemorrhage.q_in, transfusion.q_out) annotation (Line(
              points={{-28,-54},{-16,-54},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(FoodAndDrink.q_out, transfusion.q_out) annotation (Line(
              points={{-28,-10},{-16,-10},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Feces.q_in, transfusion.q_out) annotation (Line(
              points={{-6,-8},{-16,-8},{-16,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Urine.q_in, transfusion.q_out) annotation (Line(
              points={{-6,-28},{-28,-28}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(kidneyFluidBalance.plasmaticVolume, busConnector.plasmaVolume)
            annotation (Line(
              points={{32.63,-3.82},{62.315,-3.82},{62.315,-4},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(plasma.volume, busConnector.plasmaVolume) annotation (Line(
              points={{-10,-70},{-10,-78},{64,-78},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(add1.u2, plasma.volume) annotation (Line(
              points={{45,-74},{-10,-74},{-10,-70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, busConnector.ecfvolume) annotation (Line(
              points={{56.5,-71},{56.5,-70},{64,-70},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(Metabolism.q_out, lymphatic.q_in) annotation (Line(
              points={{32,-28},{36,-28},{36,-38},{34,-38},{34,-39},{18,-39}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          connect(SkinAndLungsLoss.q_in, lymphatic.q_in) annotation (Line(
              points={{46.4,-27},{36,-27},{36,-38},{34,-38},{34,-39},{18,-39}},
              color={127,127,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent=  {{-72, 72}, {80, -78}},
                  imageSource=
                      "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",
                  fileName=
                      "modelica://Cardiovascular/Resources/Icons/plazma.png"),                                                                                                    Text(extent=  {{-100, -62}, {96, -98}}, lineColor=  {0, 0, 255}, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics));
        end Plasma2;

        model VolumeRefill2
          "injects/removes volume if the pressure on connector is > 0"
          DesiredFlowrate                             desiredFlowrate(flowtime(
                displayUnit="s") = 1)
            annotation (Placement(transformation(extent={{-4,6},{16,26}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation(Placement(transformation(extent={{56,-26},
                    {76,-6}}),                                                                                                    iconTransformation(extent = {{82, -100}, {102, -80}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump volumeRefill(useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-14,-26},
                    {6,-6}})));
          Modelica.Blocks.Logical.Switch switch1
            annotation (Placement(transformation(extent={{14,-4},{0,10}})));
          Physiolibrary.Types.Constants.VolumeFlowRateConst zeroRefill(k(
                displayUnit="l/min") = 0) annotation (Placement(
                transformation(
                extent={{-8,-6},{8,6}},
                rotation=180,
                origin={38,-4})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{70,10},{50,30}})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=
               0)
            annotation (Placement(transformation(extent={{46,8},{30,24}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08) annotation (
             Placement(transformation(extent={{28,-26},{48,-6}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-32,18},{8,58}})));
        equation
        /*  if desiredFlowrate.volumeflowrate < 0 then
    volumeRefill.solutionFlow = -max(0, min(-desiredFlowrate.volumeflowrate, -maxflowrate));
  else
    volumeRefill.solutionFlow = desiredFlowrate.volumeflowrate;
  end if;*/
          connect(switch1.y, volumeRefill.solutionFlow) annotation (Line(
              points={{-0.7,3},{-4,3},{-4,-9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(desiredFlowrate.volumeflowrate, switch1.u1) annotation (Line(
              points={{15.9,18.5},{15.4,18.5},{15.4,8.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(zeroRefill.y, switch1.u3) annotation (Line(
              points={{28,-4},{28,-2.6},{15.4,-2.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, greaterThreshold.u) annotation (Line(
              points={{54,16},{47.6,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterThreshold.y, switch1.u2) annotation (Line(
              points={{29.2,16},{26,16},{26,3},{15.4,3}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(port_b, conductor.q_out) annotation (Line(
              points={{66,-16},{48,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(volumeRefill.q_out, conductor.q_in) annotation (Line(
              points={{6,-16},{28,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(desiredFlowrate.volume, busConnector.bloodVolume) annotation (
             Line(
              points={{7.4,23.2},{7.4,38},{-12,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{3,6},{3,6}}));
          connect(desiredFlowrate.desiredVolume, busConnector.desiredBloodVolume)
            annotation (Line(
              points={{-0.8,23.2},{-0.8,38},{-12,38}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{1,3},{1,3}}));
          connect(pressureMeasure.q_in, conductor.q_out) annotation (Line(
              points={{64,14},{64,0},{48,0},{48,-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Icon(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                        graphics={  Rectangle(extent=  {{-28, 36}, {34, -30}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}, radius=  4), Rectangle(extent=  {{-24, -28}, {-20, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Rectangle(extent=  {{30, -26}, {34, -62}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, fillColor=  {190, 0, 0}), Polygon(points=  {{6, -30}, {6, -38}, {8, -40}, {12, -46}, {10, -48}, {12, -52}, {14, -54}, {16, -56}, {14, -58}, {12, -62}, {14, -64}, {18, -66}, {20, -68}, {22, -74}, {24, -76}, {28, -80}, {34, -82}, {40, -86}, {48, -90}, {54, -92}, {60, -94}, {64, -94}, {80, -96}, {88, -96}, {88, -96}, {86, -94}, {80, -92}, {74, -92}, {64, -90}, {62, -90}, {56, -86}, {46, -84}, {40, -80}, {36, -78}, {30, -76}, {26, -70}, {24, -68}, {22, -64}, {18, -60}, {22, -54}, {16, -50}, {16, -46}, {18, -44}, {12, -38}, {10, -34}, {10, -30}, {6, -30}}, lineColor=  {127, 0, 0},
                    lineThickness=                                                                                                    1,
                    fillPattern=                                                                                                    FillPattern.Sphere, smooth=  Smooth.None, fillColor=  {190, 0, 0}), Rectangle(extent=  {{-28, 62}, {34, 56}}, lineColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 255, 255}), Rectangle(extent=  {{-28, 56}, {34, 32}}, lineColor=  {0, 0, 0}, fillColor=  {170, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Sphere, radius=  2,
                    lineThickness=                                                                                                    1),
                Text(
                  extent={{-100,100},{100,62}},
                  lineColor={0,0,255},
                  textString="%name")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                                                    graphics={Text(
                  extent={{10,38},{64,28}},
                  lineColor={0,0,255},
                  textString="Allow change only
if the pressure is 
above 0 mmHg.")}));
        end VolumeRefill2;

        model BloodProperties
          Modelica.Blocks.Math.Add DesiredBloodVolume
            annotation (Placement(transformation(extent={{8,-32},{28,-12}})));
          KidneyPO2Estimate kidneyPO2Estimate(spline(data=[0.3,0,0; 0.4,36.3,1;
                  0.5,60,0]))
            annotation (Placement(transformation(extent={{10,-96},{30,-76}})));
          Physiolibrary.Types.BusConnector busConnector
            annotation (Placement(transformation(extent={{-20,-8},{20,32}})));
          Modelica.Blocks.Math.Division hematocrit
            annotation (Placement(transformation(extent={{8,-64},{28,-44}})));
          Modelica.Blocks.Math.Add3 BloodVolume
            annotation (Placement(transformation(extent={{12,34},{26,48}})));
          Physiolibrary.Types.Constants.FractionConst initialHematocrit(k=0.4)
            annotation (Placement(transformation(extent={{-2,68},{6,76}})));
          Modelica.Blocks.Math.Product InitialRBCVolume
            annotation (Placement(transformation(extent={{14,64},{24,74}})));
          Modelica.Blocks.Math.Add InitialPlasmaVolume(k2=-1)
            annotation (Placement(transformation(extent={{16,82},{26,92}})));
        equation
          connect(DesiredBloodVolume.u2, busConnector.RBCVolume) annotation (Line(
              points={{6,-28},{0,-28},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.u1, busConnector.plasmaVolume) annotation (Line(
              points={{6,-16},{0,-16},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(DesiredBloodVolume.y, busConnector.desiredBloodVolume) annotation (
              Line(
              points={{29,-22},{34,-22},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.u2, DesiredBloodVolume.y) annotation (Line(
              points={{6,-60},{0,-60},{0,-38},{32,-38},{32,-22},{29,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.u1, DesiredBloodVolume.u2) annotation (Line(
              points={{6,-48},{6,-28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hematocrit.y, busConnector.hematocrit) annotation (Line(
              points={{29,-54},{34,-54},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hematocrit.y, kidneyPO2Estimate.hematocrit) annotation (Line(
              points={{29,-54},{32,-54},{32,-76},{0,-76},{0,-86},{12,-86}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(kidneyPO2Estimate.pressure, busConnector.Kidney_PO2) annotation (Line(
              points={{29.2,-86},{34,-86},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u3, busConnector.pulmonaryBloodVolume) annotation (Line(
              points={{10.6,35.4},{0,35.4},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u2, busConnector.systemicBloodVolume) annotation (Line(
              points={{10.6,41},{0,41},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.u1, busConnector.heartBloodVolume) annotation (Line(
              points={{10.6,46.6},{0,46.6},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(BloodVolume.y, busConnector.bloodVolume) annotation (Line(
              points={{26.7,41},{34,41},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{8,0},{8,0}}));
          connect(initialHematocrit.y, InitialRBCVolume.u1) annotation (Line(
              points={{7,72},{13,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialRBCVolume.u2) annotation (Line(
              points={{26.7,41},{26.7,62},{13,62},{13,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialRBCVolume.y, busConnector.initialrbcvolume)
            annotation (Line(
              points={{24.5,69},{34,69},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(InitialRBCVolume.y, InitialPlasmaVolume.u2) annotation (Line(
              points={{24.5,69},{24.5,78},{15,78},{15,84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BloodVolume.y, InitialPlasmaVolume.u1) annotation (Line(
              points={{26.7,41},{26.7,60},{-8,60},{-8,90},{15,90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InitialPlasmaVolume.y, busConnector.initialPlasmaVolume)
            annotation (Line(
              points={{26.5,87},{34,87},{34,12},{0,12}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-40,40},{40,-20}},
                  lineColor={0,0,255},
                  fillPattern=FillPattern.Solid,
                  fillColor={255,127,127}), Text(
                  extent={{-100,-20},{100,-60}},
                  lineColor={0,0,255},
                  fillColor={255,170,170},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end BloodProperties;

        model DesiredFlowrate "control total blood volume"
          parameter Physiolibrary.Types.Time flowtime = 0.1;
          parameter Boolean enabled = true;
          Physiolibrary.Types.RealIO.VolumeInput volume annotation(Placement(transformation(extent = {{16, 60}, {56, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {14, 72})));
          Physiolibrary.Types.RealIO.VolumeInput desiredVolume annotation(Placement(transformation(extent = {{-72, 56}, {-32, 96}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-68, 72})));
          Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeflowrate annotation(Placement(transformation(extent = {{88, 18}, {108, 38}}), iconTransformation(extent = {{82, 8}, {116, 42}})));
        equation
          volumeflowrate = if enabled then (desiredVolume - volume) / flowtime else 0;
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-98, 56}, {98, -8}}, lineColor=  {0, 0, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, fillColor=  {170, 213, 255}), Ellipse(extent=  {{-10, 52}, {46, 0}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{-92, 46}, {-38, 8}}, lineColor=  {0, 0, 255}, fillColor=  {255, 255, 170},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{-32, 30}, {-14, 24}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{56, 36}, {74, 30}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid), Rectangle(extent=  {{56, 24}, {74, 18}}, lineColor=  {0, 0, 255}, fillColor=  {0, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid)}));
        end DesiredFlowrate;

        model PlasmaBleeding
          extends Plasma2(
            hemorrhage(useSolutionFlowInput=true),
            transfusion(useSolutionFlowInput=true),
            plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit));
        equation
          connect(hemorrhage.solutionFlow, busConnector.plasmableed)
            annotation (Line(
              points={{-34,-61},{-34,-78},{64,-78},{64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(transfusion.solutionFlow, busConnector.plasmatransfusion)
            annotation (Line(
              points={{-34,-21},{-38,-21},{-38,-18},{-44,-18},{-44,18},{64,18},
                  {64,-4}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end PlasmaBleeding;

        model RBCBleeding
          extends RedBloodCells2(
            transfusion(useChangeInput=true),
            hemorrhage(useChangeInput=true),
            RBC(Simulation=Physiolibrary.Types.SimulationType.NoInit));
        equation
          connect(transfusion.populationChange, busConnector.RBCtransfusion)
            annotation (Line(
              points={{-28,28},{-28,30},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(hemorrhage.populationChange, busConnector.RBCbleed)
            annotation (Line(
              points={{16,30},{16,46},{-98,46},{-98,30}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-120,-100},{100,100}}), graphics));
        end RBCBleeding;
      end BloodVolume;

      model BloodVolumeControl
        extends Cardiovascular.Controlled.LongTermControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-40,2},{0,42}}), iconTransformation(
          extent={{-38,4},{2,44}})));*/
        replaceable BloodVolume.Plasma2
                            plasma(plasma(Simulation=Physiolibrary.Types.SimulationType.NoInit))
          constrainedby BloodVolume.Plasma2
          annotation (Placement(transformation(extent={{-28,26},{4,58}})));
                                   //(plasma(volume_start=bloodProperties.BloodVolume.y))
        replaceable BloodVolume.RedBloodCells2
                                   redBloodCells(RBC(population_start=2, Simulation=
                Physiolibrary.Types.SimulationType.NoInit)) constrainedby
          BloodVolume.RedBloodCells2
          annotation (Placement(transformation(extent={{-20,-18},{14,14}})));
        BloodVolume.BloodProperties bloodProperties annotation (Placement(
              transformation(rotation=0, extent={{-18,-40},{10,-12}})));
      initial algorithm
        plasma.plasma.state:=bloodProperties.InitialPlasmaVolume.y;
        redBloodCells.RBC.state:=redBloodCells.InitialPopulation.y;

      equation
        connect(plasma.busConnector, busConnector) annotation (Line(
            points={{-1.76,41.36},{20,41.36},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(redBloodCells.busConnector, busConnector) annotation (Line(
            points={{-16.6,2.8},{-16.6,12},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bloodProperties.busConnector, busConnector) annotation (Line(
            points={{-4,-24.32},{-4,-22},{20,-22},{20,12}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={Text(
                extent={{-24,-36},{80,-58}},
                lineColor={0,0,255},
                horizontalAlignment=TextAlignment.Left,
                fontSize=10,
                textString="initial algorithm 
  plasma.plasma.state:=bloodProperties.InitialPlasmaVolume.y;
  redBloodCells.RBC.state:=redBloodCells.InitialPopulation.y;")}),
                                                            Icon(
              coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end BloodVolumeControl;

      model MeanAortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Pmean(start=11300)
          "Mean pressure during heart cycle"                                          annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 6300) "sum of pressure of cardiac cycle";
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 0.75) "length of cardiac cycle";
      //protected
      equation
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 0.75;
          Pmean =  SumPressure / HP "mean pressure";
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}),
                         graphics={                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pmean")}));
      end MeanAortaPressureMeasurement;

      model BloodFlowMeasurement
        "measures flow, diastolic, systolic and mean pressure"
        extends Physiolibrary.Hydraulic.Sensors.FlowMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-82, -102})));
        PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-62, -102})));
        PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-42, -102})));
        Physiolibrary.Types.RealIO.VolumeOutput SV "systolic volume" annotation(Placement(transformation(extent = {{22, -42}, {42, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {32, -100})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput CO "Cardiac output" annotation(Placement(transformation(extent = {{50, -40}, {70, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {52, -100})));
        Physiolibrary.Types.Volume Volume(start = 0)
          "sum of volume through cyrdiac cycle";
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmin(start = 133000);
        Pressure Pmax(start = 0);
        discrete Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP "length of cardiac cycle";
        Boolean b;
        Physiolibrary.Types.RealIO.FrequencyInput HR annotation(Placement(transformation(extent = {{-14, 58}, {26, 98}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 100})));
      initial algorithm
        Ps := q_in.pressure;
        Pd := q_in.pressure;
        Pmean := q_in.pressure;
        HP := 1 / HR;
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        b = time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
        when {b} then
          T0 = time "initial time of current cardiac cycle";
          HP = 1 / HR;
          Ps = Pmax "systolic pressure = maximum pressure during cardiac cycle";
          Pd = Pmin "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean = if pre(HP) > 0 then SumPressure / pre(HP) else pre(Pd) * 2 / 3 + pre(Ps) * 1 / 3
            "mean pressure";
          SV = Volume
            "systolic volume is equal of total volume passed through this block";
          CO = SV / HP
            "cardiac output calculation from systolic volume and heart period";
          reinit(Volume, 0) "reinitialisation of volume";
          reinit(SumPressure, 0) "reinitialisation of sum pressure";
          reinit(Pmax, q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin, q_in.pressure) "reinitialisation minimal pressure";
        end when;
        der(Volume) = q_in.q;
        der(SumPressure) = q_in.pressure;
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-83, -76}, rotation=  90, textStyle=  {TextStyle.Bold}, textString=  "Ps"), Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-62, -75}, rotation=  90, textString=  "Pd"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {-40, -55}, rotation=  90, textString=  "Pmean"), Text(extent=  {{-84, 78}, {-34, 62}}, lineColor=  {0, 0, 0}, pattern=  LinePattern.Dash,
                  lineThickness=                                                                                                    1, textString=  "HR"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {54, -73}, rotation=  90, textString=  "CO"), Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin=  {32, -73}, rotation=  90, textString=  "SV")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
      end BloodFlowMeasurement;

      model AortaPressureMeasurement
        extends Physiolibrary.Hydraulic.Sensors.PressureMeasure;
        import Physiolibrary.Types.RealIO.*;
        import Physiolibrary.Types.*;
        discrete PressureOutput Ps "Systolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-72, -42}, {-52, -22}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,70})));
        discrete PressureOutput Pd "Diastolic pressure during heart cycle" annotation(Placement(transformation(extent = {{-50, -40}, {-30, -20}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,50})));
        discrete PressureOutput Pmean "Mean pressure during heart cycle" annotation(Placement(transformation(extent = {{-10, -36}, {10, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation=0,     origin={70,30})));
        Real SumPressure(start = 0) "sum of pressure of cardiac cycle";
        Pressure Pmax,Pmin;
        discrete Boolean b(start = false) "beat signal";
        Time T0(start = 0) "start of cardiac cycle ";
        discrete Time HP(start = 1) "length of cardiac cycle";
      //protected
        Pressure PmeanA "approximation of mean pressure";
        Pressure Pmean2 "approximation of mean pressure";
      /*initial algorithm

  Ps := q_in.pressure;
  Pd := q_in.pressure;
  Pmean:=q_in.pressure;*/
      equation
        Pmax = max(Pmax, q_in.pressure);
        Pmin = min(Pmin, q_in.pressure);
        PmeanA =  (2/3)*Pmin+(1/3)*Pmax;
        b = der(q_in.pressure) > 0;
        der(SumPressure) = q_in.pressure;
       when {initial(),edge(b)} then
          T0 =   time "initial time of current cardiac cycle";
          HP =   if pre(T0) > 0 then time - pre(T0) else 1;
          Ps =   pre(Pmax)
            "systolic pressure = maximum pressure during cardiac cycle";
          Pd =   pre(Pmin)
            "diastolic pressure=minimal pressure during cardiac cycle";
          Pmean2 =  pre(SumPressure) / pre(HP) "mean pressure";
          Pmean = if (Pmean2<Pd) then max(Pd,PmeanA) else Pmean2;
      //    Pmean =  max(Pd,(SumPressure / pre(HP))) "mean pressure";
                   //if ((SumPressure / pre(HP))<Pd) then PmeanA else
          reinit(SumPressure,  0) "reinitialisation of sum pressure";
                   //if (Pmean2>Pd) then Pmean1 else Pmean2;
          reinit(Pmax,  q_in.pressure) "reinitialisation of maximal pressure";
          reinit(Pmin,  q_in.pressure) "reinitialisation minimal pressure";
       end when;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                         graphics={                                                                                                    Text(extent=  {{-55, 12}, {55, -12}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={26,
                    33},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pmean"),
                                                                                                    Text(extent=  {{-53, 10}, {53, -10}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={48,
                    49},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Pd"),
                                                                                                    Text(extent=  {{-52, 11}, {52, -11}}, lineColor=  {0, 0, 0}, fillColor=  {85, 170, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, origin={47,
                    70},                                                                                                    rotation=
                    180,                                                                                                    textString=  "Ps")}));
      end AortaPressureMeasurement;
    end Control;

    package Scenario "models of various scenarios"
        extends Modelica.Icons.VariantsPackage;

      partial model StenosisControl
        extends Controlled.ScenarioControl;
      /*  Physiolibrary.Types.BusConnector busConnector annotation (Placement(
        transformation(extent={{-28,14},{12,54}}), iconTransformation(
          extent={{-28,14},{12,54}})));*/
        Stenosis.StenosisElastance venacavastenosis
          annotation (Placement(transformation(extent={{-80,-52},{-28,-2}})));
        Stenosis.StenosisResistance aorticstenosis
          "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{-30,-54},{22,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst AVgon(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={14,-9})));
        Stenosis.StenosisResistance mitralvalvestenosis(InitialResistance(displayUnit=
               "(mmHg.s)/ml"), FinalResistance(displayUnit="(mmHg.s)/ml"))
          "Aorctic stenosis - valve diameter goes to 1/2 =resistance 1/2^4 greater"
          annotation (Placement(transformation(extent={{22,-54},{74,-4}})));
        Physiolibrary.Types.Constants.HydraulicConductanceConst mvgoff(k=0)
          annotation (Placement(transformation(
              extent={{-10,-9},{10,9}},
              rotation=180,
              origin={66,-9})));
      equation
        connect(venacavastenosis.hydrauliccompliance, busConnector.venacavacompliance0)
          annotation (Line(
            points={{-51.92,-21},{-51.92,17.5},{80,17.5},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(aorticstenosis.conductance, busConnector.avoutflowresistance)
          annotation (Line(
            points={{-1.92,-23},{-1.92,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mitralvalvestenosis.conductance, busConnector.mv_gon)
          annotation (Line(
            points={{50.08,-23},{50.08,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(mvgoff.y, busConnector.mv_goff) annotation (Line(
            points={{53.5,-9},{54,-9},{54,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(AVgon.y, busConnector.avbackflowconductance) annotation (Line(
            points={{1.5,-9},{1.5,18},{80,18},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),       graphics={                                                                                                    Rectangle(extent={{
                    -80,50},{64,22}},
                  lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                  fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None),
              Text(
                extent={{-72,76},{82,54}},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="stenosis",
                lineColor={0,0,0}),
              Line(
                points={{-86,-2},{-32,-2},{-2,32},{74,32},{78,32}},
                pattern=LinePattern.None,
                smooth=Smooth.None,
                arrow={Arrow.None,Arrow.Filled}),
              Text(
                extent={{-72,40},{62,32}},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="Resistance",
                lineColor={0,0,0})}),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics));
      end StenosisControl;

      package Stenosis
          extends Modelica.Icons.UtilitiesPackage;
        model StenosisElastance
          parameter Physiolibrary.Types.HydraulicElastance InitialElastance;
          parameter Physiolibrary.Types.HydraulicElastance FinalElastance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicComplianceOutput hydrauliccompliance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          hydrauliccompliance = 1 / (InitialElastance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalElastance - InitialElastance) / duration else FinalElastance - InitialElastance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisElastance;

        model StenosisResistance
          parameter Physiolibrary.Types.HydraulicResistance InitialResistance;
          parameter Physiolibrary.Types.HydraulicResistance FinalResistance;
          parameter Physiolibrary.Types.Time startTime(displayUnit = "s") = 20;
          parameter Physiolibrary.Types.Time duration(displayUnit = "s") = 5;
          Physiolibrary.Types.RealIO.HydraulicConductanceOutput conductance annotation(Placement(transformation(extent = {{48, -10}, {68, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {8, 24})));
        equation
          conductance = 1 / (InitialResistance + (if time < startTime then 0 else if time < startTime + duration then (time - startTime) * (FinalResistance - InitialResistance) / duration else FinalResistance - InitialResistance));
          annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent=  {{-64, 14}, {80, -32}},
                    lineThickness=                                                                                                    1, fillColor=  {190, 0, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, 36}, {52, -2}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Ellipse(extent=  {{-36, -10}, {52, -48}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, lineColor=  {0, 0, 0}), Rectangle(extent=  {{-64, 42}, {80, 14}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Rectangle(extent=  {{-64, -32}, {80, -60}},
                    lineThickness=                                                                                                    1, fillColor=  {255, 255, 255},
                    fillPattern=                                                                                                    FillPattern.Solid, pattern=  LinePattern.None), Text(extent=  {{-56, -46}, {76, -58}}, lineColor=  {0, 0, 0},
                    lineThickness=                                                                                                    1, fillColor=  {255, 128, 0},
                    fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics));
        end StenosisResistance;
      end Stenosis;

      model BleedingTransfusionScenario
        extends Cardiovascular.Controlled.ScenarioControl;
        import Physiolibrary.Types.*;
        //after 1 minute, 5minutes bleeding
        parameter Time Tbs=60,Tbd=5*60;
        parameter Volume BloodLoss=0.001;
        //after 20 minutes, transfussion for 10 minutes
        parameter Time Tts=20*60,Ttd=10*60;
        parameter Volume BloodTrans=0.001;

        BleedingTransfusionBurkhoffInterface bleedingTransfusionBurkhoffInterface
          annotation (Placement(transformation(extent={{-8,-36},{22,46}})));
        BleedingTransfusionRate bleedingTransfusionRate(
          Tbs=Tbs,
          Tbd=Tbd,
          BloodLoss=BloodLoss,
          Tts=Tts,
          Ttd=Ttd,
          BloodTrans=BloodTrans)
          annotation (Placement(transformation(extent={{-96,-2},{-52,40}})));
      equation

        connect(bleedingTransfusionBurkhoffInterface.hematocrit, busConnector.hematocrit)
          annotation (Line(
            points={{-0.5,17.3},{-40,17.3},{-40,90},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.RBCbleed, busConnector.RBCbleed)
          annotation (Line(
            points={{18.25,33.7},{80,33.7},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.RBCtransfusion, busConnector.RBCtransfusion)
          annotation (Line(
            points={{18.25,17.3},{80,17.3},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.plasmableed, busConnector.plasmableed)
          annotation (Line(
            points={{18.25,0.9},{80,0.9},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionBurkhoffInterface.plasmatransfusion, busConnector.plasmatransfusion)
          annotation (Line(
            points={{18.25,-15.5},{80,-15.5},{80,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(bleedingTransfusionRate.bleedrate,
          bleedingTransfusionBurkhoffInterface.bleedrate) annotation (Line(
            points={{-54.2,37.9},{-31.5,37.9},{-31.5,37.8},{-0.5,37.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(bleedingTransfusionRate.transrate,
          bleedingTransfusionBurkhoffInterface.transrate) annotation (Line(
            points={{-54.2,25.72},{-54.2,-30.26},{-0.5,-30.26}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Line(
                points={{-76,58},{-46,58},{-28,50},{-28,26},{-8,12},{4,14},{28,14},{50,
                    8},{54,20},{62,60},{80,60}},
                color={0,0,255},
                smooth=Smooth.Bezier)}),
                                       Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics));
      end BleedingTransfusionScenario;

      model BleedingTransfusionBurkhoffInterface
        //Real RBCbleed,plasmableed,RBCtransfusion,plasmatransfusion,hematocrit;

        Physiolibrary.Types.RealIO.VolumeFlowRateInput bleedrate annotation (
            Placement(transformation(extent={{-40,60},{0,100}}), iconTransformation(
                extent={{-40,60},{0,100}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput transrate annotation (
            Placement(transformation(extent={{-40,-106},{0,-66}}), iconTransformation(
                extent={{-40,-106},{0,-66}})));

        Modelica.Blocks.Interfaces.RealInput hematocrit
          annotation (Placement(transformation(extent={{-40,10},{0,50}})));
        Modelica.Blocks.Interfaces.RealOutput RBCbleed annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,0}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,70})));
        Modelica.Blocks.Interfaces.RealOutput RBCtransfusion annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-18}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,30})));
        Modelica.Blocks.Interfaces.RealOutput plasmableed annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-38}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,-10})));
        Modelica.Blocks.Interfaces.RealOutput plasmatransfusion annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-54}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={30,-50})));
      equation
       RBCbleed=bleedrate*hematocrit*12e12/2.4e-3;
       plasmableed=bleedrate*(1-hematocrit);
       RBCtransfusion=transrate*0.4*12e12/2.4e-3;
       plasmatransfusion=transrate*(1-0.4);
      /* connect(busConnector.hematocrit,hematocrit);
 connect(busConnector.RBCbleed,RBCbleed);
 connect(busConnector.plasmableed,plasmableed);
 connect(busConnector.RBCtransfusion,RBCtransfusion);
 connect(busConnector.plasmatransfusion,plasmatransfusion);
*/
        annotation (Diagram(coordinateSystem(extent={{-40,-100},{40,100}},
                preserveAspectRatio=false), graphics),                       Icon(
              coordinateSystem(extent={{-40,-100},{40,100}}, preserveAspectRatio=false),
              graphics={Rectangle(
                extent={{-20,100},{20,-100}},
                lineColor={0,0,255},
                fillPattern=FillPattern.Solid,
                fillColor={0,0,255})}));
      end BleedingTransfusionBurkhoffInterface;

      model BleedingTransfusionRate
        import Physiolibrary.Types.*;
        //after 1 minute, 5minutes bleeding
        parameter Time Tbs=60,Tbd=5*60;
        parameter Volume BloodLoss=0.001;
        //after 20 minutes, transfussion for 10 minutes
        parameter Time Tts=20*60,Ttd=10*60;
        parameter Volume BloodTrans=0.001;

        Physiolibrary.Types.RealIO.VolumeFlowRateOutput bleedrate annotation (
            Placement(transformation(extent={{80,80},{100,100}}), iconTransformation(
                extent={{80,80},{100,100}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput transrate annotation (
            Placement(transformation(extent={{80,22},{100,42}}), iconTransformation(
                extent={{80,22},{100,42}})));
      equation
        if time>Tbs and time<Tbs+Tbd then
          bleedrate=BloodLoss/Tbd;
        else
          bleedrate=0;
        end if;
        if time>Tts and time<Tts+Ttd then
            transrate=BloodTrans/Ttd;
        else
            transrate=0;
        end if;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Line(
                points={{-80,80},{-80,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{80,-80},{-80,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-76,58},{-46,58},{-28,50},{-28,26},{-8,12},{4,14},{28,14},{50,
                    8},{54,20},{62,60},{80,60}},
                color={0,0,255},
                smooth=Smooth.Bezier),
              Text(
                extent={{-100,-80},{100,-100}},
                lineColor={0,0,255},
                textString="%name"),
              Line(
                points={{-28,38},{80,90}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{56,32},{82,32},{80,32}},
                color={0,0,255},
                smooth=Smooth.None)}));
      end BleedingTransfusionRate;
    end Scenario;
  end Model;

  package Types
    package Constants
      block FrequencyControl "External signal of type Frequency"
        Physiolibrary.Types.RealIO.FrequencyOutput y
          "HydraulicCompliance constant"                                            annotation(Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
        Physiolibrary.Types.RealIO.FrequencyInput c annotation(Placement(transformation(extent = {{-40, -20}, {0, 20}}), iconTransformation(extent = {{-40, -20}, {0, 20}})));
        parameter Physiolibrary.Types.Frequency k;
        //ignored for this component
        //TODO add switch between constant default signal and input control signal
      equation
        y = c;
        annotation(defaultComponentName = "hydraulicCompliance", Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})), Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent=  {{-40, 40}, {40, -40}}, lineColor=  {0, 0, 0}, radius=  10, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid), Text(extent=  {{-100, -44}, {100, -64}}, lineColor=  {0, 0, 0}, fillColor=  {236, 236, 236},
                  fillPattern=                                                                                                    FillPattern.Solid, textString=  "%name")}));
      end FrequencyControl;
    end Constants;
  end Types;

  package Test
    model AllModels
      Model.Meurs.HemodynamicsMeurs_shallow hemodynamicsMeurs_shallow
        annotation (Placement(transformation(extent={{-96,62},{-40,94}})));
      Model.Meurs.HemodynamicsMeurs hemodynamicsMeurs
        annotation (Placement(transformation(extent={{-6,72},{-2,80}})));
      Model.Meurs.HemodynamicsMeursBVControl hemodynamicsMeursBVControl
        annotation (Placement(transformation(extent={{30,72},{34,80}})));
      Model.Meurs.StenosisAorticValve stenosisAorticValve
        annotation (Placement(transformation(extent={{62,72},{66,80}})));
      Model.Meurs.Bleeding bleeding
        annotation (Placement(transformation(extent={{90,72},{94,80}})));
      Model.Burkhoff.HemodynamicsBurkhoff_shallow hemodynamicsBurkhoff_shallow
        annotation (Placement(transformation(extent={{-94,24},{-62,44}})));
      Model.Burkhoff.HemodynamicsBurkhoff hemodynamicsBurkhoff
        annotation (Placement(transformation(extent={{-6,32},{-2,40}})));
      Model.Burkhoff.HemodynamicsBurkhoffBVControl
        hemodynamicsBurkhoffBVControl
        annotation (Placement(transformation(extent={{30,32},{34,40}})));
      Model.Burkhoff.StenosisAorticValve stenosisAorticValve1
        annotation (Placement(transformation(extent={{58,32},{62,40}})));
      Model.Burkhoff.Bleeding bleeding1
        annotation (Placement(transformation(extent={{90,30},{94,38}})));
      Model.Smith2004.HemodynamicsSmith_shallow hemodynamicsSmith_shallow
        annotation (Placement(transformation(extent={{-94,-28},{-62,-8}})));
      Model.Smith2004.HemodynamicsSmith hemodynamicsSmith
        annotation (Placement(transformation(extent={{-2,-20},{2,-12}})));
      Model.Smith2004.HemodynamicsSmithControl hemodynamicsSmithControl
        annotation (Placement(transformation(extent={{34,-22},{38,-14}})));
      Model.Smith2004.StenosisAorticValve stenosisAorticValve2
        annotation (Placement(transformation(extent={{62,-22},{66,-14}})));
      Model.Smith2004.Bleeding bleeding2
        annotation (Placement(transformation(extent={{90,-22},{94,-14}})));
    end AllModels;
  end Test;
  annotation (uses(
      Modelica(version="3.2.1"),
      Physiolibrary(version="2.3.1")));
end Cardiovascular;
